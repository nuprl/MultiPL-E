{
  "name": "HumanEval_1_separate_paren_groups",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var stack = mutable.Stack[String]()\n        var result = mutable.List[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt8g_vrtt.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt8g_vrtt.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt8g_vrtt.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt8g_vrtt.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt8g_vrtt.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_paren = -1\n        var open_brace = -1\n        var open_bracket = -1\n        var open_square = -1\n        var open_curly = -1\n        var open_angle = -1\n        var open_angle_bracket = -1\n        var open_angle_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = -1\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_br\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmxhet1ek.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmxhet1ek.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmxhet1ek.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmxhet1ek.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjd57nfrh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjd57nfrh.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjd57nfrh.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd57nfrh.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var parens = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_brackets = 0\n        var open_square_brackets = 0\n        var open_curly_braces = 0\n        var open_curly_br\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgncdgx5y.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgncdgx5y.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_brackets\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_brackets is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_brackets\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgncdgx5y.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_braces\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_braces is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_braces\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgncdgx5y.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_brackets\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_brackets is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_brackets\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgncdgx5y.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_brackets\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_brackets is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_brackets\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgnc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp2esqmv7.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2esqmv7.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_braces_count = 0\n        var open_braces_stack = List[String]()\n        var open_parens_stack = List[String]()\n        var paren_stack = List[String]()\n        var paren_stack_count = 0\n        var paren_stack_stack = List[String]()\n        var paren_stack_stack_count = 0\n        var paren_stack_stack_stack = List[String]()\n        var paren_stack_stack_stack_count = 0\n        var paren_stack_stack_stack_stack = List[String]()\n        var paren_stack_stack_stack_stack_count = 0\n        var paren_stack_stack_stack_stack_stack = List[String]()\n        var paren_stack_stack_stack_stack_stack_count = 0\n        var paren_stack_stack_stack_stack_stack_stack = List[String]()\n        var paren_stack_stack_stack_stack_stack_stack_count = 0\n        var paren_stack_stack_stack_stack_stack_stack_stack = List[String]()\n        var paren_stack_stack_stack_stack_stack_stack_stack_count = 0\n        var paren_stack_stack_stack_stack_stack_stack_stack_stack = List[String]()\n        var paren_stack_stack_stack_stack_stack_stack_stack_stack_count = 0\n        var paren_stack_stack_stack_stack_stack_stack_stack_stack_stack = List[String]()\n        var paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_count = 0\n        var paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack = List[String]()\n        var paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_count = 0\n        var paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg3duq4j_.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3duq4j_.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpol3jk1rz.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i, c) = (0, paren_string.charAt(0)) {\n            if (c == '(') {\n                stack.push(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    throw new RuntimeException(\"Mismatched parentheses\")\n                }\n                stack.pop()\n            }\n            result.append(stack.toString())\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdutguk_g.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i, c) = (\u001b[31m0\u001b[0m, paren_string.charAt(\u001b[31m0\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   '<-' expected, but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdutguk_g.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdutguk_g.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdutguk_g.scala:23:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp2esqmv7.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2esqmv7.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var stack = mutable.Stack[String]()\n        var result = mutable.ListBuffer[String]()\n        for (i <- 0 until paren_string.length) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(paren_string.substring(i, i + 1))\n            } else if (paren_string.charAt(i) == ')') {\n                var top = stack.pop()\n                if (top == \"\") {\n                    result.append(paren_string.substring(i, i + 1))\n                } else {\n                    stack.push(top)\n                }\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1t04m83.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1t04m83.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_paren = false\n        var open_brace = false\n        var open_square_bracket = false\n        var open_curly_bracket = false\n        var open_angle_bracket = false\n        var open_angle_bracket_count = 0\n        var open_angle_bracket_count_stack = mutable.Stack[Int]()\n        var open_angle_bracket_count_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack = mutable.Stack[Int]()\n        var open_angle_bracket_count_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack = mutable.Stack[Int]()\n        var open_angle_bracket_count_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack = mutable.Stack[Int]()\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack = mutable.Stack[Int]()\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack = mutable.Stack[Int]()\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnuo39shz.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnuo39shz.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index is already defined as \u001b[33mvariable\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnuo39shz.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnuo39shz.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnuo39shz.scala:20:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_count_stack\u001b[0m = mutable.Stack[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Not found: mutable\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_braces_count = mutable.Stack[Int]()\n        var open_parens_count = mutable.Stack[Int]()\n        var open_braces_count_count = mutable.Stack[Int]()\n        var open_parens_count_count = mutable.Stack[Int]()\n        var open_braces_count_count_count = mutable.Stack[Int]()\n        var open_parens_count_count_count_count = mutable.Stack[Int]()\n        var open_braces_count_count_count_count_count = mutable.Stack[Int]()\n        var open_parens_count_count_count_count_count_count = mutable.Stack[Int]()\n        var open_braces_count_count_count_count_count_count_count = mutable.Stack[Int]()\n        var open_parens_count_count_count_count_count_count_count_count = mutable.Stack[Int]()\n        var open_braces_count_count_count_count_count_count_count_count_count = mutable.Stack[Int]()\n        var open_parens_count_count_count_count_count_count_count_count_count_count = mutable.Stack[Int]()\n        var open_braces_count_count_count_count_count_count_count_count_count_count_count = mutable.Stack[Int]()\n        var open_parens_count_count_count_count_count_count_count_count_count_count_count_count = mutable.Stack[Int]()\n        var open_braces_count_count_count_count_count_count_count_count_count_count_count_count_count = mutable.Stack[Int]()\n        var open_parens_count_count_count_count_count_count_count_count_count_count\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu6oqze63.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6oqze63.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6oqze63.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6oqze63.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6oqze63.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu6oqze63.scala:15:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_count\u001b[0m = mutable.Stack[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp2esqmv7.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2esqmv7.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square_bracket = mutable.Stack[String]()\n        var open_curly_bracket = mutable.Stack[String]()\n        var open_angle_bracket = mutable.Stack[String]()\n        var open_square_bracket_bracket = mutable.Stack[String]()\n        var open_curly_bracket_bracket = mutable.Stack[String]()\n        var open_angle_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_square_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_curly_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_angle_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_square_bracket_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_curly_bracket_bracket_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_square_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_curly_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphup9vfl3.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp66limm9n.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var brace_count = 0\n        var open_parens = false\n        var open_braces = false\n        var open_braces_count = 0\n        var open_parens_count = 0\n        var i = 0\n        while (i < paren_string.length) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                open_parens = true\n                open_parens_count += 1\n            } else if (c == ')') {\n                open_parens = false\n                open_parens_count -= 1\n            } else if (c == '{') {\n                open_braces = true\n                open_braces_count += 1\n            } else if (c == '}') {\n                open_braces = false\n                open_braces_count -= 1\n            }\n            if (open_parens) {\n                stack.append(c)\n            } else if (open_braces) {\n                stack.append(c)\n            } else if (open_parens_count == 0 && open_braces_count == 0) {\n                if (stack.size() > 0) {\n                    result.append(stack.toString())\n                    stack = List[String]()\n                }\n            }\n            i += 1\n        }\n        if (stack.size() > 0) {\n            result.append(stack.toString())\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl2ghgf0z.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                stack.append(c)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl2ghgf0z.scala:38:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m                stack.append(c)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpl2ghgf0z.scala:40:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                \u001b[33mif\u001b[0m (stack.size() > \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl2ghgf0z.scala:41:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                    result.append(stack.toString())\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpl2ghgf0z.scala:47:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mif\u001b[0m (stack.size() > \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl2ghgf0z.scala:48:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            result.append(stack.toString())\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n6 errors",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_br\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb88_sttb.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb88_sttb.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_braces = 0\n        for i in range(0, len(paren_string)) {\n            var c = paren_string[i]\n            if c == '(' {\n                open_braces += 1\n            } else if c == ')' {\n                open_braces -= 1\n            } else if c == ' ' {\n                continue\n            }\n            if open_braces == 0 {\n                stack.push(c)\n            } else if open_braces < 0 {\n                stack.pop()\n            }\n            if stack.isEmpty() {\n                result.append(stack.mkString())\n                stack = mutable.Stack[String]()\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiwlvl4fp.scala:14:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m i in range(\u001b[31m0\u001b[0m, len(paren_string)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwlvl4fp.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwlvl4fp.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiwlvl4fp.scala:32:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConver",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var brace_count = 0\n        var paren_string_length = paren_string.length()\n        for (i = 0; i < paren_string_length; i++) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                paren_count += 1\n            } else if (c == ')') {\n                paren_count -= 1\n            } else if (c == '{') {\n                brace_count += 1\n            } else if (c == '}') {\n                brace_count -= 1\n            }\n            if (paren_count == 0 && brace_count == 0) {\n                stack = stack.tail.append(paren_string.substring(stack.head, i))\n                stack = stack.tail.append(paren_string.substring(i, i + 1))\n                stack = stack.tail.append(paren_string.substring(i + 1, i + 2))\n                stack = stack.tail.append(paren_string.substring(i + 2, i + 3))\n                stack = stack.tail.append(paren_string.substring(i + 3, i + 4))\n                stack = stack.tail.append(paren_string.substring(i + 4, i + 5))\n                stack = stack.tail.append(paren_string.substring(i + 5, i + 6))\n                stack = stack.tail.append(paren_string.substring(i + 6, i + 7))\n                stack = stack.tail.append(paren_string.substring(i + 7, i + 8))\n                stack = stack.tail.append(paren_string.substring(i + 8, i + 9))\n                stack = stack.tail.append(paren_string.substring(i + 9, i + 10))\n                stack = stack.tail.append(paren_string.substring(i + 10, i + 11))\n                stack = stack.tail.append(paren_string.substring(i + 11, i + 12))\n                stack = stack.tail.append\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp56u6cjk2.scala:16:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp56u6cjk2.scala:16:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp56u6cjk2.scala:16:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp56u6cjk2.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string_length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.conve",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        for (i = 0; i < paren_string.length(); i++) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                stack.append(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(i))\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new RuntimeException(\"Mismatched parentheses\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp54utg4s0.scala:13:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp54utg4s0.scala:13:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp54utg4s0.scala:13:50 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp54utg4s0.scala:13:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_braces_count = mutable.Stack[Int]()\n        var open_braces_count_max = mutable.Stack[Int]()\n        var open_braces_count_min = mutable.Stack[Int]()\n        var open_braces_count_sum = mutable.Stack[Int]()\n        var open_braces_count_sum_max = mutable.Stack[Int]()\n        var open_braces_count_sum_min = mutable.Stack[Int]()\n        var open_braces_count_sum_sum = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_max = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_min = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_max = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_min = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_sum = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_sum_max = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_sum_min = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_sum_sum = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_sum_sum_max = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_sum_sum_min = mutable.Stack[Int]()\n        var open_braces_count_sum_sum_sum_sum\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpni_ih09c.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpni_ih09c.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpni_ih09c.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpni_ih09c.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpni_ih09c.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpni_ih09c.scala:15:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_count\u001b[0m = mutable.Stack[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var paren_open = false\n        var paren_close = false\n        var paren_count_stack = 0\n        var paren_open_stack = 0\n        var paren_close_stack = 0\n        var paren_count_stack_stack = 0\n        var paren_open_stack_stack = 0\n        var paren_close_stack_stack = 0\n        var paren_count_stack_stack_stack = 0\n        var paren_open_stack_stack_stack = 0\n        var paren_close_stack_stack_stack = 0\n        var paren_count_stack_stack_stack_stack = 0\n        var paren_open_stack_stack_stack_stack = 0\n        var paren_close_stack_stack_stack_stack = 0\n        var paren_count_stack_stack_stack_stack_stack = 0\n        var paren_open_stack_stack_stack_stack_stack = 0\n        var paren_close_stack_stack_stack_stack_stack = 0\n        var paren_count_stack_stack_stack_stack_stack_stack = 0\n        var paren_open_stack_stack_stack_stack_stack_stack = 0\n        var paren_close_stack_stack_stack_stack_stack_stack = 0\n        var paren_count_stack_stack_stack_stack_stack_stack_stack = 0\n        var paren_open_stack_stack_stack_stack_stack_stack_stack = 0\n        var paren_close_stack_stack_stack_stack_stack_stack_stack = 0\n        var paren_count_stack_stack_stack_stack_stack_stack_stack_stack = 0\n        var paren_open_stack_stack_stack_stack_stack_stack_stack_stack = 0\n        var paren_close_stack_stack_stack_stack_stack_stack_stack_stack = 0\n        var paren_count_stack_stack_stack_stack_stack_stack_stack_stack_stack = 0\n        var paren_open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl0trk9s0.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl0trk9s0.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var brace_count = 0\n        var paren_index = 0\n        var brace_index = 0\n        var paren_string_length = paren_string.length()\n        var brace_string_length = 0\n        var brace_string_index = 0\n        var brace_string_length_index = 0\n        var brace_string_index_index = 0\n        var brace_string_index_length = 0\n        var brace_string_index_length_index = 0\n        var brace_string_index_length_length = 0\n        var brace_string_index_length_length_index = 0\n        var brace_string_index_length_length_length = 0\n        var brace_string_index_length_length_length_index = 0\n        var brace_string_index_length_length_length_length = 0\n        var brace_string_index_length_length_length_length_index = 0\n        var brace_string_index_length_length_length_length_length = 0\n        var brace_string_index_length_length_length_length_length_index = 0\n        var brace_string_index_length_length_length_length_length_length = 0\n        var brace_string_index_length_length_length_length_length_length_index = 0\n        var brace_string_index_length_length_length_length_length_length_length = 0\n        var brace_string_index_length_length_length_length_length_length_length_index = 0\n        var brace_string_index_length_length_length_length_length_length_length_length = 0\n        var brace_string_index_length_length_length_length_length_length_length_length_index = 0\n        var brace_string_index_length_length_length_length_length_length_length_length_length = 0\n        var brace_string_index_length_length_length_length_length_length_length_length_length_index = 0\n        var brace_string_index_length_length_length_length_length_length\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292834,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpek_4ibvh.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpek_4ibvh.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var brace_count = 0\n        var open_paren = false\n        var open_brace = false\n        var open_bracket = false\n        var open_square_bracket = false\n        var open_curly_bracket = false\n        var open_angle_bracket = false\n        var open_angle_bracket_count = 0\n        var open_angle_bracket_count_stack = mutable.Stack[Integer]()\n        var open_angle_bracket_count_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack = mutable.Stack[Integer]()\n        var open_angle_bracket_count_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack = mutable.Stack[Integer]()\n        var open_angle_bracket_count_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack = mutable.Stack[Integer]()\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack = mutable.Stack[Integer]()\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack = mutable.Stack[Integer]()\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0\n        var open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0\n        var open_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxlk9a8s3.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxlk9a8s3.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index is already defined as \u001b[33mvariable\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  open_angle_bracket_count_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxlk9a8s3.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxlk9a8s3.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxlk9a8s3.scala:22:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_count_stack\u001b[0m = mutable.Stack[\u001b[35mInteger\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_angle = 0\n        var open_curly_bracket_angle = 0\n        var open_angle_bracket_angle = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_square_bracket = 0\n        var open_angle_bracket_square_bracket = 0\n        var open_square_bracket_curly_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_curly_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_square_bracket_bracket = 0\n        var open_curly_bracket_square_bracket_bracket = 0\n        var open_angle_bracket_square_bracket_bracket = 0\n        var open_square_bracket_curly_bracket_bracket = 0\n        var open_curly_bracket_curly_bracket_bracket = 0\n        var open_angle_bracket_curly_bracket_bracket = 0\n        var open_square_bracket_angle_bracket_bracket = 0\n        var open_curly_bracket_angle_bracket_bracket = 0\n        var open_angle_bracket_angle_bracket_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292837,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpessjzgww.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpessjzgww.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i := 0; i < len(paren_string); i++) {\n            if (paren_string[i] == '(') {\n                stack.push(paren_string[i])\n            } else if (paren_string[i] == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string[i])\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new RuntimeException(\"Mismatched parentheses\")\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292833,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv1olrs12.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv1olrs12.scala:13:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpv1olrs12.scala:13:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1olrs12.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1olrs12.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        for (i := 0; i < len(paren_string); i++) {\n            if paren_string[i] == '(' {\n                stack.push(paren_string[i])\n            } else if paren_string[i] == ')' {\n                if stack.isEmpty() {\n                    result.append(paren_string[i])\n                } else {\n                    stack.pop()\n                }\n            } else {\n                result.append(paren_string[i])\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292833,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkqsojbv0.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkqsojbv0.scala:13:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpkqsojbv0.scala:13:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkqsojbv0.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkqsojbv0.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_angle = 0\n        var open_curly_bracket_angle = 0\n        var open_angle_bracket_angle = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_curly_bracket = 0\n        var open_square_bracket_curly_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnd8u6nim.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpol3jk1rz.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.List[String]()\n        var open_braces = mutable.List[String]()\n        var open_brackets = mutable.List[String]()\n        var open_curly = mutable.List[String]()\n        var open_square = mutable.List[String]()\n        var open_angle = mutable.List[String]()\n        var open_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_square = mutable.List[String]()\n        var open_angle_brackets_angle = mutable.List[String]()\n        var open_angle_brackets_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_curly_square = mutable.Stack[String]()\n        var open_angle_brackets_square_curly = mutable.Stack[String]()\n        var open_angle_brackets_curly_square_curly = mutable.Stack[String]()\n        var open_angle_brackets_curly_square_curly_curly = mutable.Stack[String]()\n        var open_angle_brackets_curly_square_curly_curly_curly = mutable.Stack[String]()\n        var open_angle_brackets_curly_square_curly_curly_curly_curly = mutable.Stack[String]()\n        var open_angle_brackets_curly_square_curly_curly_curly_curly_curly = mutable.Stack[String]()\n        var open_angle_brackets_curly_square_curly_curly_curly_curly_curly_curly = mutable.Stack[String]()\n        var open_angle_brackets_curly_square_curly_curly_curly_curly_curly_curly_curly = mutable.Stack[String]()\n        var open_angle_brackets_curly_square_curly_curly_curly_curly_curly_curly_curly_curly = mutable.Stack\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9u2rqkh.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9u2rqkh.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9u2rqkh.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9u2rqkh.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9u2rqkh.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf9u2rqkh.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_angle = 0\n        var open_curly_bracket_angle = 0\n        var open_angle_bracket_angle = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_curly_bracket = 0\n        var open_square_bracket_curly_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnd8u6nim.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly =\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmppd3lqin1.scala:44:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppd3lqin1.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppd3lqin1.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppd3lqin1.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppd3lqin1.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is alre",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi117ld16.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi117ld16.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi117ld16.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi117ld16.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi117ld16.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = mutable.List[String]()\n        var open_braces = mutable.List[String]()\n        var open_braces_count = 0\n        var open_braces_stack = mutable.Stack[String]()\n        var open_braces_stack_count = 0\n        var open_braces_stack_index = 0\n        var open_braces_stack_index_count = 0\n        var open_braces_stack_index_count_max = 0\n        var open_braces_stack_index_count_min = 0\n        var open_braces_stack_index_count_max_index = 0\n        var open_braces_stack_index_count_min_index = 0\n        var open_braces_stack_index_count_min_index_max = 0\n        var open_braces_stack_index_count_min_index_min = 0\n        var open_braces_stack_index_count_min_index_max_index = 0\n        var open_braces_stack_index_count_min_index_min_index = 0\n        var open_braces_stack_index_count_min_index_min_index_max = 0\n        var open_braces_stack_index_count_min_index_min_index_min = 0\n        var open_braces_stack_index_count_min_index_min_index_max_index = 0\n        var open_braces_stack_index_count_min_index_min_index_min_index = 0\n        var open_braces_stack_index_count_min_index_min_index_min_index_max = 0\n        var open_braces_stack_index_count_min_index_min_index_min_index_min = 0\n        var open_braces_stack_index_count_min_index_min_index_min_index_max_index = 0\n        var open_braces_stack_index_count_min_index_min_index_min\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8xne06og.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xne06og.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xne06og.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xne06og.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xne06og.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8xne06og.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp66limm9n.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_open = false\n        var paren_close = false\n        var paren_open_count = 0\n        var paren_close_count = 0\n        var paren_open_stack = mutable.Stack[String]()\n        var paren_close_stack = mutable.Stack[String]()\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count =\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpy8ii3e6v.scala:50:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_open_stack_count\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy8ii3e6v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_open_stack_count\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mparen_open_stack_count is already defined as \u001b[33mvariable\u001b[0m \u001b[35mparen_open_stack_count\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy8ii3e6v.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_close_stack_count\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mparen_close_stack_count is already defined as \u001b[33mvariable\u001b[0m \u001b[35mparen_close_stack_count\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy8ii3e6v.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_open_stack_count\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mparen_open_stack_count is already defined as \u001b[33mvariable\u001b[0m \u001b[35mparen_open_stack_count\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy8ii3e6v.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_close_stack_count\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_braces_count = mutable.Stack[Int]()\n        var open_braces_count_max = mutable.Stack[Int]()\n        var open_braces_count_min = mutable.Stack[Int]()\n        var open_braces_count_max_min = mutable.Stack[Int]()\n        var open_braces_count_max_min_count = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_min = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min_count = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min_count_max = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min_count_min = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min_count_max_min = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min_count_max_min_count = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min_count_max_min_count_max = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min_count_max_min_count_min = mutable.Stack[Int]()\n        var open_braces_count_max_min_count_max_min_count_max_min_count_max_min\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpklee423p.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpklee423p.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpklee423p.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpklee423p.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpklee423p.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpklee423p.scala:15:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_count\u001b[0m = mutable.Stack[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val parens = paren_string.split(\"(\")\n        val result = List.empty[String]\n        for (i <- 0 until parens.length) {\n            val paren = parens[i]\n            if (paren.isEmpty()) {\n                continue\n            }\n            val open_braces = paren.count(\"(\")\n            val close_braces = paren.count(\")\")\n            if (open_braces == close_braces) {\n                result = result.append(paren)\n            } else {\n                val result_list = result.toList\n                val open_braces_list = List.range(0, open_braces)\n                val close_braces_list = List.range(open_braces, paren.length)\n                val open_braces_string = paren.substring(0, open_braces)\n                val close_braces_string = paren.substring(open_braces, paren.length)\n                val open_braces_string_list = open_braces_string.split(\"(\")\n                val close_braces_string_list = close_braces_string.split(\")\")\n                val open_braces_string_list_list = open_braces_string_list.toList\n                val close_braces_string_list_list = close_braces_string_list.toList\n                val open_braces_string_list_string = open_braces_string_list.mkString(\"(\")\n                val close_braces_string_list_string = close_braces_string_list_list.mkString(\")\")\n                val open_braces_string_list_string_list = open_braces_string_list_string.split(\"(\")\n                val close_braces_string_list_string_list = close_braces_string_list_string.split(\")\")\n                val open_braces_string_list_string_list_list = open_braces_string_list_string_list.toList\n                val close_braces_string_list_string_list_list = close_braces_string_list_string_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb33qeg9k.scala:47:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb33qeg9k.scala:14:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mparen\u001b[0m = parens[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb33qeg9k.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb33qeg9k.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result = result.append(paren)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean result.appended?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb33qeg9k.scala:25:77 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mclose_braces_list\u001b[0m = List.range(open_braces, paren.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mBigIntIsIntegral\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mNumeric\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mShortIsIntegral\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mNumeric\u001b[0m match type Integral[A] of parameter evidence$3 of \u001b[33mmethod\u001b[0m \u001b[35mrange\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableFactory\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb33qeg9k.scala:37:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mclose_braces_string_list_string_list_list\u001b[0m = close_braces_string_list_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square_bracket = mutable.Stack[String]()\n        var open_curly_bracket = mutable.Stack[String]()\n        var open_angle_bracket = mutable.Stack[String]()\n        var open_square_bracket_bracket = mutable.Stack[String]()\n        var open_curly_bracket_bracket = mutable.Stack[String]()\n        var open_angle_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_square_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_curly_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_angle_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_square_bracket_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_curly_bracket_bracket_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_square_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = mutable.Stack[String]()\n        var open_curly_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphup9vfl3.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphup9vfl3.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var paren_open = false\n        var paren_close = false\n        for(i <- 0 until paren_string.length) {\n            if(paren_string[i] == '(') {\n                paren_count += 1\n                paren_open = true\n            } else if(paren_string[i] == ')') {\n                paren_count -= 1\n                paren_close = true\n            } else if(paren_open && paren_count == 0) {\n                stack = stack.append(paren_string[i])\n                paren_open = false\n                paren_close = false\n            } else if(paren_close && paren_count == 0) {\n                stack = stack.append(paren_string[i])\n                paren_open = false\n                paren_close = false\n                result = result.append(stack.mkString())\n                stack = List[String]()\n            } else {\n                stack = stack.append(paren_string[i])\n                paren_open = false\n                paren_close = false\n            }\n        }\n        if(paren_count != 0) {\n            throw new RuntimeException(\"Unbalanced parentheses\")\n        }\n        result = result.append(stack.mkString())\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo74suru9.scala:17:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m(paren_string[\u001b[35mi\u001b[0m] == \u001b[31m'('\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo74suru9.scala:20:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m(paren_string[i] == \u001b[31m')'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo74suru9.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                stack = stack.append(paren_string[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo74suru9.scala:24:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                stack = stack.append(paren_string[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo74suru9.scala:28:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                stack = stack.append(paren_string[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo74suru9.scala:28:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                stack = stack.append(paren_string[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        for (i := 0; i < len(paren_string); i++) {\n            if paren_string[i] == '(' {\n                stack.push(paren_string[i])\n            } else if paren_string[i] == ')' {\n                if stack.isEmpty() {\n                    result.append(paren_string[i])\n                } else {\n                    stack.pop()\n                }\n            } else {\n                result.append(paren_string[i])\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292833,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkqsojbv0.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkqsojbv0.scala:13:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpkqsojbv0.scala:13:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkqsojbv0.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkqsojbv0.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_count = 0\n        var open_angle_brackets_count_max = 0\n        var open_angle_brackets_count_min = 0\n        var open_angle_brackets_count_min_max = 0\n        var open_angle_brackets_count_min_max_count = 0\n        var open_angle_brackets_count_min_max_count_max = 0\n        var open_angle_brackets_count_min_max_count_min = 0\n        var open_angle_brackets_count_min_max_count_min_max = 0\n        var open_angle_brackets_count_min_max_count_min_max_count = 0\n        var open_angle_brackets_count_min_max_count_min_max_count_max = 0\n        var open_angle_brackets_count_min_max_count_min_max_count_min = 0\n        var open_angle_brackets_count_min_max_count_min_max_count_min_max = 0\n        var open_angle_brackets_count_min_max_count_min_max_count_min_max_count = 0\n        var open_angle_brackets_count_min_max_count_min_max_count_min_max_count_max = 0\n        var open_angle_brackets_count_min_max_count_min_max_count_min_max_count_min = 0\n        var open_angle_brackets_count_min_max_count_min_max_count_min_max_count_min_max = 0\n        var open_angle_brackets_count_min_max_count_min_max_count_min_max_count_min_max_count = 0\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7ocpdco.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i <- 0 until paren_string.length) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(paren_string.substring(i, i + 1))\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(i, i + 1))\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new RuntimeException(\"Unbalanced parentheses\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292835,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4pa5fuvu.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4pa5fuvu.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_open = false\n        var paren_close = false\n        var paren_string_length = paren_string.length()\n        for (i <- 0 until paren_string_length) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                paren_count += 1\n                paren_open = true\n            } else if (c == ')') {\n                paren_count -= 1\n                paren_close = true\n            } else if (c == ' ') {\n                if (paren_open && paren_close) {\n                    stack.push(c)\n                }\n            } else {\n                if (paren_open && paren_close) {\n                    stack.push(c)\n                }\n            }\n            if (paren_count == 0) {\n                var top = stack.pop()\n                if (top == '(') {\n                    result.append(\"(\")\n                } else if (top == ')') {\n                    result.append(\")\")\n                } else {\n                    result.append(top)\n                }\n                paren_open = false\n                paren_close = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzu1rzrl4.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzu1rzrl4.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp66limm9n.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val parens = paren_string.split(\" \")\n        val result = mutable.List.empty[String]\n        for (i <- 0 until parens.length) {\n            val paren = parens[i]\n            if (paren.equals(\"(\")) {\n                val open_parens = mutable.List.empty[String]\n                for (j <- i until parens.length) {\n                    val paren = parens[j]\n                    if (paren.equals(\")\")) {\n                        open_parens = open_parens.append(parens[j])\n                        break\n                    } else {\n                        open_parens = open_parens.append(parens[j])\n                    }\n                }\n                result = result.append(open_parens.mkString(\"\"))\n            } else {\n                result = result.append(paren)\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292836,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3s0elo9c.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List.empty[\u001b[35mString\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3s0elo9c.scala:14:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mparen\u001b[0m = parens[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3s0elo9c.scala:16:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.List.empty[\u001b[35mString\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3s0elo9c.scala:18:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mparen\u001b[0m = parens[\u001b[35mj\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: type j\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp3s0elo9c.scala:20:36 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                        open_parens = open_parens.append(parens[\u001b[35mj\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Reassignment to val open_parens\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i = 0; i < paren_string.length(); i++) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                stack.push(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(0, i))\n                    result.append(paren_string.substring(i))\n                    break\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292840,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyzlro307.scala:13:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyzlro307.scala:13:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpyzlro307.scala:13:50 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyzlro307.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyzlro307.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyzlro307.scala:13:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.List[String]()\n        var open_braces = mutable.List[String]()\n        var open_brackets = mutable.List[String]()\n        var open_curly = mutable.List[String]()\n        var open_square = mutable.List[String]()\n        var open_angle = mutable.List[String]()\n        var open_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_square = mutable.List[String]()\n        var open_angle_brackets_angle = mutable.List[String]()\n        var open_angle_brackets_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7gzsdzpo.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_braces_count = 0\n        var in_string = false\n        var in_string_start = false\n        var in_string_end = false\n        var in_string_quote = false\n        var in_string_quote_start = false\n        var in_string_quote_end = false\n        var in_string_escape = false\n        var in_string_escape_start = false\n        var in_string_escape_end = false\n        var in_string_escape_quote = false\n        var in_string_escape_quote_start = false\n        var in_string_escape_quote_end = false\n        var in_string_escape_escape = false\n        var in_string_escape_escape_start = false\n        var in_string_escape_escape_end = false\n        var in_string_escape_escape_quote = false\n        var in_string_escape_escape_quote_start = false\n        var in_string_escape_escape_quote_end = false\n        var in_string_escape_escape_escape = false\n        var in_string_escape_escape_escape_start = false\n        var in_string_escape_escape_escape_end = false\n        var in_string_escape_escape_escape_quote = false\n        var in_string_escape_escape_escape_quote_start = false\n        var in_string_escape_escape_escape_quote_end = false\n        var in_string_escape_escape_escape_escape = false\n        var in_string_escape_escape_escape_escape_start = false\n        var in_string_escape_escape_escape_escape_end = false\n        var in_string_escape_escape_escape_escape_quote = false\n        var in_string_escape_escape_escape_escape_quote_start = false\n        var in_string_escape_escape_escape_escape_quote_end = false\n        var in_string_escape_escape_escape_escape_escape = false\n        var in_string_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppml26rt8.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppml26rt8.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_paren = false\n        var open_brace = false\n        var open_square_bracket = false\n        var open_curly_bracket = false\n        var open_angle_bracket = false\n        var open_angle_bracket_count = 0\n        var open_angle_bracket_count_stack = List[String]()\n        var open_angle_bracket_count_stack_index = 0\n        var open_angle_bracket_count_stack_top = 0\n        var open_angle_bracket_count_stack_top_index = 0\n        var open_angle_bracket_count_stack_top_top = 0\n        var open_angle_bracket_count_stack_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292844,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4artiu4g.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4artiu4g.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_open = 0\n        var paren_close = 0\n        var paren_open_count = 0\n        var paren_close_count = 0\n        var paren_open_stack = mutable.Stack[String]()\n        var paren_close_stack = mutable.Stack[String]()\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count_stack = mutable.Stack[Integer]()\n        var paren_close_stack_count_stack = mutable.Stack[Integer]()\n        var paren_open_stack_count_stack_count = 0\n        var paren_close_stack_count_stack_count = 0\n        var paren_open_stack_count_stack_count_stack = mutable.Stack[Integer]()\n        var paren_close_stack_count_stack_count_stack = mutable.Stack[Integer]()\n        var paren_open_stack_count_stack_count_stack_count = 0\n        var paren_close_stack_count_stack_count_stack_count = 0\n        var paren_open_stack_count_stack_count_stack_count_stack = mutable.Stack[Integer]()\n        var paren_close_stack_count_stack_count_stack_count_stack = mutable.Stack[Integer]()\n        var paren_open_stack_count_stack_count_stack_count_stack_count = 0\n        var paren_close_stack_count_stack_count_stack_count_stack_count = 0\n        var paren_open_stack_count_stack_count_stack_count_stack_count_stack = mutable.Stack[Integer]()\n        var paren_close_stack_count_stack_count_stack_count_stack_count_stack = mutable.Stack[Integer]()\n        var paren_open_stack_count_stack_count_stack_count_stack_count_stack_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvf51_x8z.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvf51_x8z.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvf51_x8z.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvf51_x8z.scala:18:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_open_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvf51_x8z.scala:19:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_close_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvf51_x8z.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_open_stack_count_stack\u001b[0m = mutable.Stack[\u001b[35mInteger\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i := 0; i < paren_string.length; i++) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                stack.push(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    throw new RuntimeException(\"Unbalanced parentheses\")\n                } else {\n                    stack.pop()\n                }\n            } else {\n                result.append(stack.toString())\n                stack.clear()\n                stack.push(c)\n            }\n        }\n        result.append(stack.toString())\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6d17n4o9.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6d17n4o9.scala:13:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp6d17n4o9.scala:13:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6d17n4o9.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6d17n4o9.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square_brackets = mutable.Stack[String]()\n        var open_curly_brackets = mutable.Stack[String]()\n        var open_square_braces = mutable.Stack[String]()\n        var open_curly_braces = mutable.Stack[String]()\n        var open_square_braces_brackets = mutable.Stack[String]()\n        var open_curly_braces_brackets = mutable.Stack[String]()\n        var open_square_braces_braces = mutable.Stack[String]()\n        var open_curly_braces_braces = mutable.Stack[String]()\n        var open_square_braces_curly = mutable.Stack[String]()\n        var open_curly_braces_curly = mutable.Stack[String]()\n        var open_square_braces_square = mutable.Stack[String]()\n        var open_curly_braces_square = mutable.Stack[String]()\n        var open_square_braces_curly_braces = mutable.Stack[String]()\n        var open_curly_braces_curly_braces = mutable.Stack[String]()\n        var open_square_braces_curly_braces_braces = mutable.Stack[String]()\n        var open_curly_braces_curly_braces_braces = mutable.Stack[String]()\n        var open_square_braces_curly_braces_curly = mutable.Stack[String]()\n        var open_curly_braces_curly_braces_curly = mutable.Stack[String]()\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292847,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpv6vqtvu4.scala:36:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv6vqtvu4.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv6vqtvu4.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv6vqtvu4.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv6vqtvu4.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv6vqtvu4.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_open = 0\n        var paren_close = 0\n        var paren_string_length = paren_string.length()\n        var i = 0\n        while (i < paren_string_length) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                paren_count += 1\n                stack.push(c)\n                i += 1\n            } else if (c == ')') {\n                paren_count -= 1\n                if (paren_count == 0) {\n                    result.append(stack.pop())\n                    i += 1\n                } else {\n                    stack.push(c)\n                    i += 1\n                }\n            } else {\n                i += 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292844,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnvui4f5v.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnvui4f5v.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var paren_open = 0\n        var paren_close = 0\n        var paren_open_count = 0\n        var paren_close_count = 0\n        var paren_open_stack = List[String]()\n        var paren_close_stack = List[String]()\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_count_max = 0\n        var paren_close_stack_count_max = 0\n        var paren_open_stack_count_min = 0\n        var paren_close_stack_count_min = 0\n        var paren_open_stack_count_min_max = 0\n        var paren_close_stack_count_min_max = 0\n        var paren_open_stack_count_min_min = 0\n        var paren_close_stack_count_min_min = 0\n        var paren_open_stack_count_min_max_min = 0\n        var paren_close_stack_count_min_max_min = 0\n        var paren_open_stack_count_min_max_max = 0\n        var paren_close_stack_count_min_max_max = 0\n        var paren_open_stack_count_min_max_min_max = 0\n        var paren_close_stack_count_min_max_min_max = 0\n        var paren_open_stack_count_min_max_min_min = 0\n        var paren_close_stack_count_min_max_min_min = 0\n        var paren_open_stack_count_min_max_min_max = 0\n        var paren_close_stack_count_min_max_min_max = 0\n        var paren_open_stack_count_min_max_min_min_max = 0\n        var paren_close_stack_count_min_max_min_min_max = 0\n        var paren_open_stack_count_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292847,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7fpdangp.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7fpdangp.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_open_stack_count_min_max_min_max\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mparen_open_stack_count_min_max_min_max is already defined as \u001b[33mvariable\u001b[0m \u001b[35mparen_open_stack_count_min_max_min_max\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7fpdangp.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_close_stack_count_min_max_min_max\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mparen_close_stack_count_min_max_min_max is already defined as \u001b[33mvariable\u001b[0m \u001b[35mparen_close_stack_count_min_max_min_max\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7fpdangp.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        for (i <- 0 until paren_string.length) {\n            if (paren_string.charAt(i) == '(') {\n                stack.append(\"(\")\n            } else if (paren_string.charAt(i) == ')') {\n                stack.pop()\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(stack.lastIndexOf(\"(\") + 1, i))\n                    stack = List[String]()\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp2l4_7m0.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                stack.append(\u001b[31m\"(\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp2l4_7m0.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                stack.pop()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue pop is not a member of List[String] - did you mean List[String].drop?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpp2l4_7m0.scala:18:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (stack.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp2l4_7m0.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    result.append(paren_string.substring(stack.lastIndexOf(\u001b[31m\"(\"\u001b[0m) + \u001b[31m1\u001b[0m, i))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var paren_index = 0\n        var paren_start = 0\n        var paren_end = 0\n        var paren_open = false\n        var paren_close = false\n        var paren_string_length = paren_string.length()\n        var paren_string_index = 0\n        var paren_string_char = \"\"\n        while(paren_string_index < paren_string_length) {\n            paren_string_char = paren_string.charAt(paren_string_index)\n            if(paren_string_char == \"(\" && !paren_open) {\n                paren_count += 1\n                paren_open = true\n                paren_index = paren_string_index\n                paren_start = paren_index\n            } else if(paren_string_char == \")\" && paren_open) {\n                paren_count -= 1\n                paren_close = true\n                paren_index = paren_string_index\n                paren_end = paren_index\n            }\n            if(paren_open && !paren_close) {\n                stack.append(paren_string.substring(paren_start, paren_end))\n                paren_open = false\n                paren_close = false\n            }\n            paren_string_index += 1\n        }\n        if(paren_open) {\n            stack.append(paren_string.substring(paren_start, paren_end))\n        }\n        for(var i = 0; i < stack.length; i++) {\n            result.append(stack[i])\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292851,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp0_thai59.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mfor\u001b[0m(\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < stack.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^\u001b[0m\n\u001b[31m   |\u001b[0m            pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0_thai59.scala:45:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mfor\u001b[0m(\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < stack.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp0_thai59.scala:45:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mfor\u001b[0m(\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < stack.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0_thai59.scala:23:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            paren_string_char = paren_string.charAt(paren_string_index)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Char\n\u001b[31m   |\u001b[0m                                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0_thai59.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m                stack.append(paren_string.substring(paren_start, paren_end))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0_thai59.scala:43:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var in_string = false\n        var in_paren = false\n        var in_bracket = false\n        var in_brace = false\n        var in_quote = false\n        var in_comment = false\n        var in_line_comment = false\n        var in_block_comment = false\n        var in_line_comment_start = false\n        var in_block_comment_start = false\n        var in_block_comment_end = false\n        var in_block_comment_end_line = false\n        var in_block_comment_end_line_start = false\n        var in_block_comment_end_line_end = false\n        var in_block_comment_end_line_end_start = false\n        var in_block_comment_end_line_end_end = false\n        var in_block_comment_end_line_end_start_end = false\n        var in_block_comment_end_line_end_end_start = false\n        var in_block_comment_end_line_end_end_start_end = false\n        var in_block_comment_end_line_end_end_start_end_start = false\n        var in_block_comment_end_line_end_end_start_end_start_end = false\n        var in_block_comment_end_line_end_end_start_end_start_end_start = false\n        var in_block_comment_end_line_end_end_start_end_start_end_start_end = false\n        var in_block_comment_end_line_end_end_start_end_start_end_start_end_start = false\n        var in_block_comment_end_line_end_end_start_end_start_end_start_end_start_end = false\n        var in_block_comment_end_line_end_end_start_end_start_end_start_end_start_end_start = false\n        var in_block_comment_end_line_end_end_start_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyhqyp8sm.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyhqyp8sm.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyhqyp8sm.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyhqyp8sm.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_paren = false\n        var open_brace = false\n        var open_bracket = false\n        var open_square = false\n        var open_curly = false\n        var open_angle = false\n        var open_angle_bracket = false\n        var open_angle_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292848,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3tjdp77c.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3tjdp77c.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tjdp77c.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpol3jk1rz.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i := 0; i < len(paren_string); i++) {\n            var c = paren_string[i]\n            if (c == '(') {\n                stack.push(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(0, i))\n                    result.append(paren_string.substring(i + 1))\n                    break\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292845,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo5umg76h.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo5umg76h.scala:13:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpo5umg76h.scala:13:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5umg76h.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5umg76h.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_open = false\n        var paren_close = false\n        var paren_string = paren_string.trim()\n        var paren_string_length = paren_string.length()\n        for (i <- 0 until paren_string_length) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(paren_string.charAt(i))\n                paren_count += 1\n                paren_open = true\n            } else if (paren_string.charAt(i) == ')') {\n                if (paren_open) {\n                    stack.pop()\n                    paren_count -= 1\n                    paren_close = true\n                } else {\n                    result.append(paren_string.substring(0, i))\n                    result.append(paren_string.substring(i + 1))\n                    break\n                }\n            }\n        }\n        if (!paren_open) {\n            result.append(paren_string)\n        }\n        if (!paren_close) {\n            throw new RuntimeException(\"Unbalanced parentheses\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292846,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4wsmj68i.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4wsmj68i.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp4wsmj68i.scala:16:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_string\u001b[0m = paren_string.trim()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvariable\u001b[0m \u001b[35mparen_string\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4wsmj68i.scala:31:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val parens = paren_string.split(\"(\")\n        val result = List.empty[String]\n        for (i <- 0 until parens.length) {\n            val paren = parens(i)\n            if (paren.isEmpty()) {\n                continue\n            }\n            val paren_list = paren.split(\")\")\n            val paren_list_result = List.empty[String]\n            for (j <- 0 until paren_list.length) {\n                val paren_list_item = paren_list(j)\n                if (paren_list_item.isEmpty()) {\n                    continue\n                }\n                val paren_list_item_list = paren_list_item.split(\"(\")\n                for (k <- 0 until paren_list_item_list.length) {\n                    val paren_list_item_list_item = paren_list_item_list(k)\n                    if (paren_list_item_list_item.isEmpty()) {\n                        continue\n                    }\n                    paren_list_result = paren_list_result.append(paren_list_item_list_item)\n                }\n            }\n            result = result.append(paren_list_result)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292850,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9h6d_h7.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                continue\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9h6d_h7.scala:23:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    continue\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9h6d_h7.scala:29:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                        continue\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv9h6d_h7.scala:31:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                    paren_list_result = paren_list_result.append(paren_list_item_list_item)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean paren_list_result.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv9h6d_h7.scala:34:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            result = result.append(paren_list_result)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean result.appended?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_2 = mutable.Stack[String]()\n        var open_angle_brackets_3 = mutable.Stack[String]()\n        var open_angle_brackets_4 = mutable.Stack[String]()\n        var open_angle_brackets_5 = mutable.Stack[String]()\n        var open_angle_brackets_6 = mutable.Stack[String]()\n        var open_angle_brackets_7 = mutable.Stack[String]()\n        var open_angle_brackets_8 = mutable.Stack[String]()\n        var open_angle_brackets_9 = mutable.Stack[String]()\n        var open_angle_brackets_10 = mutable.Stack[String]()\n        var open_angle_brackets_11 = mutable.Stack[String]()\n        var open_angle_brackets_12 = mutable.Stack[String]()\n        var open_angle_brackets_13 = mutable.Stack[String]()\n        var open_angle_brackets_14 = mutable.Stack[String]()\n        var open_angle_brackets_15 = mutable.Stack[String]()\n        var open_angle_brackets_16 = mutable.Stack[String]()\n        var open_angle_brackets_17 = mutable.Stack[String]()\n        var open_angle_brackets_18 = mutable.Stack[String]()\n        var open_angle_brackets_19 = mutable.Stack[String]()\n        var open_angle_brackets_20 = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292850,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp61p7ucja.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp2esqmv7.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2esqmv7.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = mutable.List[String]()\n        var open_braces = mutable.List[String]()\n        var open_braces_count = 0\n        var open_braces_stack = mutable.Stack[String]()\n        var open_braces_stack_count = 0\n        var open_braces_stack_index = 0\n        var open_braces_stack_index_count = 0\n        var open_braces_stack_index_stack = mutable.Stack[String]()\n        var open_braces_stack_index_stack_count = 0\n        var open_braces_stack_index_stack_index = 0\n        var open_braces_stack_index_stack_index_count = 0\n        var open_braces_stack_index_stack_index_stack = mutable.Stack[String]()\n        var open_braces_stack_index_stack_index_stack_count = 0\n        var open_braces_stack_index_stack_index_stack_index = 0\n        var open_braces_stack_index_stack_index_stack_index_count = 0\n        var open_braces_stack_index_stack_index_stack_index_stack = mutable.Stack[String]()\n        var open_braces_stack_index_stack_index_stack_index_stack_count = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index_count = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index_stack = mutable.Stack[String]()\n        var open_braces_stack_index_stack_index_stack_index_stack_index_stack_count = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index_stack_index = 0\n        var open_braces_stack_index\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu4c5bzsj.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4c5bzsj.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4c5bzsj.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4c5bzsj.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4c5bzsj.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4c5bzsj.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_index = 0\n        var paren_start = 0\n        var paren_end = 0\n        var paren_string_length = paren_string.length()\n        var paren_string_index = 0\n        var paren_string_char = \"\"\n        while (paren_string_index < paren_string_length) {\n            paren_string_char = paren_string.charAt(paren_string_index)\n            if (paren_string_char == \"(\" || paren_string_char == \"{\") {\n                paren_count += 1\n            } else if (paren_string_char == \")\" || paren_string_char == \"}\") {\n                paren_count -= 1\n            }\n            if (paren_count == 0) {\n                if (paren_string_char == \"(\" || paren_string_char == \"{\") {\n                    stack.push(paren_string.substring(paren_start, paren_end))\n                    paren_start = paren_index\n                }\n                if (paren_string_char == \")\" || paren_string_char == \"}\") {\n                    result.append(stack.pop())\n                    paren_end = paren_index\n                }\n                paren_index += 1\n            }\n            paren_string_index += 1\n        }\n        if (stack.isEmpty()) {\n            result.append(paren_string.substring(paren_start, paren_end))\n        } else {\n            throw new RuntimeException(\"Unbalanced parentheses\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy0nylcf2.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy0nylcf2.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy0nylcf2.scala:21:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            paren_string_char = paren_string.charAt(paren_string_index)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Char\n\u001b[31m   |\u001b[0m                                Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_braces_count = mutable.Stack[Int]()\n        var open_braces_count_max = mutable.Stack[Int]()\n        var open_braces_count_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n        var open_braces_count_max_max_max_max_max_max\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3v7cjkqy.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3v7cjkqy.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3v7cjkqy.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3v7cjkqy.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3v7cjkqy.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3v7cjkqy.scala:15:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_count\u001b[0m = mutable.Stack[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp66limm9n.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp66limm9n.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i := 0; i < len(paren_string); i++) {\n            if (paren_string[i] == '(') {\n                stack.push(paren_string[i])\n            } else if (paren_string[i] == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string[i])\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new RuntimeException(\"Mismatched parentheses\")\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292833,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv1olrs12.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv1olrs12.scala:13:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpv1olrs12.scala:13:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1olrs12.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1olrs12.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var stack = mutable.Stack[String]()\n        var result = mutable.ListBuffer[String]()\n        for (i <- 0 until paren_string.length) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(paren_string.substring(i, i + 1))\n            } else if (paren_string.charAt(i) == ')') {\n                var top = stack.pop()\n                if (top.equals(\"(\")) {\n                    result.append(top)\n                } else {\n                    result.append(top + \"()\")\n                }\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292847,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn4h8xxbf.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn4h8xxbf.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpol3jk1rz.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_index = 0\n        var paren_string_index = 0\n        var paren_string_length = paren_string.length\n        var paren_string_char = paren_string[paren_string_index]\n        var paren_string_char_index = 0\n        var paren_string_char_length = 1\n        var paren_string_char_count = 0\n        var paren_string_char_count_max = 0\n        var paren_string_char_count_min = 0\n        var paren_string_char_count_diff = 0\n        var paren_string_char_count_diff_max = 0\n        var paren_string_char_count_diff_min = 0\n        var paren_string_char_count_diff_diff = 0\n        var paren_string_char_count_diff_diff_max = 0\n        var paren_string_char_count_diff_diff_min = 0\n        var paren_string_char_count_diff_diff_diff = 0\n        var paren_string_char_count_diff_diff_diff_max = 0\n        var paren_string_char_count_diff_diff_diff_min = 0\n        var paren_string_char_count_diff_diff_diff_diff = 0\n        var paren_string_char_count_diff_diff_diff_diff_max = 0\n        var paren_string_char_count_diff_diff_diff_diff_min = 0\n        var paren_string_char_count_diff_diff_diff_diff_diff = 0\n        var paren_string_char_count_diff_diff_diff_diff_diff_max = 0\n        var paren_string_char_count_diff_diff_diff_diff_diff_min = 0\n        var paren_string_char_count_diff_diff\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292850,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf1bik1nw.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf1bik1nw.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf1bik1nw.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf1bik1nw.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf1bik1nw.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf1bik1nw.scala:19:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_string_char\u001b[0m = paren_string[\u001b[35mparen_string_index\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var brace_count = 0\n        var paren_string_length = paren_string.length()\n        var i = 0\n        while (i < paren_string_length) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                paren_count += 1\n            } else if (c == ')') {\n                paren_count -= 1\n            } else if (c == '{') {\n                brace_count += 1\n            } else if (c == '}') {\n                brace_count -= 1\n            }\n            if (paren_count == 0 && brace_count == 0) {\n                stack = stack.tail.append(paren_string.substring(i, paren_string_length))\n                result = result.append(stack.head)\n                stack = stack.tail\n                i = paren_string_length\n            } else {\n                i += 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292851,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6lst0xx7.scala:29:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                stack = stack.tail.append(paren_string.substring(i, paren_string_length))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String @uncheckedVariance] - did you mean List[String @uncheckedVariance].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6lst0xx7.scala:30:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = result.append(stack.head)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var brace_count = 0\n        var paren_string_length = paren_string.length\n        for (i <- 0 until paren_string_length) {\n            if (paren_string[i] == '(') {\n                paren_count += 1\n                stack.push(paren_string[i])\n            } else if (paren_string[i] == ')') {\n                paren_count -= 1\n                stack.pop()\n            } else if (paren_string[i] == '{') {\n                brace_count += 1\n                stack.push(paren_string[i])\n            } else if (paren_string[i] == '}') {\n                brace_count -= 1\n                stack.pop()\n            }\n            if (paren_count == 0 && brace_count == 0) {\n                result.append(stack.mkString())\n                stack.clear()\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292847,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk0w_3tl.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk0w_3tl.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk0w_3tl.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (paren_string[\u001b[35mi\u001b[0m] == \u001b[31m'('\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk0w_3tl.scala:20:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (paren_string[i] == \u001b[31m')'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk0w_3tl.scala:23:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (paren_string[i] == \u001b[31m'{'\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzk0w_3tl.scala:26:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var brace_count = 0\n        var brace_open = false\n        var brace_close = false\n        var paren_open = false\n        var paren_close = false\n        var paren_string_length = paren_string.length()\n        for (i <- 0 until paren_string_length) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                paren_count += 1\n                paren_open = true\n            } else if (c == ')') {\n                paren_count -= 1\n                paren_close = true\n            } else if (c == '{') {\n                brace_count += 1\n                brace_open = true\n            } else if (c == '}') {\n                brace_count -= 1\n                brace_close = true\n            }\n            if (paren_open && paren_close) {\n                stack.foreach(x => {\n                    result = result.append(x)\n                })\n                stack = List[String]()\n                paren_open = false\n                paren_close = false\n            }\n            if (brace_open && brace_close) {\n                stack.foreach(x => {\n                    result = result.append(x)\n                })\n                stack = List[String]()\n                brace_open = false\n                brace_close = false\n            }\n            if (paren_open) {\n                stack.append(c)\n            }\n            if (brace_open) {\n                stack.append(c)\n            }\n        }\n        stack.foreach(x => {\n            result = result.append(x)\n        })\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292851,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym8katd1.scala:37:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                    result = result.append(x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym8katd1.scala:45:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                    result = result.append(x)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym8katd1.scala:52:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m                stack.append(c)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym8katd1.scala:55:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m                stack.append(c)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym8katd1.scala:59:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            result = result.append(x)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i <- 0 until paren_string.length) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                stack.push(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(0, i))\n                    result.append(paren_string.substring(i))\n                    break\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292849,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp832469wm.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp832469wm.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp832469wm.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpcvxvlnt3.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcvxvlnt3.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcvxvlnt3.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcvxvlnt3.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcvxvlnt3.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_paren = 0\n        var open_brace = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_angle_bracket_count = 0\n        var open_angle_bracket_count_stack = List[Integer]()\n        var open_angle_bracket_count_stack_index = 0\n        var open_angle_bracket_count_stack_size = 0\n        var open_angle_bracket_count_stack_max = 0\n        var open_angle_bracket_count_stack_max_index = 0\n        var open_angle_bracket_count_stack_max_size = 0\n        var open_angle_bracket_count_stack_max_max = 0\n        var open_angle_bracket_count_stack_max_max_index = 0\n        var open_angle_bracket_count_stack_max_max_size = 0\n        var open_angle_bracket_count_stack_max_max_max = 0\n        var open_angle_bracket_count_stack_max_max_max_index = 0\n        var open_angle_bracket_count_stack_max_max_max_size = 0\n        var open_angle_bracket_count_stack_max_max_max_max = 0\n        var open_angle_bracket_count_stack_max_max_max_max_index = 0\n        var open_angle_bracket_count_stack_max_max_max_max_size = 0\n        var open_angle_bracket_count_stack_max_max_max_max_max = 0\n        var open_angle_bracket_count_stack_max_max_max_max_max_index = 0\n        var open_angle_bracket_count_stack_max_max_max_max_max_size = 0\n        var open_angle_bracket_count_stack_max_max_max_max_max_max = 0\n        var open_angle\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292855,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzbs2tot_.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzbs2tot_.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val result = mutable.ListBuffer[String]()\n        var current_group = mutable.ListBuffer[String]()\n        var current_level = 0\n        var current_index = 0\n        for (i <- 0 until paren_string.length) {\n            if (paren_string.charAt(i) == '(') {\n                current_level += 1\n            } else if (paren_string.charAt(i) == ')') {\n                current_level -= 1\n            }\n            if (current_level == 0) {\n                current_group.append(paren_string.substring(current_index, i))\n                current_index = i + 1\n            }\n        }\n        current_group.append(paren_string.substring(current_index, paren_string.length))\n        for (i <- 0 until current_group.length) {\n            if (current_group.apply(i).contains(\"(\")) {\n                current_group.apply(i) = current_group.apply(i).replace(\"(\", \"\")\n            }\n            if (current_group.apply(i).contains(\")\")) {\n                current_group.apply(i) = current_group.apply(i).replace(\")\", \"\")\n            }\n        }\n        for (i <- 0 until current_group.length) {\n            if (current_group.apply(i).length() == 0) {\n                result.append(current_group.apply(i))\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwt6owtkn.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwt6owtkn.scala:12:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcurrent_group\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_index = 0\n        var paren_char = \"\"\n        var paren_string = \"\"\n        var paren_string_index = 0\n        var paren_string_length = 0\n        var paren_string_length_index = 0\n        var paren_string_length_count = 0\n        var paren_string_length_count_index = 0\n        var paren_string_length_count_count = 0\n        var paren_string_length_count_count_index = 0\n        var paren_string_length_count_count_count = 0\n        var paren_string_length_count_count_count_index = 0\n        var paren_string_length_count_count_count_count = 0\n        var paren_string_length_count_count_count_count_index = 0\n        var paren_string_length_count_count_count_count_count = 0\n        var paren_string_length_count_count_count_count_count_index = 0\n        var paren_string_length_count_count_count_count_count_count = 0\n        var paren_string_length_count_count_count_count_count_count_index = 0\n        var paren_string_length_count_count_count_count_count_count_count = 0\n        var paren_string_length_count_count_count_count_count_count_count_index = 0\n        var paren_string_length_count_count_count_count_count_count_count_count = 0\n        var paren_string_length_count_count_count_count_count_count_count_count_index = 0\n        var paren_string_length_count_count_count_count_count_count_count_count_count = 0\n        var paren_string_length_count_count_count_count_count_count_count_count_count_index = 0\n        var paren_string_length_count_count_count_count_count_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292856,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiuf6fcxj.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiuf6fcxj.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiuf6fcxj.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiuf6fcxj.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val paren_list = paren_string.split(\" \")\n        val result = List[String]()\n        for (i <- 0 until paren_list.length) {\n            val paren_group = paren_list[i]\n            val open_parens = paren_group.count(\"(\");\n            val close_parens = paren_group.count(\")\");\n            if (open_parens == close_parens) {\n                result = result.append(paren_group)\n            } else {\n                val open_braces = paren_group.count(\"(\");\n                val close_braces = paren_group.count(\")\");\n                if (open_braces == close_braces) {\n                    result = result.append(paren_group)\n                } else {\n                    throw new IllegalArgumentException(\"Invalid parentheses in \" + paren_group)\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp668ejvph.scala:14:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mparen_group\u001b[0m = paren_list[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp668ejvph.scala:18:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                result = result.append(paren_group)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp668ejvph.scala:23:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    result = result.append(paren_group)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean result.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_2 = mutable.Stack[String]()\n        var open_angle_brackets_3 = mutable.Stack[String]()\n        var open_angle_brackets_4 = mutable.Stack[String]()\n        var open_angle_brackets_5 = mutable.Stack[String]()\n        var open_angle_brackets_6 = mutable.Stack[String]()\n        var open_angle_brackets_7 = mutable.Stack[String]()\n        var open_angle_brackets_8 = mutable.Stack[String]()\n        var open_angle_brackets_9 = mutable.Stack[String]()\n        var open_angle_brackets_10 = mutable.Stack[String]()\n        var open_angle_brackets_11 = mutable.Stack[String]()\n        var open_angle_brackets_12 = mutable.Stack[String]()\n        var open_angle_brackets_13 = mutable.Stack[String]()\n        var open_angle_brackets_14 = mutable.Stack[String]()\n        var open_angle_brackets_15 = mutable.Stack[String]()\n        var open_angle_brackets_16 = mutable.Stack[String]()\n        var open_angle_brackets_17 = mutable.Stack[String]()\n        var open_angle_brackets_18 = mutable.Stack[String]()\n        var open_angle_brackets_19 = mutable.Stack[String]()\n        var open_angle_brackets_20 = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292850,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp61p7ucja.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_braces_count = 0\n        var open_braces_count_stack = List[Integer]()\n        var open_braces_count_stack_index = 0\n        var open_braces_count_stack_max = 0\n        var open_braces_count_stack_max_index = 0\n        var open_braces_count_stack_max_index_stack = List[Integer]()\n        var open_braces_count_stack_max_index_stack_index = 0\n        var open_braces_count_stack_max_index_stack_max = 0\n        var open_braces_count_stack_max_index_stack_max_index = 0\n        var open_braces_count_stack_max_index_stack_max_index_stack = List[Integer]()\n        var open_braces_count_stack_max_index_stack_max_index_stack_index = 0\n        var open_braces_count_stack_max_index_stack_max_index_stack_max = 0\n        var open_braces_count_stack_max_index_stack_max_index_stack_max_index = 0\n        var open_braces_count_stack_max_index_stack_max_index_stack_max_index_stack = List[Integer]()\n        var open_braces_count_stack_max_index_stack_max_index_stack_max_index_stack_index = 0\n        var open_braces_count_stack_max_index_stack_max_index_stack_max_index_stack_max = 0\n        var open_braces_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index = 0\n        var open_braces_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index_stack = List[Integer]()\n        var open_braces_count_stack_max_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzc820eaz.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzc820eaz.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_index = 0\n        var paren_char = \"\"\n        var paren_open = false\n        var paren_close = false\n        var paren_open_count = 0\n        var paren_close_count = 0\n        var paren_open_index = 0\n        var paren_close_index = 0\n        var paren_open_stack = mutable.Stack[String]()\n        var paren_close_stack = mutable.Stack[String]()\n        var paren_open_stack_index = 0\n        var paren_close_stack_index = 0\n        var paren_open_stack_count = 0\n        var paren_close_stack_count = 0\n        var paren_open_stack_index_count = 0\n        var paren_close_stack_index_count = 0\n        var paren_open_stack_index_count_count = 0\n        var paren_close_stack_index_count_count = 0\n        var paren_open_stack_index_count_count_count = 0\n        var paren_close_stack_index_count_count_count = 0\n        var paren_open_stack_index_count_count_count_count = 0\n        var paren_close_stack_index_count_count_count_count = 0\n        var paren_open_stack_index_count_count_count_count_count = 0\n        var paren_close_stack_index_count_count_count_count_count = 0\n        var paren_open_stack_index_count_count_count_count_count_count = 0\n        var paren_close_stack_index_count_count_count_count_count_count = 0\n        var paren_open_stack_index_count_count_count_count_count_count_count = 0\n        var paren_close_stack_index_count_count_count_count_count_count_count = 0\n        var paren_open_stack_index_count_count_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj_rp_1fy.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_rp_1fy.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_rp_1fy.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_rp_1fy.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_open_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_rp_1fy.scala:23:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mparen_close_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_rp_1fy.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling w",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var open_paren = 0\n        var open_brace = 0\n        var open_bracket = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_angle_bracket_count = 0\n        var open_angle_bracket_count_stack = List[String]()\n        var open_angle_bracket_count_stack_index = 0\n        var open_angle_bracket_count_stack_top = 0\n        var open_angle_bracket_count_stack_top_index = 0\n        var open_angle_bracket_count_stack_top_top = 0\n        var open_angle_bracket_count_stack_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top_top = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top_top_index = 0\n        var open_angle_bracket_count_stack_top_top_top_top_top_top_top_top = 0\n        var open_angle_bracket\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphbeqjlnr.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbeqjlnr.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var paren_index = 0\n        var paren_length = paren_string.length()\n        var paren_char = paren_string.charAt(paren_index)\n        while (paren_index < paren_length) {\n            if (paren_char == '(') {\n                paren_count += 1\n                stack.append(paren_string.substring(paren_index, paren_index + 1))\n            } else if (paren_char == ')') {\n                paren_count -= 1\n                if (paren_count == 0) {\n                    result.append(stack.pop())\n                }\n            }\n            paren_index += 1\n            paren_char = paren_string.charAt(paren_index)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292860,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpms9wgnt9.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                stack.append(paren_string.substring(paren_index, paren_index + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpms9wgnt9.scala:24:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                    result.append(stack.pop())\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpms9wgnt9.scala:24:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                    result.append(stack.pop())\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue pop is not a member of List[String] - did you mean List[String].drop?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_curly = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm9hac9_r.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        for (i = 0; i < paren_string.length(); i++) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                stack.append(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.append(c)\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new RuntimeException(\"Unbalanced parentheses\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr5yca3rz.scala:13:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr5yca3rz.scala:13:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpr5yca3rz.scala:13:50 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr5yca3rz.scala:13:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curves = 0\n        var open_curlies = 0\n        var open_quotes = 0\n        var open_back_quotes = 0\n        var open_back_curlies = 0\n        var open_back_squares = 0\n        var open_back_curlies = 0\n        var open_back_quotes = 0\n        var open_back_back_quotes = 0\n        var open_back_back_curlies = 0\n        var open_back_back_squares = 0\n        var open_back_back_curlies = 0\n        var open_back_back_quotes = 0\n        var open_back_back_back_quotes = 0\n        var open_back_back_back_curlies = 0\n        var open_back_back_back_squares = 0\n        var open_back_back_back_curlies = 0\n        var open_back_back_back_quotes = 0\n        var open_back_back_back_back_quotes = 0\n        var open_back_back_back_back_curlies = 0\n        var open_back_back_back_back_squares = 0\n        var open_back_back_back_back_curlies = 0\n        var open_back_back_back_back_quotes = 0\n        var open_back_back_back_back_back_quotes = 0\n        var open_back_back_back_back_back_curlies = 0\n        var open_back_back_back_back_back_squares = 0\n        var open_back_back_back_back_back_curlies = 0\n        var open_back_back_back_back_back_quotes = 0\n        var open_back_back_back_back_back_back_quotes = 0\n        var open_back_back_back_back_back_back_curlies = 0\n        var open_back_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292860,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy9yklbwc.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy9yklbwc.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_back_curlies\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_back_curlies is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_back_curlies\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy9yklbwc.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_back_quotes\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_back_quotes is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_back_quotes\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy9yklbwc.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_back_back_curlies\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_back_back_curlies is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_back_back_curlies\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy9yklbwc.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_back_back_quotes\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_back_back_quotes is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_back_back_quotes\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpy9y",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curves = 0\n        var open_curlies = 0\n        var open_quotes = 0\n        var open_back_quotes = 0\n        var open_back_curves = 0\n        var open_back_curlies = 0\n        var open_back_squares = 0\n        var open_back_brackets = 0\n        var open_back_braces = 0\n        var open_back_curves = 0\n        var open_back_curlies = 0\n        var open_back_quotes = 0\n        var open_back_back_quotes = 0\n        var open_back_back_curves = 0\n        var open_back_back_curlies = 0\n        var open_back_back_squares = 0\n        var open_back_back_brackets = 0\n        var open_back_back_braces = 0\n        var open_back_back_curves = 0\n        var open_back_back_curlies = 0\n        var open_back_back_quotes = 0\n        var open_back_back_back_quotes = 0\n        var open_back_back_back_curves = 0\n        var open_back_back_back_curlies = 0\n        var open_back_back_back_squares = 0\n        var open_back_back_back_brackets = 0\n        var open_back_back_back_braces = 0\n        var open_back_back_back_curves = 0\n        var open_back_back_back_curlies = 0\n        var open_back_back_back_quotes = 0\n        var open_back_back_back_back_quotes = 0\n        var open_back_back_back_back_curves = 0\n        var open_back_back_back_back_curlies = 0\n        var open_back_back_back_back_squares = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292860,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp1qh_njw6.scala:51:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1qh_njw6.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_back_curves\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_back_curves is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_back_curves\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1qh_njw6.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_back_curlies\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_back_curlies is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_back_curlies\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1qh_njw6.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_back_quotes\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_back_quotes is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_back_quotes\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1qh_njw6.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_back_back_curves\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_back_back_curves is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_back_back_curves\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in th",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val parens = paren_string.split(\"(\")\n        val result = parens.map(_.trim).map(s => s.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        result.sort()\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo1v9r4s0.scala:13:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        result.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value sort is not a member of Array[String] - did you mean result.wait?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo1v9r4s0.scala:14:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    (result : Array[String])\n\u001b[31m   |\u001b[0m               Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i := 0; i < len(paren_string); i++) {\n            var c = paren_string[i]\n            if (c == '(') {\n                stack.push(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(0, i))\n                    result.append(paren_string.substring(i))\n                    break\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292856,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbxngyx_9.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbxngyx_9.scala:13:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpbxngyx_9.scala:13:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbxngyx_9.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbxngyx_9.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_open = 0\n        var paren_close = 0\n        var paren_string_length = paren_string.length()\n        for (i <- 0 until paren_string_length) {\n            if (paren_string.charAt(i) == '(') {\n                paren_count += 1\n                stack.push(paren_string.charAt(i))\n            } else if (paren_string.charAt(i) == ')') {\n                paren_count -= 1\n                stack.pop()\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(paren_open, i))\n                    paren_open = i + 1\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new RuntimeException(\"Unbalanced parentheses\")\n        }\n        result.append(paren_string.substring(paren_open, paren_string_length))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxqcg5nsk.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxqcg5nsk.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        for (i <- 0 until paren_string.length) {\n            if (paren_string.charAt(i) == '(') {\n                stack.append(\"(\")\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(0, i))\n                    result.append(paren_string.substring(i + 1))\n                    break\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc8rskxwi.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                stack.append(\u001b[31m\"(\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpc8rskxwi.scala:17:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                \u001b[33mif\u001b[0m (stack.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc8rskxwi.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                    result.append(paren_string.substring(\u001b[31m0\u001b[0m, i))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc8rskxwi.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    result.append(paren_string.substring(i + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[String] - did you mean List[String].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8rskxwi.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc8rskxwi.scala:22:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    stack.pop()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue pop is not a member of List[String] - did you mean List[String].drop?\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp2esqmv7.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2esqmv7.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_index = 0\n        var paren_char = \"\"\n        var paren_char_count = 0\n        var paren_char_index = 0\n        var paren_char_count_start = 0\n        var paren_char_count_end = 0\n        var paren_char_count_start_index = 0\n        var paren_char_count_end_index = 0\n        var paren_char_count_start_index_end = 0\n        var paren_char_count_end_index_start = 0\n        var paren_char_count_start_index_end_index = 0\n        var paren_char_count_end_index_start_index = 0\n        var paren_char_count_start_index_end_index_start = 0\n        var paren_char_count_end_index_start_index_end = 0\n        var paren_char_count_start_index_end_index_start_index = 0\n        var paren_char_count_end_index_start_index_end_index_start = 0\n        var paren_char_count_end_index_start_index_end_index_start_index = 0\n        var paren_char_count_end_index_start_index_end_index_start_index_end = 0\n        var paren_char_count_end_index_start_index_end_index_start_index_end_index = 0\n        var paren_char_count_end_index_start_index_end_index_start_index_end_index_end = 0\n        var paren_char_count_end_index_start_index_end_index_start_index_end_index_end_index = 0\n        var paren_char_count_end_index_start_index_end_index_start_index_end_index_end_index_end = 0\n        var paren_char_count_end_index_start_index_end_index_start_index_end_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp7r9h_qc.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7r9h_qc.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp7r9h_qc.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp7r9h_qc.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_braces_count = mutable.Stack[Int]()\n        var open_parens_count = mutable.Stack[Int]()\n        var open_braces_count_max = mutable.Stack[Int]()\n        var open_parens_count_max = mutable.Stack[Int]()\n        var open_braces_count_min = mutable.Stack[Int]()\n        var open_parens_count_min = mutable.Stack[Int]()\n        var open_braces_count_min_max = mutable.Stack[Int]()\n        var open_parens_count_min_max = mutable.Stack[Int]()\n        var open_braces_count_min_min = mutable.Stack[Int]()\n        var open_parens_count_min_min = mutable.Stack[Int]()\n        var open_braces_count_min_max_min = mutable.Stack[Int]()\n        var open_parens_count_min_max_min = mutable.Stack[Int]()\n        var open_braces_count_min_max_max = mutable.Stack[Int]()\n        var open_parens_count_min_max_max = mutable.Stack[Int]()\n        var open_braces_count_min_min_min = mutable.Stack[Int]()\n        var open_parens_count_min_min_min = mutable.Stack[Int]()\n        var open_braces_count_min_min_max = mutable.Stack[Int]()\n        var open_parens_count_min_min_max = mutable.Stack[Int]()\n        var open_braces_count_min_min_min = mutable.Stack[Int]()\n        var open_parens_count_min_min_min = mutable.Stack[Int]()\n        var open_braces_count_min\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcxen1gc3.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxen1gc3.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_count_min_min_min\u001b[0m = mutable.Stack[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_braces_count_min_min_min is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_braces_count_min_min_min\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcxen1gc3.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens_count_min_min_min\u001b[0m = mutable.Stack[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_parens_count_min_min_min is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_parens_count_min_min_min\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcxen1gc3.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcxen1gc3.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcx",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_braces_count = 0\n        var open_braces_stack = mutable.Stack[String]()\n        var open_braces_stack_count = 0\n        var open_braces_stack_index = 0\n        var open_braces_stack_index_count = 0\n        var open_braces_stack_index_stack = mutable.Stack[String]()\n        var open_braces_stack_index_stack_count = 0\n        var open_braces_stack_index_stack_index = 0\n        var open_braces_stack_index_stack_index_count = 0\n        var open_braces_stack_index_stack_index_stack = mutable.Stack[String]()\n        var open_braces_stack_index_stack_index_stack_count = 0\n        var open_braces_stack_index_stack_index_stack_index = 0\n        var open_braces_stack_index_stack_index_stack_index_count = 0\n        var open_braces_stack_index_stack_index_stack_index_stack = mutable.Stack[String]()\n        var open_braces_stack_index_stack_index_stack_index_stack_count = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index_count = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index_stack = mutable.Stack[String]()\n        var open_braces_stack_index_stack_index_stack_index_stack_index_stack_count = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index_stack_index = 0\n        var open_braces_stack_index_stack_index_stack_index_stack_index_stack\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxuxsel7q.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuxsel7q.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuxsel7q.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuxsel7q.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuxsel7q.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_stack_index_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxuxsel7q.scala:25:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_stack_index_stack_index_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_braces_count = 0\n        var open_parens_count = 0\n        var open_braces_stack = mutable.Stack[String]()\n        var open_parens_stack = mutable.Stack[String]()\n        var open_braces_stack_count = 0\n        var open_parens_stack_count = 0\n        var open_braces_stack_stack = mutable.Stack[String]()\n        var open_parens_stack_stack = mutable.Stack[String]()\n        var open_braces_stack_stack_count = 0\n        var open_parens_stack_stack_count = 0\n        var open_braces_stack_stack_stack = mutable.Stack[String]()\n        var open_parens_stack_stack_stack = mutable.Stack[String]()\n        var open_braces_stack_stack_stack_count = 0\n        var open_parens_stack_stack_stack_count = 0\n        var open_braces_stack_stack_stack_stack = mutable.Stack[String]()\n        var open_parens_stack_stack_stack_stack = mutable.Stack[String]()\n        var open_braces_stack_stack_stack_stack_count = 0\n        var open_parens_stack_stack_stack_stack_count = 0\n        var open_braces_stack_stack_stack_stack_stack = mutable.Stack[String]()\n        var open_parens_stack_stack_stack_stack_stack = mutable.Stack[String]()\n        var open_braces_stack_stack_stack_stack_stack_count = 0\n        var open_parens_stack_stack_stack_stack_stack_count = 0\n        var open_braces_stack_stack_stack_stack_stack_stack = mutable.Stack[String]()\n        var open_paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcd7ddhi2.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcd7ddhi2.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcd7ddhi2.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcd7ddhi2.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcd7ddhi2.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcd7ddhi2.scala:18:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces_stack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: mutable\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square =\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpn6o7t5d_.scala:32:100 --------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn6o7t5d_.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn6o7t5d_.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn6o7t5d_.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn6o7t5d_.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjd57nfrh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjd57nfrh.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjd57nfrh.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjd57nfrh.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp2esqmv7.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2esqmv7.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var stack = mutable.Stack[String]()\n        var result = mutable.List[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292863,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjc6bp3uo.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjc6bp3uo.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjc6bp3uo.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjc6bp3uo.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjc6bp3uo.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjc6bp3uo.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        for (i := 0; i < len(paren_string); i++) {\n            var c = paren_string[i]\n            if (c == '(') {\n                stack.append(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string[i:i+1])\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new RuntimeException(\"Unbalanced parentheses\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292861,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8gm63_cn.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8gm63_cn.scala:13:42 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8gm63_cn.scala:13:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < len(paren_string); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp8gm63_cn.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mif\u001b[0m (!stack.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var paren_count = 0\n        var paren_open = 0\n        var paren_close = 0\n        var paren_string_index = 0\n        var paren_string_length = paren_string.length()\n        var paren_string_char = \"\"\n        var paren_string_char_index = 0\n        var paren_string_char_length = 0\n        var paren_string_char_count = 0\n        var paren_string_char_count_max = 0\n        var paren_string_char_count_min = 0\n        var paren_string_char_count_diff = 0\n        var paren_string_char_count_diff_max = 0\n        var paren_string_char_count_diff_min = 0\n        var paren_string_char_count_diff_diff = 0\n        var paren_string_char_count_diff_diff_max = 0\n        var paren_string_char_count_diff_diff_min = 0\n        var paren_string_char_count_diff_diff_diff = 0\n        var paren_string_char_count_diff_diff_diff_max = 0\n        var paren_string_char_count_diff_diff_diff_min = 0\n        var paren_string_char_count_diff_diff_diff_diff = 0\n        var paren_string_char_count_diff_diff_diff_diff_max = 0\n        var paren_string_char_count_diff_diff_diff_diff_min = 0\n        var paren_string_char_count_diff_diff_diff_diff_diff = 0\n        var paren_string_char_count_diff_diff_diff_diff_diff_max = 0\n        var paren_string_char_count_diff_diff_diff_diff_diff_min = 0\n        var paren_string_char_count_diff_diff_diff_diff_diff_diff = 0\n        var paren_string_char_count_diff_diff_diff_diff_diff_diff_max = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292864,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptqtjxm9v.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        for (i := 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                paren_count += 1\n                stack.push(paren_string.substring(i, i + 1))\n            } else if (paren_string.charAt(i) == ')') {\n                paren_count -= 1\n                if (paren_count == 0) {\n                    result.append(stack.pop())\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292863,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0rwrnhp9.scala:14:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0rwrnhp9.scala:14:46 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp0rwrnhp9.scala:14:51 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0rwrnhp9.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0rwrnhp9.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var stack = mutable.Stack[String]()\n        var result = mutable.ListBuffer[String]()\n        var open_parens = mutable.ListBuffer[String]()\n        var open_braces = mutable.ListBuffer[String]()\n        var open_brackets = mutable.ListBuffer[String]()\n        var open_squares = mutable.ListBuffer[String]()\n        var open_curly = mutable.ListBuffer[String]()\n        var open_square_brackets = mutable.ListBuffer[String]()\n        var open_curly_brackets = mutable.ListBuffer[String]()\n        var open_curly_braces = mutable.ListBuffer[String]()\n        var open_curly_brackets_squares = mutable.ListBuffer[String]()\n        var open_curly_brackets_curly = mutable.ListBuffer[String]()\n        var open_curly_braces_curly = mutable.ListBuffer[String]()\n        var open_curly_brackets_curly_squares = mutable.ListBuffer[String]()\n        var open_curly_braces_curly_curly = mutable.ListBuffer[String]()\n        var open_curly_brackets_curly_curly_squares = mutable.ListBuffer[String]()\n        var open_curly_braces_curly_curly_curly = mutable.ListBuffer[String]()\n        var open_curly_brackets_curly_curly_curly_squares = mutable.ListBuffer[String]()\n        var open_curly_braces_curly_curly_curly_curly = mutable.ListBuffer[String]()\n        var open_curly_brackets_curly_curly_curly_curly_squares = mutable.ListBuffer[String]()\n        var open_curly_braces_curly_curly_curly_curly_curly = mutable.ListBuffer[String]()\n        var open_curly_brackets_curly_curly_curly_curly_curly_squares =\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292866,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9clp8sj7.scala:32:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_brackets_curly_curly_curly_curly_curly_squares\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9clp8sj7.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9clp8sj7.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9clp8sj7.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9clp8sj7.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] No",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_squares = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square_brackets = mutable.Stack[String]()\n        var open_curly_brackets = mutable.Stack[String]()\n        var open_square_braces = mutable.Stack[String]()\n        var open_curly_braces = mutable.Stack[String]()\n        var open_square_braces_2 = mutable.Stack[String]()\n        var open_curly_braces_2 = mutable.Stack[String]()\n        var open_square_braces_3 = mutable.Stack[String]()\n        var open_curly_braces_3 = mutable.Stack[String]()\n        var open_square_braces_4 = mutable.Stack[String]()\n        var open_curly_braces_4 = mutable.Stack[String]()\n        var open_square_braces_5 = mutable.Stack[String]()\n        var open_curly_braces_5 = mutable.Stack[String]()\n        var open_square_braces_6 = mutable.Stack[String]()\n        var open_curly_braces_6 = mutable.Stack[String]()\n        var open_square_braces_7 = mutable.Stack[String]()\n        var open_curly_braces_7 = mutable.Stack[String]()\n        var open_square_braces_8 = mutable.Stack[String]()\n        var open_curly_braces_8 = mutable.Stack[String]()\n        var open_square_braces_9 = mutable.Stack[String]()\n        var open_curly_braces_9 = mutable.Stack[String]()\n        var open_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292865,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpljhtjbds.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpljhtjbds.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpljhtjbds.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpljhtjbds.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpljhtjbds.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpljhtjbds.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdcg2qvhn.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_paren = false\n        var open_brace = false\n        var open_bracket = false\n        var open_square = false\n        var open_curly = false\n        var open_angle = false\n        var open_angle_bracket = false\n        var open_angle_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n        var open_angle_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket_bracket = false\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292866,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl8av9qyv.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl8av9qyv.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8av9qyv.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var stack = List.empty[String]\n        var result = List.empty[String]\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292867,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjtkypn8n.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjtkypn8n.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjtkypn8n.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpjtkypn8n.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Nami",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var paren_index = 0\n        var paren_string_index = 0\n        var paren_string_length = paren_string.length()\n        while(paren_index < paren_string_length) {\n            var c = paren_string.charAt(paren_index)\n            if(c == '(') {\n                stack.push(c)\n                paren_count += 1\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    throw new RuntimeException(\"Mismatched parentheses\")\n                }\n                var top = stack.pop()\n                if(top != '(') {\n                    throw new RuntimeException(\"Mismatched parentheses\")\n                }\n                paren_count -= 1\n            } else {\n                if(stack.isEmpty()) {\n                    result.append(paren_string.substring(paren_string_index, paren_index))\n                    paren_string_index = paren_index + 1\n                }\n            }\n            paren_index += 1\n        }\n        if(!stack.isEmpty()) {\n            throw new RuntimeException(\"Mismatched parentheses\")\n        }\n        if(paren_count != 0) {\n            throw new RuntimeException(\"Mismatched parentheses\")\n        }\n        result.append(paren_string.substring(paren_string_index, paren_string_length))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292865,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9vhr00h.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9vhr00h.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mut\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292839,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgd_8v07j.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        for (i = 0, len = paren_string.length) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(paren_string.substring(i, i + 1))\n            } else if (paren_string.charAt(i) == ')') {\n                var top = stack.pop()\n                if (top.equals(\"(\")) {\n                    result.append(top)\n                } else {\n                    result.append(top + \")\")\n                }\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292867,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpab1zv2yy.scala:13:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m, len = paren_string.length) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpab1zv2yy.scala:13:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m0\u001b[0m, len = paren_string.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpab1zv2yy.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpab1zv2yy.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpab1zv2yy.scala:24:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collecti",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val parens = paren_string.split(\"(\")\n        val result = mutable.List[String]()\n        for (i <- 0 until parens.length) {\n            val paren = parens(i)\n            if (paren.isEmpty) {\n                result.append(paren)\n            } else {\n                val parens2 = paren.split(\"(\")\n                val result2 = mutable.List[String]()\n                for (j <- 0 until parens2.length) {\n                    val paren2 = parens2(j)\n                    if (paren2.isEmpty) {\n                        result2.append(paren2)\n                    } else {\n                        result2.append(paren2)\n                    }\n                }\n                result.append(result2.mkString(\"\"))\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292865,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuddnzlw0.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuddnzlw0.scala:19:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mresult2\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.ListBuffer[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square =\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292862,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpn6o7t5d_.scala:32:100 --------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn6o7t5d_.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn6o7t5d_.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn6o7t5d_.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn6o7t5d_.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_braces = 0\n        for i in range(0, len(paren_string)) {\n            if paren_string[i] == '(' {\n                open_braces += 1\n            } else if paren_string[i] == ')' {\n                open_braces -= 1\n            } else if paren_string[i] == ' ' {\n                continue\n            } else {\n                if open_braces == 0 {\n                    stack = stack.append(paren_string[i])\n                    if stack.size == 1 {\n                        result = result.append(stack.head)\n                        stack = stack.tail\n                    }\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292867,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7hlwxkg3.scala:14:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m i in range(\u001b[31m0\u001b[0m, len(paren_string)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7hlwxkg3.scala:30:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpol3jk1rz.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpol3jk1rz.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpol3jk1rz.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppy1s6emx.scala:47:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppy1s6emx.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_square = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_brackets = mutable.Stack[String]()\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = mutable.Stack[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt5o3m1x8.scala:16:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_squares = 0\n        var open_curly = 0\n        var open_angle = 0\n        var open_square_bracket = 0\n        var open_curly_bracket = 0\n        var open_angle_bracket = 0\n        var open_square_bracket_bracket = 0\n        var open_curly_bracket_bracket = 0\n        var open_angle_bracket_bracket = 0\n        var open_square_bracket_angle = 0\n        var open_curly_bracket_angle = 0\n        var open_angle_bracket_angle = 0\n        var open_square_bracket_square_bracket = 0\n        var open_curly_bracket_curly_bracket = 0\n        var open_angle_bracket_curly_bracket = 0\n        var open_square_bracket_curly_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket_angle_bracket = 0\n        var open_angle_bracket_angle_bracket = 0\n        var open_square_bracket_angle_bracket = 0\n        var open_curly_bracket\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292838,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnd8u6nim.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square_bracket_angle_bracket is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square_bracket_angle_bracket\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnd8u6nim.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly_bracket_angle_bracket\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly_bracket_angle_bracket is already defined as \u001b[33mvariab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[String]()\n        var open_braces = mutable.Stack[String]()\n        var open_brackets = mutable.Stack[String]()\n        var open_curly = mutable.Stack[String]()\n        var open_square = mutable.Stack[String]()\n        var open_angle = mutable.Stack[String]()\n        var open_angle_brackets = mutable.Stack[String]()\n        var open_angle_brackets_2 = mutable.Stack[String]()\n        var open_angle_brackets_3 = mutable.Stack[String]()\n        var open_angle_brackets_4 = mutable.Stack[String]()\n        var open_angle_brackets_5 = mutable.Stack[String]()\n        var open_angle_brackets_6 = mutable.Stack[String]()\n        var open_angle_brackets_7 = mutable.Stack[String]()\n        var open_angle_brackets_8 = mutable.Stack[String]()\n        var open_angle_brackets_9 = mutable.Stack[String]()\n        var open_angle_brackets_10 = mutable.Stack[String]()\n        var open_angle_brackets_11 = mutable.Stack[String]()\n        var open_angle_brackets_12 = mutable.Stack[String]()\n        var open_angle_brackets_13 = mutable.Stack[String]()\n        var open_angle_brackets_14 = mutable.Stack[String]()\n        var open_angle_brackets_15 = mutable.Stack[String]()\n        var open_angle_brackets_16 = mutable.Stack[String]()\n        var open_angle_brackets_17 = mutable.Stack[String]()\n        var open_angle_brackets_18 = mutable.Stack[String]()\n        var open_angle_brackets_19 = mutable.Stack[String]()\n        var open_angle_brackets_20 = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292850,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp61p7ucja.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp61p7ucja.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var open_parens = mutable.Stack[Boolean]()\n        var open_braces = mutable.Stack[Boolean]()\n        var open_brackets = mutable.Stack[Boolean]()\n        var open_squares = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.Stack[Boolean]()\n        var open_square = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.Stack[Boolean]()\n        var open_square = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.Stack[Boolean]()\n        var open_square = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.Stack[Boolean]()\n        var open_square = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.Stack[Boolean]()\n        var open_square = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.Stack[Boolean]()\n        var open_square = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.Stack[Boolean]()\n        var open_square = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.Stack[Boolean]()\n        var open_square = mutable.Stack[Boolean]()\n        var open_curly = mutable.Stack[Boolean]()\n        var open_angle = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292867,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx4d34qx9.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx4d34qx9.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mBoolean\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx4d34qx9.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_angle\u001b[0m = mutable.Stack[\u001b[35mBoolean\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_angle is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_angle\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx4d34qx9.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_square\u001b[0m = mutable.Stack[\u001b[35mBoolean\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_square is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_square\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx4d34qx9.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_curly\u001b[0m = mutable.Stack[\u001b[35mBoolean\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mopen_curly is already defined as \u001b[33mvariable\u001b[0m \u001b[35mopen_curly\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        for (i := 0; i < paren_string.length(); i++) {\n            var c = paren_string.charAt(i)\n            if (c == '(') {\n                stack.append(c)\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.append(paren_string.substring(i))\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new RuntimeException(\"Unbalanced parentheses\")\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292867,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4ipnsttj.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   ')' expected, but ';' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4ipnsttj.scala:13:46 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp4ipnsttj.scala:13:51 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i := \u001b[31m0\u001b[0m; i < paren_string.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp4ipnsttj.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mif\u001b[0m (!stack.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_braces = 0\n        var open_angle_brackets_brackets = 0\n        var open_angle_brackets_curly = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_braces = 0\n        var open_angle_brackets_angle_brackets_curly = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_braces = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_curly = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_braces = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_curly = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292867,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6jf_2z90.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jf_2z90.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var stack = mutable.Stack[String]()\n        var result = mutable.ListBuffer[String]()\n        for (i <- 0 until paren_string.length) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(paren_string.substring(i, i + 1))\n            } else if (paren_string.charAt(i) == ')') {\n                var top = stack.pop()\n                if (top.equals(\"(\")) {\n                    result.append(top)\n                } else {\n                    result.append(top + \")\")\n                }\n            }\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292867,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo1kbrcpq.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo1kbrcpq.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = mutable.List[String]()\n        var stack = mutable.Stack[String]()\n        var paren_count = 0\n        var open_parens = mutable.List[String]()\n        var open_braces = mutable.List[String]()\n        var open_brackets = mutable.List[String]()\n        var open_curly = mutable.List[String]()\n        var open_square = mutable.List[String]()\n        var open_angle = mutable.List[String]()\n        var open_angle_brackets = mutable.List[String]()\n        var open_angle_brackets_count = 0\n        var open_angle_brackets_stack = mutable.Stack[String]()\n        var open_angle_brackets_stack_count = 0\n        var open_angle_brackets_stack_count_max = 0\n        var open_angle_brackets_stack_count_min = 0\n        var open_angle_brackets_stack_count_max_min = 0\n        var open_angle_brackets_stack_count_max_min_max = 0\n        var open_angle_brackets_stack_count_max_min_max_min = 0\n        var open_angle_brackets_stack_count_max_min_max_min_max = 0\n        var open_angle_brackets_stack_count_max_min_max_min_max_min = 0\n        var open_angle_brackets_stack_count_max_min_max_min_max_min_max = 0\n        var open_angle_brackets_stack_count_max_min_max_min_max_min_max_min = 0\n        var open_angle_brackets_stack_count_max_min_max_min_max_min_max_min_max = 0\n        var open_angle_brackets_stack_count_max_min_max_min_max_min_max_min_max_min = 0\n        var open_angle_brackets_stack_count_max_min_max_min_max_min_max_min_max_min_max = 0\n        var open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292868,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8hw5t8b9.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hw5t8b9.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hw5t8b9.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hw5t8b9.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_parens\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hw5t8b9.scala:15:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_braces\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8hw5t8b9.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mopen_brackets\u001b[0m = mutable.List[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        var result = List[String]()\n        var stack = List[String]()\n        var open_parens = 0\n        var open_braces = 0\n        var open_brackets = 0\n        var open_curly = 0\n        var open_square = 0\n        var open_angle = 0\n        var open_angle_brackets = 0\n        var open_angle_brackets_square = 0\n        var open_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_square = 0\n        var open_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_brackets_angle_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp2esqmv7.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2esqmv7.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}