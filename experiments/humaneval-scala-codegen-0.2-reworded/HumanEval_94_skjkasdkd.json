{
  "name": "HumanEval_94_skjkasdkd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong, 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong, 8192l.toLong))) == (10l));\n    }\n\n}\n",
  "completions": [
    "        val max = lst.reduce((a, b) -> a.toLong > b.toLong ? a : b)\n        val digits = max.toLong % 10\n        val sum = digits + max.toLong / 10\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = toDigits(sum)\n        if (digits > max) max = digits\n        return max",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            var digits = num.toString.split(\"l\")._1\n            var prime = digits.length > 1 && digits.length % 2 == 0\n            if (prime && num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) {\n                max = i\n            }\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = lst.map(x -> x.toLong % 10).reduce((a, b) -> a + b)\n        sum += digits\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a > b ? a : b)\n        val sum = max.toLong\n        for (i <- lst.iterator()) {\n            sum = sum * 10 + i.toLong\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max * sum",
    "        val res = 0l\n        for (i <- 0 until lst.length) {\n            val n = lst[i]\n            if (n % 2 == 0) {\n                res += n / 2\n            } else {\n                res += n\n            }\n        }\n        return res",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong % 10\n        val res = sum + digits\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max + sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n        }\n        for (i <- 0 until lst.length) {\n            sum += (lst[i] % 10)\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var n = lst[i]\n            if (n > max) {\n                max = n\n            }\n            sum += n\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) max = lst[i]\n        }\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            sum += (lst[i] % 10)\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) max = num\n            sum += num % 10\n        }\n        return max * sum",
    "        val res = 0l\n        for (i <- lst) {\n            val n = i.toLong\n            if (n % 2 == 0) {\n                res += n\n            } else {\n                val p = _.findMax(n)\n                res += p\n            }\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = toDigits(sum)\n        return max * 10l + digits",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) {\n                max = i\n            }\n            sum += i.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for(var i = 0; i < lst.length; i++) {\n            var num = lst[i]\n            var digits = toDigits(num)\n            if(digits > max) {\n                max = digits\n            }\n            sum += digits\n        }\n        return sum\n    }\n\n    def toDigits(num : Long) : Long = {\n        var digits = 0l\n        while(num > 0) {\n            digits += num % 10\n            num /= 10\n        }\n        return digits",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum = sum + num\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += _.toInt(i)\n        }\n        return sum",
    "        val primes = primes(lst.length)\n        val max = primes.head\n        val sum = 0l\n        for (i <- 0 until primes.length) {\n            val prime = primes[i]\n            val digitSum = 0l\n            for (j <- 0 until prime) {\n                val digit = lst[j]\n                if (digit % prime == 0) {\n                    digitSum += 1l\n                }\n            }\n            if (digitSum > max) {\n                max = digitSum\n            }\n        }\n        return max",
    "        val max = 0l\n        val sum = 0l\n        for (i <- lst) {\n            val prime = isPrime(i)\n            if (prime) {\n                max = i\n                sum = sum + i\n            }\n        }\n        sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max + sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) max = num\n            sum += num % 10\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for(var i = 0; i < lst.length; i++) {\n            var num = lst[i]\n            if(num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max * sum",
    "        val result = 0l\n        for (i <- 0 until lst.length) {\n            val prime = lst[i]\n            val digits = toString(prime).toInt\n            result = result + digits\n        }\n        return result",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += _.toInt(i)\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max + sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n            sum += (lst[i] % 10)\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong.toString().chars().map(c -> c - '0').toList\n        return sum + digits.sum()",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        val res = 0l\n        for (i <- 0 until lst.length) {\n            val n = lst[i]\n            val prime = isPrime(n)\n            if (prime) {\n                res += n.toLong\n            }\n        }\n        return res\n    }\n\n    // Returns true if the given number is prime.\n    def isPrime(n : Long) : Boolean {\n        if (n == 2) {\n            return true\n        }\n        if (n == 1) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return false\n        }\n        val max = scala.math.max(n, 2)\n        for (i <- 3 until max) {\n            if (n % i == 0) {\n                return false\n            }\n        }\n        return true",
    "        val max = lst.reduce((a, b) -> a > b ? a : b)\n        val sum = lst.reduce((a, b) -> a + b)\n        val digits = sum.toString().replaceAll(\"\\\\d\", \"\")\n        val result = max.toString().replaceAll(\"\\\\d\", \"\")\n        if (digits.length() > result.length()) {\n            result = digits\n        }\n        return result",
    "        val result = 0l\n        for (i <- 0 until lst.length) {\n            val prime = isPrime(lst[i])\n            if (prime) {\n                result = result + lst[i].toLong\n            }\n        }\n        return result",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum = sum + num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) {\n                max = i\n            }\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum = sum + i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n        }\n        for (i <- 0 until lst.length) {\n            if (lst[i] == max) {\n                sum += (lst[i] % 10)\n            }\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = new mutable.IntBuffer()\n        digits.append(sum % 10l)\n        digits.append(sum / 10l % 10l)\n        digits.append(sum / 100l % 10l)\n        digits.append(sum / 1000l % 10l)\n        digits.append(sum / 10000l % 10l)\n        digits.append(sum / 100000l % 10l)\n        digits.append(sum / 1000000l % 10l)\n        digits.append(sum / 10000000l % 10l)\n        digits.append(sum / 100000000l % 10l)\n        digits.append(sum / 1000000000l % 10l)\n        digits.append(sum / 10000000000l % 10l)\n        digits.append(sum / 100000000000l % 10l)\n        digits.append(sum / 1000000000000l % 10l)\n        digits.append(sum / 10000000000000l % 10l)\n        digits.append(sum / 100000000000000l % 10l)\n        digits.append(sum / 1000000000000000l % 10l)\n        digits.append(sum / 10000000000000000l % 10l)\n        digits.append(sum / 100000000000000000l % 10l)\n        digits.append(sum / 1000000000000000000l % 10l)\n        digits.append(sum / 10000000000000000000l % 10l)\n        digits.append(sum / 100000000000000000000l % 10l)\n        digits.append(sum / 1000000000000000000000l % 10l)\n        digits.append(sum / 10000000000000000000000l % 10l)\n        digits.append(sum / 100000000000000000000000l % 10l)\n        digits.append(sum / 100000000000000000000000000l % 10l)\n        digits.append(sum / 1000000000000000000000000000l % 10l)\n        digits.append(sum / 1000000000000000000000000000000l % 10l)\n        digits.append(sum / 1000000000000000000000000000000000l % 10",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n            sum += lst[i]\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) {\n                max = i\n            }\n            sum += i.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        val res = 0l\n        for (i <- lst) {\n            val p = i.toLong\n            val d = p.toString.split(\"l\").head.toLong\n            res = res + d\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) max = num\n            sum += num % 10\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = sum.toString.chars().map(_.toChar).mkString(\"\")\n        val result = new Long(digits)\n        return result",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = List[Long](0l)\n        for (i <- lst) {\n            digits = digits.append(i % max)\n        }\n        return sum + max * digits.reduce((a, b) -> a * b)",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = List[Long](0l)\n        for (i <- lst) {\n            digits = append(digits, i % 10l)\n        }\n        return sum + max * 9l + sum(digits)",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong.toString.chars().map(_.toChar).mkString(\"\")\n        return sum + digits",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum = sum + num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) max = lst[i]\n            sum += lst[i]\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.size) {\n            var num = lst.apply(i)\n            if (num > max) {\n                max = num\n            }\n            sum += num.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n            sum += lst[i]\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i % 10\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong % 10\n        return sum + digits",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i.toLong % 10\n        }\n        return max + sum",
    "        val res = 0l\n        for (i <- lst) {\n            val p = i.toLong\n            val d = p.toString.split(\"l\").head.toLong\n            res = res + d\n        }\n        return res",
    "        val res = 0l\n        for (i <- lst) {\n            val n = i.toLong\n            if (n % 2 == 0) {\n                res += n / 2\n            } else {\n                res += n\n            }\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum = sum + num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) max = num\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i\n        }\n        return sum",
    "        val max = 0l\n        val sum = 0l\n        for (i <- lst) {\n            val n = i.toLong\n            if (n > max) max = n\n            sum += n\n        }\n        val res = max * 10 + sum\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i].toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        val res = 0l\n        for (i <- lst) {\n            val p = i.toLong\n            val d = p.toString.split(\"l\").head.toLong\n            res += d\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += _.toInt(i)\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var n = lst[i]\n            if (n > max) {\n                max = n\n            }\n            sum += n\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong.toString.chars().map(_.toChar).mkString(\"\")\n        return sum + digits",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i.toLong\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a > b ? a : b)\n        val sum = max.toLong\n        for (i <- lst.iterator()) {\n            sum = sum + i.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += _.toInt(i)\n        }\n        return max",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.toLong > b.toLong ? a : b)\n        val sum = max.toLong % 10\n        val digits = max.toLong / 10\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i % 10\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = String(sum).split(\"l\").map(Long::parseLong).toList\n        var maxDigits = digits.max()\n        var sumDigits = digits.map(d -> d * (maxDigits - d + 1)).sum()\n        return maxDigits * (maxDigits - 1l) / 2l + sumDigits",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n        }\n        for (i <- 0 until lst.length) {\n            sum += lst[i] * Math.pow(10, lst.length - i - 1)\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum = sum + num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = lst.map(d -> d.toLong).reduce((a, b) -> a + b)\n        val result = sum + digits\n        return result",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) max = lst[i]\n            sum += lst[i].toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) max = lst[i]\n            sum += (lst[i] % 10)\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for(var i = 0; i < lst.length; i++) {\n            var num = lst[i]\n            if(num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum = sum + i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = List[Long](0l)\n        for (i <- lst) {\n            digits = append(digits, i % max)\n        }\n        return sum + max * sum / 10l",
    "        var max = 0l\n        var sum = 0l\n        for(var i = 0; i < lst.length; i++) {\n            var num = lst[i]\n            if(num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum = sum + num\n        }\n        return max",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) max = num\n            sum += num\n        }\n        return max * sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = sum.toString().split(\"\")\n        val result = digits.reduce((a, b) -> a + b)\n        return result",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for(var i = 0; i < lst.length; i++) {\n            var num = lst[i]\n            if(num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max + sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var n = lst[i]\n            if (n > max) max = n\n            sum += n\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var n = i.toLong\n            var p = _.isPrime(n)\n            if (p) {\n                max = n\n                sum = sum + n\n            }\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n        }\n        for (i <- 0 until lst.length) {\n            sum += (lst[i] % 10)\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.size) {\n            if (lst.apply(i) > max) {\n                max = lst.apply(i)\n            }\n            sum += (lst.apply(i) * (i + 1))\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            var digits = num.toString.split(\"l\").toList\n            var prime = true\n            for (j <- digits) {\n                if (j.toLong % 2 == 0) {\n                    prime = false\n                    break\n                }\n            }\n            if (prime && num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong % 10\n        val result = sum + digits\n        return result",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i.toLong\n        }\n        return sum",
    "        val res = 0l\n        for (i <- lst) {\n            val n = i.toLong\n            if (n % 2 == 0) {\n                continue\n            }\n            val p = n.div(2)\n            if (p.isPrime()) {\n                res += p.toInt\n            }\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var n = lst[i]\n            if (n > max) {\n                max = n\n            }\n            sum += n\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i % 10\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) max = lst[i]\n            sum += lst[i]\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i % 10\n        }\n        return max * 10 + sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n        }\n        for (i <- 0 until lst.length) {\n            sum += (lst[i] * Math.pow(10, lst.length - i - 1))\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return sum",
    "        val res = 0l\n        for (i <- lst) {\n            val n = i.toLong\n            if (n > 0) {\n                val p = n.toInt\n                if (p > 0) {\n                    val d = p.toInt\n                    if (d > 0) {\n                        res += d\n                    }\n                }\n            }\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) max = lst[i]\n            sum += _.toInt(lst[i])\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = toDigits(sum)\n        return max * digits",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for(var i = 0; i < lst.length; i++) {\n            var num = lst[i]\n            if(num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i % 10\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong.toString.chars().map(c -> c - '0').toList\n        return sum + digits.sum()",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num.toLong\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong.toString.chars().map(c -> c - '0').toList\n        return sum + digits.sum()",
    "        val res = 0l\n        for (i <- lst) {\n            val p = i.toLong\n            val d = p.toString.split(\"l\").head.toLong\n            res += d\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i].toLong\n            if (num > max) max = num\n            sum = sum + num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var n = lst[i]\n            if (n > max) {\n                max = n\n            }\n            sum += n\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += _.toInt(i)\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max * sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = lst.reduce((a, b) -> a + b)\n        return sum / max",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n        }\n        for (i <- 0 until lst.length) {\n            sum += (lst[i] % 10)\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = lst.map(i -> i.toLong % 10).reduce((a, b) -> a + b)\n        val result = sum + digits\n        return result",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var n = lst[i]\n            if (n > max) {\n                max = n\n            }\n            sum += n\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i % 10\n        }\n        return sum",
    "        val res = 0l\n        for (i <- lst) {\n            val n = i.toLong\n            if (n % 2 == 0) {\n                res += n / 2\n            } else {\n                res += n\n            }\n        }\n        return res",
    "        val res = 0l\n        for (i <- 0 until lst.length) {\n            val num = lst[i]\n            if (num > 0) {\n                val numDigits = num.toString.length\n                val numDigits2 = numDigits / 2\n                val numDigits3 = numDigits / 3\n                val numDigits4 = numDigits / 4\n                val numDigits5 = numDigits / 5\n                val numDigits6 = numDigits / 6\n                val numDigits7 = numDigits / 7\n                val numDigits8 = numDigits / 8\n                val numDigits9 = numDigits / 9\n                val numDigits10 = numDigits / 10\n                val numDigits11 = numDigits / 11\n                val numDigits12 = numDigits / 12\n                val numDigits13 = numDigits / 13\n                val numDigits14 = numDigits / 14\n                val numDigits15 = numDigits / 15\n                val numDigits16 = numDigits / 16\n                val numDigits17 = numDigits / 17\n                val numDigits18 = numDigits / 18\n                val numDigits19 = numDigits / 19\n                val numDigits20 = numDigits / 20\n                val numDigits21 = numDigits / 21\n                val numDigits22 = numDigits / 22\n                val numDigits23 = numDigits / 23\n                val numDigits24 = numDigits / 24\n                val numDigits25 = numDigits / 25\n                val numDigits26 = numDigits / 26\n                val numDigits27 = numDigits / 27\n                val numDigits28 = numDigits / 28\n                val numDigits29 = numDigits / 29\n                val numDigits30 = numDigits / 30\n                val numDigits31 = numDigits / 31\n                val numDigits32 = numDigits / 32\n                val numDigits33 = numDigits / 33\n                val numDigits34 = numDigits / 34\n                val numDigits35 = numDigits / 35\n                val numDigits36 = numDigits / 36\n                val numDig",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong.toString().replaceAll(\"\\\\d+\", \"\")\n        val result = sum + digits.length\n        return result",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            if (num % 2 == 0) {\n                sum += num\n            }\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max + sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong % 10\n        return sum + digits",
    "        var max = 0l\n        var sum = 0l\n        for(var i = 0; i < lst.length; i++) {\n            var n = lst[i]\n            if(n > max) max = n\n            sum += n\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        var digits = \"\"\n        for (i <- sum.toLong) {\n            digits += i.toString\n        }\n        return max * max",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        for (i <- 0 until max) {\n            sum += i.toLong\n        }\n        return sum",
    "        val res = 0l\n        for (i <- 0 until lst.length) {\n            val n = lst[i]\n            if (n % 2 == 0) {\n                val n2 = n / 2\n                res = res + n2\n            } else {\n                val n2 = n * 3 + 1\n                res = res + n2\n            }\n        }\n        return res",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i % 10\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            var digits = num.toString.split(\"l\")\n            var digits_len = digits.length\n            var digit_sum = 0l\n            for (j <- 0l to digits_len - 1) {\n                digit_sum += digits[j].toLong\n            }\n            if (digit_sum > max) {\n                max = digit_sum\n            }\n            sum += digit_sum\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) max = num\n            sum += num % 10\n        }\n        return max * sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) max = num\n            sum += num\n        }\n        return sum",
    "        val primes = Primes.primes(lst.length)\n        val primes_set = Set(primes)\n        val primes_map = Map(primes, List(0l))\n        val primes_map_set = Set(primes_map)\n        val primes_map_set_set = Set(primes_map_set)\n        val primes_map_set_set_set = Set(primes_map_set_set)\n        val primes_map_set_set_set_set = Set(primes_map_set_set_set)\n        val primes_map_set_set_set_set_set = Set(primes_map_set_set_set_set)\n        val primes_map_set_set_set_set_set_set = Set(primes_map_set_set_set_set_set)\n        val primes_map_set_set_set_set_set_set_set = Set(primes_map_set_set_set_set_set_set)\n        val primes_map_set_set_set_set_set_set_set_set = Set(primes_map_set_set_set_set_set_set_set)\n        val primes_map_set_set_set_set_set_set_set_set_set = Set(primes_map_set_set_set_set_set_set_set_set)\n        val primes_map_set_set_set_set_set_set_set_set_set_set = Set(primes_map_set_set_set_set_set_set_set_set_set)\n        val primes_map_set_set_set_set_set_set_set_set_set_set_set = Set(primes_map_set_set_set_set_set_set_set_set_set_set)\n        val primes_map_set_set_set_set_set_set_set_set_set_set_set_set = Set(primes_map_set_set_set_set_set_set_set_set_set_set",
    "        val res = 0l\n        for (i <- 0 until lst.length) {\n            val curr = lst[i]\n            if (curr % 2 == 0) {\n                res += curr / 2\n            } else {\n                res += curr\n            }\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.toLong > b.toLong ? a : b)\n        val sum = max.toLong % 10\n        max.toLong / 10\n        sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong.toString\n        val result = sum + digits.length\n        return result",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n        }\n        for (i <- 0 until lst.length) {\n            sum += (lst[i] * Math.pow(10, lst.length - i - 1))\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) {\n                max = num\n            }\n            sum += num % 10\n        }\n        return max + sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            if (num > max) max = num\n            sum += num\n        }\n        return sum",
    "        val res = 0l\n        for (i <- lst) {\n            val p = i.toLong\n            val d = p.toString.split(\"l\").head.toLong\n            res = res + d\n        }\n        return res",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            var num = i.toLong\n            var s = 0l\n            while (num > 0l) {\n                s = s + (num % 10l)\n                num = num / 10l\n            }\n            if (s > max) max = s\n        }\n        return max",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) {\n                max = num\n            }\n            sum += num\n        }\n        return sum",
    "        var max = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- lst) {\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for(i <- lst) {\n            var n = i.toLong\n            if(n > max) max = n\n            sum += n\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = max.toLong.toString.chars().map(c -> c - '0').toList\n        val result = sum + sum.toLong.toString.chars().map(c -> c - '0').toList.sum()\n        return result",
    "        val max = lst.reduce((a, b) -> a.toLong > b.toLong ? a : b)\n        val sum = max.toLong % 10\n        max.toLong / 10\n        sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n        }\n        for (i <- 0 until lst.length) {\n            sum += (lst[i] % 10)\n        }\n        return sum",
    "        val primes = primes(lst.length)\n        val max = primes.max\n        val sum = 0l\n        for (i <- 0 until lst.length) {\n            val prime = primes(i)\n            if (prime.equals(max)) {\n                sum += lst(i).toLong\n            }\n        }\n        return sum",
    "        val primes = primes(lst.length)\n        val max = primes.max\n        val sum = 0l\n        for (i <- 0 until primes.size) {\n            val prime = primes(i)\n            if (prime.toLong > max) {\n                max = prime.toLong\n            }\n            sum += prime.toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (lst[i] > max) {\n                max = lst[i]\n            }\n            sum += lst[i].toLong\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var n = lst[i]\n            if (n > max) max = n\n            sum = sum + n\n        }\n        return sum",
    "        var max = 0l\n        var sum = 0l\n        for (i <- lst) {\n            if (i > max) max = i\n            sum += i\n        }\n        return sum",
    "        val max = lst.reduce((a, b) -> a.max(b))\n        val sum = max.toLong\n        val digits = lst.map(x -> x.toLong % 10).reduce((a, b) -> a + b)\n        return sum + digits",
    "        var max = 0l\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n            var num = lst[i]\n            if (num > max) max = num\n            sum += num\n        }\n        return sum"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}