{
  "name": "HumanEval_25_factorize",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp3zew5at.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0) {\n                factors.add(divisor)\n                n /= divisor\n            }\n            divisor += 1\n        }\n        factors.add(n)\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer\n    // >>> primeFactorization(8l)\n    // 2l\n    // >>> primeFactorization(25l)\n    // 5l\n    // >>> primeFactorization(70l)\n    // 7l\n    // >>> primeFactorization(100l)\n    // 11l\n    def primeFactorization(n : Long) : Long = {\n        val factors = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.size) {\n            sum *= factors.apply(i)\n        }\n        return sum\n    }\n\n    // Return the sum of all divisors of given integer\n    // >>> divisorSum(8l)\n    // 2l\n    // >>> divisorSum(25l)\n    // 5l\n    // >>> divisorSum(70l)\n    // 7l\n    // >>> divisorSum(100l)\n    // 11l\n    def divisorSum(n : Long) : Long = {\n        val factors = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.size) {\n            sum *= factors.apply(i)\n        }\n        return sum - n\n    }\n\n    // Return the sum of all divisors of given integer\n    // >>> divisorSum(8l)\n    // 2l\n    // >>> divisorSum(25l)\n    // 5l\n    // >>> divisorSum(70l)\n    // 7l\n    // >>> divisorSum(100l)\n    // 11l\n    def divisorSum2(n : Long) : Long = {\n        val factors = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.size\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb3s97d4s.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb3s97d4s.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb3s97d4s.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb3s97d4s.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            divisor += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean divisor.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val divisorFactors = divisor.toLong.toList\n            for (j <- 0 until divisorFactors.size) {\n                val divisorFactor = divisorFactors.apply(j)\n                if (divisorFactor.toLong == n) {\n                    factors = factors.append(divisorFactor)\n                }\n            }\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbmkwuugu.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbmkwuugu.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    factors = factors.append(divisorFactor)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpes22a5qk.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes22a5qk.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val primeFactors = List[Long]()\n        val factorsList = List[Long]()\n        val primeFactorsList = List[Long]()\n        val factorsCount = 0\n        val primeFactorsCount = 0\n        val factorsMax = 0\n        val primeFactorsMax = 0\n        val i = 0\n        val j = 0\n        val k = 0\n        val l = 0\n        val m = 0\n        val n = 0\n        val p = 0\n        val q = 0\n        val r = 0\n        val s = 0\n        val t = 0\n        val u = 0\n        val v = 0\n        val w = 0\n        val x = 0\n        val y = 0\n        val z = 0\n        val factorsListSize = 0\n        val primeFactorsListSize = 0\n        val factorsListMax = 0\n        val primeFactorsListMax = 0\n        val factorsCountMax = 0\n        val primeFactorsCountMax = 0\n        val factorsMaxSize = 0\n        val primeFactorsMaxSize = 0\n        val factorsMaxSizeMax = 0\n        val primeFactorsMaxSizeMax = 0\n        val factorsCountMaxSize = 0\n        val primeFactorsCountMaxSize = 0\n        val factorsCountMaxSizeMax = 0\n        val primeFactorsCountMaxSizeMax = 0\n        val factorsMaxSizeMaxSize = 0\n        val primeFactorsMaxSizeMaxSize = 0\n        val factorsMaxSizeMaxSizeMax = 0\n        val primeFactorsMaxSizeMaxSizeMax = 0\n        val factorsCountMaxSizeMaxSize = 0\n        val primeFactorsCountMaxSizeMaxSize = 0\n        val factorsCountMaxSizeMaxSizeMax = 0\n        val primeFactorsCountMaxSizeMaxSizeMax = 0\n        val factorsMaxSizeMaxSizeMaxSize = 0\n        val primeFactorsMaxSizeMaxSizeMaxSize = 0\n        val factorsMaxSizeMaxSizeMaxSizeMax = 0\n        val primeFactorsMaxSizeMaxSizeMaxSizeMax = 0\n        val factorsCountMaxSizeMaxSizeMaxSize = 0\n        val primeFactorsCountMaxSizeMaxSizeMaxSize = 0\n        val factorsCountMaxSizeMaxSizeMaxSizeMax = 0\n        val primeFactorsCount\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaxrv6x3v.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaxrv6x3v.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                n /= divisor\n                factors.add(divisor)\n            }\n            divisor++\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                n /= divisor\n                factors.add(divisor)\n            }\n            divisor++\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfo5s8ruc.scala:21:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfo5s8ruc.scala:43:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfo5s8ruc.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfo5s8ruc.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfo5s8ruc.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfo5s8ruc.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfo5s8ruc.scala:36:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors.append(i)\n                factors.append(n / i)\n                n = n / i\n            } else {\n                i = i + 1\n            }\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzuzc7v2q.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzuzc7v2q.scala:20:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n = n / i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpzuzc7v2q.scala:22:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                val factor = i\n                val count = 1l\n                while (n % i == 0) {\n                    count += 1l\n                    n /= i\n                }\n                factors = factors.append(factor).append(count)\n            }\n            i += 1\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgtqfoo3q.scala:21:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    count += \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value += is not a member of Long - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgtqfoo3q.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgtqfoo3q.scala:24:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                factors = factors.append(factor).append(count)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgtqfoo3q.scala:26:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgtqfoo3q.scala:29:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp3zew5at.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = n.toLong\n        while (factorization > 1l) {\n            val factor = factorization % 2l\n            if (factor == 0l) {\n                factors = factors.append(2l)\n            } else {\n                factors = factors.append(factorization)\n            }\n            factorization = factorization / 2l\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = n.toLong\n        while (factorization > 1l) {\n            val factor = factorization % 2l\n            if (factor == 0l) {\n                factors = factors.append(2l)\n            } else {\n                factors = factors.append(factorization)\n            }\n            factorization = factorization / 2l\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyoxi2s53.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyoxi2s53.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(\u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyoxi2s53.scala:21:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                factors = factors.append(factorization)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpyoxi2s53.scala:23:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            factorization = factorization / \u001b[31m2l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val factorization\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyoxi2s53.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = factors.append(\u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyoxi2s53.scala:45:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                factors = factors.append(factorization)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpyoxi2s53.scala:47:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            factorization = factorization / \u001b[31m2l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val nFactors = mutable.List[Long]()\n        val nFactors2 = mutable.List[Long]()\n        val nFactors3 = mutable.List[Long]()\n        val nFactors4 = mutable.List[Long]()\n        val nFactors5 = mutable.List[Long]()\n        val nFactors6 = mutable.List[Long]()\n        val nFactors7 = mutable.List[Long]()\n        val nFactors8 = mutable.List[Long]()\n        val nFactors9 = mutable.List[Long]()\n        val nFactors10 = mutable.List[Long]()\n        val nFactors11 = mutable.List[Long]()\n        val nFactors12 = mutable.List[Long]()\n        val nFactors13 = mutable.List[Long]()\n        val nFactors14 = mutable.List[Long]()\n        val nFactors15 = mutable.List[Long]()\n        val nFactors16 = mutable.List[Long]()\n        val nFactors17 = mutable.List[Long]()\n        val nFactors18 = mutable.List[Long]()\n        val nFactors19 = mutable.List[Long]()\n        val nFactors20 = mutable.List[Long]()\n        val nFactors21 = mutable.List[Long]()\n        val nFactors22 = mutable.List[Long]()\n        val nFactors23 = mutable.List[Long]()\n        val nFactors24 = mutable.List[Long]()\n        val nFactors25 = mutable.List[Long]()\n        val nFactors26 = mutable.List[Long]()\n        val nFactors27 = mutable.List[Long]()\n        val nFactors28 = mutable.List[Long]()\n        val nFactors29 = mutable.List[Long]()\n        val nFactors30 = mutable.List[Long]()\n        val nFactors31 = mutable.List[Long]()\n        val nFact\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1cdj09d5.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:15:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors2\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors3\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors4\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanati",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactorsWithRemainder(n : Long) : List[T\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1u5t63v9.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1u5t63v9.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1u5t63v9.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1u5t63v9.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1u5t63v9.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1u5t63v9.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1u5t63v9.scala:57:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactorsWithRemainder\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mT\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Not found: type T\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmp1u5t63v9.scala:57:8 --------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp3zew5at.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factor(25)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factor(25)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get(i))\n        }\n        return\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2jq8okj.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2jq8okj.scala:32:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2jq8okj.scala:50:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw2jq8okj.scala:55:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpw2jq8okj.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactor\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef factor(n: Long): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 31 and\n\u001b[31m   |\u001b[0mdef factor(n: Long): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 49\n\u001b[31m   |\u001b[0mhave t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val d = 2l\n        while (n > 1l) {\n            while (n % d == 0l) {\n                factors.add(d)\n                n /= d\n            }\n            d = d + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ws0ap3n.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_ws0ap3n.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= d\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_ws0ap3n.scala:21:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            d = d + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisor = 2l\n        while divisor * divisor <= n {\n            if n % divisor == 0 {\n                factors.add(divisor)\n                n /= divisor\n            } else {\n                divisor += 1\n            }\n        }\n        if n > 1 {\n            factors.add(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisor = 2l\n        while divisor * divisor <= n {\n            if n % divisor == 0 {\n                factors.add(divisor)\n                n /= divisor\n            } else {\n                divisor += 1\n            }\n        }\n        if n > 1 {\n            factors.add(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.to\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyp98t4sh.scala:20:14 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            } \u001b[33melse\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              'then' expected, but 'else' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyp98t4sh.scala:24:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m n > \u001b[31m1\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        'do' expected, but 'if' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyp98t4sh.scala:46:14 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m            } \u001b[33melse\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              'then' expected, but 'else' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyp98t4sh.scala:50:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mif\u001b[0m n > \u001b[31m1\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        'do' expected, but 'if' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyp98t4sh.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyp98t4sh.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpyp98t4sh.scala:16:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mwhile\u001b[0m divisor * divisor <= n {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mparameter\u001b[0m \u001b[35mn\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpyp98t4sh.scala:17:30 -----------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors) {\n            if (n % i == 0) {\n                val factor = i\n                val count = divisors.div(i)\n                factors = factors.append(factor).append(count)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors) {\n            if (n % i == 0) {\n                val factor = i\n                val count = divisors.div(i)\n                factors = factors.append(factor).append(count)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_3sxy24f.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_3sxy24f.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_3sxy24f.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                factors = factors.append(factor).append(count)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_3sxy24f.scala:37:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_3sxy24f.scala:42:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                factors = factors.append(factor).append(count)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_3sxy24f.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_3sxy24f.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val nFactors = mutable.List[Long]()\n        val nFactors2 = mutable.List[Long]()\n        val nFactors3 = mutable.List[Long]()\n        val nFactors4 = mutable.List[Long]()\n        val nFactors5 = mutable.List[Long]()\n        val nFactors6 = mutable.List[Long]()\n        val nFactors7 = mutable.List[Long]()\n        val nFactors8 = mutable.List[Long]()\n        val nFactors9 = mutable.List[Long]()\n        val nFactors10 = mutable.List[Long]()\n        val nFactors11 = mutable.List[Long]()\n        val nFactors12 = mutable.List[Long]()\n        val nFactors13 = mutable.List[Long]()\n        val nFactors14 = mutable.List[Long]()\n        val nFactors15 = mutable.List[Long]()\n        val nFactors16 = mutable.List[Long]()\n        val nFactors17 = mutable.List[Long]()\n        val nFactors18 = mutable.List[Long]()\n        val nFactors19 = mutable.List[Long]()\n        val nFactors20 = mutable.List[Long]()\n        val nFactors21 = mutable.List[Long]()\n        val nFactors22 = mutable.List[Long]()\n        val nFactors23 = mutable.List[Long]()\n        val nFactors24 = mutable.List[Long]()\n        val nFactors25 = mutable.List[Long]()\n        val nFactors26 = mutable.List[Long]()\n        val nFactors27 = mutable.List[Long]()\n        val nFactors28 = mutable.List[Long]()\n        val nFactors29 = mutable.List[Long]()\n        val nFactors30 = mutable.List[Long]()\n        val nFactors31 = mutable.List[Long]()\n        val nFact\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1cdj09d5.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:15:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors2\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors3\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors4\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanati",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nfactors = n.toLong\n        for (i <- 0 until nfactors) {\n            val factor = nfactors.divide(i + 1)\n            if (factor.isZero) break\n            factors = factors.append(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize2((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize2((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize2(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nfactors = n.toLong\n        for (i <- nfactors.toLong.max to nfactors.toLong.min) {\n            val factor = nfactors.divide(i)\n            if (factor.isZero) break\n            factors = factors.append(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize3((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize3((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize3((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprkffod9g.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprkffod9g.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nfactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nfactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkffod9g.scala:17:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = nfactors.divide(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value divide is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprkffod9g.scala:18:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (factor.isZero) break\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkffod9g.scala:19:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkffod9g.scala:36:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- nfactors.toLong.max to nfactors.toLong.min) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value to is not a member of Long => Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprkffod9g.scala:55:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return the number of divisors of given integer.\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    // 7\n    def divisors(n : Long) : Long = {\n        var i = 2l\n        var count = 1l\n        while (i <= n) {\n            if (n % i == 0) {\n                count = count + 1l\n            }\n            i = i + 1l\n        }\n        return count\n    }\n\n    // Return the number of divisors of given integer.\n    // >>> divisors2(8l)\n    // 2\n    // >>> divisors2(25l)\n    // 5\n    // >>> divisors2(70l)\n    // 7\n    def divisors2(n : Long) : Long = {\n        var i = 2l\n        var count = 1l\n        while (i <= n) {\n            if (n % i == 0) {\n                count = count + 1l\n            }\n            i = i + 1l\n        }\n        return count\n    }\n\n    // Return the number of divisors of given integer.\n    // >>> divisors3(8l)\n    // 2\n    // >>> divisors3(25l)\n    // 5\n    // >>> divisors3(70l)\n    // 7\n    def divisors3(n : Long) : Long = {\n        var i = 2l\n        var count = 1l\n        while (i <= n) {\n            if (n % i == 0) {\n                count = count + 1l\n            }\n            i = i + 1l\n        }\n        \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphmxfs385.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphmxfs385.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphmxfs385.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphmxfs385.scala:77:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m        \u001b[33mwhile\u001b[0m (i <= n) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m78 |\u001b[0m            \u001b[33mif\u001b[0m (n % i == \u001b[31m0\u001b[0m) {\n\u001b[31m79 |\u001b[0m                count = count + \u001b[31m1l\u001b[0m\n\u001b[31m80 |\u001b[0m            }\n\u001b[31m81 |\u001b[0m            i = i + \u001b[31m1l\u001b[0m\n\u001b[31m82 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm7620wae.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial.divisors(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            factors.append(factor)\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncmyy4x_.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpncmyy4x_.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial.divisors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val nfactors = scala.math.factorial(n)\n        for (i <- 0 until nfactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors.add(factor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val nfactors = scala.math.factorial(n)\n        for (i <- 0 until nfactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors.add(factor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpui0ojrix.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui0ojrix.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui0ojrix.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnfactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui0ojrix.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpui0ojrix.scala:35:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui0ojrix.scala:36:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnfactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpui0ojrix.scala:38:36 --------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        if (n == 1) return List(1l)\n        if (n == 2) return List(2l)\n        if (n == 3) return List(3l)\n        if (n == 4) return List(2l, 2l)\n        if (n == 5) return List(5l)\n        if (n == 6) return List(2l, 3l)\n        if (n == 7) return List(7l)\n        if (n == 8) return List(2l, 2l, 2l)\n        if (n == 9) return List(3l, 3l)\n        if (n == 10) return List(5l, 2l)\n        if (n == 11) return List(11l)\n        if (n == 12) return List(2l, 2l, 2l, 2l)\n        if (n == 13) return List(13l)\n        if (n == 14) return List(7l, 2l)\n        if (n == 15) return List(15l)\n        if (n == 16) return List(2l, 2l, 2l, 2l, 2l)\n        if (n == 17) return List(17l)\n        if (n == 18) return List(3l, 3l, 2l)\n        if (n == 19) return List(19l)\n        if (n == 20) return List(2l, 2l, 2l, 2l, 2l)\n        if (n == 21) return List(3l, 7l)\n        if (n == 22) return List(11l, 2l)\n        if (n == 23) return List(23l)\n        if (n == 24) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 25) return List(5l, 5l)\n        if (n == 26) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 27) return List(3l, 3l, 3l)\n        if (n == 28) return List(2l, 2l, 2l,\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292919,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplk79wc_3.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplk79wc_3.scala:42:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m28\u001b[0m) \u001b[33mreturn\u001b[0m List(\u001b[31m2l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m2l\u001b[0m,\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbuc_akdp.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbuc_akdp.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbuc_akdp.scala:21:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i = i + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) factors = factors.append(n)\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbu5bgzs_.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbu5bgzs_.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbu5bgzs_.scala:23:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (n > \u001b[31m1\u001b[0m) factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorsLarger((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsLarger((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx93pep67.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx93pep67.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx93pep67.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx93pep67.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx93pep67.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx93pep67.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx93pep67.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // Input number should be equal to the product of all factors\n    // >>> sumOfPrimeFactors(8l)\n    // 2l\n    // >>> sumOfPrimeFactors(25l)\n    // 5l\n    // >>> sumOfPrimeFactors(70l)\n    // 23l\n    def sumOfPrimeFactors(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.length) {\n            sum *= factors(i)\n        }\n        return sum\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // Input number should be equal to the product of all factors\n    // >>> sumOfPrimeFactors(8l)\n    // 2l\n    // >>> sumOfPrimeFactors(25l)\n    // 5l\n    // >>> sumOfPrimeFactors(70l)\n    // 23l\n    def sumOfPrimeFactors2(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.length) {\n            sum *= factors(i)\n        }\n        return sum\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // Input number should be equal to the product of all factors\n    // >>> sumOfPrimeFactors(8l)\n    // 2l\n    // >>> sumOfPrimeFactors(25l)\n    // 5l\n    // >>> sumOfPrimeFactors(70l)\n    // 23l\n    def sumOfPrimeFactors3(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum =\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292932,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp17vv769y.scala:73:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msum\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17vv769y.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp17vv769y.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp17vv769y.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp17vv769y.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val m = n\n        while (m > 1) {\n            val d = m.div(2)\n            if (d.isDefined()) {\n                factors.add(d.get())\n                m = m.sub(d.get() * 2)\n            } else {\n                break\n            }\n        }\n        factors.add(m)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val m = n\n        while (m > 1) {\n            val d = m.div(2)\n            if (d.isDefined()) {\n                factors.add(d.get())\n                m = m.sub(d.get() * 2)\n            } else {\n                break\n            }\n        }\n        factors.add(m)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.to\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpww_8exgp.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpww_8exgp.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpww_8exgp.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = m.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpww_8exgp.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                m = m.sub(d.get() * \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value sub is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpww_8exgp.scala:22:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpww_8exgp.scala:39:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpww_8exgp.scala:42:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = m.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzk7tv00_.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzk7tv00_.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzk7tv00_.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp3zew5at.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors.apply(i)\n            val factorCount = n.divide(primeFactor).toLong\n            factors.add(factorCount)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            if (n.mod(i).equals(0l)) {\n                primeFactors.add(i)\n                n = n.divide(i)\n            } else {\n                i = i + 1\n            }\n        }\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors.apply(i)\n            val factorCount = n.divide(primeFactor).toLong\n            factors.add(factorCount)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkvsvmlp3.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkvsvmlp3.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpkvsvmlp3.scala:15:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = primeFactors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimeFactors\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkvsvmlp3.scala:18:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactorCount\u001b[0m = n.divide(primeFactor).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value divide is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkvsvmlp3.scala:34:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkvsvmlp3.scala:35:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorsLarger((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsLarger((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpod05s63z.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpod05s63z.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpod05s63z.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpod05s63z.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpod05s63z.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpod05s63z.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpod05s63z.scala:49:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpod05s63z.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    ass",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292933,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvvz2kmev.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvvz2kmev.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val nfactors = scala.math.factorial(n)\n        for (i <- 0 until nfactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * nfactors % n == 0) {\n                factors.add(factor)\n                factors.add(nfactors / factor)\n            }\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm29ovsvw.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm29ovsvw.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnfactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm29ovsvw.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors2(n : Long) : List[Long] = {\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5qu36cr3.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5qu36cr3.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5qu36cr3.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5qu36cr3.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5qu36cr3.scala:57:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactors2\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Unit\n\u001b[31m   |\u001b[0m                                               Required: List[Long]\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val num = n\n        while (num > 1) {\n            val divisor = num.div(2)\n            if (divisor.isDefined) {\n                factors.add(divisor.get())\n                num = num.sub(divisor.get()).div(2)\n            } else {\n                break\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val num = n\n        while (num > 1) {\n            val divisor = num.div(2)\n            if (divisor.isDefined) {\n                factors.add(divisor.get())\n                num = num.sub(divisor.get()).div(2)\n            } else {\n                break\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnhiu7gz5.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnhiu7gz5.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnhiu7gz5.scala:17:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdivisor\u001b[0m = num.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnhiu7gz5.scala:20:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                num = num.sub(divisor.get()).div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value sub is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnhiu7gz5.scala:22:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnhiu7gz5.scala:38:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnhiu7gz5.scala:41:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mval\u001b[0m \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer\n    // >>> primeFactors(8l)\n    // 2l.toLong\n    // >>> primeFactors(25l)\n    // 5l.toLong\n    // >>> primeFactors(70l)\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        var sum = 0l\n        for (i <- factors) {\n            sum += i\n        }\n        return sum\n    }\n\n    // Return the sum of all prime factors of given integer\n    // >>> primeFactors(8l)\n    // 2l.toLong\n    // >>> primeFactors(25l)\n    // 5l.toLong\n    // >>> primeFactors(70l)\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors2(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        var sum = 0l\n        for\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp6q6uymit.scala:77:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m        \u001b[33mfor\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6q6uymit.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6q6uymit.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6q6uymit.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6q6uymit.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6q6uymit.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6q6uymit.scala:47:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n                i = i + 1\n            } else {\n                i = i + 1\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n                i = i + 1\n            } else {\n                i = i + 1\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3vmr_nqw.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3vmr_nqw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3vmr_nqw.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(n / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp3vmr_nqw.scala:20:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp3vmr_nqw.scala:22:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3vmr_nqw.scala:42:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3vmr_nqw.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = factors.append(n / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp3zew5at.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors(i)\n            val factorCount = n / primeFactor\n            factors.append(primeFactor)\n            factors.append(factorCount)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n        val i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n                primeFactors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        if (n > 1) {\n            primeFactors.append(n)\n        }\n        factors.appendAll(primeFactors)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.to\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpztuhe3tk.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpztuhe3tk.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpztuhe3tk.scala:15:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = primeFactors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimeFactors\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpztuhe3tk.scala:35:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpztuhe3tk.scala:36:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpztuhe3tk.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n        }\n        factors = factors.reverse()\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n        }\n        factors = factors.reverse()\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyvio2m9.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqyvio2m9.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqyvio2m9.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqyvio2m9.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqyvio2m9.scala:22:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        factors = factors.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqyvio2m9.scala:37:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqyvio2m9.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt1cm7m8e.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt1cm7m8e.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt1cm7m8e.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n            }\n            i = i + 1l\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n            }\n            i = i + 1l\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFact\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpbmms3g_u.scala:57:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFact\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbmms3g_u.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbmms3g_u.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbmms3g_u.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(n / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbmms3g_u.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbmms3g_u.scala:41:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = factors.append(n / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbmms3g_u.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4aa94p14.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4aa94p14.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4aa94p14.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n            }\n            i = i + 1l\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // 2l.toLong\n    // >>> primeFactors((25l))\n    // 5l.toLong\n    // >>> primeFactors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n            }\n            i = i + 1l\n        }\n        return factors.reduce(_.sum)\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors2((8l))\n    // 2l.toLong\n    // >>> primeFactors2((25l))\n    // 5l.toLong\n    // >>> primeFactors2((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors2(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n            }\n            i = i + 1l\n        }\n        return factors.reduce(_.sum)\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // Input number should be equal to the product\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7dvybkp8.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7dvybkp8.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7dvybkp8.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(n / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7dvybkp8.scala:39:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7dvybkp8.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(n / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp7dvybkp8.scala:44:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m factors.reduce(_.sum)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7dvybkp8.scala:60:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer\n    // >>> primeFactorsSum(2l)\n    // 2l\n    // >>> primeFactorsSum(6l)\n    // 6l\n    // >>> primeFactorsSum(8l)\n    // 2l\n    // >>> primeFactorsSum(25l)\n    // 5l\n    // >>> primeFactorsSum(70l)\n    // 7l\n    def primeFactorsSum(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n        for (i <- 0 until factors.length) {\n            sum = sum + factors[i]\n        }\n        return sum\n    }\n\n    // Return the product of all prime factors of given integer\n    // >>> primeFactorsProduct(2l)\n    // 2l\n    // >>> primeFactorsProduct(6l)\n    // 6l\n    // >>> primeFactorsProduct(8l)\n    // 2l\n    // >>> primeFactorsProduct(25l)\n    // 5l\n    // >>> primeFactorsProduct(70l)\n    // 7l\n    def primeFactorsProduct(n : Long) : Long = {\n        var factors = factorize(n)\n        var product = 1l\n        for (i <- 0 until factors.length) {\n            product = product * factors[i]\n        }\n        return product\n    }\n\n    // Return the sum of all divisors of given integer\n    // >>> divisorsSum(2l)\n    // 2l\n    // >>> divisorsSum(6l)\n    // 6l\n    // >>> divisorsSum(8l)\n    // 2l\n    // >>> divisorsSum(25l)\n    // 5l\n    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0nzp9br6.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nzp9br6.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0nzp9br6.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nzp9br6.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nzp9br6.scala:44:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m            sum = sum + factors[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nzp9br6.scala:64:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m            product = product * factors[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nzp9br6.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (divisor <- divisors) {\n            if (divisor == 1) continue\n            val divisorFactor = n / divisor\n            if (divisorFactor == 1) continue\n            factors = factors.append(divisorFactor)\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu65_eiv2.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = nFactors.div(i + 1)\n            if (factor.toLong == 1) {\n                break\n            }\n            factors.append(factor)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6s95j6hm.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6s95j6hm.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6s95j6hm.scala:17:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = nFactors.div(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6s95j6hm.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) factors = factors.append(n)\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292937,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpg95v3l3x.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpg95v3l3x.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpg95v3l3x.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (n > \u001b[31m1l\u001b[0m) factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // >>> prime_factors((8l))\n    // 2l\n    // >>> prime_factors((25l))\n    // 5l\n    // >>> prime_factors((70l))\n    // 2l + 5l + 7l\n    def prime_factors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors.foldLeft(0l)((x, y) => x + y)\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // >>> prime_factors_scala((8l))\n    // 2l\n    // >>> prime_factors_scala((25l))\n    // 5l\n    // >>> prime_factors_scala((70l))\n    // 2l + 5l + 7l\n    def prime_factors_scala(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors.foldLeft(0l)((x, y) => x + y\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_zewxpin.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_zewxpin.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_zewxpin.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_zewxpin.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_zewxpin.scala:41:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_zewxpin.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_zewxpin.scala:47:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_zewxpin.scala:64:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu56_mkk0.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:49:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu56_mkk0.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    ass",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = n.div(i.toLong)\n            if (factor.toLong == 1l) {\n                factors.add(factor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = n.div(i.toLong)\n            if (factor.toLong == 1l) {\n                factors.add(factor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpym75cg7a.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpym75cg7a.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpym75cg7a.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym75cg7a.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = n.div(i.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpym75cg7a.scala:35:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpym75cg7a.scala:37:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfrfsh93d.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfrfsh93d.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfrfsh93d.scala:21:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfrfsh93d.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm7620wae.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.add(i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors.add(n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // >>> primeFactorizationSum(2l)\n    // 2l\n    // >>> primeFactorizationSum(6l)\n    // 6l\n    // >>> primeFactorizationSum(8l)\n    // 2l\n    // >>> primeFactorizationSum(12l)\n    // 2l\n    // >>> primeFactorizationSum(18l)\n    // 6l\n    // >>> primeFactorizationSum(20l)\n    // 2l\n    // >>> primeFactorizationSum(24l)\n    // 2l\n    // >>> primeFactorizationSum(30l)\n    // 2l\n    // >>> primeFactorizationSum(36l)\n    // 6l\n    // >>> primeFactorizationSum(40l)\n    // 2l\n    // >>> primeFactorizationSum(48l)\n    // 6l\n    // >>> primeFactorizationSum(60l)\n    // 2l\n    // >>> primeFactorizationSum(120l)\n    // 2l\n    // >>> primeFactorizationSum(180l)\n    // 6l\n    // >>> primeFactorizationSum(240l)\n    // 2l\n    // >>> primeFactorizationSum(300l)\n    // 2l\n    // >>> primeFactorizationSum(360l)\n    // 6l\n    // >>> primeFactorizationSum(480l)\n    // 2l\n    // >>> primeFactorizationSum(600l)\n    // 2l\n    // >>> primeFactorizationSum(720l)\n    // 6l\n    // >>> primeFactorizationSum(900l)\n    // 2l\n    // >>> primeFactorizationSum(1200l)\n    // 2l\n    // >>> primeFactorizationSum(1800l)\n    // 6l\n    // >>> primeFactorizationSum(2400l)\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_kg8f_w.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_kg8f_w.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7_kg8f_w.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7_kg8f_w.scala:21:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_kg8f_w.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_kg8f_w.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_kg8f_w.scala:82:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    assert(factorize((\u001b[31m8l\u001b[0m)).equals((List[\u001b[35mLo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n / factor == n) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbekq_slb.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbekq_slb.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbekq_slb.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = ListBuffer[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n == n) {\n                factors.append(factor)\n            }\n        }\n        factors.sort(Long.compare)\n        return factors.toList\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = ListBuffer[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n == n) {\n                factors.append(factor)\n            }\n        }\n        factors.sort(Long.compare)\n        return factors.toList\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.to\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnydelw2w.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnydelw2w.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnydelw2w.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnydelw2w.scala:22:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        factors.sort(Long.compare)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of scala.collection.mutable.ListBuffer[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnydelw2w.scala:22:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        factors.sort(Long.compare)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue compare is not a member of object Long, but could be made available as an ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (divisor <- divisors) {\n            if (divisor == 1) continue\n            val divisorFactor = n / divisor\n            if (divisorFactor == 1) continue\n            factors = factors.append(divisorFactor)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0wlpctz0.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize2((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize2((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize2(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize3((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize3((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize3((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize3(n : Long) : List[Long] =\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpvxs_0ltd.scala:57:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactorize3\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] =\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvxs_0ltd.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvxs_0ltd.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvxs_0ltd.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvxs_0ltd.scala:40:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvxs_0ltd.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvxs_0ltd.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = new ArrayList[Long]\n        val divisor = 2l\n        while (n > 1) {\n            while (n % divisor == 0) {\n                divisors.add(divisor)\n                n /= divisor\n            }\n            divisor++\n        }\n        factors.addAll(divisors)\n        factors.sort(Comparator.naturalOrder())\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = new ArrayList[Long]\n        val divisor = 2l\n        while (n > 1) {\n            while (n % divisor == 0) {\n                divisors.add(divisor)\n                n /= divisor\n            }\n            divisor++\n        }\n        factors.addAll(divisors)\n        factors.sort(Comparator.reverseOrder())\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpekacpyf9.scala:22:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpekacpyf9.scala:47:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpekacpyf9.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpekacpyf9.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpekacpyf9.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpekacpyf9.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpekacpyf9.scala:39:26 ------------------------\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial.divisors(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            factors.append(factor)\n        }\n        factors.sort(Comparator.comparing(Long::toString))\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial.divisors(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor.toLong % 2 == 0) {\n                factors.append(factor)\n            }\n        }\n        factors.sort(Comparator.comparing(Long::toString))\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdlohgo_c.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdlohgo_c.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdlohgo_c.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial.divisors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdlohgo_c.scala:35:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdlohgo_c.scala:36:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial.divisors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdlohgo_c.scala:56:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E00",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (divisor <- divisors) {\n            val divisorInt = divisor.toInt\n            if (divisorInt > 1 && divisorInt < n) {\n                val divisorFactor = divisorInt\n                val divisorCount = scala.math.factorial(divisorInt - 1)\n                factors = factors.append(divisorFactor)\n                factors = factors.append(divisorCount)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (divisor <- divisors) {\n            val divisorInt = divisor.toInt\n            if (divisorInt > 1 && divisorInt < n) {\n                val divisorFactor = divisorInt\n                val divisorCount = scala.math.factorial(divisorInt - 1)\n                factors = factors.append(divisorFactor)\n                factors = factors.append(divisorCount)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpehk27kdh.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpehk27kdh.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpehk27kdh.scala:39:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpehk27kdh.scala:56:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpehk27kdh.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpehk27kdh.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(factorize((\u001b[31m8l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.apply(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factor(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.apply(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factor(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.apply\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw744mqgt.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw744mqgt.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw744mqgt.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw744mqgt.scala:32:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw744mqgt.scala:50:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw744mqgt.scala:66:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpw744mqgt.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactor\u001b[0m(\u001b[36mn\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor == 1) {\n                factors = factors.append(divisor)\n            } else {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor == 1) {\n                factors = factors.append(divisor)\n            } else {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphi4mewhg.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphi4mewhg.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphi4mewhg.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                factors = factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphi4mewhg.scala:22:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphi4mewhg.scala:39:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphi4mewhg.scala:44:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                factors = factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphi4mewhg.scala:46:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = new ArrayList[Long]\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                divisors.add(divisor)\n                n /= divisor\n            }\n            divisor++\n        }\n        for (i <- 0 until divisors.size) {\n            factors.add(divisors.get(i))\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // >>> prime_factors(8l)\n    // 2l\n    // >>> prime_factors(25l)\n    // 5l\n    // >>> prime_factors(70l)\n    // 2l + 5l + 7l\n    def prime_factors(n : Long) : Long = {\n        val factors = factorize(n)\n        val result = 0l\n        for (i <- 0 until factors.size) {\n            result += factors.get(i)\n        }\n        return result\n    }\n\n    // Return the sum of all divisors of given integer.\n    // >>> divisors(8l)\n    // 2l\n    // >>> divisors(25l)\n    // 5l\n    // >>> divisors(70l)\n    // 2l + 5l + 7l\n    def divisors(n : Long) : Long = {\n        val factors = factorize(n)\n        val result = 1l\n        for (i <- 0 until factors.size) {\n            result *= factors.get(i)\n        }\n        return result\n    }\n\n    // Return the sum of all divisors of given integer.\n    // >>> divisors_sum(8l)\n    // 2l\n    // >>> divisors_sum(25l)\n    // 5l\n    // >>> divisors_sum(70l)\n    // 2l + 5l + 7l\n    def divisors_sum(n : Long) : Long = {\n        val factors = factorize(n)\n        val result = 1l\n        for\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpvysmkj7h.scala:22:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpvysmkj7h.scala:72:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        \u001b[33mfor\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvysmkj7h.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvysmkj7h.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvysmkj7h.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvysmkj7h.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            result += factors.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors.get(i)\n            val factorCount = 1\n            for (j <- i + 1 until primeFactors.size) {\n                if (primeFactors.get(j) == primeFactor) {\n                    factorCount = factorCount + 1\n                }\n            }\n            factors.add(primeFactor * factorCount)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n        val primeNumbers = new ArrayList[Long]\n        val i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n                primeFactors.add(i)\n                n = n / i\n            } else {\n                i = i + 1\n            }\n        }\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors.get(i)\n            val primeNumber = primeNumbers.get(i)\n            val factorCount = 1\n            for (j <- i + 1 until primeFactors.size) {\n                if (primeFactors.get(j) == primeFactor) {\n                    factorCount = factorCount + 1\n                }\n            }\n            primeNumbers.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292949,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbgb3hriy.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbgb3hriy.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgb3hriy.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbgb3hriy.scala:15:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = primeFactors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimeFactors\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbgb3hriy.scala:21:32 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    factorCount = factorCount + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val factorCount\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgb3hriy.scala:39:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.reverse()\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.reverse()\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt34buhbp.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt34buhbp.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt34buhbp.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt34buhbp.scala:24:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        factors = factors.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt34buhbp.scala:42:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt34buhbp.scala:43:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt34buhbp.scala:48:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        factors = factors.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        if (n == 1) return List(1l)\n        if (n == 2) return List(2l)\n        if (n == 3) return List(3l)\n        if (n == 4) return List(2l, 2l)\n        if (n == 5) return List(5l)\n        if (n == 6) return List(2l, 3l)\n        if (n == 7) return List(7l)\n        if (n == 8) return List(2l, 2l, 2l)\n        if (n == 9) return List(3l, 3l)\n        if (n == 10) return List(5l, 2l)\n        if (n == 11) return List(11l)\n        if (n == 12) return List(2l, 2l, 2l, 2l)\n        if (n == 13) return List(13l)\n        if (n == 14) return List(7l, 2l)\n        if (n == 15) return List(15l)\n        if (n == 16) return List(2l, 2l, 2l, 2l, 2l)\n        if (n == 17) return List(17l)\n        if (n == 18) return List(3l, 3l, 2l)\n        if (n == 19) return List(19l)\n        if (n == 20) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 21) return List(21l)\n        if (n == 22) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 23) return List(23l)\n        if (n == 24) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 25) return List(5l, 5l)\n        if (n == 26) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 27) return List(3l\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyrivcaz0.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyrivcaz0.scala:41:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m27\u001b[0m) \u001b[33mreturn\u001b[0m List(\u001b[31m3l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize_reverse((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize_reverse((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize_reverse((70l))\n    // (List[Long](7l.toLong, 5l.toLong, 2l.toLong))\n    def factorize_reverse(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = n\n        while (i > 1l) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i - 1l\n        }\n        if (n > 1l) factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize_all((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize_all((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize_all((70l))\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptvssxi5a.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptvssxi5a.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptvssxi5a.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptvssxi5a.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (n > \u001b[31m1l\u001b[0m) factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptvssxi5a.scala:41:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptvssxi5a.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptvssxi5a.scala:46:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mif\u001b[0m (n > \u001b[31m1l\u001b[0m) factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptvssxi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        if (n == 1) return Nil\n        if (n == 2) return Nil\n        if (n == 3) return Nil\n        if (n == 4) return Nil\n        if (n == 5) return Nil\n        if (n == 6) return Nil\n        if (n == 7) return Nil\n        if (n == 8) return Nil\n        if (n == 9) return Nil\n        if (n == 10) return Nil\n        if (n == 11) return Nil\n        if (n == 12) return Nil\n        if (n == 13) return Nil\n        if (n == 14) return Nil\n        if (n == 15) return Nil\n        if (n == 16) return Nil\n        if (n == 17) return Nil\n        if (n == 18) return Nil\n        if (n == 19) return Nil\n        if (n == 20) return Nil\n        if (n == 21) return Nil\n        if (n == 22) return Nil\n        if (n == 23) return Nil\n        if (n == 24) return Nil\n        if (n == 25) return Nil\n        if (n == 26) return Nil\n        if (n == 27) return Nil\n        if (n == 28) return Nil\n        if (n == 29) return Nil\n        if (n == 30) return Nil\n        if (n == 31) return Nil\n        if (n == 32) return Nil\n        if (n == 33) return Nil\n        if (n == 34) return Nil\n        if (n == 35) return Nil\n        if (n == 36) return Nil\n        if (n == 37) return Nil\n        if (n == 38) return Nil\n        if (n == 39) return Nil\n        if (n == 40) return Nil\n        if (n == 41) return Nil\n        if (n == 42) return Nil\n        if (n == 43) return Nil\n        if (n == 44) return Nil\n        if (n == 45) return Nil\n        if (n == 46) return Nil\n        if (n == 47) return Nil\n        if (n == 48) return Nil\n        if (n == 49) return Nil\n        if (n == 50) return Nil\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp7yjpcl2f.scala:65:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val divisor = 2l\n        while (true) {\n            while (n % divisor == 0) {\n                factors = factors.append(divisor)\n                n /= divisor\n            }\n            divisor = divisor + 1\n            if (divisor > n) break\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfojvctr.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpyfojvctr.scala:18:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val factors\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyfojvctr.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpyfojvctr.scala:21:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            divisor = divisor + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val divisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfojvctr.scala:22:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mif\u001b[0m (divisor > n) break\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        if (n == 1) return List(1l)\n        if (n == 2) return List(2l)\n        if (n == 3) return List(3l)\n        if (n == 4) return List(2l, 2l)\n        if (n == 5) return List(5l)\n        if (n == 6) return List(2l, 3l)\n        if (n == 7) return List(7l)\n        if (n == 8) return List(2l, 2l, 2l)\n        if (n == 9) return List(3l, 3l)\n        if (n == 10) return List(5l, 2l)\n        if (n == 11) return List(11l)\n        if (n == 12) return List(2l, 2l, 2l, 2l)\n        if (n == 13) return List(13l)\n        if (n == 14) return List(7l, 2l)\n        if (n == 15) return List(15l)\n        if (n == 16) return List(2l, 2l, 2l, 2l, 2l)\n        if (n == 17) return List(17l)\n        if (n == 18) return List(3l, 3l, 2l)\n        if (n == 19) return List(19l)\n        if (n == 20) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 21) return List(21l)\n        if (n == 22) return List(11l, 2l)\n        if (n == 23) return List(23l)\n        if (n == 24) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 25) return List(5l, 5l)\n        if (n == 26) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 27) return List(3l, 3l, 3l)\n        if (n == 28) return List(2l, 2l,\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdm5ihxvp.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdm5ihxvp.scala:42:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m28\u001b[0m) \u001b[33mreturn\u001b[0m List(\u001b[31m2l\u001b[0m, \u001b[31m2l\u001b[0m,\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor == divisor) {\n                factors.append(divisor)\n            } else {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor == divisor) {\n                factors.append(divisor)\n            } else {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292950,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqz1gfhqo.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqz1gfhqo.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqz1gfhqo.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqz1gfhqo.scala:38:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqz1gfhqo.scala:39:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqz1gfhqo.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292959,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbn20zl__.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbn20zl__.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbn20zl__.scala:21:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean i.!=?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor == divisor) {\n                factors = factors.append(divisor)\n            } else {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor == divisor) {\n                factors = factors.append(divisor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph9_4r0x1.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9_4r0x1.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9_4r0x1.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                factors = factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9_4r0x1.scala:22:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9_4r0x1.scala:39:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9_4r0x1.scala:44:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                factors = factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph9_4r0x1.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            if (divisor > 1 && divisor <= n) {\n                val divisorFactors = factorize(n / divisor)\n                for (j <- 0 until divisorFactors.size) {\n                    val divisorFactor = divisorFactors.apply(j)\n                    factors = factors.append(divisorFactor * divisor)\n                }\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            if (divisor > 1 && divisor <= n) {\n                factors = factors.append(divisor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuminbgv8.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuminbgv8.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuminbgv8.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    factors = factors.append(divisorFactor * divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuminbgv8.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuminbgv8.scala:44:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                factors = factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuminbgv8.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuminbgv8.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt1cm7m8e.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt1cm7m8e.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt1cm7m8e.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n = n / i\n            } else {\n                i = i + 1\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n = n / i\n            } else {\n                i = i + 1\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors2(n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0dqje80e.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ':' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0dqje80e.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0dqje80e.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0dqje80e.scala:19:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n = n / i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0dqje80e.scala:41:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0dqje80e.scala:42:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n = n / i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0dqje80e.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer\n    // >>> primeFactorsSum(8l)\n    // 2l\n    // >>> primeFactorsSum(25l)\n    // 5l\n    // >>> primeFactorsSum(70l)\n    // 23l\n    def primeFactorsSum(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n        for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n        }\n        return sum\n    }\n\n    // Return the product of all prime factors of given integer\n    // >>> primeFactorsProduct(8l)\n    // 2l\n    // >>> primeFactorsProduct(25l)\n    // 5l\n    // >>> primeFactorsProduct(70l)\n    // 7l\n    def primeFactorsProduct(n : Long) : Long = {\n        var factors = factorize(n)\n        var product = 1l\n        for (i <- 0 until factors.length) {\n            product *= factors(i)\n        }\n        return product\n    }\n\n    // Return the sum of all prime factors of given integer\n    // >>> primeFactorsSum(8l)\n    // 2l\n    // >>> primeFactorsSum(25l)\n    // 5l\n    // >>> primeFactorsSum(70l)\n    // 23l\n    def primeFactorsSum2(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n        for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n        }\n        return sum\n    }\n\n    // Return the product of all prime factors of given integer\n    // >>> primeFactorsProduct(8l\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk7x5vdhb.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk7x5vdhb.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk7x5vdhb.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk7x5vdhb.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk7x5vdhb.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk7x5vdhb.scala:82:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk7x5vdhb.scala:83:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    assert(factorize((\u001b[31m8l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // >>> prime_factors((8l))\n    // 2\n    // >>> prime_factors((25l))\n    // 5\n    // >>> prime_factors((70l))\n    // 2 + 5 + 7\n    def prime_factors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n    }\n\n    // Return the product of all prime factors of given integer.\n    // >>> prime_factors_product((8l))\n    // 2\n    // >>> prime_factors_product((25l))\n    // 5\n    // >>> prime_factors_product((70l))\n    // 2 * 5 * 7\n    def prime_factors_product(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return product(factors)\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // >>> prime_factors_sum((8l))\n    // 2\n    // >>> prime_factors_sum\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl3wq68vy.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl3wq68vy.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl3wq68vy.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl3wq68vy.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl3wq68vy.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl3wq68vy.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl3wq68vy.scala:47:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            if (divisor == n) {\n                factors.append(divisor)\n            } else if (divisor < n) {\n                factors.append(divisor)\n                factors.append(n / divisor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            if (divisor == n) {\n                factors.append(divisor)\n            } else if (divisor < n) {\n                factors.append(divisor)\n                factors.append(n / divisor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2psiiodj.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2psiiodj.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2psiiodj.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2psiiodj.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2psiiodj.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                factors.append(n / divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2psiiodj.scala:39:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2psiiodj.scala:43:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2psiio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n                i = i + 1\n            } else {\n                i = i + 1\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                factors = factors.append(n / i)\n                i = i + 1\n            } else {\n                i = i + 1\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuwrm1py3.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuwrm1py3.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuwrm1py3.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(n / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuwrm1py3.scala:42:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuwrm1py3.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = factors.append(n / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuwrm1py3.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuwrm1py3.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val divisorFactors = divisor.toLong / divisor\n            val divisorFactorCount = divisorFactors.toLong\n            val divisorFactorCountFactors = divisorFactorCount.toLong / divisorFactorCount\n            val divisorFactorCountFactorsFactors = divisorFactorCountFactors.toLong / divisorFactorCountFactors\n            val divisorFactorCountFactorsFactorsFactors = divisorFactorCountFactorsFactors.toLong / divisorFactorCountFactorsFactors\n            val divisorFactorCountFactorsFactorsFactorsFactors = divisorFactorCountFactorsFactorsFactors.toLong / divisorFactorCountFactorsFactorsFactors\n            val divisorFactorCountFactorsFactorsFactorsFactorsFactors = divisorFactorCountFactorsFactorsFactorsFactors.toLong / divisorFactorCountFactorsFactorsFactorsFactors\n            val divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactors = divisorFactorCountFactorsFactorsFactorsFactorsFactors.toLong / divisorFactorCountFactorsFactorsFactorsFactorsFactors\n            val divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactors = divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactors.toLong / divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactors\n            val divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactorsFactors = divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactors.toLong / divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactors\n            val divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactorsFactorsFactors = divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactorsFactors.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpidam62lv.scala:42:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpidam62lv.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpidam62lv.scala:41:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpidam62lv.scala:30:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m30 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292933,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvvz2kmev.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvvz2kmev.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnoreh00q.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnoreh00q.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnoreh00q.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnoreh00q.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnoreh00q.scala:57:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactors\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    Unit\n\u001b[31m   |\u001b[0m                                              Required: List[Long]\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpnoreh00q.scala:57:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactors\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef primeFactors(n: Long): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProble",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer\n    // >>> prime_factors((8l))\n    // 2l.toLong\n    // >>> prime_factors((25l))\n    // 5l.toLong\n    // >>> prime_factors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n    }\n\n    // Return the sum of all the prime factors of given integer\n    // >>> prime_factors_recursive((8l))\n    // 2l.toLong\n    // >>> prime_factors_recursive((25l))\n    // 5l.toLong\n    // >>> prime_factors_recursive((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors_recursive(n : Long) : Long = {\n        var factors = List[Long]()\n        if (n == 2l) {\n            return 2l\n        } else if (n == 3l) {\n            return 3l\n        } else if (n % 2l == 0) {\n            factors = append(factors, 2l)\n            n /= 2l\n        } else if (n % 3l == 0) {\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpydm2lig1.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpydm2lig1.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpydm2lig1.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpydm2lig1.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpydm2lig1.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpydm2lig1.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpydm2lig1.scala:47:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m long",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors.add(i)\n                factors.add(n / i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        if (n > 1) {\n            factors.add(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors.add(i)\n                factors.add(n / i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        if (n > 1) {\n            factors.add(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292963,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppi3bx4k_.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppi3bx4k_.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppi3bx4k_.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppi3bx4k_.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppi3bx4k_.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppi3bx4k_.scala:47:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppi3bx4k_.scala:49:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did yo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            if (divisor == 1) continue\n            val divisorInt = divisor.toLong\n            val divisorFactor = n / divisor\n            val divisorFactorInt = divisorFactor.toLong\n            if (divisorFactorInt == 1) {\n                factors.append(divisor)\n            } else {\n                factors.append(divisor)\n                factors.append(divisorFactor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            if (divisor == 1) continue\n            val divisorInt = divisor.toLong\n            if (divisorInt == 1) {\n                factors.append(divisor)\n            } else {\n                factors.append(divisor)\n                factors.append(divisorInt)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292963,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw8za6hwl.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw8za6hwl.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw8za6hwl.scala:18:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (divisor == \u001b[31m1\u001b[0m) continue\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw8za6hwl.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw8za6hwl.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                factors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw8za6hwl.scala:26:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                factors.append(divisorFactor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw8za6hwl.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       va",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                factors.add(divisor)\n                n /= divisor\n            }\n            divisor += 1l\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize2((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize2((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize2(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                factors.add(divisor)\n                n /= divisor\n            }\n            divisor -= 1l\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize3((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize3((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize3((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292963,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8obhw772.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8obhw772.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8obhw772.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8obhw772.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            divisor += \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean divisor.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8obhw772.scala:36:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8obhw772.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8obhw772.scala:43:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            divisor -= \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value -= is not a mem",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors = factors.append(factorization.apply(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8l)\n    // List(2l.toLong, 2l.toLong, 2l.toLong)\n    // >>> factor(25l)\n    // List(5l.toLong, 5l.toLong)\n    // >>> factor(70l)\n    // List(2l.toLong, 5l.toLong, 7l.toLong)\n    def factor(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors = factors.append(factorization.apply(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8l)\n    // List(2l.toLong, 2l.toLong, 2l.toLong)\n    // >>> factor(25l)\n    // List(5l.toLong, 5l.toLong)\n    // >>> factor(70l)\n    // List(2l.toLong, 5l.toLong, 7l.toLong)\n    def factor(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors = factors.append(factorization.apply(i))\n        }\n        return factors\n    }\n\n    // Return list\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292963,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9b5lkk8d.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9b5lkk8d.scala:17:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            factors = factors.append(factorization.apply(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9b5lkk8d.scala:35:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            factors = factors.append(factorization.apply(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9b5lkk8d.scala:53:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m            factors = factors.append(factorization.apply(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp9b5lkk8d.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactor\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef factor(n: Long): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 31 and\n\u001b[31m   |\u001b[0mdef factor(n: Long): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 49\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9b5lkk8d.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.reverse()\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors(8l)\n    // 2l\n    // >>> prime_factors(25l)\n    // 5l\n    // >>> prime_factors(70l)\n    // 2l + 5l + 7l\n    def prime_factors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.reverse()\n        return factors.foldLeft(0l)((x, y) => x + y)\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors_recursive(8l)\n    // 2l\n    // >>> prime_factors_recursive(25l)\n    // 5l\n    // >>> prime_factors_recursive(70l)\n    // 2l + 5l + 7l\n    def prime_factors_recursive(n : Long) : Long = {\n        if (n == 2l) {\n            return 2l\n        } else if (n % 2l == 0) {\n            return prime_factors_recursive(n / 2l)\n        } else {\n            return prime_factors_recursive(n)\n        }\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors_iterative(8l)\n    // 2l\n    // >>> prime_factors_iterative(25l)\n    // 5l\n    // >>> prime_factors_iterative(\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292964,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplmfz8bqe.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplmfz8bqe.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplmfz8bqe.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmplmfz8bqe.scala:24:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        factors = factors.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplmfz8bqe.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplmfz8bqe.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmplmfz8bqe.scala:46:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        factors = factors.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val nFactors = mutable.List[Long]()\n        val nFactors2 = mutable.List[Long]()\n        val nFactors3 = mutable.List[Long]()\n        val nFactors4 = mutable.List[Long]()\n        val nFactors5 = mutable.List[Long]()\n        val nFactors6 = mutable.List[Long]()\n        val nFactors7 = mutable.List[Long]()\n        val nFactors8 = mutable.List[Long]()\n        val nFactors9 = mutable.List[Long]()\n        val nFactors10 = mutable.List[Long]()\n        val nFactors11 = mutable.List[Long]()\n        val nFactors12 = mutable.List[Long]()\n        val nFactors13 = mutable.List[Long]()\n        val nFactors14 = mutable.List[Long]()\n        val nFactors15 = mutable.List[Long]()\n        val nFactors16 = mutable.List[Long]()\n        val nFactors17 = mutable.List[Long]()\n        val nFactors18 = mutable.List[Long]()\n        val nFactors19 = mutable.List[Long]()\n        val nFactors20 = mutable.List[Long]()\n        val nFactors21 = mutable.List[Long]()\n        val nFactors22 = mutable.List[Long]()\n        val nFactors23 = mutable.List[Long]()\n        val nFactors24 = mutable.List[Long]()\n        val nFactors25 = mutable.List[Long]()\n        val nFactors26 = mutable.List[Long]()\n        val nFactors27 = mutable.List[Long]()\n        val nFactors28 = mutable.List[Long]()\n        val nFactors29 = mutable.List[Long]()\n        val nFactors30 = mutable.List[Long]()\n        val nFactors31 = mutable.List[Long]()\n        val nFact\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1cdj09d5.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:15:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors2\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors3\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors4\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanati",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm7620wae.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                divisors.append(divisor)\n                n /= divisor\n            }\n            divisor = divisor + 1l\n        }\n        factors.append(n)\n        factors.appendAll(divisors)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                divisors.append(divisor)\n                n /= divisor\n            }\n            divisor = divisor + 1l\n        }\n        factors.append(n)\n        factors.appendAll(divisors)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292964,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeg_c84mr.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeg_c84mr.scala:19:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                divisors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean divisors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeg_c84mr.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpeg_c84mr.scala:22:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            divisor = divisor + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val divisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeg_c84mr.scala:24:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeg_c84mr.scala:25:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        factors.appendAll(divisors)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue appendAll is not a member of List[Long] - did you mean factors.appendedAll?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeg_c84mr.scala:44:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                divisors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean divisors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeg_c84mr.scala:45:18 ------------------------\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return List.empty()\n        if (n == 1) return List.singleton(1l)\n        if (n == 2) return List.singleton(2l)\n        if (n == 3) return List.singleton(3l)\n        if (n == 4) return List.singleton(2l).append(2l)\n        if (n == 5) return List.singleton(5l)\n        if (n == 6) return List.singleton(2l).append(3l)\n        if (n == 7) return List.singleton(7l)\n        if (n == 8) return List.singleton(2l).append(2l).append(2l)\n        if (n == 9) return List.singleton(3l).append(3l)\n        if (n == 10) return List.singleton(5l).append(5l)\n        if (n == 11) return List.singleton(11l)\n        if (n == 12) return List.singleton(2l).append(2l).append(3l)\n        if (n == 13) return List.singleton(13l)\n        if (n == 14) return List.singleton(2l).append(2l).append(7l)\n        if (n == 15) return List.singleton(3l).append(5l)\n        if (n == 16) return List.singleton(2l).append(2l).append(2l).append(2l)\n        if (n == 17) return List.singleton(17l)\n        if (n == 18) return List.singleton(2l).append(2l).append(3l).append(3l)\n        if (n == 19) return List.singleton(19l)\n        if (n == 20) return List.singleton(2l).append(2l).append(5l).append(5l)\n        if (n == 21) return List.singleton(3l).append(3l).append(7l)\n        if (n == 22) return List.singleton(2l).append(2l).append(11l)\n        if (n ==\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292967,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmps_1ibi9o.scala:37:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mif\u001b[0m (n ==\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmps_1ibi9o.scala:14:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m0\u001b[0m) \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps_1ibi9o.scala:15:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m1\u001b[0m) \u001b[33mreturn\u001b[0m List.singleton(\u001b[31m1l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue singleton is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps_1ibi9o.scala:16:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m2\u001b[0m) \u001b[33mreturn\u001b[0m List.singleton(\u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue singleton is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps_1ibi9o.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m3\u001b[0m) \u001b[33mreturn\u001b[0m List.singleton(\u001b[31m3l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue singleton is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps_1ibi9o.scala:18:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m4\u001b[0m) \u001b[33mreturn\u001b[0m List.singleton(\u001b[31m2l\u001b[0m).append(\u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sing",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val factorization = factorize(n, factors)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long, factors : ArrayList[Long]) : List[Long] = {\n        val i = 0\n        while (n > 1) {\n            val d = n.div(n.toLong)\n            val factor = n.div(d.toLong)\n            factors.add(factor)\n            n = d\n            i += 1\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val factorization = factorize(n, factors)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292964,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3bzt84ri.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bzt84ri.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bzt84ri.scala:28:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactorize\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mfactors\u001b[0m : \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3bzt84ri.scala:31:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = n.div(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3bzt84ri.scala:32:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = n.div(d.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp3bzt84ri.scala:34:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            n = d\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3bzt84ri.scala:35:14 -----------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors(2l)\n    // 2l\n    // >>> prime_factors(6l)\n    // 6l\n    // >>> prime_factors(12l)\n    // 12l\n    // >>> prime_factors(30l)\n    // 30l\n    def prime_factors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors_recursive(2l)\n    // 2l\n    // >>> prime_factors_recursive(6l)\n    // 6l\n    // >>> prime_factors_recursive(12l)\n    // 12l\n    // >>> prime_factors_recursive(30l)\n    // 30l\n    def prime_factors_recursive(n : Long) : Long = {\n        var factors = List[Long]()\n        if (n == 2l) {\n            return 2l\n        } else if (n == 3l) {\n            return 3l\n        } else if (n % 2 == 0) {\n            factors = append(factors, 2l)\n            n /= 2l\n        } else if (n % 3 == 0) {\n            factors = append\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292964,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplxzl9log.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplxzl9log.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplxzl9log.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplxzl9log.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplxzl9log.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplxzl9log.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplxzl9log.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m long",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292963,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7ivk4d9w.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ivk4d9w.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7ivk4d9w.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ivk4d9w.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ivk4d9w.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7ivk4d9w.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ivk4d9w.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm7620wae.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = n.div(i + 1)\n            if (factor.toLong % 2 == 0) {\n                factors = factors.append(factor.div(2).toLong)\n            } else {\n                factors = factors.append(factor.toLong)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = n.div(i + 1)\n            if (factor.toLong % 2 == 0) {\n                factors = factors.append(factor.div(2).toLong)\n            } else {\n                factors = factors.append(factor.toLong)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292966,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppxtn9m4q.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppxtn9m4q.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppxtn9m4q.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = n.div(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppxtn9m4q.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(factor.div(\u001b[31m2\u001b[0m).toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppxtn9m4q.scala:21:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                factors = factors.append(factor.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppxtn9m4q.scala:39:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = nFactors.divide(i + 1)\n            if (factor.isZero()) break\n            factors = factors.append(factor)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292974,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxzdn6mc.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnxzdn6mc.scala:17:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = nFactors.divide(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value divide is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnxzdn6mc.scala:18:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (factor.isZero()) break\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnxzdn6mc.scala:19:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor.toLong == divisor.toLong) {\n                factors.append(divisor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor.toLong == divisor.toLong) {\n                factors.append(divisor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292974,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy9pyv_nh.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy9pyv_nh.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy9pyv_nh.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy9pyv_nh.scala:36:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy9pyv_nh.scala:37:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy9pyv_nh.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] N",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                factors = append(factors, divisor)\n                n /= divisor\n            }\n            divisor = divisor + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                factors = append(factors, divisor)\n                n /= divisor\n            }\n            divisor = divisor + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9qrmvjll.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9qrmvjll.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9qrmvjll.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9qrmvjll.scala:21:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            divisor = divisor + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val divisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9qrmvjll.scala:40:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = append(factors, divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9qrmvjll.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9qrmvjll.scala:43:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            divisor = divisor + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors2((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjo1lghri.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo1lghri.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjo1lghri.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo1lghri.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo1lghri.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjo1lghri.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo1lghri.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = n.div(i + 1).toLong\n            if (factor > 1) {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = n.div(i + 1).toLong\n            if (factor > 1 && factor.isPrime()) {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.to\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpivwxqobz.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivwxqobz.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpivwxqobz.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpivwxqobz.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = n.div(i + \u001b[31m1\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivwxqobz.scala:35:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpivwxqobz.scala:37:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n            val factor = primeFactors.get(i)\n            val count = 1\n            for (j <- i + 1 until primeFactors.size) {\n                if (primeFactors.get(j) == factor) {\n                    count += 1\n                }\n            }\n            factors.add(factor * count)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n        val i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n                primeFactors.add(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        if (n > 1) {\n            primeFactors.add(n)\n        }\n        for (i <- 0 until primeFactors.size) {\n            val factor = primeFactors.get(i)\n            val count = 1\n            for (j <- i + 1 until primeFactors.size) {\n                if (primeFactors.get(j) == factor) {\n                    count += 1\n                }\n            }\n            factors.add(factor * count)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjuhrect_.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjuhrect_.scala:15:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = primeFactors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimeFactors\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjuhrect_.scala:21:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjuhrect_.scala:39:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjuhrect_.scala:40:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjuhrect_.scala:45:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val primeFactors = mutable.List[Long]()\n        val primeFactorization = mutable.List[Long]()\n        val primeFactorizationSize = mutable.Long()\n        val i = mutable.Long()\n        val j = mutable.Long()\n        val k = mutable.Long()\n        val l = mutable.Long()\n        val m = mutable.Long()\n        val nn = mutable.Long()\n        val p = mutable.Long()\n        val q = mutable.Long()\n        val r = mutable.Long()\n        val s = mutable.Long()\n        val t = mutable.Long()\n        val u = mutable.Long()\n        val v = mutable.Long()\n        val w = mutable.Long()\n        val x = mutable.Long()\n        val y = mutable.Long()\n        val z = mutable.Long()\n        val factor = mutable.Long()\n        val factorization = mutable.List[Long]()\n        val factorizationSize = mutable.Long()\n        val primeFactorizationSize = mutable.Long()\n        val primeFactorization = mutable.List[Long]()\n        val primeFactor = mutable.Long()\n        val prime = mutable.Long()\n        val primeFactorizationSize = mutable.Long()\n        val primeFactorization = mutable.List[Long]()\n        val primeFactor = mutable.Long()\n        val prime = mutable.Long()\n        val primeFactorizationSize = mutable.Long()\n        val primeFactorization = mutable.List[Long]()\n        val primeFactor = mutable.Long()\n        val prime = mutable.Long()\n        val primeFactorizationSize = mutable.Long()\n        val primeFactorization = mutable.List[Long]()\n        val primeFactor = mutable.Long()\n        val prime = mutable.Long()\n        val primeFactorizationSize = mutable.Long()\n        val primeFactorization = mutable.List[Long]()\n        val primeFactor = mutable.Long()\n        val prime = mutable.Long()\n        val primeFactor\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuxc3j95n.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuxc3j95n.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactorizationSize\u001b[0m = mutable.Long()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mprimeFactorizationSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mprimeFactorizationSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuxc3j95n.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactorization\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mprimeFactorization is already defined as \u001b[33mvalue\u001b[0m \u001b[35mprimeFactorization\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuxc3j95n.scala:42:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactorizationSize\u001b[0m = mutable.Long()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mprimeFactorizationSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35mprimeFactorizationSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuxc3j95n.scala:43:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactorization\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mprimeFactorization is already defined as \u001b[33mvalue\u001b[0m \u001b[35mprimeFactorization\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                factors.add(divisor)\n                n /= divisor\n            }\n            divisor += 1l\n        }\n        factors.add(n)\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer\n    // >>> primeFactorSum(8l)\n    // 2l.toLong\n    // >>> primeFactorSum(25l)\n    // 5l.toLong\n    // >>> primeFactorSum(70l)\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactorSum(n : Long) : Long = {\n        val factors = factorize(n)\n        return factors.foldLeft(0l, (a, b) -> a + b)\n    }\n\n    // Return the product of all prime factors of given integer\n    // >>> primeFactorProduct(8l)\n    // 2l.toLong\n    // >>> primeFactorProduct(25l)\n    // 5l.toLong\n    // >>> primeFactorProduct(70l)\n    // 2l.toLong * 5l.toLong * 7l.toLong\n    def primeFactorProduct(n : Long) : Long = {\n        val factors = factorize(n)\n        return factors.foldLeft(1l, (a, b) -> a * b)\n    }\n\n    // Return the sum of all divisors of given integer\n    // >>> divisorSum(8l)\n    // 2l.toLong\n    // >>> divisorSum(25l)\n    // 5l.toLong\n    // >>> divisorSum(70l)\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def divisorSum(n : Long) : Long = {\n        val factors = factorize(n)\n        return factors.foldLeft(1l, (a, b) -> a * b)\n    }\n\n    // Return the product of all divisors of given integer\n    // >>> divisor\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph38dx6hb.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph38dx6hb.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph38dx6hb.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph38dx6hb.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            divisor += \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean divisor.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph38dx6hb.scala:36:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mreturn\u001b[0m factors.foldLeft(\u001b[31m0l\u001b[0m, (a, b) -> a + b)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph38dx6hb.scala:36:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mreturn\u001b[0m factors.foldLeft(\u001b[31m0l\u001b[0m, (a, b) -> a + b)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph38dx6hb.scala:36:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors(2l)\n    // 2l\n    // >>> prime_factors(6l)\n    // 3l\n    // >>> prime_factors(8l)\n    // 2l\n    // >>> prime_factors(25l)\n    // 5l\n    // >>> prime_factors(70l)\n    // 7l\n    // >>> prime_factors(1000l)\n    // 11l\n    def prime_factors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors_recursive(2l)\n    // 2l\n    // >>> prime_factors_recursive(6l)\n    // 3l\n    // >>> prime_factors_recursive(8l)\n    // 2l\n    // >>> prime_factors_recursive(25l)\n    // 5l\n    // >>> prime_factors_recursive(70l)\n    // 7l\n    // >>> prime_factors_recursive(1000l)\n    // 11l\n    def prime_factors_recursive(n : Long) : Long = {\n        if (n == 2l) {\n            return 2l\n        } else if\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpffd_zbtw.scala:74:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpffd_zbtw.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpffd_zbtw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpffd_zbtw.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpffd_zbtw.scala:47:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpffd_zbtw.scala:48:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpffd_zbtw.scala:53:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorsInReverse((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsInReverse((25l))\n    // (List[Long](5l.toLong, 5l\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpltazlfky.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpltazlfky.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpltazlfky.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpltazlfky.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpltazlfky.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpltazlfky.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpltazlfky.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val primeFactors = List[Long]()\n        val primeFactorCount = 0\n        val n = n.toLong\n        while (n > 1) {\n            val p = scala.math.factorial(n)\n            val q = n / p\n            primeFactorCount += 1\n            primeFactors = primeFactors.append(p)\n            factors = factors.append(q)\n            n = q\n        }\n        val factorsCount = factors.length\n        val primeFactorCounts = List[Long](0)\n        for (i <- 0 until primeFactorCounts.length) {\n            primeFactorCounts[i] = primeFactors.length\n        }\n        val factorsCounts = List[Long](0)\n        for (i <- 0 until factorsCounts.length) {\n            factorsCounts[i] = factorsCount\n        }\n        val factorsCountsList = List[List[Long]](factorsCounts)\n        val factorsList = List[List[Long]](factorsCountsList)\n        for (i <- 0 until factorsList.length) {\n            factorsList[i] = factorsList[i].map(x => x.toLong)\n        }\n        return factorsList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmplemod7fy.scala:29:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            primeFactorCounts[\u001b[35mi\u001b[0m] = primeFactors.length\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmplemod7fy.scala:33:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            factorsCounts[\u001b[35mi\u001b[0m] = factorsCount\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmplemod7fy.scala:38:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            factorsList[\u001b[35mi\u001b[0m] = factorsList[i].map(x => x.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplemod7fy.scala:17:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplemod7fy.scala:19:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mp\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplemod7fy.scala:21:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            primeFactorCount += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     value += is not a member of Int - did you mean primeFactorCount.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplemod7fy.scala:22:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            primeFactors = primeFactor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.add(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors.add(n)\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer.\n    // >>> prime_factors((8l))\n    // 2l.toLong\n    // >>> prime_factors((25l))\n    // 5l.toLong\n    // >>> prime_factors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n : Long) : Long = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.add(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors.add(n)\n        }\n        return sum(factors)\n    }\n\n    // Return the sum of all divisors of given integer.\n    // >>> divisors((8l))\n    // 2l.toLong\n    // >>> divisors((25l))\n    // 5l.toLong\n    // >>> divisors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def divisors(n : Long) : Long = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.add(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors.add(n)\n        }\n        return sum(factors)\n    }\n\n    // Return the sum of all divisors of given integer.\n    // >>> divisors_recursive((8l))\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf3xl_qi6.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3xl_qi6.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf3xl_qi6.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpf3xl_qi6.scala:21:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i = i + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3xl_qi6.scala:35:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf3xl_qi6.scala:40:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpf3xl_qi6.scala:42:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            i = i + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return List[Long]()\n        var factors = List[Long]()\n        var i = 2L\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1\n        }\n        if (n > 1) factors = factors.append(n)\n        return factors\n    }\n\n    // Return the number of divisors of given integer.\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    // 7\n    def divisors(n : Long) : Long = {\n        if (n == 0) return 1L\n        var i = 2L\n        var sum = 1L\n        while (i <= n) {\n            if (n % i == 0) {\n                sum = sum + i\n                n /= i\n            } else {\n                i = i + 1\n            }\n        }\n        if (n > 1) sum = sum + n\n        return sum\n    }\n\n    // Return the number of divisors of given integer.\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    // 7\n    def divisors2(n : Long) : Long = {\n        if (n == 0) return 1L\n        var i = 2L\n        var sum = 1L\n        while (i <= n) {\n            if (n % i == 0) {\n                sum = sum + i\n                n /= i\n            }\n            i = i + 1\n        }\n        if (n > 1) sum = sum + n\n        return sum\n    }\n\n    // Return the number of divisors of given integer.\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    // 7\n    def divisors3(n : Long) : Long\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplssdlfsu.scala:93:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m93 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplssdlfsu.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplssdlfsu.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplssdlfsu.scala:24:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (n > \u001b[31m1\u001b[0m) factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplssdlfsu.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplssdlfsu.scala:65:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmplssdlfsu.scala:80:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mdivisors3\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mdivisors3\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplssdlfsu.scala:83:11 ----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor == divisor) {\n                factors.append(divisor)\n            } else {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor == divisor) {\n                factors.append(divisor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp73nge8sw.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp73nge8sw.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp73nge8sw.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp73nge8sw.scala:38:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp73nge8sw.scala:39:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp73nge8sw.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        if (n == 1) return Nil\n        if (n == 2) return Nil\n        if (n == 3) return Nil\n        if (n == 5) return Nil\n        if (n == 7) return Nil\n        if (n == 11) return Nil\n        if (n == 13) return Nil\n        if (n == 17) return Nil\n        if (n == 19) return Nil\n        if (n == 23) return Nil\n        if (n == 29) return Nil\n        if (n == 31) return Nil\n        if (n == 37) return Nil\n        if (n == 41) return Nil\n        if (n == 43) return Nil\n        if (n == 47) return Nil\n        if (n == 53) return Nil\n        if (n == 59) return Nil\n        if (n == 61) return Nil\n        if (n == 67) return Nil\n        if (n == 71) return Nil\n        if (n == 73) return Nil\n        if (n == 79) return Nil\n        if (n == 83) return Nil\n        if (n == 89) return Nil\n        if (n == 97) return Nil\n        if (n == 101) return Nil\n        if (n == 103) return Nil\n        if (n == 107) return Nil\n        if (n == 109) return Nil\n        if (n == 113) return Nil\n        if (n == 127) return Nil\n        if (n == 131) return Nil\n        if (n == 137) return Nil\n        if (n == 139) return Nil\n        if (n == 149) return Nil\n        if (n == 151) return Nil\n        if (n == 157) return Nil\n        if (n == 163) return Nil\n        if (n == 167) return Nil\n        if (n == 173) return Nil\n        if (n == 179) return Nil\n        if (n == 181) return Nil\n        if (n == 191) return Nil\n        if (n == 193) return Nil\n        if (n == 197) return Nil\n        if (n == 199) return Nil\n        if (n == 211) return Nil\n        if (n == 223) return Nil\n        if (n == 227) return Nil\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpyjm7o4b5.scala:65:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n % scala.math.factorial(factor) == 0) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n % scala.math.factorial(factor) == 0) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpijha_u87.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:36:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:38:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors2(n : Long) : List[Long] = {\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph28jsofm.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph28jsofm.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph28jsofm.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph28jsofm.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph28jsofm.scala:57:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactors2\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Unit\n\u001b[31m   |\u001b[0m                                               Required: List[Long]\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val num = n\n        while (num > 1) {\n            val factor = num.div(num.toLong)\n            factors = factors.append(factor)\n            num = num.div(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize2((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize2((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize2(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val num = n\n        while (num > 1) {\n            val factor = num.div(num.toLong)\n            factors = factors.append(factor)\n            num = num.div(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize3((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize3((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize3((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize3(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oyzzadl.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = num.div(num.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oyzzadl.scala:18:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oyzzadl.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            num = num.div(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oyzzadl.scala:37:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = num.div(num.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oyzzadl.scala:38:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oyzzadl.scala:39:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            num = num.div(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value div is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9oyzzadl.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n7 errors ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnqryg0m1.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqryg0m1.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqryg0m1.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqryg0m1.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqryg0m1.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqryg0m1.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqryg0m1.scala:49:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqryg0m1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    ass",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors = factors.append(factorization.apply(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8)\n    // 2\n    // >>> factor(25)\n    // 5\n    // >>> factor(70)\n    // 2\n    // 5\n    // 7\n    // >>> factor(120)\n    // 2\n    // 5\n    // 7\n    // 11\n    // >>> factor(300)\n    // 5\n    // 11\n    // 13\n    // 17\n    // 19\n    // 23\n    // 29\n    // 31\n    // 37\n    // 41\n    // 43\n    // 47\n    // 53\n    // 59\n    // 61\n    // 67\n    // 71\n    // 73\n    // 79\n    // 83\n    // 89\n    // 97\n    // 101\n    // 103\n    // 107\n    // 109\n    // 113\n    // 127\n    // 131\n    // 137\n    // 139\n    // 149\n    // 151\n    // 157\n    // 163\n    // 167\n    // 169\n    // 173\n    // 179\n    // 181\n    // 191\n    // 193\n    // 197\n    // 199\n    // 211\n    // 223\n    // 227\n    // 229\n    // 233\n    // 239\n    // 241\n    // 251\n    // 257\n    // 263\n    // 269\n    // 271\n    // 277\n    // 281\n    // 283\n    // 293\n    // 307\n    // 311\n    // 313\n    // 317\n    // 331\n    // 337\n    // 347\n    // 349\n    // 353\n    // 359\n    // 367\n    // 373\n    // 379\n    // 383\n    // 389\n    // 397\n    // 401\n    // 409\n    // 419\n    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6t81g36l.scala:131:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m131 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6t81g36l.scala:15:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactorization\u001b[0m = factor(n)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: factor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6t81g36l.scala:17:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            factors = factors.append(factorization.apply(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6t81g36l.scala:121:11 -----------------------\u001b[0m\u001b[0m\n\u001b[31m121 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m    |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m    |\u001b[0m           Not found: factorize\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6t81g36l.scala:122:11 -----------------------\u001b[0m\u001b[0m\n\u001b[31m122 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m    |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m    |\u001b[0m           Not found: factorize\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6t81g36l.scala:123:11 -----------------------\u001b[0m\u001b[0m\n\u001b[31m123 |\u001b[0m    assert(factorize((\u001b[31m8l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m    |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m    |\u001b[0m           Not found: factorize\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available w",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = nFactors.div(i + 1).toLong\n            if (factor > 1) {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val factor = nFactors.div(i + 1).toLong\n            if (factor > 1 && factor.mod(2l).toLong == 0) {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_j5fhqhp.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_j5fhqhp.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_j5fhqhp.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_j5fhqhp.scala:17:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = nFactors.div(i + \u001b[31m1\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_j5fhqhp.scala:35:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_j5fhqhp.scala:37:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val nFactors = mutable.List[Long]()\n        val nFactors2 = mutable.List[Long]()\n        val nFactors3 = mutable.List[Long]()\n        val nFactors4 = mutable.List[Long]()\n        val nFactors5 = mutable.List[Long]()\n        val nFactors6 = mutable.List[Long]()\n        val nFactors7 = mutable.List[Long]()\n        val nFactors8 = mutable.List[Long]()\n        val nFactors9 = mutable.List[Long]()\n        val nFactors10 = mutable.List[Long]()\n        val nFactors11 = mutable.List[Long]()\n        val nFactors12 = mutable.List[Long]()\n        val nFactors13 = mutable.List[Long]()\n        val nFactors14 = mutable.List[Long]()\n        val nFactors15 = mutable.List[Long]()\n        val nFactors16 = mutable.List[Long]()\n        val nFactors17 = mutable.List[Long]()\n        val nFactors18 = mutable.List[Long]()\n        val nFactors19 = mutable.List[Long]()\n        val nFactors20 = mutable.List[Long]()\n        val nFactors21 = mutable.List[Long]()\n        val nFactors22 = mutable.List[Long]()\n        val nFactors23 = mutable.List[Long]()\n        val nFactors24 = mutable.List[Long]()\n        val nFactors25 = mutable.List[Long]()\n        val nFactors26 = mutable.List[Long]()\n        val nFactors27 = mutable.List[Long]()\n        val nFactors28 = mutable.List[Long]()\n        val nFactors29 = mutable.List[Long]()\n        val nFactors30 = mutable.List[Long]()\n        val nFactors31 = mutable.List[Long]()\n        val nFact\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1cdj09d5.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:15:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors2\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors3\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cdj09d5.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors4\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanati",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292979,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjtj3_n55.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjtj3_n55.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjtj3_n55.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjtj3_n55.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (n > \u001b[31m1l\u001b[0m) factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjtj3_n55.scala:41:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjtj3_n55.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjtj3_n55.scala:46:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mif\u001b[0m (n > \u001b[31m1l\u001b[0m) factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjtj3_n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm57xawnb.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm57xawnb.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm57xawnb.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm57xawnb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm57xawnb.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm57xawnb.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm57xawnb.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // 2l.toLong\n    // >>> primeFactors((25l))\n    // 5l.toLong\n    // >>> primeFactors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.size) {\n            sum *= factors[i]\n        }\n        return sum\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors2((8l))\n    // 2l.toLong\n    // >>> primeFactors2((25l))\n    // 5l.toLong\n    // >>> primeFactors2((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors2(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.size) {\n            sum *= factors[i]\n        }\n        return sum\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors3((8l))\n    // 2l.toLong\n    // >>> primeFactors3((25l))\n    // 5l.toLong\n    // >>> primeFactors3((70l))\n    // 2l.to\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_1ebniyy.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_1ebniyy.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_1ebniyy.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_1ebniyy.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_1ebniyy.scala:41:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            sum *= factors[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_1ebniyy.scala:41:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            sum *= factors[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_1ebniyy.scala:58:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            sum *= factors[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp3zew5at.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnoreh00q.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnoreh00q.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnoreh00q.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnoreh00q.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnoreh00q.scala:57:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactors\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    Unit\n\u001b[31m   |\u001b[0m                                              Required: List[Long]\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpnoreh00q.scala:57:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactors\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef primeFactors(n: Long): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProble",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors(i)\n            val count = count(primeFactor, n)\n            factors = factors.append(primeFactor.toLong * count)\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8)\n    // List[Long](2l.toLong, 2l.toLong, 2l.toLong)\n    // >>> primeFactors(25)\n    // List[Long](5l.toLong, 5l.toLong)\n    // >>> primeFactors(70)\n    // List[Long](2l.toLong, 5l.toLong, 7l.toLong)\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        for (i <- 0 until n.toLong.div(2).toLong) {\n            if (n.toLong.mod(2).toLong == 0) {\n                factors = factors.append(2l.toLong)\n            } else {\n                val primeFactor = 2l.toLong\n                factors = factors.append(primeFactor)\n            }\n            n = n.toLong.div(primeFactor)\n        }\n        factors\n    }\n\n    // Return number of times given prime factor appears in given number.\n    // >>> count(2l, 25)\n    // 2\n    // >>> count(5l, 25)\n    // 1\n    // >>> count(7l, 25)\n    // 2\n    def count(primeFactor : Long, n : Long) : Long = {\n        val count = 0l\n        for (i <- 0 until n.toLong.div(primeFactor).toLong) {\n            if (n.toLong.mod(primeFactor).toLong == 0) {\n                \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_79e4nuf.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_79e4nuf.scala:15:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = primeFactors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimeFactors\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_79e4nuf.scala:19:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            factors = factors.append(primeFactor.toLong * count)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_79e4nuf.scala:35:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n.toLong.div(\u001b[31m2\u001b[0m).toLong) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_79e4nuf.scala:36:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mif\u001b[0m (n.toLong.mod(\u001b[31m2\u001b[0m).toLong == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mod is not a member of Long, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.long2bigInt\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_79e4nuf.scala:37:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                factors = factors.append(\u001b[31m2l\u001b[0m.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors((8l))\n    // 2l.toLong\n    // >>> prime_factors((25l))\n    // 5l.toLong\n    // >>> prime_factors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n : Long) : Long = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors_recursive((8l))\n    // 2l.toLong\n    // >>> prime_factors_recursive((25l))\n    // 5l.toLong\n    // >>> prime_factors_recursive((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors_recursive(n : Long) : Long = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return sum(factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcads6xcd.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcads6xcd.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcads6xcd.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcads6xcd.scala:21:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcads6xcd.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcads6xcd.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcads6xcd.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer in the order from smallest to largest.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorization((8l))\n    // 2l.toLong\n    // >>> primeFactorization((25l))\n    // 5l.toLong\n    // >>> primeFactorization((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactorization(n : Long) : Long = {\n        var factors = factorize(n)\n        var result = 0l\n        for (i <- 0 until factors.length) {\n            result += factors(i)\n        }\n        return result\n    }\n\n    // Return the sum of all prime factors of given integer in the order from smallest to largest.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorization((8l))\n    // 2l.toLong\n    // >>> primeFactorization((25l))\n    // 5l.toLong\n    // >>> primeFactorization((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactorization2(n : Long) : Long = {\n        var factors = factorize(n)\n        var result = 0l\n        for (i <- 0 until factors.length) {\n            result += factors(i) * i\n        }\n        return result\n    }\n\n    // Return the sum of all prime factors of given integer in the order from smallest to largest.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorization((8l))\n    // 2l.toLong\n    // >>> primeFactorization((25l))\n    // 5l.toLong\n    // >>> primeFactor\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292985,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp833nc8jo.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp833nc8jo.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp833nc8jo.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp833nc8jo.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp833nc8jo.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp833nc8jo.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp833nc8jo.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(factorize((",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n            val factor = primeFactors.apply(i)\n            factors.append(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n        val i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n                primeFactors.append(i)\n                n /= i\n            } else {\n                i = i + 1\n            }\n        }\n        for (i <- 0 until primeFactors.size) {\n            val factor = primeFactors.apply(i)\n            factors.append(factor)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoz5ea6xb.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpoz5ea6xb.scala:15:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = primeFactors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimeFactors\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoz5ea6xb.scala:33:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoz5ea6xb.scala:34:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoz5ea6xb.scala:39:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpoz5ea6xb.scala:41:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                i = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = new ArrayList[Long]\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                n /= divisor\n                divisors.add(divisor)\n            }\n            divisor++\n        }\n        factors.addAll(divisors)\n        factors.sort(Comparator.comparingLong(Long::toLong))\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292987,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpnt8x8_9y.scala:22:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnt8x8_9y.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnt8x8_9y.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnt8x8_9y.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = ListBuffer[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n) == n {\n                factors.append(factor)\n            }\n        }\n        factors.sort(Comparator.comparing(Long::toString))\n        return factors.toList\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = ListBuffer[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n) == n {\n                factors.append(factor)\n            }\n        }\n        factors.sort(Comparator.comparing(Long::toString))\n        return factors.toList\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292990,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd5cu8ek_.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd5cu8ek_.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd5cu8ek_.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd5cu8ek_.scala:18:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (factor * n) == n {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value n is not a member of Any => Boolean\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd5cu8ek_.scala:22:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        factors.sort(Comparator.comparing(Long::toString))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of scala.collection.mutable.ListBuffer[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factor(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factor(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplag4uqq8.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplag4uqq8.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplag4uqq8.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplag4uqq8.scala:32:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplag4uqq8.scala:50:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplag4uqq8.scala:66:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmplag4uqq8.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactor\u001b[0m(\u001b[36mn\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val d = 2l\n        while (n % d == 0) {\n            factors.add(d)\n            n /= d\n        }\n        if (n > 1) {\n            factors.add(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val d = 2l\n        while (n % d == 0) {\n            factors.add(d)\n            n /= d\n        }\n        if (n > 1) {\n            factors.add(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors2(n : Long) : List[Long] = {\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpym67qopc.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym67qopc.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            n /= d\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpym67qopc.scala:36:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpym67qopc.scala:40:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            n /= d\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpym67qopc.scala:57:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactors2\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Unit\n\u001b[31m   |\u001b[0m                                               Required: List[Long]\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp3zew5at.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactorsWithRemainder(n : Long) : List[T\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpib3lrfpw.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpib3lrfpw.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpib3lrfpw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpib3lrfpw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpib3lrfpw.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpib3lrfpw.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpib3lrfpw.scala:57:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactorsWithRemainder\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mT\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Not found: type T\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpib3lrfpw.scala:57:8 --------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp3zew5at.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp3zew5at.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpff2xpux_.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpff2xpux_.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpff2xpux_.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpff2xpux_.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpff2xpux_.scala:35:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpff2xpux_.scala:36:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpff2xpux_.scala:38:36 --------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n == n) {\n                factors:= factors + List(factor)\n            }\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxklo8m94.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxklo8m94.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxklo8m94.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorsInReverse((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsInReverse((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppmzzwa6t.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppmzzwa6t.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppmzzwa6t.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppmzzwa6t.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppmzzwa6t.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppmzzwa6t.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppmzzwa6t.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size - 1) {\n            val divisor = divisors.apply(i)\n            val count = n.div(divisor).toLong\n            if (count > 0) {\n                factors = factors.append(divisor.toLong)\n                factors = factors.append(count)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size - 1) {\n            val divisor = divisors.apply(i)\n            val count = n.div(divisor).toLong\n            if (count > 0) {\n                factors = factors.append(divisor.toLong)\n                factors = factors.append(count)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphy3riba1.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphy3riba1.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphy3riba1.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcount\u001b[0m = n.div(divisor).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphy3riba1.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                factors = factors.append(divisor.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphy3riba1.scala:21:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                factors = factors.append(count)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphy3riba1.scala:38:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphy3riba1.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcount\u001b[0m = n.div(divisor).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value div is not a m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val factor = 2l\n        while (n > 1) {\n            if (n % factor == 0) {\n                factors.append(factor)\n                n /= factor\n            } else {\n                factor = 3l\n            }\n        }\n        factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val factor = 2l\n        while (n > 1) {\n            if (n % factor == 0) {\n                factors.append(factor)\n                n /= factor\n            } else {\n                factor = 3l\n            }\n        }\n        factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors2((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors2((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292990,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp27hpxybe.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27hpxybe.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27hpxybe.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= factor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp27hpxybe.scala:21:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                factor = \u001b[31m3l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val factor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27hpxybe.scala:38:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27hpxybe.scala:43:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                n /= factor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp27hpxybe.scala:45:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                factor = \u001b[31m3l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt1cm7m8e.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt1cm7m8e.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt1cm7m8e.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = primeFactorization(n)\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors.get(i)\n            val factorCount = primeFactor.toLong\n            for (j <- 0 until factorCount) {\n                factors.add(primeFactor)\n            }\n        }\n        return factors\n    }\n\n    // Return prime factors of given integer.\n    // >>> primeFactorization(2l)\n    // (List[Long](2l.toLong))\n    // >>> primeFactorization(4l)\n    // (List[Long](2l.toLong, 2l.toLong))\n    // >>> primeFactorization(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorization(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactorization(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactorization(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n            val primeFactor = scala.math.factorial(i)\n            if (primeFactor.toLong % n == 0) {\n                primeFactors.add(primeFactor)\n                nFactors -= 1\n            }\n        }\n        factors.addAll(primeFactors)\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5ogs0wp.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp5ogs0wp.scala:17:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mprimeFactor\u001b[0m = primeFactors.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[Long] - did you mean primeFactors.seq?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5ogs0wp.scala:38:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5ogs0wp.scala:39:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp5ogs0wp.scala:41:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nFactors) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (nFactors : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            val factor = factorization.apply(i)\n            factors = factors.append(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8l)\n    // List(2l.toLong, 2l.toLong, 2l.toLong)\n    // >>> factor(25l)\n    // List(5l.toLong, 5l.toLong)\n    // >>> factor(70l)\n    // List(2l.toLong, 5l.toLong, 7l.toLong)\n    def factor(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            val factor = factorization.apply(i)\n            factors = factors.append(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factor(8l)\n    // List(2l.toLong, 2l.toLong, 2l.toLong)\n    // >>> factor(25l)\n    // List(5l.toLong, 5l.toLong)\n    // >>> factor(70l)\n    // List(2l.toLong, 5l.toLong, 7l.toLong)\n    def factor(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until factorization.size) {\n            val factor = factorization.apply(i)\n            factors =\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgwi3xo9s.scala:56:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            factors =\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgwi3xo9s.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgwi3xo9s.scala:18:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgwi3xo9s.scala:37:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgwi3xo9s.scala:69:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgwi3xo9s.scala:51:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactor\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef factor(n: Long): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32 and\n\u001b[31m   |\u001b[0mdef factor(n: Long): List[Long] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.add(i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) factors.add(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorizeReverse((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorizeReverse((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorizeReverse((70l))\n    // (List[Long](7l.toLong, 5l.toLong, 2l.toLong))\n    def factorizeReverse(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val i = n\n        while (i > 1) {\n            while (i % 2 == 0) {\n                factors.add(2l)\n                i /= 2\n            }\n            while (i % 3 == 0) {\n                factors.add(3l)\n                i /= 3\n            }\n            while (i % 5 == 0) {\n                factors.add(5l)\n                i /= 5\n            }\n            while (i % 7 == 0) {\n                factors.add(7l)\n                i /= 7\n            }\n        }\n        if (i == 1) factors.add(i)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize2((8l))\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppg9zdi02.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppg9zdi02.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppg9zdi02.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppg9zdi02.scala:21:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppg9zdi02.scala:37:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppg9zdi02.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                i /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppg9zdi02.scala:46:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m                i /= \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors2(n : Long) : List[Long] = {\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph28jsofm.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph28jsofm.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph28jsofm.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph28jsofm.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph28jsofm.scala:57:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactors2\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Unit\n\u001b[31m   |\u001b[0m                                               Required: List[Long]\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu56_mkk0.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:49:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu56_mkk0.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    ass",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return the sum of all prime factors of given integer\n    // >>> primeFactorsSum(8l)\n    // 2l\n    // >>> primeFactorsSum(25l)\n    // 5l\n    // >>> primeFactorsSum(70l)\n    // 2l + 5l + 7l\n    def primeFactorsSum(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n        for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n        }\n        return sum\n    }\n\n    // Return the product of all prime factors of given integer\n    // >>> primeFactorsProduct(8l)\n    // 2l\n    // >>> primeFactorsProduct(25l)\n    // 5l\n    // >>> primeFactorsProduct(70l)\n    // 2l * 5l * 7l\n    def primeFactorsProduct(n : Long) : Long = {\n        var factors = factorize(n)\n        var product = 1l\n        for (i <- 0 until factors.length) {\n            product = product * factors(i)\n        }\n        return product\n    }\n\n    // Return the sum of all divisors of given integer\n    // >>> divisorsSum(8l)\n    // 2l + 4l + 8l\n    // >>> divisorsSum(25l)\n    // 5l + 25l\n    // >>> divisorsSum(70l)\n    // 2l + 5l + 7l + 14l + 28l\n    def divisorsSum(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n        for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv6zveext.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv6zveext.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv6zveext.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv6zveext.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv6zveext.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpv6zveext.scala:74:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m74 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val primeFactors = mutable.List[Long]()\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors.append(n)\n        }\n        factors.foreach(f -> primeFactors.append(f))\n        return factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaxniu4q7.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaxniu4q7.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaxniu4q7.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpaxniu4q7.scala:22:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            i = i + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph9_5hwjh.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph9_5hwjh.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9_5hwjh.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph9_5hwjh.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph9_5hwjh.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph9_5hwjh.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph9_5hwjh.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors(i)\n            val count = count(primeFactor, n)\n            factors.add(primeFactor)\n            factors.addAll(count.toList)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors(70)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        if (n == 0) {\n            return factors\n        }\n        if (n == 1) {\n            return factors\n        }\n        if (n == 2) {\n            return factors\n        }\n        if (n == 3) {\n            return factors\n        }\n        if (n % 2 == 0) {\n            factors.add(2l)\n            factors.add(n / 2l)\n            return factors\n        }\n        if (n % 3 == 0) {\n            factors.add(3l)\n            factors.add(n / 3l)\n            return factors\n        }\n        val divisor = 5l\n        while (divisor * divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor)\n                factors.add(n / divisor)\n                return factors\n            }\n            divisor += 2\n        }\n        factors.add\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptaa34lph.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmptaa34lph.scala:15:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = primeFactors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimeFactors\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptaa34lph.scala:35:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptaa34lph.scala:65:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            divisor += \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean divisor.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val divisorFactors = divisor.toLong / 2\n            val divisorFactorsCopy = divisorFactors.copy\n            while (divisorFactorsCopy.size > 0) {\n                val divisorFactor = divisorFactorsCopy.apply(0)\n                divisorFactorsCopy = divisorFactorsCopy.slice(1)\n                factors = factors.append(divisorFactor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val divisorFactors = divisor.toLong / 2\n            val divisorFactorsCopy = divisorFactors.copy\n            while (divisorFactorsCopy.size > 0) {\n                val divisorFactor = divisorFactorsCopy.apply(0)\n                divisorFactorsCopy = divisorFactorsCopy.slice(1)\n                factors = factors.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_v3x65zs.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_v3x65zs.scala:62:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_v3x65zs.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_v3x65zs.scala:22:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                divisorFactorsCopy = divisorFactorsCopy.slice(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val divisorFactorsCopy\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_v3x65zs.scala:23:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                factors = factors.append(divisorFactor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_v3x65zs.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_v3x65zs.scala:47:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                divisorFactorsCopy = divisorFactorsCopy.slice(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                val j = 2l\n                while (n % i == 0) {\n                    n /= i\n                    j += 1\n                }\n                factors = factors.append(j)\n            }\n            i += 1\n        }\n        if (n > 1) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppe_4kn7k.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppe_4kn7k.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppe_4kn7k.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    j += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value += is not a member of Long - did you mean j.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppe_4kn7k.scala:24:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                factors = factors.append(j)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppe_4kn7k.scala:26:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppe_4kn7k.scala:29:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return the number of divisors of given integer\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    // 7\n    def divisors(n : Long) : Long = {\n        var i = 2l\n        var count = 1l\n        while (i <= n) {\n            if (n % i == 0) {\n                count = count + 1l\n            }\n            i = i + 1l\n        }\n        count\n    }\n\n    // Return the number of divisors of given integer\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    // 7\n    def divisors2(n : Long) : Long = {\n        var i = 2l\n        var count = 1l\n        while (i <= n) {\n            if (n % i == 0) {\n                count = count + 1l\n            }\n            i = i + 1l\n        }\n        count\n    }\n\n    // Return the number of divisors of given integer\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    // 7\n    def divisors3(n : Long) : Long = {\n        var i = 2l\n        var count = 1l\n        while (i <= n) {\n            if (n % i == 0) {\n                count = count + 1l\n            }\n            i = i + 1l\n        }\n        count\n    }\n\n    // Return the number of divisors of given integer\n    // >>> divisors(8l)\n    // 2\n    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpht9m1jre.scala:99:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m99 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpht9m1jre.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpht9m1jre.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpht9m1jre.scala:89:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpht9m1jre.scala:90:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpht9m1jre.scala:91:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    assert(factorize((\u001b[31m8l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpht9m1jre.scala:92:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        if (n == 1) return List(1l)\n        var factors = List.empty[Long]\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        if (n == 1) return List(1l)\n        var factors = List.empty[Long]\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps9s17b0l.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps9s17b0l.scala:20:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps9s17b0l.scala:21:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps9s17b0l.scala:26:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps9s17b0l.scala:46:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps9s17b0l.scala:47:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps9s17b0l.scala:52:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps9s17b0l.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(factorize((\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors.add(i)\n                factors.add(n / i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors.add(i)\n                factors.add(n / i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293001,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw94nk5ha.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw94nk5ha.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw94nk5ha.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw94nk5ha.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw94nk5ha.scala:38:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw94nk5ha.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw94nk5ha.scala:46:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - di",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        for (i <- 0 until n) {\n            val factor = scala.math.factorial(i)\n            if (factor % n == 0) {\n                factors.append(factor)\n                factors.append(n / factor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        for (i <- 0 until n) {\n            val factor = scala.math.factorial(i)\n            if (factor % n == 0) {\n                factors.append(factor)\n                factors.append(n / factor)\n            }\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp6yzyimz.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp6yzyimz.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp6yzyimz.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp6yzyimz.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp6yzyimz.scala:16:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp6yzyimz.scala:35:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp6yzyimz.scala:36:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val primeFactors = List[Long]()\n        val primeFactorCount = 0\n        val primeFactor = 2l\n        while (n > 1l) {\n            if (n % primeFactor == 0) {\n                primeFactorCount += 1\n                primeFactors = primeFactors.append(primeFactor)\n                n /= primeFactor\n            } else {\n                if (primeFactorCount > 0) {\n                    factors = factors.append(primeFactorCount)\n                    primeFactorCount = 0\n                }\n                primeFactors = primeFactors.append(primeFactor)\n                primeFactorCount += 1\n                primeFactor = 2l\n            }\n        }\n        if (primeFactorCount > 0) {\n            factors = factors.append(primeFactorCount)\n        }\n        factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val primeFactors = List[Long]()\n        val primeFactorCount = 0\n        val primeFactor = 2l\n        while (n > 1l) {\n            if (n % primeFactor == 0) {\n                primeFactorCount += 1\n                primeFactors = primeFactors.append(primeFactor)\n                n /= primeFactor\n            } else {\n                if (primeFactorCount > 0) {\n                    factors = factors.append(primeFactorCount)\n                    primeFactorCount = 0\n                }\n                \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293004,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp26ewvrm1.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp26ewvrm1.scala:20:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                primeFactorCount += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     value += is not a member of Int - did you mean primeFactorCount.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp26ewvrm1.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                primeFactors = primeFactors.append(primeFactor)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean primeFactors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp26ewvrm1.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                n /= primeFactor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp26ewvrm1.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                    factors = factors.append(primeFactorCount)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp26ewvrm1.scala:26:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                    primeFactorCount = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val primeFactorCount\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp26ewvrm1.scala:28:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                primeFactors = primeFactors.append(primeFactor)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm7620wae.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                divisors.append(divisor)\n                n /= divisor\n            }\n            divisor++\n        }\n        factors.append(n)\n        factors.appendAll(divisors)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                divisors.append(divisor)\n                n /= divisor\n            }\n            divisor++\n        }\n        factors.append(n)\n        factors.appendAll(divisors)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpeoxvtv8q.scala:22:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpeoxvtv8q.scala:47:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeoxvtv8q.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeoxvtv8q.scala:19:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                divisors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean divisors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeoxvtv8q.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeoxvtv8q.scala:24:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeoxvtv8q.scala:25:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        factors.appendAll(divisors)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue appendAll is not a member of List[Long] - did you mean factors.appendedAll?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeoxvtv8q.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return List(0l)\n        if (n == 1) return List(1l)\n        if (n == 2) return List(2l)\n        if (n == 3) return List(3l)\n        if (n == 4) return List(2l, 2l)\n        if (n == 5) return List(5l)\n        if (n == 6) return List(2l, 3l)\n        if (n == 7) return List(7l)\n        if (n == 8) return List(2l, 2l, 2l)\n        if (n == 9) return List(3l, 3l)\n        if (n == 10) return List(5l, 2l)\n        if (n == 11) return List(11l)\n        if (n == 12) return List(2l, 2l, 2l, 2l)\n        if (n == 13) return List(13l)\n        if (n == 14) return List(7l, 2l)\n        if (n == 15) return List(3l, 5l)\n        if (n == 16) return List(2l, 2l, 2l, 2l, 2l)\n        if (n == 17) return List(17l)\n        if (n == 18) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 19) return List(19l)\n        if (n == 20) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 21) return List(7l, 2l, 2l)\n        if (n == 22) return List(11l, 2l)\n        if (n == 23) return List(23l)\n        if (n == 24) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 25) return List(5l, 5l)\n        if (n == 26) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 27) return\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293001,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ehh65cm.scala:41:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m27\u001b[0m) \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Unit\n\u001b[31m   |\u001b[0m                     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.append(n)\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx4q0pww7.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx4q0pww7.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx4q0pww7.scala:24:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpes22a5qk.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpes22a5qk.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val d = 2l\n        while (n > 1) {\n            while (n % d == 0) {\n                factors.add(d)\n                n /= d\n            }\n            d = d + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293001,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnlklafv2.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnlklafv2.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= d\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpnlklafv2.scala:21:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            d = d + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            } else {\n                i = i + 1l\n            }\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293002,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi2gvxquv.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2gvxquv.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi2gvxquv.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2gvxquv.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2gvxquv.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi2gvxquv.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2gvxquv.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n        if (n == 1) return Nil\n        if (n == 2) return Nil\n        if (n == 3) return Nil\n        if (n == 4) return Nil\n        if (n == 5) return Nil\n        if (n == 6) return Nil\n        if (n == 7) return Nil\n        if (n == 8) return Nil\n        if (n == 9) return Nil\n        if (n == 10) return Nil\n        if (n == 11) return Nil\n        if (n == 12) return Nil\n        if (n == 13) return Nil\n        if (n == 14) return Nil\n        if (n == 15) return Nil\n        if (n == 16) return Nil\n        if (n == 17) return Nil\n        if (n == 18) return Nil\n        if (n == 19) return Nil\n        if (n == 20) return Nil\n        if (n == 21) return Nil\n        if (n == 22) return Nil\n        if (n == 23) return Nil\n        if (n == 24) return Nil\n        if (n == 25) return Nil\n        if (n == 26) return Nil\n        if (n == 27) return Nil\n        if (n == 28) return Nil\n        if (n == 29) return Nil\n        if (n == 30) return Nil\n        if (n == 31) return Nil\n        if (n == 32) return Nil\n        if (n == 33) return Nil\n        if (n == 34) return Nil\n        if (n == 35) return Nil\n        if (n == 36) return Nil\n        if (n == 37) return Nil\n        if (n == 38) return Nil\n        if (n == 39) return Nil\n        if (n == 40) return Nil\n        if (n == 41) return Nil\n        if (n == 42) return Nil\n        if (n == 43) return Nil\n        if (n == 44) return Nil\n        if (n == 45) return Nil\n        if (n == 46) return Nil\n        if (n == 47) return Nil\n        if (n == 48) return Nil\n        if (n == 49) return Nil\n        if (n == 50) return Nil\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp7yjpcl2f.scala:65:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisors = new ArrayList[Long]\n        val divisor = 2l\n        while (n > 1l) {\n            if (n % divisor == 0) {\n                factors.add(divisor)\n                divisors.add(divisor)\n                n /= divisor\n            } else {\n                divisor = divisor + 1l\n            }\n        }\n        factors.add(n)\n        for (divisor in divisors) {\n            factors.add(divisor)\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293004,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy0wi9oo4.scala:27:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mfor\u001b[0m (divisor in divisors) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy0wi9oo4.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy0wi9oo4.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy0wi9oo4.scala:21:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpy0wi9oo4.scala:23:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                divisor = divisor + \u001b[31m1l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val divisor\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy0wi9oo4.scala:29:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors(i)\n            val count = 1\n            while (n % primeFactor == 0) {\n                n /= primeFactor\n                count += 1\n            }\n            factors.add(primeFactor * count)\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors(70)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n        val i = 2\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n                primeFactors.add(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        if (n > 1) {\n            primeFactors.add(n)\n        }\n        primeFactors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors(8)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25)\n    // (List[Long](\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293003,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyp39cw4x.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyp39cw4x.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpyp39cw4x.scala:15:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mprimeFactors\u001b[0m = primeFactors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mprimeFactors\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyp39cw4x.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= primeFactor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyp39cw4x.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                count += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean count.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyp39cw4x.scala:38:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyp39cw4x.scala:39:31 ---------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.add(i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) factors.add(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors.add(i)\n                n /= i\n            }\n            i += 1\n        }\n        if (n > 1) factors.add(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293004,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpat2y92k1.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpat2y92k1.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpat2y92k1.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpat2y92k1.scala:21:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpat2y92k1.scala:37:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpat2y92k1.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpat2y92k1.scala:44:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean i.!=?\n\u001b[31m\u001b[31m-",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdr892xj.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * factor == n) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293005,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6z1_65bh.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6z1_65bh.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6z1_65bh.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6z1_65bh.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6z1_65bh.scala:36:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6z1_65bh.scala:38:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6z1_65bh.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm7620wae.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm7620wae.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm7620wae.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                divisors.append(divisor)\n                n /= divisor\n            }\n            divisor++\n        }\n        for (i <- 0 until divisors.size) {\n            factors.append(divisors.apply(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n                divisors.append(divisor)\n                n /= divisor\n            }\n            divisor++\n        }\n        for (i <- 0 until divisors.size) {\n            factors.append(divisors.apply(i))\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293005,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpoc2p5ppx.scala:22:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpoc2p5ppx.scala:48:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            divisor++\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoc2p5ppx.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoc2p5ppx.scala:19:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                divisors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean divisors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoc2p5ppx.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= divisor\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoc2p5ppx.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            factors.append(divisors.apply(i))\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoc2p5ppx.scala:45:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m                divisors.append(divisor)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean divisors.appended?\n\u001b[31m\u001b[31m-- [E008] Not ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorsLarger((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsLarger((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx93pep67.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx93pep67.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx93pep67.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx93pep67.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx93pep67.scala:43:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx93pep67.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx93pep67.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> primeFactorsSum(2l)\n    // 2l\n    // >>> primeFactorsSum(6l)\n    // 6l\n    // >>> primeFactorsSum(12l)\n    // 12l\n    def primeFactorsSum(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n        for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n        }\n        return sum\n    }\n\n    // Return the product of all the prime factors of given integer.\n    // >>> primeFactorsProduct(2l)\n    // 2l\n    // >>> primeFactorsProduct(6l)\n    // 6l\n    // >>> primeFactorsProduct(12l)\n    // 144l\n    def primeFactorsProduct(n : Long) : Long = {\n        var factors = factorize(n)\n        var product = 1l\n        for (i <- 0 until factors.length) {\n            product = product * factors(i)\n        }\n        return product\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> primeFactorsSum(2l)\n    // 2l\n    // >>> primeFactorsSum(6l)\n    // 6l\n    // >>> primeFactorsSum(12l)\n    // 12l\n    def primeFactorsSum(n : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n        for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n        }\n        return sum\n    }\n\n    // Return the product of all the prime factors of given integer.\n\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293004,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9x3bduh1.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9x3bduh1.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9x3bduh1.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9x3bduh1.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp9x3bduh1.scala:68:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mprimeFactorsSum\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef primeFactorsSum(n: Long): Long in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36 and\n\u001b[31m   |\u001b[0mdef primeFactorsSum(n: Long): Long in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 68\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9x3bduh1.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorizeBack((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorizeBack((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorizeBack((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorizeBack(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = n\n        while (i > 1l) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i - 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorizeBack((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorizeBack((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorizeBack((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorizeBack2(n : Long) : List[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293004,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiymjn2a4.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiymjn2a4.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiymjn2a4.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiymjn2a4.scala:40:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiymjn2a4.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpiymjn2a4.scala:57:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactorizeBack2\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mfactorizeBack2\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiymjn2a4.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu56_mkk0.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:24:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:43:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:44:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu56_mkk0.scala:49:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu56_mkk0.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    ass",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n % scala.math.factorial(factor) == 0) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n            if (factor * n % scala.math.factorial(factor) == 0) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpijha_u87.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:19:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:36:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnFactors\u001b[0m = scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:38:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = scala.math.factorial(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpijha_u87.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial.divisors(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            factors = factors.append(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors = scala.math.factorial.divisors(n)\n        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n            val factor = n / divisor\n            if (factor.toLong % 2 == 0) {\n                factors = factors.append(factor)\n            }\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> prime\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293005,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuah0__h9.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuah0__h9.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial.divisors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuah0__h9.scala:19:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuah0__h9.scala:35:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdivisors\u001b[0m = scala.math.factorial.divisors(n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuah0__h9.scala:40:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m                factors = factors.append(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuah0__h9.scala:56:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    assert(factorize((\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: factorize\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuah0__h9.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(factorize((\u001b[31m4l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong))));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb18wv_pw.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val num = n\n        while (num > 1) {\n            val factor = num.div(num.toLong.min)\n            val count = num.div(factor).toLong.max\n            factors.append(factor)\n            factors.append(count)\n            num = num.div(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val num = n\n        while (num > 1) {\n            val factor = num.div(num.toLong.min)\n            val count = num.div(factor).toLong.max\n            factors.append(factor)\n            factors.append(count)\n            num = num.div(factor)\n        }\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactorsInReverse((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsInReverse((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293006,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxilzb4t9.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxilzb4t9.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxilzb4t9.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = num.div(num.toLong.min)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxilzb4t9.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcount\u001b[0m = num.div(factor).toLong.max\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxilzb4t9.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            num = num.div(factor)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value div is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxilzb4t9.scala:36:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxilzb4t9.scala:39:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mfactor\u001b[0m = num.div(num.toLong.min)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n        val num = n\n        while (num > 1) {\n            val divisor = num.div(2l)\n            if (divisor.isDefined) {\n                factors.append(divisor.get())\n                num = num.sub(divisor.get() * 2l)\n            } else {\n                break\n            }\n        }\n        factors.reverse()\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293005,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf8hj1m33.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactors\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf8hj1m33.scala:17:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdivisor\u001b[0m = num.div(\u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf8hj1m33.scala:20:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                num = num.sub(divisor.get() * \u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value sub is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf8hj1m33.scala:22:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors((8l))\n    // 2l.toLong\n    // >>> prime_factors((25l))\n    // 5l.toLong\n    // >>> prime_factors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors_recursive((8l))\n    // 2l.toLong\n    // >>> prime_factors_recursive((25l))\n    // 5l.toLong\n    // >>> prime_factors_recursive((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors_recursive(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293005,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvzef9za4.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvzef9za4.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvzef9za4.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvzef9za4.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvzef9za4.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvzef9za4.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvzef9za4.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvzef9za4.scala:47:22 ------------------------\u001b[0m\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.append(n)\n        return factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293006,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb00mvcrk.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb00mvcrk.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb00mvcrk.scala:24:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean factors.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from largest to smallest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n                n /= i\n            } else {\n                i += 1\n            }\n        }\n        factors = factors.append(n)\n        return factors\n    }\n\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4r62risu.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4r62risu.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4r62risu.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4r62risu.scala:24:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4r62risu.scala:42:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                factors = factors.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4r62risu.scala:43:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4r62risu.scala:48:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        factors = factors.append(n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4r62risu.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(factorize((\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return the sum of all the prime factors of given integer.\n    // >>> prime_factors((8l))\n    // 2l.toLong\n    // >>> prime_factors((25l))\n    // 5l.toLong\n    // >>> prime_factors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n    }\n\n    // Return the product of all the prime factors of given integer.\n    // >>> prime_factors_product((8l))\n    // 2l.toLong\n    // >>> prime_factors_product((25l))\n    // 5l.toLong\n    // >>> prime_factors_product((70l))\n    // 2l.toLong * 5l.toLong * 7l.toLong\n    def prime_factors_product(n : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors, i)\n                n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors, n)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664293007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0g6whu4k.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0g6whu4k.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0g6whu4k.scala:19:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0g6whu4k.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0g6whu4k.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                factors = append(factors, i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0g6whu4k.scala:42:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0g6whu4k.scala:47:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            factors = append(factors, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: append\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m long",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}