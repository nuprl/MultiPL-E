{
  "name": "HumanEval_139_special_factorial",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
  "completions": [
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The function will receive an integer",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)",
    "        val n = n.toLong\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The function will receive an integer",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / (n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 until n) = 1 + 2 + ... + n\n    // For example:\n    // >>> sum(1 until 5)\n    // 15\n    // The function will receive an integer as input and should return the sum of\n    // the first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.sum(1 until n)\n    }\n\n    // The sum of the first n even numbers is defined as:\n    // sum(2 until n) = 2 + 4 + ... + 2n\n    // For example:\n    // >>> sum(2 until 10)\n    // 30\n    // The function will receive an integer as input and should return the sum of\n    // the first n even numbers.\n    def sumEven(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.sum(2 until n)\n    }\n\n    // The sum of the first n odd numbers is defined as:\n    // sum(1 until n) = 1 + 3 + ... + 2n - 1\n    // For example:\n    // >>> sum(1 until 10)\n    // 55\n    // The function will receive an integer as input and should return the sum of\n    // the first n odd numbers.\n    def sumOdd(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.sum(1 until n)\n    }\n\n    // The product of the first n natural numbers is defined as:\n    // product(1 until n) = 1 * 2 * ... * n\n    // For example:\n    // >>> product(1 until 5)\n    // 120\n    // The function will receive an integer as input and should",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSe",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial2(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial3(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial4(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return brazilianFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return brazilianFactorial2(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The",
    "        if (n == 0) {\n            1l\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial2(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def b",
    "        val n_ = n.toLong\n        if (n_ < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n_ == 0) {\n            return 1L\n        }\n        return n_ * specialFactorial(n_ - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial6(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(1 until n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The function will receive an integer",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be > 0\")\n        }\n        return _.product(1 until n)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        ",
    "        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def b",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial5(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial6(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial7(n : Long) : Long = {\n        val",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(n) = n * (n + 1) / 2\n    // For example:\n    // >>> sum(5)\n    // 30\n    // The function will receive an integer as input and should return the sum of the\n    // first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(range(1, n + 1))\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(n) = n * (n + 1) * (2n + 1) / 6\n    // For example:\n    // >>> sum_of_squares(5)\n    // 55\n    // The function will receive an integer as input and should return the sum of the\n    // squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(range(1, n + 1).map(_ * _).toSeq())\n    }\n\n    // The sum of the cubes of the first n natural numbers is defined as:\n    // sum_of_cubes(n) = n * (n + 1) * (2n + 1) * (3n + 1) / 24\n    // For example:\n    // >>> sum_of_cubes(5)\n    // 55\n    // The function will receive an integer as input and should return the sum of the\n    // cubes of the first n natural numbers.\n    def sum_of_cubes(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(range",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(1 until n) * specialFactorial(n)",
    "        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119, n",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The sum of the special factorials of the numbers from 1 to n is defined as:\n    // sum_of_special_factorials(n) = sum(special_factorial(i) for i in range(1, n + 1))\n    // For example:\n    // >>> sum_of_special_factorials(5)\n    // 286\n    // The function will receive an integer as input and should return the sum of the\n    // special factorials of the numbers from 1 to this integer.\n    def sum_of_special_factorials(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.sum(specialFactorial(i) for i in range(1, n + 1))\n    }\n\n    // The sum of the special factorials of the numbers from 1 to n is defined as:\n    // sum_of_special_factorials(n) = sum(special_factorial(i) for i in range(1, n + 1))\n    // For example:\n    // >>> sum_of_special_factorials(5)\n    // 286\n    // The function will receive an integer as input and should return the sum of the\n    // special factorials of the numbers from 1 to this integer.\n    def sum_of_special_factorials_scala(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.sum(scala.math.factorial.special(i) for i in range(1, n + 1))\n    }\n\n    // The sum of the special factorials of the numbers from 1 to n is defined as:\n    // sum_of_special_factorials(n) = sum(special_factorial(i) for i in range(1, n + 1))\n    // For example:\n    // >>> sum_",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return (n * factorial(n - 1))",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(1 until n)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The function will receive an integer",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSe",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def b",
    "        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n == 0) {\n            1l\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilian",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long =",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial2(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial3(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial4(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    //",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 to n) = 1 + 2 + ... + n\n    // For example:\n    // >>> sum(1 to 5)\n    // 15\n    // The function will receive an integer as input and should return the sum of\n    // the first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n * (n + 1) / 2\n        }\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(1 to n) = 1^2 + 2^2 + ... + n^2\n    // For example:\n    // >>> sum_of_squares(1 to 5)\n    // 55\n    // The function will receive an integer as input and should return the sum of\n    // the squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n * (n * n + 1) / 2\n        }\n    }\n\n    // The sum of the cubes of the first n natural numbers is defined as:\n    // sum_of_cubes(1 to n) = 1^3 + 2^3 + ... + n^3\n    // For example:\n    // >>> sum_of_cubes(1 to 5)\n    // 55\n    // The function will receive an integer as input and should return the sum of\n    // the cubes of the first n natural numbers.\n    def sum_of_cubes(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n * (n * n * n + 1) / 2\n        }\n    }\n\n    // The sum of the first n prime numbers is defined as:\n    // sum_of_primes(1 to n) = 1 + 2 + ... + n\n    // where prime numbers",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return brazilianFactorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return brazilianFactorial2(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long =",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(n, _.product(n - 1, _.product(n - 2, _.product(n - 3, _.product(n - 4, _.product(n - 5, _.product(n - 6, _.product(n - 7, _.product(n - 8, _.product(n - 9, _.product(n - 10, _.product(n - 11, _.product(n - 12, _.product(n - 13, _.product(n - 14, _.product(n - 15, _.product(n - 16, _.product(n - 17, _.product(n - 18, _.product(n - 19, _.product(n - 20, _.product(n - 21, _.product(n - 22, _.product(n - 23, _.product(n - 24, _.product(n - 25, _.product(n - 26, _.product(n - 27, _.product(n - 28, _.product(n - 29, _.product(n - 30, _.product(n - 31, _.product(n - 32, _.product(n - 33, _.product(n - 34, _.product(n - 35, _.product(n - 36, _.product(n - 37, _.product(n - 38, _.product(n - 39, _.product(n - 40, _.product(n - 41, _.product(n - 42, _.product(n - 43, _.product(n - 44, _.product(n - 45, _.product(n - 46, _.product(n - 47, _.product(n - 48, _.product(n - 49, _.product(n - 50, _.product(n - 51, _.product(n - 52, _.product(n - 53, _.product(n - 54, _.product(n - 55, _.product(n - 56, _.product(n - 57, _.product(n - 58, _.product(n - 59, _.product(",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= specialFactorial(i - 1)\n        }\n        return result",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        val n_ = n\n        val n_1 = n - 1\n        val n_2 = n - 2\n        val n_3 = n - 3\n        val n_4 = n - 4\n        val n_5 = n - 5\n        val n_6 = n - 6\n        val n_7 = n - 7\n        val n_8 = n - 8\n        val n_9 = n - 9\n        val n_10 = n - 10\n        val n_11 = n - 11\n        val n_12 = n - 12\n        val n_13 = n - 13\n        val n_14 = n - 14\n        val n_15 = n - 15\n        val n_16 = n - 16\n        val n_17 = n - 17\n        val n_18 = n - 18\n        val n_19 = n - 19\n        val n_20 = n - 20\n        val n_21 = n - 21\n        val n_22 = n - 22\n        val n_23 = n - 23\n        val n_24 = n - 24\n        val n_25 = n - 25\n        val n_26 = n - 26\n        val n_27 = n - 27\n        val n_28 = n - 28\n        val n_29 = n - 29\n        val n_30 = n - 30\n        val n_31 = n - 31\n        val n_32 = n - 32\n        val n_33 = n - 33\n        val n_34 = n - 34\n        val n_35 = n - 35\n        val n_36 = n - 36\n        val n_37 = n - 37\n        val n_38 = n - 38\n        val n_39 = n - 39\n        val n_40 = n - 40\n        val n_41 = n - 41\n        val n_42 = n - 42\n        val n_43 = n - 43\n        val n_44 = n - 44\n        val n_45 = n - 45\n        val n_46 = n - 46\n        val n_47 = n - 47\n        val n_48 = n - 48\n        val n_49 = n - 49\n        val n_50 = n - 50\n        val n_51",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }",
    "        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)",
    "        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        ",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119,",
    "        val n_ = n.toLong\n        val n_1 = n_ - 1l\n        val n_2 = n_ - 2l\n        val n_3 = n_ - 3l\n        val n_4 = n_ - 4l\n        val n_5 = n_ - 5l\n        val n_6 = n_ - 6l\n        val n_7 = n_ - 7l\n        val n_8 = n_ - 8l\n        val n_9 = n_ - 9l\n        val n_10 = n_ - 10l\n        val n_11 = n_ - 11l\n        val n_12 = n_ - 12l\n        val n_13 = n_ - 13l\n        val n_14 = n_ - 14l\n        val n_15 = n_ - 15l\n        val n_16 = n_ - 16l\n        val n_17 = n_ - 17l\n        val n_18 = n_ - 18l\n        val n_19 = n_ - 19l\n        val n_20 = n_ - 20l\n        val n_21 = n_ - 21l\n        val n_22 = n_ - 22l\n        val n_23 = n_ - 23l\n        val n_24 = n_ - 24l\n        val n_25 = n_ - 25l\n        val n_26 = n_ - 26l\n        val n_27 = n_ - 27l\n        val n_28 = n_ - 28l\n        val n_29 = n_ - 29l\n        val n_30 = n_ - 30l\n        val n_31 = n_ - 31l\n        val n_32 = n_ - 32l\n        val n_33 = n_ - 33l\n        val n_34 = n_ - 34l\n        val n_35 = n_ - 35l\n        val n_36 = n_ - 36l\n        val n_37 = n_ - 37l\n        val n_38 = n_ - 38l\n        val n_39 = n_ - 39l\n        val n_40 = n_ - 40l\n        val n_41 = n_ - 41l\n        val n_42 = n_ - 42",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n == 0) {\n            1l\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1l\n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // eulerian factorial of this integer.\n    def eulerianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * eulerianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // fibonacci factorial of this integer.\n    def fibonacciFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * fibonacciFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // lucas factorial of this integer.\n    def lucasFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * lucasFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // harmonic factorial of this integer.\n    def harmonicFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * harmonicFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 until n) = 1 + 2 + 3 + ... + n\n    // For example:\n    // >>> sum(1 until 10)\n    // 55\n    // The function will receive an integer as input and should return the sum of the\n    // first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(1 until n)\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(1 until n) = 1^2 + 2^2 + 3^2 + ... + n^2\n    // For example:\n    // >>> sum_of_squares(1 until 10)\n    // 385\n    // The function will receive an integer as input and should return the sum of the\n    // squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(1 until n) * _.sum(1 until n)\n    }\n\n    // The sum of the natural logarithms of the first n natural numbers is defined as:\n    // sum_of_logs(1 until n) = ln(1) + ln(2) + ln(3) + ... + ln(n)\n    // For example:\n    // >>> sum_of_logs(1 until 10)\n    // 2.302585\n    // The function will receive an integer as input and should return the sum of the\n    // natural logarithms of the first n natural numbers.\n    def sum_of_logs(n : Long) : Double = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119,",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 to n) = 1 + 2 + ... + n = n(n+1)/2\n    // where n > 0\n    // For example:\n    // >>> sum(1 to 4)\n    // 10\n    // The function will receive an integer as input and should return the sum of the\n    // first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n == 0) {\n            0L\n        } else {\n            n * (n + 1) / 2\n        }\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(1 to n) = 1^2 + 2^2 + ... + n^2 = n(n+1)(2n+1)/6\n    // where n > 0\n    // For example:\n    // >>> sum_of_squares(1 to 4)\n    // 30\n    // The function will receive an integer as input and should return the sum of the\n    // squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        if (n == 0) {\n            0L\n        } else {\n            n * (n + 1) * (2 * n + 1) / 6\n        }\n    }\n\n    // The sum of the natural logs of the first n natural numbers is defined as:\n    // sum_of_logs(1 to n) = ln(1) + ln(2) + ... + ln(n) = ln(n!)\n    // where n > 0\n    // For example:\n    // >>> sum_of_logs(1 to 4)\n    // 2.0\n    // The function will receive an integer as input and should return the sum of the\n    // natural log of the first n natural numbers.\n    def sum_of_logs(n : Long) : Double = {\n        if (n == 0) {\n            0.0",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119, n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119,",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial6(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial7(n : Long) :",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return (n * factorial(n - 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return (factorial(n) * factorial(n - 1) * factorial(n - 2) * ... * factorial(1))",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def b",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // eulerian factorial of this integer.\n    def eulerianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * eulerianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // fibonacci factorial of this integer.\n    def fibonacciFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * fibonacciFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // lucas factorial of this integer.\n    def lucasFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * lucasFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // harmonic factorial of this integer.\n    def harmonicFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * harmonicFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n)\n    }\n\n    private def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // binomial coefficient of this integer.\n    def binomial(n : Long, k : Long) : Long = {\n        if (n < 0 || k < 0 || k > n) {\n            throw new IllegalArgumentException(\"n and k should be >= 0 and <= n\")\n        }\n        return _binomial(n, k)\n    }\n\n    private def _binomial(n : Long, k : Long) : Long = {\n        if (n < 0 || k < 0 || k > n) {\n            throw new IllegalArgumentException(\"n and k should be >= 0 and <= n\")\n        }\n        return _binomial(n - 1, k) + _binomial(n - 1, k - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n, (_.product(n - 1, (_.product(n - 2, (_.product(n - 3, (_.product(n - 4, (_.product(n - 5, (_.product(n - 6, (_.product(n - 7, (_.product(n - 8, (_.product(n - 9, (_.product(n - 10, (_.product(n - 11, (_.product(n - 12, (_.product(n - 13, (_.product(n - 14, (_.product(n - 15, (_.product(n - 16, (_.product(n - 17, (_.product(n - 18, (_.product(n - 19, (_.product(n - 20, (_.product(n - 21, (_.product(n - 22, (_.product(n - 23, (_.product(n - 24, (_.product(n - 25, (_.product(n - 26, (_.product(n - 27, (_.product(n - 28, (_.product(n - 29, (_.product(n - 30, (_.product(n - 31, (_.product(n - 32, (_.product(n - 33, (_.product(n - 34, (_.product(n - 35, (_.product(n - 36, (_.product(n - 37, (_.product(n - 38, (_.product(n - 39, (_.product(n - 40, (_.product(n - 41, (_.product(n - 42, (_.product(n - 43, (_.product(n - 44, (_.product(n - 45, (_.product(n - 46, (_.product(n - 47, (_.product(n - 48, (_.product(n - 49, (_.product(n - 50, (_.product(n - 51, (_.product(n - 52, (_.product(n - 53, (_.product(n - 54, (_.product(n - 55, (_.product(n - 56, (_.product(n - 57, (_.product(n - 58, (_.product(n - 59, (_.product(",
    "        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n",
    "        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * brazilianFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))",
    "        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 to n) = 1 + 2 + ... + n = n(n+1)/2\n    // where n > 0\n    // For example:\n    // >>> sum(1 to 5)\n    // 15\n    // The function will receive an integer as input and should return the sum of the\n    // first n natural numbers.\n    def sum(n : Long) : Long = {\n        return n * (n + 1) / 2\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(1 to n) = 1^2 + 2^2 + ... + n^2 = n(n+1)(2n+1)/6\n    // where n > 0\n    // For example:\n    // >>> sum_of_squares(1 to 5)\n    // 55\n    // The function will receive an integer as input and should return the sum of the\n    // squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        return n * (n + 1) * (2 * n + 1) / 6\n    }\n\n    // The sum of the natural logs of the first n natural numbers is defined as:\n    // sum_of_logs(1 to n) = ln(1) + ln(2) + ... + ln(n) = ln(n!)\n    // where n > 0\n    // For example:\n    // >>> sum_of_logs(1 to 5)\n    // 2.302585092994045\n    // The function will receive an integer as input and should return the sum of the\n    // natural log of the first n natural numbers.\n    def sum_of_logs(n : Long) : Double = {\n        return Math.log(specialFactorial(n))\n    }\n\n    // The sum of the natural logs of the first n natural numbers is defined as:\n    // sum_of_logs(1 to n) = l",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(n, _.product(n - 1, _.product(n - 2, _.product(n - 3, _.product(n - 4, _.product(n - 5, _.product(n - 6, _.product(n - 7, _.product(n - 8, _.product(n - 9, _.product(n - 10, _.product(n - 11, _.product(n - 12, _.product(n - 13, _.product(n - 14, _.product(n - 15, _.product(n - 16, _.product(n - 17, _.product(n - 18, _.product(n - 19, _.product(n - 20, _.product(n - 21, _.product(n - 22, _.product(n - 23, _.product(n - 24, _.product(n - 25, _.product(n - 26, _.product(n - 27, _.product(n - 28, _.product(n - 29, _.product(n - 30, _.product(n - 31, _.product(n - 32, _.product(n - 33, _.product(n - 34, _.product(n - 35, _.product(n - 36, _.product(n - 37, _.product(n - 38, _.product(n - 39, _.product(n - 40, _.product(n - 41, _.product(n - 42, _.product(n - 43, _.product(n - 44, _.product(n - 45, _.product(n - 46, _.product(n - 47, _.product(n - 48, _.product(n - 49, _.product(n - 50, _.product(n - 51, _.product(n - 52, _.product(n - 53, _.product(n - 54, _.product(n - 55, _.product(n - 56, _.product(n - 57, _.product(n - 58, _.product(n - 59, _.product(n",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial6(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial7(n : Long) :",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be > 0\")\n        }\n        return (n * factorial(n - 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be > 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be > 0\")\n        }\n        return factorial(n) * factorial(n - 1) * factorial(n - 2) * ... * factorial(1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(range(1, n + 1))",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / (n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return (n * factorial(n - 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * _factorial(n - 1)\n        }",
    "        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return (1l << n) * (1l << (n - 1)) * (1l << (n - 2)) * ... * (1l << 0)",
    "        val nFactorial = 1L\n        for (i <- 1 until n) {\n            nFactorial *= i\n        }\n        return nFactorial",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)",
    "        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}