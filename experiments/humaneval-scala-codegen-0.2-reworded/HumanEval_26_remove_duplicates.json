{
  "name": "HumanEval_26_remove_duplicates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n",
  "completions": [
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            } else {\n                result.remove(index)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // A word is defined as a sequence of non-space characters.\n    // >>> wordsInString(\"Hello World!\")\n    // (List[String](\"Hello\", \"World\", \"!\"))\n    def wordsInString(s : String) : List[String] = {\n        var result = new ArrayList[String]()\n        var index = 0\n        while (index < s.length()) {\n            var ch = s.apply(index)\n            if (ch == ' ') {\n                index += 1\n            } else {\n                var start = index\n                while (index < s.length() && s.apply(index) != ' ') {\n                    index += 1\n                }\n                result.add(s.substring(start, index))\n            }\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all the anagrams in the list.\n    // An anagram is a word that can be formed by rearranging the letters of\n    // another word.\n    // >>> anagramsInList(wordsInString(\"Hello World!\"))\n    // (List[String](\"Hello\", \"World\", \"!\"))\n    def anagramsInList(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size()) {\n            var word = words.apply(i)\n            var sortedWord = word.toLowerCase().sort()\n            for (j <- 0 until word.length()) {\n                var sortedWordPart = word.substring(j, word.length())\n                if (sortedWordPart != sortedWord.substring(j, word.length())) {\n                    break\n                } else",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.contains(number)) {\n                continue\n            }\n            result = result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            var index = result.indexOf(value)\n            if (index < 0) {\n                result = result.append(value)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            if (result.contains(value)) {\n                continue\n            }\n            result.add(value)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i + 1 until numbers.size) {\n                if (numbers.get(i) == numbers.get(j)) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers.get(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"ab\", \"bc\", \"ca\", \"bb\", \"cb\", \"ab\")))\n    // (List[String](\"ab\", \"bc\", \"ca\", \"bb\", \"cb\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var count = 0\n            for (j <- i + 1 until words.size) {\n                if (words.get(i).equals(words.get(j))) {\n                    count += 1\n                }\n            }\n            if (count >= 2) {\n                result.add(words.get(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"ab\", \"bc\", \"ca\", \"bb\", \"cb\", \"ab\")))\n    // (List[String](\"ab\", \"bc\", \"ca\", \"bb\", \"cb\"))\n    def getSubstrings2(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var count = 0\n            for (j <- i + 1 until words.size) {\n                if (words.get(i).equals(words.get(j))) {\n                    count += 1\n                }\n            }\n            if (count >= 2) {\n                result.add(words.get(i",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result += number\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // A word is a sequence of non-space characters.\n    // >>> wordsInString(\"Hello World\")\n    // (List[String](Hello, World))\n    def wordsInString(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            var c = s[i]\n            if (c == ' ') {\n                if (i == s.length - 1) {\n                    result += s\n                }\n            } else {\n                var j = i\n                while (j < s.length && s[j] != ' ') {\n                    j += 1\n                }\n                result += s.substring(i, j)\n                i = j\n            }\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all anagrams in the list.\n    // An anagram is a word that can be formed by rearranging the letters of another word.\n    // >>> anagrams(\"Hello\")\n    // (List[String](Hello, Helo, Hell, Eloh, Elo, Elle))\n    def anagrams(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            for (j <- 0 until word.length) {\n                var letters = mutable.List[String]()\n                for (k <- 0 until word.length) {\n                    if (k != j) {\n                        letters += word[k]\n                    }\n                }\n                if (letters",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for(var number : numbers) {\n            if(seen.contains(number)) continue\n            seen.add(number)\n            result.add(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result += number\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (value == numbers[j]) {\n                    break\n                }\n            }\n            if (j == numbers.length) {\n                result = result.append(value)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // Words are separated by a blank space.\n    // >>> wordsInString(\"Hello World\")\n    // (List[String](\"Hello\", \"World\"))\n    def wordsInString(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        var index = 0\n        for (i <- 0 until s.length) {\n            if (s[i] == ' ') {\n                if (index != i) {\n                    result = result.append(s.substring(index, i))\n                }\n                index = i + 1\n            }\n        }\n        if (index != s.length) {\n            result = result.append(s.substring(index, s.length))\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // Words are separated by a blank space.\n    // >>> wordsInString2(\"Hello World\")\n    // (List[String](\"Hello\", \"World\"))\n    def wordsInString2(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        var index = 0\n        for (i <- 0 until s.length) {\n            if (s[i] == ' ') {\n                if (index != i) {\n                    result = result.append(s.substring(index, i))\n                }\n                index = i + 1\n            }\n        }\n        if (index != s.length) {\n            result = result.append(s.substring(index, s.length))\n        }\n        return result\n    }\n\n    // From a",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"b\", \"b\")))\n    // (List[String](\"a\", \"c\", \"b\", \"b\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == word) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(word)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"b\", \"b\")))\n    // (List[String](\"a\", \"c\", \"b\", \"b\"))\n    def getSubstrings2(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == word) {\n                    found = true\n                    break\n                }\n            }\n",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) continue\n            result.add(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.size - i > 1) {\n                result = result.append(numbers.apply(i))\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var seen = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    seen = true\n                    break\n                }\n            }\n            if (!seen) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        result",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.add(i)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.add(i)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (var i = 0; i < numbers.size(); i++) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            } else {\n                result.set(index, number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> findAllRepeatedSubstrings((List[String](\"abc\", \"abcd\", \"abcde\", \"abc\", \"ab\"))).sort()\n    // (List[String](abc, abcd, abcde, abc, ab))\n    def findAllRepeatedSubstrings(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (var i = 0; i < words.size(); i++) {\n            var word = words.apply(i)\n            var index = result.indexOf(word)\n            if (index < 0) {\n                result.add(word)\n            } else {\n                result.set(index, word)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> findAllRepeatedSubstrings2((List[String](\"abc\", \"abcd\", \"abcde\", \"abc\", \"ab\"))).sort()\n    // (List[String](abc, abcd, abcde, abc, ab))\n    def findAllRepeatedSubstrings2(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (var i = 0; i < words.size(); i++) {\n            var word = words.apply(i)\n            var index = result.indexOf(word)\n            if (index < 0) {\n                result.add(word)\n            } else {\n                result.set(index, word)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) continue\n            result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.index(i) < numbers.index(result.length)) {\n                result = result.append(numbers.apply(i))\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.contains(number)) {\n                continue\n            }\n            result += number\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            } else {\n                result.remove(index)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (value == numbers[j]) {\n                    break\n                }\n            }\n            if (j == numbers.length) {\n                result += value\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (value == numbers[j]) {\n                    break\n                } else {\n                    result = result.append(value)\n                }\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        var seen = mutable.Set[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen = seen.add(i)\n            result = result.append(i)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.contains(number)) {\n                continue\n            }\n            result = result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            if (result.contains(value)) {\n                continue\n            }\n            result = result.append(value)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (var i = 0; i < numbers.length; i++) {\n            var number = numbers[i]\n            var found = false\n            for (var j = 0; j < result.length; j++) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result.append(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // Words are separated by a space.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"))\n    def wordsInString(s : String) : List[String] = {\n        var result = new ArrayList[String]()\n        var words = s.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            result.append(word)\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all the anagrams in the list.\n    // An anagram is a word that can be formed by rearranging the letters of another word.\n    // >>> anagrams(wordsInString(\"The quick brown fox jumps over the lazy dog\"))\n    // (List[String](\"The\", \"quick\", \"brown\", \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\"))\n    def anagrams(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var letters = new ArrayList[Character]()\n            for (var j = 0; j < word.length(); j++) {\n                letters.append(word.charAt(j))\n            }\n            var sortedLetters = letters.sort(new Comparator[Character]",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers.get(j) == numbers.get(i)) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers.get(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var count = 0\n            for (j <- i until words.size) {\n                if (words.get(j).equals(words.get(i))) {\n                    count += 1\n                }\n            }\n            if (count >= 2) {\n                result.add(words.get(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings2(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var count = 0\n            for (j <- i until words.size) {\n                if (words.get(j).equals(words.get(i))) {\n                    count += 1\n                }\n            }\n            if (count >= 2) {\n                result.add(words.get(i))\n            }\n        ",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.add(i)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.add(i)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.isEmpty() || result.last() != number) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var element = numbers[i]\n            var index = result.indexOf(element)\n            if (index < 0) {\n                result.add(element)\n            } else {\n                result[index] = null\n            }\n        }\n        result.foreach(x => if (x != null) { System.out.println(x) })\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var current = numbers.apply(i)\n            for (j <- i + 1 until numbers.size) {\n                if (numbers.apply(j) == current) {\n                    break\n                }\n            }\n            if (j == numbers.size) {\n                result.append(current)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"ab\", \"bc\", \"ca\", \"cb\", \"cc\", \"cd\", \"da\", \"db\", \"dc\", \"dd\", \"ea\", \"eb\", \"ec\", \"ed\", \"ee\", \"ef\", \"fg\", \"gh\", \"ha\", \"hb\", \"hc\", \"hd\", \"he\", \"hf\", \"hg\", \"hh\", \"hi\", \"hj\", \"hk\", \"hl\", \"hm\", \"hn\", \"ho\", \"hp\", \"hq\", \"hr\", \"hs\", \"ht\", \"hu\", \"hv\", \"hw\", \"hx\", \"hy\", \"hz\", \"hz\", \"ia\", \"ib\", \"ic\", \"id\", \"ie\", \"if\", \"ig\", \"ih\", \"ii\", \"ij\", \"ik\", \"il\", \"im\", \"in\", \"io\", \"ip\", \"iq\", \"ir\", \"is\", \"it\", \"iu\", \"iv\", \"iw\", \"ix\", \"iy\", \"iz\", \"ja\", \"jb\", \"jc\", \"jd\", \"je\", \"jf\", \"jg\", \"jh\", \"ji\", \"jj\", \"jk\", \"jl\", \"jm\", \"jn\", \"jo\", \"jp\", \"jq\", \"jr\", \"js\", \"jt\", \"ju\", \"jv\", \"jw\", \"jx\", \"jy\", \"jz\", \"ka\", \"kb\", \"kc\", \"kd\", \"ke\", \"kf\", \"kg\", \"kh\", \"ki\", \"kj\", \"kk\", \"kl\", \"km\", \"kn\", \"ko\", \"kp\", \"kq",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result += numbers[i]\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var count = 0\n            for (j <- i + 1 until numbers.length) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> substringAppearances((List[String](\"a\", \"b\", \"c\", \"b\", \"c\", \"b\"))).sort()\n    // (List[String](\"b\", \"c\"))\n    def substringAppearances(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.length) {\n            var count = 0\n            for (j <- i + 1 until words.length) {\n                if (words[i].equals(words[j])) {\n                    count += 1\n                }\n            }\n            if (count >= 2) {\n                result.add(words[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> substringAppearances2((List[String](\"a\", \"b\", \"c\", \"b\", \"c\", \"b\"))).sort()\n    // (List[String](\"b\", \"c\"))\n    def substringAppearances2(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.length) {\n            var count = 0\n            for (j <- i + 1 until words.length) {\n                if (words[i].equals(words[j])) {\n                    count += 1\n                }\n            }\n            if (count >= 2) {\n                result.add(words[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            val number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            var index = result.indexOf(value)\n            if (index < 0) {\n                result.add(value)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are greater than the given target.\n    // Keep order of elements left the same as in the input.\n    // >>> removeGreaterThan(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong), 2l.toLong)\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def removeGreaterThan(numbers : List[Long], target : Long) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            if (value < target) {\n                result.add(value)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> words(List[\"cat\", \"dog\", \"pig\", \"dog\", \"dog\", \"cat\"])\n    // (List[\"cat\", \"dog\", \"pig\"])\n    def words(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            var index = word.indexOf(\" \")\n            if (index < 0) {\n                result.add(word)\n            } else {\n                result.add(word.substring(0, index))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> words(List[\"cat\", \"dog\", \"pig\", \"dog\", \"dog\", \"cat\"])\n",
    "        var result = mutable.List[Long]()\n        for (i <- numbers.toIterator) {\n            var count = 0\n            for (j <- i) {\n                if (j == i) {\n                    count += 1\n                } else {\n                    count -= 1\n                }\n            }\n            if (count == 0) {\n                result += i\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- numbers.iterator()) {\n            var count = 0\n            for (j <- i) {\n                if (j == i) {\n                    count += 1\n                } else {\n                    count -= 1\n                }\n            }\n            if (count == 0) {\n                result += i\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            } else {\n                result.remove(index)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // Given a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"abcd\", \"ab\", \"bc\", \"cd\", \"cd\", \"e\")))\n    // (List[String](\"ab\", \"bc\", \"cd\", \"cd\"))\n    def getSubstrings(strings : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until strings.length) {\n            if (strings.exists(x => strings.exists(y => x.contains(y)))) {\n                result = result.append(strings[i])\n            }\n        }\n        return result\n    }\n\n    // Given a list of strings, return a list of all substrings that appear at least twice,\n    // in the same order as they appear in the input.\n    // >>> getSubstringsOrdered((List[String](\"abcd\", \"ab\", \"bc\", \"cd\", \"cd\", \"e\")))\n    // (List[String](\"ab\", \"bc\", \"cd\", \"cd\"))\n    def getSubstringsOrdered(strings : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until strings.length) {\n            if (strings.exists(x => strings.exists(y => x.contains(y)))) {\n                result = result.append(strings[i])\n            }\n        }\n        return result\n    }\n\n    // Given a list of strings, return a list of all substrings that appear at least twice,\n    // in the same order as they appear in the input.\n    // >>> getSubstringsOrdered2((List[String](\"abcd\", \"ab\", \"bc\", \"cd\", \"cd\", \"e\")))\n    // (List[String](\"ab",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            if (result.contains(value)) {\n                continue\n            }\n            result = result.append(value)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            val number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (value == numbers[j]) {\n                    break\n                }\n            }\n            if (j == numbers.length) {\n                result = result.append(value)\n            }\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.size - i > 1) {\n                val number = numbers.apply(i)\n                for (j <- i + 1 until numbers.size) {\n                    if (number == numbers.apply(j)) {\n                        break\n                    } else {\n                        result.append(number)\n                    }\n                }\n            } else {\n                result.append(numbers.apply(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.size - i > 1) {\n                val number = numbers.apply(i)\n                for (j <- i + 1 until numbers.size) {\n                    if (number == numbers.apply(j)) {\n                        break\n                    } else {\n                        result.append(number)\n                    }\n                }\n            } else {\n                result.append(numbers.apply(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) continue\n            result = result.append(number)\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result += numbers.get(i)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            } else {\n                result.remove(index)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (result.isEmpty() || numbers[i] != result.head) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (number == numbers[j]) {\n                    break\n                } else {\n                    result = result.append(number)\n                }\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.size - i > 1) {\n                result = result.append(numbers.apply(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"))\n    def wordsInString(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        var words = s.split(\" \")\n        for (i <- 0 until words.size) {\n            result = result.append(words.apply(i))\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"))\n    def wordsInString2(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        var words = s.split(\" \")\n        for (i <- 0 until words.size) {\n            result = result.append(words.apply(i))\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"))\n    def wordsInString3(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        var words = s.split(\" \")\n        for (i <- 0 until words.size) {\n            result = result.append(",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            var value = numbers.apply(i)\n            var seen = false\n            for (j <- 0 until result.size()) {\n                if (result.apply(j) == value) {\n                    seen = true\n                    break\n                }\n            }\n            if (!seen) {\n                result = result.append(value)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.index(i) < numbers.index(result.length)) {\n                result = result.append(numbers.apply(i))\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.contains(number)) {\n                continue\n            }\n            result = result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == word) {\n                    found = true\n                    break\n                }\n            }\n            if (found) {\n                result = result.append(word)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings2(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == word) {\n                    found = true\n                    break\n                }\n            }\n            if (found) {\n                result = result.append(word)\n            }\n        }\n        ",
    "        var result = mutable.List[Long]()\n        var seen = mutable.Set[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.append(i)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var current = numbers.get(i)\n            var found = false\n            for (j <- i + 1 until numbers.size) {\n                if (current == numbers.get(j)) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result.append(current)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all elements that are anagrams of each other.\n    // For example,\n    // >>> anagrams(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var count = 0\n            for (j <- i + 1 until numbers.length) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result += numbers[i]\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.add(i)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var current = numbers[i]\n            var found = false\n            for (j <- i + 1 until numbers.size) {\n                if (numbers[j] == current) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result.append(current)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> substrings(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            var index = result.indexOf(value)\n            if (index < 0) {\n                result.add(value)\n            } else {\n                result[index] = value\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result += numbers.get(i)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> substrings(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "        var result = mutable.List[Long]()\n        for (i <- numbers.iterator()) {\n            var count = 0\n            var value = i.next()\n            while (i.hasNext()) {\n                if (value == i.next()) {\n                    count += 1\n                } else {\n                    if (count > 0) {\n                        result.append(value)\n                        count = 0\n                    }\n                    value = i.next()\n                }\n            }\n            if (count > 0) {\n                result.append(value)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.contains(number)) {\n                continue\n            }\n            result = result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (i == 0) {\n                result.append(numbers.apply(i))\n            } else {\n                if (numbers.apply(i) != numbers.apply(i - 1)) {\n                    result.append(numbers.apply(i))\n                }\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (i == 0) {\n                result = mutable.List[Long](numbers[i])\n            } else {\n                if (numbers[i] != numbers[i - 1]) {\n                    result = result.append(numbers[i])\n                }\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        var seen = Set[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result = result.append(i)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            var index = result.indexOf(value)\n            if (index < 0) {\n                result = result.append(value)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var element = numbers.apply(i)\n            var index = result.indexOf(element)\n            if (index < 0) {\n                result.add(element)\n            } else {\n                result.remove(index)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // A word is a sequence of non-space characters.\n    // >>> words((List[String](\"Hello\", \"World\", \"World\", \"Hello\", \"World\", \"World\")))\n    // (List[String](\"Hello\", \"World\", \"World\"))\n    def words(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            var index = word.indexOf(\" \")\n            if (index < 0) {\n                result.add(word)\n            } else {\n                result.add(word.substring(0, index))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // A word is a sequence of non-space characters.\n    // >>> words2((List[String](\"Hello\", \"World\", \"World\", \"Hello\", \"World\", \"World\")))\n    // (List[String](\"Hello\", \"World\", \"World\"))\n    def words2(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            var index = word.indexOf(\" \")\n            if (index < 0) {\n                result.add(word)\n            } else {\n                result.add(word.substring(0, index))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // A word is a sequence",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.size) {\n                if (numbers[j] == value) {\n                    break\n                }\n            }\n            if (j == numbers.size) {\n                result.add(value)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // A word is defined as a sequence of non-space characters.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog.\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog.\"))\n    def wordsInString(s : String) : List[String] = {\n        var result = new ArrayList[String]()\n        var i = 0\n        while (i < s.length) {\n            var j = i\n            while (j < s.length && s[j] != ' ') {\n                j += 1\n            }\n            result.add(s.substring(i, j))\n            i = j + 1\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all the anagrams in the list.\n    // An anagram is a word that can be formed by rearranging the letters of another word.\n    // >>> anagramsInList(wordsInString(\"The quick brown fox jumps over the lazy dog.\"))\n    // (List[String](\"The\", \"quick\", \"dog\", \"fox\", \"lazy\", \"jumps\", \"over\", \"brown\", \"The\"))\n    def anagramsInList(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var word = words[i]\n            var sortedWord = word.toLowerCase()\n            var sortedWordHash = hash(sortedWord)\n            for (j <- i + 1 until words.size) {\n                var other",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result += numbers[i]\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (value == numbers[j]) {\n                    break\n                } else {\n                    result = result.append(value)\n                }\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            var value = numbers.apply(i)\n            if (result.contains(value)) {\n                continue\n            }\n            result.add(value)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- numbers.size) {\n            var count = 0\n            for (j <- i) {\n                if (numbers[j] == numbers[i]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result += numbers[i]\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result += number\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            if (result.contains(numbers.apply(i))) continue\n            result.add(numbers.apply(i))\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"ab\", \"bc\", \"cd\", \"bc\", \"ce\", \"ab\")))\n    // (List[String](\"ab\", \"bc\", \"cd\", \"ce\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size()) {\n            var word = words.apply(i)\n            for (j <- 0 until word.length()) {\n                var sub = word.substring(j)\n                if (result.contains(sub)) continue\n                result.add(sub)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"ab\", \"bc\", \"cd\", \"bc\", \"ce\", \"ab\")))\n    // (List[String](\"ab\", \"bc\", \"cd\", \"ce\"))\n    def getSubstrings2(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size()) {\n            var word = words.apply(i)\n            for (j <- 0 until word.length()) {\n                var sub = word.substring(j)\n                if (result.contains(sub)) continue\n                result.add(sub)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings3((List[String](\"ab\", \"bc\", \"cd\", \"bc\", \"ce\", \"ab\")))\n    // (List[String](\"ab\", \"bc\", \"cd\", \"",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result = result.append(number)\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.index(i) < numbers.index(numbers.index(i) + 1)) {\n                result.append(numbers.apply(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words.index(i) < words.index(words.index(i) + 1)) {\n                result.append(words.apply(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings2(words : List[String]) : List[String] = {\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words.index(i) < words.index(words.index(i) + 1)) {\n                result.append(words.apply(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings3((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings3(words : List[String]) : List[String] = {\n        val result = mutable.",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var element = numbers[i]\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result[j] == element) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result.add(element)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.add(i)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.contains(number)) {\n                continue\n            }\n            result += number\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- numbers.size) {\n            var count = 0\n            for (j <- i) {\n                if (numbers[j] == numbers[i]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result += numbers[i]\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.add(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            if (result.contains(value)) {\n                continue\n            }\n            result.append(value)\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            for (j <- 0 until word.size) {\n                var substring = word.substring(j)\n                if (result.contains(substring)) {\n                    continue\n                }\n                result.append(substring)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice,\n    // in the order they first appear.\n    // >>> getSubstringsOrdered((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstringsOrdered(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            for (j <- 0 until word.size) {\n                var substring = word.substring(j)\n                if (result.contains(substring)) {\n                    continue\n                }\n                result.append(substring)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice,\n    // in the order they first appear.",
    "        var result = mutable.List[Long]()\n        for (i <- numbers.toIterator) {\n            var count = 0\n            for (j <- i) {\n                if (j == i) {\n                    count += 1\n                } else {\n                    count -= 1\n                }\n            }\n            if (count == 0) {\n                result += i\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.contains(number)) {\n                continue\n            }\n            result += number\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            if (numbers.get(i) not in result) {\n                result += numbers.get(i)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            if (numbers.get(i) not in result) {\n                result += numbers.get(i)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            if (numbers.get(i) not in result) {\n                result += numbers.get(i)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers[i",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (value == numbers[j]) {\n                    break\n                }\n            }\n            if (j == numbers.length) {\n                result.append(value)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 1\n            for (j <- i + 1 until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result += numbers[i]\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are greater than the given target.\n    // Keep order of elements left the same as in the input.\n    // >>> removeGreaterThan(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), 3l.toLong)\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def removeGreaterThan(numbers : List[Long], target : Long) : List[Long] = {\n        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers[i] <= target) {\n                result += numbers[i]\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> words(List[\"cat\", \"dog\", \"pig\", \"dog\", \"dog\", \"cat\"])\n    // (List[\"cat\", \"dog\", \"pig\"])\n    def words(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            for (j <- 0 until word.length) {\n                if (word[j] == ' ') {\n                    break\n                }\n                result += word[j]\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string that are at least length 3.\n    // >>> wordsAtLeast(List[\"cat\", \"dog\", \"pig\", \"dog\", \"dog\", \"cat\"])\n    // (List[\"cat\", \"dog\", \"pig\"])\n    def",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"a\", \"c\", \"c\", \"c\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == word) {\n                    found = true\n                    break\n                }\n            }\n            if (found) {\n                result = result.append(word)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"a\", \"b\", \"a\", \"c\", \"c\", \"c\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings2(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == word) {\n                    found = true\n                    break\n                }\n            }\n            if (found) {\n                result = result.append(word)\n            ",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            val element = numbers[i]\n            if (result.contains(element)) continue\n            result.append(element)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            var index = result.indexOf(value)\n            if (index < 0) {\n                result.append(value)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that can be\n    // formed by deleting some number of characters from the front of each string.\n    // For example, if the strings are [\"abc\",\"def\",\"ghi\",\"jkl\"] and the\n    // deleteCount is 2, the result should be\n    // [\"cdef\",\"ghij\",\"jkll\"]\n    // >>> substrings(\"abcdefghijkl\", 2)\n    // (List[String](cdefghijkl))\n    def substrings(s : String, deleteCount : Int) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until s.length - deleteCount) {\n            var substring = s.substring(i, i + deleteCount)\n            result = result.append(substring)\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that can be\n    // formed by deleting some number of characters from the back of each string.\n    // For example, if the strings are [\"abc\",\"def\",\"ghi\",\"jkl\"] and the\n    // deleteCount is 2, the result should be\n    // [\"abc\",\"defg\",\"hi\",\"jkl\"]\n    // >>> substringsBack(\"abcdefghijkl\", 2)\n    // (List[String](abcdefghijkl))\n    def substringsBack(s : String, deleteCount : Int) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until s.length - deleteCount) {\n            var substring = s.substring(0, i)\n            result = result.append(substring)\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that can be\n    // formed by deleting",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) != numbers.get(i + 1)) {\n                result = result.append(numbers.get(i))\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var element = numbers[i]\n            var index = result.indexOf(element)\n            if (index < 0) {\n                result.add(element)\n            } else {\n                result[index] = element\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are greater than the given target.\n    // Keep order of elements left the same as in the input.\n    // >>> removeGreaterThan(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), 3)\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def removeGreaterThan(numbers : List[Long], target : Long) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var element = numbers[i]\n            if (element < target) {\n                result.add(element)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are less than the given target.\n    // Keep order of elements left the same as in the input.\n    // >>> removeLessThan(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), 3)\n    // (List[Long](4l.toLong, 5l.toLong))\n    def removeLessThan(numbers : List[Long], target : Long) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var element = numbers[i]\n            if (element > target) {\n                result.add(element)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, return the sum of all elements.\n    // >>> sum(List[Long](1l.to",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result = result.append(numbers.get(i))\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.index(i) < numbers.size - 1) {\n                if (numbers.index(i) < numbers.index(numbers.index(i) + 1)) {\n                    result = result.append(numbers.apply(i))\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.size) {\n            if (words.index(i) < words.size - 1) {\n                if (words.index(i) < words.index(words.index(i) + 1)) {\n                    result = result.append(words.apply(i))\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\")))\n    // (List[String](\"a\", \"c\", \"c\"))\n    def getSubstrings2(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until words.size) {\n            if (words.index(i) < words.size - 1) {\n                if (words.index(i) < words.index(words.index(i) + 1)) {\n                    result = result.append(words.apply(i))\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings3",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result.append(numbers.get(i))\n            }\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result.append(numbers.get(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // A word is defined as a sequence of non-space characters.\n    // >>> wordsInString(\"Hello World!\")\n    // (List[String](\"Hello\", \"World\", \"!\"))\n    def wordsInString(s : String) : List[String] = {\n        val result = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                if (i > 0) {\n                    result.append(s.substring(0, i))\n                }\n                i += 1\n            } else {\n                i += 1\n            }\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all anagrams in the list.\n    // An anagram is a word that can be formed by rearranging the letters of another word.\n    // >>> anagramsInList(wordsInString(\"Hello World!\"))\n    // (List[String](\"Hello\", \"World\", \"!\"))\n    def anagramsInList(words : List[String]) : List[String] = {\n        val result = mutable.List[String]()\n        for (i <- 0 until words.size) {\n            val word = words.get(i)\n            for (j <- 0 until word.length) {\n                val temp = word.substring(0, j) + word.substring(j + 1)\n                if (temp in words) {\n                    result.append(word)\n                    break\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all anagrams in the list.\n    // An anagram is a word that can be formed by rearranging the letters of another word.\n    // >>> anagramsInList(wordsInString",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result += numbers.get(i)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            } else {\n                result.set(index, number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // A word is defined as a sequence of non-space characters.\n    // >>> wordsInString(\"Hello World!\")\n    // (List[String](\"Hello\", \"World\", \"!\"))\n    def wordsInString(s : String) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until s.length) {\n            var j = i\n            while (j < s.length && s[j] != ' ') {\n                j += 1\n            }\n            result.add(s.substring(i, j))\n            i = j + 1\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all the anagrams in the list.\n    // An anagram is a word that can be formed by rearranging the letters of\n    // another word.\n    // >>> anagramsInList(wordsInString(\"Hello World!\"))\n    // (List[String](\"Hello\", \"World\", \"!\"))\n    def anagramsInList(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var word = words[i]\n            for (j <- 0 until word.length) {\n                var word2 = word.substring(0, j) + word.substring(j + 1)\n                for (k <- 0 until word2.length) {\n                    var word3 = word2.substring(0, k) + word2.substring(k + 1)\n                    if (word3.equals(word)) {\n                        result.add(word",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result += number\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result = result.append(numbers.get(i))\n            }\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i + 1 until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size()) {\n            var count = 0\n            for (j <- i + 1 until numbers.size()) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) > 0) {\n                result.append(numbers.get(i))\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.size == 1) {\n                result = numbers\n                break\n            } else if (numbers.size == 2 && numbers.apply(i) == numbers.apply(0)) {\n                result = numbers\n                break\n            } else {\n                result = result.append(numbers.apply(i))\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var count = 0\n            for (j <- i + 1 until numbers.length) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are smaller than a given value.\n    // Keep order of elements left the same as in the input.\n    // >>> removeSmallerThan(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong), 2l.toLong)\n    // (List[Long](3l.toLong, 4l.toLong))\n    def removeSmallerThan(numbers : List[Long], value : Long) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers[i] >= value) {\n                result.add(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are greater than a given value.\n    // Keep order of elements left the same as in the input.\n    // >>> removeGreaterThan(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong), 2l.toLong)\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def removeGreaterThan(numbers : List[Long], value : Long) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers[i] <= value) {\n                result.add(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that can be formed by removing\n    // at most one character.\n    // >>> removeSubstrings(\"abc\")\n    // (List[String](\"a\", \"b\", \"c\"))\n    def removeSubstrings(s : String) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until s.length) {\n            var substring = s.substring(i, i + 1)\n            var index = result.indexOf(substring)\n            if (index < 0) {\n                result.add(substring)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that can be formed by removing\n    // at most two characters.\n    // >>> removeSubstrings(\"abc\")\n    // (List[String](\"a\", \"b\", \"c\"))\n    def removeSubstrings2(s : String) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until s.length) {\n            var substring = s.substring(i, i + 2)\n            var index = result.indexOf(substring)\n            if (index < 0) {\n                result.add(substring)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that can be formed by removing\n    // at most k characters.\n    // >>> removeSubstrings2(\"abc\")\n    // (List[String](\"a\", \"b\", \"c\"))\n    def removeSubstringsK(s : String, k : Int) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until s.length) {\n            var substring =",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var current = numbers.apply(i)\n            for (j <- i + 1 until numbers.size) {\n                if (current == numbers.apply(j)) {\n                    break\n                }\n            }\n            if (j == numbers.size) {\n                result = result.append(current)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> substrings(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var current = numbers.get(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.get(j) == current) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(current)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.length > i + 1) {\n                if (numbers[i] == numbers[i + 1]) {\n                    continue\n                }\n            }\n            result = result.append(numbers[i])\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            val number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result",
    "        var result = List[Long]()\n        var seen = Set[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result = result.append(i)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that can be\n    // concatenated to form a palindrome.\n    // >>> palindromeSubstrings(List(\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"))\n    // (List[\"lls\", \"s\", \"sssll\"])\n    def palindromeSubstrings(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            var index = result.indexOf(word)\n            if (index < 0) {\n                result.add(word)\n            }\n        }\n        return result\n    }\n\n    // From a string, return a list of all palindromes, including those that\n    // are formed by concatenating two substrings.\n    // >>> palindromeSubstrings(\"abcd\")\n    // (List[\"\", \"a\", \"aa\", \"b\", \"bb\", \"abcd\", \"d\", \"dd\", \"cd\", \"cdd\", \"abcd\"])\n    def palindromeSubstrings2(s : String) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until s.length) {\n            var i2 = i\n            var j2 = s.length - i - 1\n            var word = s.substring(i, j2)\n            var index = result.indexOf(word)\n            if (index < 0) {\n                result.add(word)\n            }\n            for (j <- i2 + 1 until j2) {\n                var word2 = s.substring(i2, j)\n                var index2 = result.indexOf(word2)\n                if (index2 < 0)",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            if (result.contains(value)) {\n                continue\n            }\n            result = result.append(value)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (value == numbers[j]) {\n                    break\n                }\n                result += value\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.size - i > 1) {\n                var number = numbers.apply(i)\n                for (j <- i + 1 until numbers.size) {\n                    if (number == numbers.apply(j)) {\n                        break\n                    } else {\n                        result = result.append(number)\n                    }\n                }\n            } else {\n                result = result.append(numbers.apply(i))\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.index(i) < numbers.index(result.length)) {\n                result = result.append(numbers.index(i))\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.add(i)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result += number\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        var seen = mutable.Set[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.append(i)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings([\"abc\", \"abcd\", \"ab\", \"abcd\", \"abcd\"])\n    // (List[String]([\"ab\", \"abc\", \"abcd\"]))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var count = 0\n            for (j <- i until words.size) {\n                if (words[i].equals(words[j])) {\n                    count += 1\n                }\n            }\n            if (count >= 2) {\n                result.add(words[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice,\n    // in the order they first appear.\n    // >>> getSubstringsOrdered([\"abc\", \"abcd\", \"ab\", \"abcd\", \"abcd\"])\n    // (List[String]([\"ab\", \"abc\", \"abcd\"]))\n    def getSubstringsOrdered(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var count = 0\n            for (j <- i until words.size) {\n                if (words[i].equals(words[j])) {\n                    count += 1\n                }\n            }\n            if (count >= 2) {\n                result.add(words[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == value) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(value)\n            }\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            val number = numbers[i]\n            if (result.contains(number)) {\n                // skip\n            } else {\n                result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.index(i) < numbers.index(result.size)) {\n                result = result.append(numbers.apply(i))\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var current = numbers.get(i)\n            for (j <- i + 1 until numbers.size) {\n                if (current == numbers.get(j)) {\n                    break\n                }\n            }\n            if (j == numbers.size) {\n                result.add(current)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"b\", \"b\")))\n    // (List[String](\"a\", \"c\", \"b\", \"b\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var word = words.get(i)\n            for (j <- i + 1 until words.size) {\n                if (words.get(j).contains(word)) {\n                    result.add(word)\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice,\n    // in the same order as they appear in the input.\n    // >>> getSubstringsOrdered((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"b\", \"b\")))\n    // (List[String](\"a\", \"c\", \"b\", \"b\"))\n    def getSubstringsOrdered(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.size) {\n            var word = words.get(i)\n            for (j <- i + 1 until words.size) {\n                if (words.get(j).contains(word)) {\n                    result.add(word)\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return",
    "        var result = mutable.List[Long]()\n        var seen = mutable.Set[Long]()\n        for (i <- numbers) {\n            if (seen.contains(i)) continue\n            seen.add(i)\n            result.append(i)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (result.isEmpty() || numbers[i] != result.last()) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == value) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(value)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"ab\", \"bc\", \"cd\", \"da\", \"ea\", \"fa\")))\n    // (List[String](\"ab\", \"bc\", \"cd\", \"da\", \"ea\", \"fa\"))\n    def getSubstrings(strings : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until strings.length) {\n            var string = strings[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == string) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(string)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings2((List[String](\"ab\", \"bc\", \"cd\", \"da\", \"ea\", \"fa\")))\n    // (List[String](\"ab\", \"bc\", \"cd\", \"da\", \"ea\", \"fa\"))\n    def getSubstrings2(strings : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until strings.length) {\n            var string = strings[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == string) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.index(i) >= 0) {\n                result = result.append(numbers.apply(i))\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var current = numbers.get(i)\n            for (j <- i + 1 until numbers.size) {\n                if (current == numbers.get(j)) {\n                    break\n                }\n            }\n            if (j == numbers.size) {\n                result.add(current)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result += numbers.get(i)\n            }\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.get(i) not in result) {\n                result += numbers.get(i)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"))\n    def wordsInString(s : String) : List[String] = {\n        val result = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                result += s.substring(0, i)\n                s = s.substring(i + 1)\n            }\n        }\n        result += s\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"))\n    def wordsInString2(s : String) : List[String] = {\n        val result = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                result += s.substring(0, i)\n                s = s.substring(i + 1)\n            }\n        }\n        result += s\n        return result\n    }\n\n    // From a list of strings, return a list of all the words in the string.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"))\n    def wordsInString3(s : String) : List",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.length) {\n                if (numbers[j] == value) {\n                    break\n                }\n            }\n            if (j == numbers.length) {\n                result += value\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result += number\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // A word is a sequence of consecutive alphabetic characters.\n    // >>> wordsInString(\"Hello world\")\n    // (List[String](\"hello\", \"world\"))\n    def wordsInString(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        var index = 0\n        while (index < s.length) {\n            var c = s[index]\n            if (Character.isLetter(c)) {\n                var word = \"\"\n                while (index < s.length && Character.isLetter(s[index])) {\n                    word += s[index]\n                    index += 1\n                }\n                result += word\n            } else {\n                index += 1\n            }\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all anagrams in the list.\n    // An anagram is a word that can be formed by rearranging the letters of another word.\n    // >>> anagramsInList(wordsInString(\"Hello world\"))\n    // (List[String](\"hello\", \"world\"))\n    def anagramsInList(words : List[String]) : List[String] = {\n        var result = mutable.List[String]()\n        for (word <- words) {\n            var sortedWord = word.toLowerCase()\n            var sortedWordHash = hash(sortedWord)\n            for (i <- 0 until sortedWord.length) {\n                var c = sortedWord[i]\n                var cHash = hash(c)\n                if (sortedWordHash == cHash) {\n                    result += word\n                    break\n                }\n            }\n        }\n        ",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var element = numbers.apply(i)\n            if (result.contains(element)) {\n                continue\n            }\n            result.append(element)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers.apply(i)\n            if (result.contains(value)) {\n                continue\n            }\n            result.append(value)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result.append(numbers[i])\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"ab\", \"bc\", \"cd\", \"bc\", \"ef\")))\n    // (List[String](\"ab\", \"bc\", \"cd\"))\n    def getSubstrings(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            for (j <- 0 until word.length) {\n                if (words.exists(x => x.startsWith(word.substring(j)))) {\n                    result.append(word.substring(j))\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice,\n    // in the order they first appear.\n    // >>> getSubstringsOrdered((List[String](\"ab\", \"bc\", \"cd\", \"bc\", \"ef\")))\n    // (List[String](\"ab\", \"bc\", \"cd\"))\n    def getSubstringsOrdered(words : List[String]) : List[String] = {\n        var result = new ArrayList[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            for (j <- 0 until word.length) {\n                if (words.exists(x => x.startsWith(word.substring(j)))) {\n                    result.append(word.substring(j))\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice,\n    // in the order they first appear.\n    // >>> getSubstringsOrdered((List[String](\"ab\", \"bc\", \"cd",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i until numbers.size) {\n                if (numbers.get(j) == numbers.get(i)) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers.get(i))\n            }\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            val element = numbers.apply(i)\n            if (result.contains(element)) {\n                continue\n            }\n            result.append(element)\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.index(i) == numbers.lastIndexOf(i)) {\n                result.append(numbers.apply(i))\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        var seen = new HashSet[Long]()\n        for (i <- numbers) {\n            if (!seen.contains(i)) {\n                result.add(i)\n                seen.add(i)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are greater than the given target.\n    // Keep order of elements left the same as in the input.\n    // >>> removeGreaterThan(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), 3l.toLong)\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def removeGreaterThan(numbers : List[Long], target : Long) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- numbers) {\n            if (i <= target) {\n                result.add(i)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are less than the given target.\n    // Keep order of elements left the same as in the input.\n    // >>> removeLessThan(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), 3l.toLong)\n    // (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))\n    def removeLessThan(numbers : List[Long], target : Long) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- numbers) {\n            if (i >= target) {\n                result.add(i)\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are between the given lower and upper limits.\n    // Keep order of elements left the same as in the input.\n    // >>> removeBetween(List[Long](1l.",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            if (result.isEmpty() || result.last() != number) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.index(i) == numbers.index(numbers.index(i) + 1)) {\n                continue\n            }\n            result = result.append(numbers.index(i))\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until numbers.size) {\n            var value = numbers[i]\n            for (j <- i + 1 until numbers.size) {\n                if (value == numbers[j]) {\n                    break\n                } else {\n                    result = result.append(value)\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"b\", \"b\")))\n    // (List[String](\"a\", \"c\", \"b\", \"b\"))\n    def getSubstrings(strings : List[String]) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until strings.size) {\n            var string = strings[i]\n            for (j <- i + 1 until strings.size) {\n                if (string.contains(strings[j])) {\n                    result = result.append(string)\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice,\n    // in the order they first appear.\n    // >>> getSubstringsOrdered((List[String](\"a\", \"b\", \"c\", \"a\", \"c\", \"c\", \"b\", \"b\")))\n    // (List[String](\"a\", \"c\", \"b\", \"b\"))\n    def getSubstringsOrdered(strings : List[String]) : List[String] = {\n        var result = List[String]()\n        for (i <- 0 until strings.size) {\n            var string = strings[i]\n            for (j <- i + 1 until strings.size) {\n                if (string.contains(strings[j])) {\n                    result = result.append(string)\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice,\n    // in the order they first appear.\n",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            if (result.contains(number)) {\n                continue\n            }\n            result.append(number)\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> words(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"))\n    def words(text : String) : List[String] = {\n        var result = mutable.List[String]()\n        var words = text.split(\" \")\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            if (word.length > 0) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all anagrams in the string.\n    // >>> anagrams(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"dog\", \"lazy\", \"over\", \"the\"))\n    def anagrams(text : String) : List[String] = {\n        var result = mutable.List[String]()\n        var words = text.split(\" \")\n        for (i <- 0 until words.size) {\n            var word = words.apply(i)\n            if (word.length > 0) {\n                var sortedWord = word.sort()\n                if (sortedWord.equals(word)) {\n                    result.append(word)\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of words, return a list of all possible anagrams in the string.\n    // >>> anagrams2(\"The quick brown fox jumps over the lazy dog\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"dog\", \"lazy",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            var number = numbers[i]\n            var found = false\n            for (j <- 0 until result.length) {\n                if (result[j] == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        var seen = Set[Long]()\n        for(i <- numbers) {\n            if(seen.contains(i)) continue\n            seen.add(i)\n            result = result.append(i)\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (i == 0) {\n                result.append(numbers.apply(i))\n            } else {\n                if (numbers.apply(i) != numbers.apply(i - 1)) {\n                    result.append(numbers.apply(i))\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog.\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog.\"))\n    def wordsInString(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        var word = mutable.StringBuilder()\n        for (i <- 0 until s.length) {\n            if (s.apply(i) == ' ') {\n                if (word.length() > 0) {\n                    result.append(word.toString())\n                    word.clear()\n                }\n            } else {\n                word.append(s.apply(i))\n            }\n        }\n        if (word.length() > 0) {\n            result.append(word.toString())\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all words in the string.\n    // >>> wordsInString(\"The quick brown fox jumps over the lazy dog.\")\n    // (List[String](\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog.\"))\n    def wordsInString2(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        var word = mutable.StringBuilder()\n        for (i <- 0 until s.length) {\n            if (s.apply(i) == ' ') {\n                if (word.length() > 0) {\n                    result.append(word.toString())\n                    word.clear()\n                ",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.length) {\n            var value = numbers[i]\n            var index = result.indexOf(value)\n            if (index < 0) {\n                result.add(value)\n            } else {\n                result[index] = value\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> getSubstrings(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var current = numbers[i]\n            for (j <- i + 1 until numbers.size) {\n                if (current == numbers[j]) {\n                    break\n                }\n                result.add(current)\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.length == 1) {\n                result = numbers\n                break\n            } else if (numbers[i] != numbers[i + 1]) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.length) {\n            if (numbers.exists(x => x == numbers[i])) {\n                result = result.append(numbers[i])\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            if (i == 0) {\n                result.add(numbers.apply(i))\n            } else {\n                if (numbers.apply(i) != numbers.apply(i - 1)) {\n                    result.add(numbers.apply(i))\n                }\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are divisible by 3.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDivisibleBy3((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 9l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 9l.toLong))\n    def removeDivisibleBy3(numbers : List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.apply(i) % 3 == 0) {\n                result.add(numbers.apply(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are divisible by 5.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDivisibleBy5((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 10l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 10l.toLong))\n    def removeDivisibleBy5(numbers : List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            if (numbers.apply(i) % 5 == 0) {\n                result.add(numbers.apply(i))\n            }\n        }\n        return result\n    }\n\n    // From a list of integers, remove all elements that are div",
    "        var result = mutable.List[Long]()\n        for (i <- 0 until numbers.size) {\n            var number = numbers.apply(i)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == number) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(number)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> substrings(\"ababababab\")\n    // (List[String](ababababab, abababab, abababababab))\n    def substrings(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            var substring = s.substring(i, i + 1)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == substring) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(substring)\n            }\n        }\n        return result\n    }\n\n    // From a list of strings, return a list of all substrings that appear at least twice.\n    // >>> substrings2(\"ababababab\")\n    // (List[String](ababababab, abababab, abababababab))\n    def substrings2(s : String) : List[String] = {\n        var result = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            var substring = s.substring(i, i + 1)\n            var found = false\n            for (j <- 0 until result.size) {\n                if (result.apply(j) == substring) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                result = result.append(substring)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (var i = 0; i < numbers.length; i++) {\n            var number = numbers[i]\n            var index = result.indexOf(number)\n            if (index < 0) {\n                result.add(number)\n            }\n        }\n        return result",
    "        var result = new ArrayList[Long]()\n        for (i <- 0 until numbers.size) {\n            var count = 0\n            for (j <- i + 1 until numbers.size) {\n                if (numbers[i] == numbers[j]) {\n                    count += 1\n                }\n            }\n            if (count == 1) {\n                result.add(numbers[i])\n            }\n        }\n        return result"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}