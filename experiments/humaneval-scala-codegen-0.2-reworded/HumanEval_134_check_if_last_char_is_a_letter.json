{
  "name": "HumanEval_134_check_if_last_char_is_a_letter",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
  "completions": [
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"\"))\n    // (false)\n    def checkIfStringContainsAtLeastOneWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 0\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"\"))\n    // (false)\n    def checkIfStringContainsAtLeastOneWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \"",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mam\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"mam madam\")\n    // (true",
    "        if (txt.length == 0) return false\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt[0:txt.length - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return isLetter(txt[0]) && isWord(txt[1:txt.length])\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (false)\n    // >>> isPalindrome(\"madam am \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dma\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mad\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPermutation(txt1 : String, t",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> is",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isPartOfWord(txt))\n    }\n\n    // Create a function that returns true if a given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is\n    // a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,man,plan,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (false)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama",
    "        if (txt.length() == 0) return false\n        if (txt.length() == 1) return true\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama \")\n    // (false)\n    // >>> isPermutation(\"madam\", \"dama madam",
    "        if (txt == \"\") return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isLetter(txt[txt.length - 2])\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie pie\"))",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    ",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\",",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string is\n    // a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string is\n    // a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    // (false)\n    // >>> isPerm",
    "        if (txt == \"\") return false\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mam\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"\")\n    // (false)\n    def isPermutation(txt1 : String, txt2 : String) : Boolean = {\n        ",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !(txt.split(\" \").find(x => x.length() > 0) != -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAPalindrome((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsAPalindrome((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome((\"apple pie apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome((\"\"))\n    // (false)\n    def checkIfStringContainsAPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").find(x => checkIfLastCharIsALetter(x)) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAPalindrome2((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsAPalindrome2((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome2((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome2((\"apple pie apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome2((\"",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') && !(txt.split(\" \").find(s => s.length > 0) != -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPi((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsPi((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"\"))\n    // (false)\n    def checkIfStringContainsPi(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").find(s => s.startsWith(\"pi\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPie((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e \"))\n    // (true)\n    // >>> checkIfStringContainsPie((\"\"))\n    // (false)\n    def checkIfStringContainsPie(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").find(s => s.startsWith(\"pie\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < \"a\" || txt.charAt(txt.length - 1) > \"z\") &&\n            !(txt.split(\" \").exists(s => s.length > 0 && s.charAt(s.length - 1) < \"a\" || s.charAt(s.length - 1) > \"z\"))",
    "        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    // (false)\n    // >>> isPermutation(\"ab",
    "        if (txt.length() == 0) return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isLetter(txt[txt.length - 2])\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (word in words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome2(\"a bb ccc bb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"a bb ccc bb a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome2(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (word in words) {\n            if (isPalindrome2(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 65 || txt.charAt(txt.length() - 1) > 90) && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (words[i].equals(words[words.length - 1 - i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    //",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\",",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return checkIfLastCharIsALetter(txt) && checkIfStringContainsPalindrome(txt.substring(1, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie pie pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie pie pie pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie pie pie pie pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie pie pie pie",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length - 1])\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isLetter(c : String) : Boolean = {\n        return c.isLetter()\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length - 1])\n    }\n\n    // Create a function that returns",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length() - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length() - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isPalindrome(txt.substring(0, txt.length() / 2)) &&\n            isPalindrome(txt.substring(txt.length() / 2, txt.length()))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with the given prefix\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"apple\"))\n    // (true)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"pie\"))\n    // (true)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"pi\"))\n    // (false)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"\"))\n    // (false)\n    def checkIfStringContainsPrefix(txt : String, prefix : String) : Boolean = {\n        if (txt.length == 0 || prefix.length == 0) {\n            return false\n        }\n        return txt.toLowerCase().contains(prefix.toLowerCase()) && txt.lastIndexOf(\" \") == -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with the given prefix\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"apple\"))\n    // (true)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"pie\"))\n    // (true)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"pi\"))\n    // (false)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"\"))\n    // (false)\n    def checkIfStringContainsPrefix2(txt : String, prefix : String) : Boolean = {\n        if (txt.length == 0 || prefix.length == 0) {\n            return false\n        }\n        return txt.toLowerCase().contains(prefix.toLowerCase())",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPermutation(\"apple\", \"\")\n    // (false)\n    def isPermutation(txt",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < \"a\" || txt.charAt(txt.length - 1) > \"z\") &&\n            !(txt.split(\" \").exists(s => s.length > 0 && s.charAt(s.length - 1) < \"a\" || s.charAt(s.length - 1) > \"z\"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g h\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g h i\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g h i j\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g h i j k\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (true)\n    // >>> isPalindrome(\"madam am \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama \")\n    // (false)\n    // >>> isPermutation(\"madam\", \"\")\n    // (false)\n    def is",
    "        if (txt.length() == 0) {\n            false\n        } else {\n            true\n        }",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \".\")\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba \")\n    // (false)\n    // >>> isPalindrome(\"a b\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 3) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 4) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 5) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 6) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 7) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 8) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 9) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"pale pie\")\n    // (false)\n    // >>> isPermutation(\"apple\", \"pale pie \")\n    // (false)\n    // >>> isPerm",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\",",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) || txt[0] == \" \"\n    }\n\n    // Create a function that returns true if the given string is\n    // a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isPartOfWord(txt) && !isPartOfWord(txt + \" \")\n    }\n\n    // Create a function that returns true if the given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && isLetter(txt.charAt(txt.length() - 1)) && !isLetter(txt.charAt(txt.length() - 2))\n    }\n\n    // Create a function that returns true if a given string is a\n    // palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt) && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length() - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length() - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"sentence\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (word in words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome2(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple pie pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome2(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if a given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple\")\n    // (true)\n    // >>> isInWord(\"apple pie\")\n    // (true)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.charAt(0) != txt.charAt(txt.length() - 1)) {\n            return false\n        }\n        return isPalindrome(txt.substring(1, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is\n    // a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a part\n    // of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (true)\n    // >>> isWord(\"apple pi e \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPermutation(\"apple",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length() == 0",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \"",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    // (false)\n    // >>> isPermutation(\"abcd",
    "        if (txt.length() == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length() - 1) == \" \") && !(isWord(txt.substring(0, txt.length() - 1)))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.charAt(0) != \" \"\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.equals(reverse(txt))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return !isLetter(txt[txt.length - 1]) && !isWord(txt.substring(0, txt.length - 1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isWord(txt.substring(1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"sentence\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple\")\n    // (false)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isSentence(txt.substring(1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a paragraph and false otherwise.\n    // Note: \"paragraph\" is a group of characters separated by newline.\n    // Examples:\n    // >>> isParagraph(\"apple pie\\npie\")\n    // (true)\n    // >>> isParagraph(\"apple pie\\npie\\n\")\n    // (true)\n    // >>> isParagraph(\"apple pie\")\n    // (false)\n    // >>> is",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isLetter(txt[txt.length - 2])\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord",
    "        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') &&\n            !(txt.split(\" \").exists(w => w.length > 0 && w.charAt(0) < 'a' || w.charAt(0) > 'z'))\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba \")\n    // (false)\n    // >>> isPalindrome(\"abba a\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return true\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"a\", \"a\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (false)\n    // >>> isPermutation(\"ab\", \"ab \")\n    // (false)\n    def isPermutation(txt : String, txt2 : String) : Boolean = {\n        if (txt.length == 0 || txt2.length == 0) return true\n        return txt.equals(reverse(",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && txt.contains(\" \"))",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) %>= 97 && txt.charAt(txt.length() - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length() % 2 == 0) {\n            return txt.equals(txt.substring(0, txt.length() / 2).reverse()) && txt.equals(txt.substring(txt.length() / 2, txt.length()).reverse())\n        } else {\n            return txt.equals(txt.substring(0, txt.length() / 2).reverse()) && txt.equals(txt.substring(txt.length() / 2, txt.length()).reverse())\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"abc\")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def",
    "        if (txt == \"\") {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.split(\" \").exists(s => s.length > 0))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            (txt.split(\" \").exists(s => s.length > 0) && s.length > 1) && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 ==",
    "        if (txt == \"\") return false\n        return !(txt.charAt(txt.length - 1) in \"abcdefghijklmnopqrstuvwxyz\") && !(txt.charAt(txt.length - 1) in \"0123456789\")",
    "        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.equals(new StringBuilder(txt).reverse().toString())\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama m\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"dama m a\")\n    // (true)\n    // >>> isPermutation(\"",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length() == 0)",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && txt.lastIndexOf(\" \") == -1)",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            var words = txt.split(\" \")\n            for (word in words) {\n                if (isPalindrome(word)) {\n                    return true\n                }\n            }\n            return false\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>>",
    "        if (txt == \"\") {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length - 1)) && !isWord(txt.substring(0, txt.length - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && !isLetter(txt.charAt(txt.length - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isLetter(c : String) : Boolean = {\n        return c.isLetter()\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isLetter(c : String) : Boolean = {\n        return c.isLetter()\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') &&\n            !(txt.charAt(txt.length - 1) < 'A' || txt.charAt(txt.length - 1) > 'Z') &&\n            !(txt.charAt(txt.length - 1) < '0' || txt.charAt(txt.length - 1) > '9') &&\n            !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (word in words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")",
    "        if (txt == \"\") return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\", \"pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\", \"pie\", \"pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\", \"pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\", \"pie",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isWord(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (true)\n    // >>> isPermutation(\"madam\", \"\")\n    //",
    "        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z' && checkIfLastCharIsALetter(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.length == 2) return txt == txt.reverse()\n        return txt.substring(0, txt.length / 2) == txt.substring(txt.length / 2, txt.length)\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\",",
    "        if (txt == \"\") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.split(\" \").length == 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && isPalindrome(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length() == 0)",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (isPalindrome(words[i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome2(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (isPalind",
    "        if (txt.length() == 0) return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if",
    "        if (txt == \"\") {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.split(\" \").exists(s => s.length > 1))\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9')\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a lowercase character and false otherwise.\n    // Note: \"lowercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALowercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"\"))\n    // (false)\n    def checkIfLastCharIsALowercase(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= '",
    "        if (txt == \"\") {\n            false\n        } else {\n            if (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') {\n                true\n            } else {\n                false\n            }\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            if (txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') {\n                true\n            } else {\n                false\n            }\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a special character and false otherwise.\n    // Note: \"special\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsASpecial((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsASpecial((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsASpecial((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsASpecial((\"\"))\n    // (false)\n    def checkIfLastCharIsASpecial(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            if (txt.charAt(txt.length - 1) >= '!') {\n                true",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return true\n        }\n        if (txt.length == 1) {\n            return true\n        }\n        if (txt.length == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length % 2 == 0) {\n            return txt.substring(0, txt.length / 2) == txt.substring(txt.length / 2, txt.length)\n        } else {\n            return txt.substring(0, txt.length / 2) == txt.substring(txt.length / 2, txt.length)\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,man,plan,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (false)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) == \" \") &&\n            !(txt.charAt(txt.length - 1) == \".\") &&\n            !(txt.charAt(txt.length - 1) == \",\") &&\n            !(txt.charAt(txt.length - 1) == \"!\") &&\n            !(txt.charAt(txt.length - 1) == \"?\") &&\n            !(txt.charAt(txt.length - 1) == \";\") &&\n            !(txt.charAt(txt.length - 1) == \":\") &&\n            !(txt.charAt(txt.length - 1) == \"\\\"\") &&\n            !(txt.charAt(txt.length - 1) == \"'\") &&\n            !(txt.charAt(txt.length - 1) == \"(\" ||\n              txt.charAt(txt.length - 1) == \")\") &&\n            !(txt.charAt(txt.length - 1) == \"{\" ||\n              txt.charAt(txt.length - 1) == \"}\") &&\n            !(txt.charAt(txt.length - 1) == \"*\") &&\n            !(txt.charAt(txt.length - 1) == \"&\") &&\n            !(txt.charAt(txt.length - 1) == \"|\") &&\n            !(txt.charAt(txt.length - 1) == \";\") &&\n            !(txt.charAt(txt.length - 1) == \"?\") &&\n            !(txt.charAt(txt.length - 1) == \"!\") &&\n            !(txt.charAt(txt.length - 1) == \",\") &&\n            !(txt.charAt(txt.length - 1) == \".\") &&\n            !(txt.charAt(txt.length - 1) == \":\") &&\n            !(txt.charAt(txt.length - 1) == \"\\\"\") &&\n            !(txt.charAt(txt.length - 1) == \"'\") &&\n            !(txt.charAt(txt.length - 1) == \"(\" ||\n              txt.char",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length() == 0",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.",
    "        if (txt == \"\") return false\n        return !(txt.charAt(txt.length - 1) in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") && !(txt.split(\" \").exists(x => x.length > 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return txt.split(\" \").exists(x => x.length > 1 && x.equals(reverse(x)))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a double palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsDoublePalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsDoublePalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsDoublePalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsDoublePalindrome(\"a b c\")\n    // (false)\n    // >>> check",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string\n    // is a sentence and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"This is a sentence.\")\n    // (true)\n    // >>> isSentence(\"This is a sentence. \")\n    // (false)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"racecar\")\n    // (true)\n    // >>> isPalindrome(\"race car\")\n    // (true)\n    // >>> isPalindrome(\"race car \")\n    // (false)\n    // >>> isPalindrome(\"race car \")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return true\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"a\", \"a\")\n    // (true)\n    // >>> isPermutation(\"a\", \"b\")\n    // (false)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"a\")\n    // (false)\n    // >>> isPermutation(\"ab\", \"ab \")\n    // (false)\n    def isPermutation(txt : String, txt2 : String) : Boolean = {\n        if (txt.length == 0) {\n            return true\n        }\n        if (txt2.length == 0) {\n            return false\n        }\n        if",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z') && !(txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba a\")\n    // (false)\n    // >>> isPalindrome(\"abba a \")\n    // (true)\n    // >>> isPalindrome(\"abba a b\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 3) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 4) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 5) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 6) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 7) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 8) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 9) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 10",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\",",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') && !(txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') && !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie",
    "        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").allMatch(word -> isPalindrome(word))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return false\n        if (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') return true\n        if (txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') return true\n        if (txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') return true\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == '.') return false\n        if (txt.charAt(txt.length - 1) == ',') return false\n        if (txt.charAt(txt.length - 1) == '!') return false\n        if (txt.charAt(txt.length - 1) == '?') return false\n        if (txt.charAt(txt.length - 1) == ';') return false\n        if (txt.charAt(txt.length - 1) == ':') return false\n        if (txt.charAt(txt.length - 1) == '-') return false\n        if (txt.charAt(txt.length - 1) == '_') return false\n        if (txt.charAt(txt.length - 1) == '+') return false\n        if (txt.charAt(txt.length - 1) == '*') return false\n        if (txt.charAt(txt.length - 1) == '/') return false\n        if (txt.charAt(txt.length - 1) == '%') return false\n        if (txt.charAt(txt.length - 1) == '(') return false\n        if (txt.charAt(txt.length - 1) == ')') return false\n        if (txt.charAt(txt.length - 1) == '=') return false\n        if (txt.charAt(txt.length - 1) == '&') return false\n        if (txt.charAt(txt.length - 1) == '|')",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) % 128 == 0) return false\n        if (txt.charAt(txt.length - 1) % 128 == 32) return false\n        if (txt.charAt(txt.length - 1) % 128 == 9) return false\n        if (txt.charAt(txt.length - 1) % 128 == 10) return false\n        if (txt.charAt(txt.length - 1) % 128 == 11) return false\n        if (txt.charAt(txt.length - 1) % 128 == 12) return false\n        if (txt.charAt(txt.length - 1) % 128 == 13) return false\n        if (txt.charAt(txt.length - 1) % 128 == 14) return false\n        if (txt.charAt(txt.length - 1) % 128 == 15) return false\n        if (txt.charAt(txt.length - 1) % 128 == 16) return false\n        if (txt.charAt(txt.length - 1) % 128 == 17) return false\n        if (txt.charAt(txt.length - 1) % 128 == 18) return false\n        if (txt.charAt(txt.length - 1) % 128 == 19) return false\n        if (txt.charAt(txt.length - 1) % 128 == 20) return false\n        if (txt.charAt(txt.length - 1) % 128 == 21) return false\n        if (txt.charAt(txt.length - 1) % 128 == 22) return false\n        if (txt.charAt(txt.length - 1) % 128 == 23) return false\n        if (txt.charAt(txt.length - 1) % 128 == 24) return false\n        if (txt.charAt(txt.length - 1) % 128 == 25) return false\n        if (txt.charAt(txt.length - 1) % 128 == 26) return false\n        if (txt.charAt(txt.length - 1) % 128 == 27) return false\n        if (txt.charAt(txt.length - 1) % 128 == 28) return false\n        if (txt",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    ",
    "        if (txt.length() == 0) return false\n        if (txt.length() == 1) return true\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isInWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    // (false)\n    // >>> isPermutation(\"abcd",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !(txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var word : words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n",
    "        if (txt.length == 0) {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.split(\" \").exists(x => x.length > 0))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPi((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsPi((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"\"))\n    // (false)\n    def checkIfStringContainsPi(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            (txt.split(\" \").exists(x => x.startsWith(\"pi\")) && !(txt.split(\" \").exists(x => x.length > 0)))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPie((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e \"))\n    // (true)\n    // >>> checkIfStringContainsPie((\"\"))\n    // (false)\n    def checkIfStringContainsPie(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            (txt.split(\" \").exists(x => x.startsWith(\"pie\")) && !(txt.split(\"",
    "        if (txt.length == 0) return false\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt[:txt.length - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return isLetter(txt[0]) && isWord(txt[1:])\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return isPalindrome(txt[1:]) && txt[0] == txt[txt.length - 1]\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.",
    "        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String)",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < \"a\" || txt.charAt(txt.length - 1) > \"z\") && !(txt.split(\" \").find(x => x.length > 0) != -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").find(x => checkIfLastCharIsALetter(x)) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a mirror image of itself\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsMirror(\"\")\n    // (false)\n    // >>> checkIfStringContainsMirror(\"a\")\n    // (false)\n    // >>> checkIfStringContainsMirror(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsMirror(\"a b\")\n    // (true)\n    // >>> checkIfStringContainsMirror(\"a b c",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return false\n        if (txt.length > 1) {\n            if (isLetter(txt[txt.length - 1])) {\n                if (txt.length == 2) return true\n                if (txt.length > 2) {\n                    if (isLetter(txt[txt.length - 2])) return true\n                }\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if a given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') && !(txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') && !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (words[i].equals(words[words.length - 1 - i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIf",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isWord(\"race a car\")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && isLetter(txt.charAt(txt.length() - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isSentence(\"race a car\")\n    // (false)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence(txt : String) : Boolean = {\n        if (txt.length() == 0",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"abc\")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function",
    "        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt.substring(0, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z' && checkIfLastCharIsALetter(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"pale pie\")\n    // (",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length() - 1]) && !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (false)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"\", \" \")\n",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(txt.length - 1).isLetter() && !isWord(txt)\n        }\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1\n        }\n    }\n\n    // Create a function that returns true if the given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.equals(reverse(txt))\n        }\n    }\n\n    // Create a function that returns true if the given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            true\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,man,plan,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (false)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"\")\n    // (true)\n    def isPermutation(txt : String, txt2 : String) : Boolean = {\n        if (txt.length == 0) {\n            true\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,man,plan,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (false)\n    // >>> isPermutation(\"A man, a",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple\")\n    // (true)\n    // >>> isInWord(\"apple pie\")\n    // (true)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple\")\n    // (true)\n    // >>> isInWord(\"apple pie\")\n    // (true)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple\")\n    // (true)\n    // >>> isInWord(\"apple pie\")\n    // (true)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord3(txt : String) : Boolean = {\n        if (",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isWord(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPer",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another given string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPermutation(txt",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        if (txt.length == 1) {\n            return true\n        }\n        if (txt.charAt(0) != txt.charAt(txt.length - 1)) {\n            return false\n        }\n        return isPalindrome(txt.substring(1, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples",
    "        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') &&\n            !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') &&\n            !(txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') &&\n            !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba\")\n    // (false)\n    // >>> isPalindrome(\"abab\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return true\n        if (txt.length == 1) return true\n        if (txt.length == 2) return txt == txt.reverse()\n        if (txt.length % 2 == 0) {\n            return txt.substring(0, txt.length / 2).equals(txt.substring(txt.length / 2).reverse())\n        } else {\n            return txt.substring(0, txt.length / 2).equals(txt.substring(txt.length / 2).reverse()) &&\n                txt.substring(txt.length / 2).equals(txt.substring(0, txt.length / 2).reverse())\n        }\n    }\n\n    // Create a function that returns true if the given string\n",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space",
    "        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(0) != txt.charAt(txt.length - 1)) return false\n        return isPalindrome(txt.substring(1, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"dcba\")\n    // (true)\n    // >>> isPerm",
    "        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) % \"abcdefghijklmnopqrstuvwxyz\".toCharArray(0).length == 0) && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfPiIsInTheString(\"apple pie\")\n    // (false)\n    // >>> checkIfPiIsInTheString(\"apple pie pi\")\n    // (true)\n    // >>> checkIfPiIsInTheString(\"apple pie pi e\")\n    // (true)\n    // >>> checkIfPiIsInTheString(\"apple pie pi e \")\n    // (false)\n    // >>> checkIfPiIsInTheString(\"\")\n    // (false)\n    def checkIfPiIsInTheString(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").find(s => s.startsWith(\"pi\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfPieIsInTheString(\"apple pie\")\n    // (false)\n    // >>> checkIfPieIsInTheString(\"apple pie pie\")\n    // (true)\n    // >>> checkIfPieIsInTheString(\"apple pie pie e\")\n    // (true)\n    // >>> checkIfPieIsInTheString(\"apple pie pie e \")\n    // (false)\n    // >>> checkIfPieIsInTheString(\"\")\n    // (false)\n    def checkIfPieIsInTheString(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").find(s => s.startsWith(\"pie\"))",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt.substring(0, txt.length - 1))\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> is",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1).isLetter() && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mam\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"\")\n    // (false)\n    def isPermutation(txt1 : String, txt2 :",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return !isLetter(txt[txt.length - 1]) && !isWord(txt)\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isLetter(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isLetter(c : String) : Boolean = {\n        return c.isLetter()\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isLetter(txt[txt.length - 1])\n",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam madam\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.charAt(0) != txt.charAt(txt.length() - 1)) {\n            return false\n        }\n        return isPalindrome(txt.substring(1, txt.length() - 1))\n    }\n\n    // Create a function that returns true if the given string\n    ",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isLetter(txt.charAt(txt.length() - 2))\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"aba\")\n    // (false)\n    // >>> isPalindrome(\"abab\")\n    // (true)\n    // >>> isPalindrome(\"ababab\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 3) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 4) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 5) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 6) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 7) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 8) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 9) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    ",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\", \"pie\", \"pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\", \"pie\", \"pie\"))\n    ",
    "        if (txt.length() == 0) {\n            return false\n        } else {\n            return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return isLetter(txt.charAt(0)) && isWord(txt.substring(1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"sentence\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return isLetter(txt.charAt(0)) && isSentence(txt.substring(1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a paragraph and false otherwise.\n    // Note: \"paragraph\" is a group of characters separated by newline.\n    // Examples:\n    // >>> isParagraph(\"apple pie\")\n    // (true)\n    // >>> isParagraph(\"apple pie\\n\")\n    // (true)\n    // >>> isParagraph(\"apple pie\\n",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length - 1).isLetter() && !isPartOfWord(txt))\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.contains(\" \")\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isPalindromeHelper(txt, 0, txt.length - 1)\n        }\n    }\n\n    def isPalindromeHelper(txt : String, start : Int, end : Int) : Boolean = {\n        if (start == end) {\n            return true\n        } else if (start == end - 1) {\n            return txt.charAt(start) == txt.charAt(end)\n        } else {\n            return isPalindromeHelper(txt, start + 1, end) && txt.char",
    "        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) %>= 97 && txt.charAt(txt.length() - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and is not a part of a word,\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) %>= 48 && txt.charAt(txt.length() - 1) %<= 57)\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a special character and is not a part\n    // of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsASpecialChar((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsASpecialChar((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsASpecialChar((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsASpecialChar((\"\"))\n    // (false)\n    def checkIfLastCharIsASpecialChar(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) %>= 33 && txt.",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPi((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsPi((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"\"))\n    // (false)\n    def checkIfStringContainsPi(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").find(s => s.startsWith(\"pi\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPie((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e \"))\n    // (true)\n    // >>> checkIfStringContainsPie((\"\"))\n    // (false)\n    def checkIfStringContainsPie(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").find(s => s.startsWith(\"pie\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\"",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') && !(txt.split(\" \").exists(x => x.length > 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPi((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsPi((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"\"))\n    // (false)\n    def checkIfStringContainsPi(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").exists(x => x.startsWith(\"pi\"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPie((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsPie((\"\"))\n    // (false)\n    def checkIfStringContainsPie(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").exists(x => x.startsWith(\"pie\"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"apple pi\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam madam\")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    //",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama \")\n    // (false)\n    // >>> isPermutation(\"madam\", \"dama madam",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (true)\n    // >>> isPalindrome(\"madam am \")\n    // (true)\n    // >>> isPalindrome(\"madam am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am madam am\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\",",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isWord(txt))\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPer",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPer",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(1, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && isLetter(txt.charAt(txt.length() - 1)) && !isWord2(txt.substring(1, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama m\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt == reverse(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"pale pie\")\n    // (false)\n    // >>> isPermutation(\"apple\", \"pale pie \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (true)\n    // >>> isPalindrome(\"madam am \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(new StringBuilder(txt).reverse().toString())\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPerm",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && !isWord(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n",
    "        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") &&",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 65 || txt.charAt(txt.length() - 1) > 90) && !(txt.charAt(txt.length() - 1) > 122 && txt.charAt(txt.length() - 1) < 127) && !(txt.charAt(txt.length() - 1) > 47 && txt.charAt(txt.length() - 1) < 58)\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) < 48 || txt.charAt(txt.length() - 1) > 57\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a lowercase character and false otherwise.\n    // Note: \"lowercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALowercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"\"))\n    // (false)\n    def checkIfLastCharIsALowercase(txt : String) : Boolean = {\n        if (",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length - 1) == ' ') && !(txt.charAt(txt.length - 1) == '\\n') && !(txt.charAt(txt.length - 1) == '\\r') && !(txt.charAt(txt.length - 1) == '\\t') && !(txt.charAt(txt.length - 1) == '\\b') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\a') && !(txt.charAt(txt.length - 1) == '\\v') && !(txt.charAt(txt.length - 1) == '\\0') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\b') && !(txt.charAt(txt.length - 1) == '\\a') && !(txt.charAt(txt.length - 1) == '\\v') && !(txt.charAt(txt.length - 1) == '\\0') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\b') && !(txt.charAt(txt.length - 1) == '\\a') && !(txt.charAt(txt.length - 1) == '\\v') && !(txt.charAt(txt.length - 1) == '\\0') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\b') && !(txt.charAt(txt.length - 1) == '\\a') && !(txt.charAt(txt.length - 1) == '\\v') && !(txt.charAt(txt.length - 1) == '\\0') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length() - 1]) && !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') &&\n            !(txt.split(\" \").exists(x => x.length > 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"abba\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"abba bca\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"abba bca bcb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"abba bca bcb cba\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").exists(x => checkIfStringIsPalindrome(x))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Examples:\n    // >>> checkIfStringIsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringIsPalindrome(\"a\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"abba\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"abba bca\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"abba bca bcb\")\n    // (true)\n    // >>> checkIf",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pi e\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pi e \"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"\"))\n    // (false)\n    def containsAtLeastOneWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 0\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsAtLeastOneWord2((\"apple pie\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie \"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pi e\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pi e \"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"\"))\n    // (false)\n    def containsAtLeastOneWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 0\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') &&\n            !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') &&\n            !(txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') &&\n            !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            if (word.length == 0) {\n                continue\n            }\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    ",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() % 2 == 0) {\n            return txt.substring(0, txt.length() / 2).equals(txt.substring(txt.length() / 2, txt.length()))\n        } else {\n            return txt.substring(0, txt.length() / 2).equals(txt.substring(txt.length()",
    "        if (txt == \"\") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return",
    "        if (txt == \"\") return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.",
    "        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPerm",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    //",
    "        if (txt.length() == 0) return false\n        return !(txt.charAt(txt.length() - 1) %>= 97 && txt.charAt(txt.length() - 1) %<= 122)",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1\n        }\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n        }\n    }\n\n    // Create a function that returns true if a given string is a\n    // mirror image of itself (reversed words) and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isMirror(\"madam\")\n    // (true)\n    // >>> isMirror(\"madam am I am madam\")\n    //",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    ",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        ",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a lowercase character and false otherwise.\n    // Note: \"lowercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALowercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"\"))\n    // (false)\n    def checkIfLastCharIsALowercase(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is an uppercase character and false otherwise.\n    // Note: \"uppercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsAnUppercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsAnUppercase((\"apple pi e\"))\n    // (true",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return t",
    "        if (txt == \"\") return false\n        if (txt.length() == 1) return true\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return !isLetter(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isDigit(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a space and false otherwise.\n    // Note: \"space\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsASpace((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsASpace((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsASpace((\"apple pi e \"))\n    // (true)\n    // >>> checkIfLastCharIsASpace((\"\"))\n    // (false)\n    def checkIfLastCharIsASpace(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isSpace(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a period and false otherwise.\n    // Note: \"period\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsAPeriod((\"apple pie\"))\n    // (false)",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return t",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef gh\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef gh ij\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef gh\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef gh ij\")\n    // (false)\n    def checkIf",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < \"a\" || txt.charAt(txt.length - 1) > \"z\") && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (i <- 0 until words.length - 1) {\n            if (words[i].equals(words[words.length - 1 - i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122) return true\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"racecar\")\n    // (true)\n    // >>> isPalindrome(\"racecar \")\n    // (false)\n    // >>> isPalindrome(\"race car\")\n    // (true)\n    // >>> isPalindrome(\"race car \")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return true\n        if (txt.length == 1) return true\n        if (txt.length == 2) return txt.equals(txt.reverse())\n        if (txt.length % 2 == 0) {\n            return txt.substring(0, txt.length / 2).equals(txt.substring(txt.length / 2, txt.length))\n        } else {\n            return txt.substring(0, txt.length / 2).equals(txt.substring(txt.length / 2, txt.length))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"a\", \"a\")\n    // (true)\n    // >>> isPermutation(\"a\", \"b\")\n    // (false)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    //",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple pie\")\n    // (false)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"apple pie pi\")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // contains a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsWord(\"apple pie\")\n    // (false)\n    // >>> containsWord(\"apple pie \")\n    // (true)\n    // >>> containsWord(\"apple pie pi\")\n    // (true)\n    // >>> containsWord(\"\")\n    // (false)\n    def containsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // contains a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsWord(\"apple pie\")\n    // (false)\n    // >>> containsWord(\"apple pie \")\n    // (true)\n    // >>> containsWord(\"apple pie pi\")\n    // (true)\n    // >>> containsWord(\"\")\n    // (false)\n    def containsWord2(txt : String) : Boolean = {\n        if (txt.length == 0",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").filter(x => checkIfLastCharIsALetter(x)).exists(x => x.equals(reverse(x)))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").filter(x => checkIfLastCharIsALetter(x)).exists(x => x.equals(reverse(x)))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    //",
    "        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\",",
    "        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') {\n            for (i <- 0 until txt.length - 1) {\n                if (txt.charAt(i) == ' ') continue\n                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z') continue\n                return false\n            }\n            return true\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: A palindrome is a word or a phrase that is the same\n    // forward and backward.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam madam\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.length == 2) return txt == txt.reverse()\n        if (txt.length == 3) return txt == txt.reverse().substring(1)\n        if (txt.length == 4) return txt == txt.reverse().substring(1)\n        if (txt.length == 5) return txt == txt.reverse().substring(2)\n        if (txt.length == 6) return txt == txt.reverse().substring(2)\n        if (txt.length == 7) return txt == txt.reverse().substring(3)\n        if (txt.length == 8) return txt == txt.reverse().substring(3)\n        if (txt.length == 9) return",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') && !(txt.split(\" \").exists(s => s.length > 0 && s.charAt(s.length - 1) < 'a' || s.charAt(s.length - 1) > 'z'))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (words[i].length > 0 && isPalindrome(words[i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie pi\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie pi e\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie pi e \"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"\"))\n    // (false)\n    def containsAtLeastOneWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 0\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsAtLeastOneWord2((\"apple pie\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie \"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie pi\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie pi e\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie pi e \"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"\"))\n    // (false)\n    def containsAtLeastOneWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return",
    "        if (txt.length() == 0) return false\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        return txt.equals(new StringBuilder(txt).reverse().toString())\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam amad\")\n    // (true)\n    // >>> isPalindrome(\"madam amad\")\n    // (true)\n    // >>> isPalindrome(\"madam amad m\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mada\")\n    // (false)\n    // >>>",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt.substring(0, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && isWord(txt.substring(1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"sentence\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple\")\n    // (false)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && isSentence(txt.substring(1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a paragraph and false otherwise.\n    // Note: \"paragraph\" is a group of characters separated by new line.\n    // Examples:\n    // >>> isParagraph(\"apple pie\\npie\")\n    // (true)\n    // >>> isParagraph(\"apple pie\\npie\\n\")\n    // (true)\n    // >>> isParagraph(\"apple pie\")\n    // (false)\n    // >>> isParagraph(\"\")\n    // (false)\n    def isPar",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length() == 0)",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba b\")\n    // (false)\n    // >>> isPalindrome(\"abba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba b\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (false)\n    // >>> isPalindrome(\"madam am \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"pale pie",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dma\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mad\")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"racecar\")\n    // (true)\n    // >>> isPalindrome(\"racecar \")\n    // (false)\n    // >>> isPalindrome(\"racecar car\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return true\n        }\n        if (txt.length == 1) {\n            return true\n        }\n        if (txt.length == 2) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 3) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 4) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 5) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 6) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 7) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 8) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 9) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 10) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 11) {\n            return txt.equals(txt.reverse",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isPartOfAWord(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfAWord(\"apple\")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie pi\")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie pi \")\n    // (true)\n    // >>> isPartOfAWord(\"\")\n    // (false)\n    def isPartOfAWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"apple\")\n    // (true)\n    // >>> isPalindrome(\"apple pie\")\n    // (true)\n    // >>> isPalindrome(\"apple pie \")\n    // (true)\n    // >>> isPalindrome(\"apple pie pi\")\n    // (true)\n    // >>> isPalindrome(\"apple pie pi \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z' && txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a ba\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var word : words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n",
    "        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) % \"abcdefghijklmnopqrstuvwxyz\".toCharArray(0).length == 0) && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) % \"0123456789\".toCharArray(0).length == 0\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a special character and false otherwise.\n    // Note: \"special\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsASpecial((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsASpecial((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsASpecial((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsASpecial((\"\"))\n    // (false)\n    def checkIfLastCharIsASpecial(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) % \"!@#$%^&*()_+-=[]{}|;:,.<>/?`~\".toCharArray(0).length == 0\n    }\n\n    // Create a",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9'\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a lowercase character and false otherwise.\n    // Note: \"lowercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALowercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"\"))\n    // (false)\n    def checkIfLastCharIsALowercase(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z'\n    }\n\n    // Create",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama \")\n    // (false)\n    // >>> isPermutation(\"madam\", \"dama madam",
    "        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: A palindrome is a word or phrase that is the same\n    // forward and backward.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madamam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: A permutation is a rearrangement of letters.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dma\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madamam\")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPermutation(txt1 : String, txt2 : String) : Boolean = {\n        if (txt1.length == 0 || txt2.length == 0) {\n            return true\n        }\n        return txt1.equals(reverse(txt2))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: A word is a group of letters separated by space.\n    // Examples:\n    // >>> isWord(\"madam\")\n    // (true)\n    // >>> isWord(\"madam \")\n    // (false",
    "        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z') && !(txt.charAt(txt.length() - 1) >= 'A' && txt.charAt(txt.length() - 1) <= 'Z') && !(txt.charAt(txt.length() - 1) >= '0' && txt.charAt(txt.length() - 1) <= '9') && !(txt.charAt(txt.length() - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba b\")\n    // (false)\n    // >>> isPalindrome(\"abba ba\")\n    // (false)\n    // >>> isPalindrome(\"abba ba b\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        return txt.equals(new StringBuilder(txt).reverse().toString())\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"a\", \"a\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> is",
    "        if (txt.length == 0) {\n            return false\n        } else {\n            return !isLetter(txt[txt.length - 1]) && !isPartOfWord(txt)\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isLetter(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isPartOfWord(txt) && !isPartOfWord(txt.substring(0, txt.length - 1))\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"apple\")\n    // (true)\n    // >>> isPalindrome(\"apple pie\")\n    // (true)\n    // >>> isPalindrome(\"apple pie \")\n    // (false)\n    ",
    "        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }",
    "        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPer",
    "        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') &&\n            !(txt.split(\" \").exists(x => x.length > 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").exists(x => checkIfStringIsPalindrome(x))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringIsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringIsPalindrome(\"a\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringIsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringIsPalindrome(\"a b c d e\")\n    // (true)\n    def"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}