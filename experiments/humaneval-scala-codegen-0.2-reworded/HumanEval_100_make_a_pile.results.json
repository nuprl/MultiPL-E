{
  "name": "HumanEval_100_make_a_pile",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            var level = List(n.toLong)\n            var odd = n.toLong % 2 == 1\n            var even = n.toLong % 2 == 0\n            for (i <- 1 to n) {\n                if (odd) {\n                    level = level.append(level.head + 2l)\n                } else if (even) {\n                    level = level.append(level.head + 1l)\n                } else {\n                    level = level.append(level.head + 0l)\n                }\n            }\n            return level\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjpd969y6.scala:21:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to n) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (n : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjpd969y6.scala:23:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    level = level.append(level.head + \u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjpd969y6.scala:25:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                    level = level.append(level.head + \u001b[31m1l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjpd969y6.scala:27:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                    level = level.append(level.head + \u001b[31m0l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.of(n)\n        } else {\n            val n = n.toLong\n            val n_1 = n - 1\n            val n_2 = n / 2\n            val n_3 = n_1 / 2\n            val n_4 = n_2 / 2\n            val n_5 = n_3 / 2\n            val n_6 = n_4 / 2\n            val n_7 = n_5 / 2\n            val n_8 = n_6 / 2\n            val n_9 = n_7 / 2\n            val n_10 = n_8 / 2\n            val n_11 = n_9 / 2\n            val n_12 = n_10 / 2\n            val n_13 = n_11 / 2\n            val n_14 = n_12 / 2\n            val n_15 = n_13 / 2\n            val n_16 = n_14 / 2\n            val n_17 = n_15 / 2\n            val n_18 = n_16 / 2\n            val n_19 = n_17 / 2\n            val n_20 = n_18 / 2\n            val n_21 = n_19 / 2\n            val n_22 = n_20 / 2\n            val n_23 = n_21 / 2\n            val n_24 = n_22 / 2\n            val n_25 = n_23 / 2\n            val n_26 = n_24 / 2\n            val n_27 = n_25 / 2\n            val n_28 = n_26 / 2\n            val n_29 = n_27 / 2\n            val n_30 = n_28 / 2\n            val n_31 = n_29 / 2\n            val n_32 = n_30 / 2\n            val n_33 = n_31 / 2\n            val n_34 = n_32 / 2\n            val n_35 = n_33 / 2\n            val n_36 = n_34 / 2\n            val n_37 = n_35 / 2\n            val n_38 = n_36 / 2\n            \n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1ilhhkcx.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1ilhhkcx.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1ilhhkcx.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1ilhhkcx.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1ilhhkcx.scala:21:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ilhhkcx.scala:70:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp1ilhhkcx.scala:62:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m62 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.of(n)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpi065ybh0.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi065ybh0.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi065ybh0.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ * 2l\n        val n_3 = n_ * 3l\n        val n_4 = n_ * 4l\n        val n_5 = n_ * 5l\n        val n_6 = n_ * 6l\n        val n_7 = n_ * 7l\n        val n_8 = n_ * 8l\n        val n_9 = n_ * 9l\n        val n_10 = n_ * 10l\n        val n_11 = n_ * 11l\n        val n_12 = n_ * 12l\n        val n_13 = n_ * 13l\n        val n_14 = n_ * 14l\n        val n_15 = n_ * 15l\n        val n_16 = n_ * 16l\n        val n_17 = n_ * 17l\n        val n_18 = n_ * 18l\n        val n_19 = n_ * 19l\n        val n_20 = n_ * 20l\n        val n_21 = n_ * 21l\n        val n_22 = n_ * 22l\n        val n_23 = n_ * 23l\n        val n_24 = n_ * 24l\n        val n_25 = n_ * 25l\n        val n_26 = n_ * 26l\n        val n_27 = n_ * 27l\n        val n_28 = n_ * 28l\n        val n_29 = n_ * 29l\n        val n_30 = n_ * 30l\n        val n_31 = n_ * 31l\n        val n_32 = n_ * 32l\n        val n_33 = n_ * 33l\n        val n_34 = n_ * 34l\n        val n_35 = n_ * 35l\n        val n_36 = n_ * 36l\n        val n_37 = n_ * 37l\n        val n_38 = n_ * 38l\n        val n_39 = n_ * 39l\n        val n_40 = n_ * 40l\n        val n_41 = n_ * 41l\n        val n_42 = n_ * 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8_r4jng.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        val result = mutable.List[Long]()\n        if (n % 2 == 0) {\n            result.append(n / 2)\n            result.append(n / 2)\n        } else {\n            result.append(n / 2)\n            result.append(n / 2 + 1)\n        }\n        for (i <- 1 until n) {\n            result.append(result.head + result.tail.head)\n            result.tail.tail.head = result.tail.head\n            result.tail.head = result.tail.head + result.tail.tail.head\n            result.tail.tail = result.tail.tail.tail\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplejvt2ub.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplejvt2ub.scala:16:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2\n        val n2 = nn / 2\n        val n3 = nn % 4\n        val n4 = nn / 4\n        val n5 = nn % 8\n        val n6 = nn / 8\n        val n7 = nn % 16\n        val n8 = nn / 16\n        val n9 = nn % 32\n        val n10 = nn / 32\n        val n11 = nn % 64\n        val n12 = nn / 64\n        val n13 = nn % 128\n        val n14 = nn / 128\n        val n15 = nn % 256\n        val n16 = nn / 256\n        val n17 = nn % 512\n        val n18 = nn / 512\n        val n19 = nn % 1024\n        val n20 = nn / 1024\n        val n21 = nn % 2048\n        val n22 = nn / 2048\n        val n23 = nn % 4096\n        val n24 = nn / 4096\n        val n25 = nn % 8192\n        val n26 = nn / 8192\n        val n27 = nn % 16384\n        val n28 = nn / 16384\n        val n29 = nn % 32768\n        val n30 = nn / 32768\n        val n31 = nn % 65536\n        val n32 = nn / 65536\n        val n33 = nn % 131072\n        val n34 = nn / 131072\n        val n35 = nn % 262144\n        val n36 = nn / 262144\n        val n37 = nn % 524288\n        val n38 = nn / 524288\n        val n39 = nn % 1048576\n        val n40 = nn / 1048576\n        val n41 = nn % 2097152\n        val n42 = nn / 2097152\n        val n43 = nn % 4194304\n        val n44 = nn / 4194304\n        val n45 = nn % 8388608\n        val n46 = nn / 8388608\n        val n47 = nn %\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpl_kq5bhv.scala:62:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn47\u001b[0m = nn %\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl_kq5bhv.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n            val level = i + 1\n            if (level % 2 == 0) {\n                result = result.append(level * 2)\n            } else {\n                result = result.append(level)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpe6g05nz0.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe6g05nz0.scala:23:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                result = result.append(level * \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe6g05nz0.scala:25:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                result = result.append(level)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.singleton(n)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2) + makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6e_oslja.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6e_oslja.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6e_oslja.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.singleton(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue singleton is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6e_oslja.scala:23:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m) + makeAPile(n / \u001b[31m2\u001b[0m + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        val result = List[Long](n, n + 1, n + 2)\n        if (n % 2 == 0) {\n            result = result.append(n + 3)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwabe743t.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwabe743t.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result.append(n + \u001b[31m3\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            return List(n.toLong, n.toLong + 1l, n.toLong + 2l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpenttaq4s.scala:22)\n\tat Problem.main(tmpenttaq4s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n1 = n.toLong\n        val n2 = n1.div(2)\n        val n3 = n1.div(2)\n        val n4 = n1.div(2)\n        val n5 = n1.div(2)\n        val n6 = n1.div(2)\n        val n7 = n1.div(2)\n        val n8 = n1.div(2)\n        val n9 = n1.div(2)\n        val n10 = n1.div(2)\n        val n11 = n1.div(2)\n        val n12 = n1.div(2)\n        val n13 = n1.div(2)\n        val n14 = n1.div(2)\n        val n15 = n1.div(2)\n        val n16 = n1.div(2)\n        val n17 = n1.div(2)\n        val n18 = n1.div(2)\n        val n19 = n1.div(2)\n        val n20 = n1.div(2)\n        val n21 = n1.div(2)\n        val n22 = n1.div(2)\n        val n23 = n1.div(2)\n        val n24 = n1.div(2)\n        val n25 = n1.div(2)\n        val n26 = n1.div(2)\n        val n27 = n1.div(2)\n        val n28 = n1.div(2)\n        val n29 = n1.div(2)\n        val n30 = n1.div(2)\n        val n31 = n1.div(2)\n        val n32 = n1.div(2)\n        val n33 = n1.div(2)\n        val n34 = n1.div(2)\n        val n35 = n1.div(2)\n        val n36 = n1.div(2)\n        val n37 = n1.div(2)\n        val n38 = n1.div(2)\n        val n39 = n1.div(2)\n        val n40 = n1.\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm5t03pn2.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn2\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn3\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn4\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn5\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn6\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn7\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn8\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val nn_1 = nn - 1\n        val nn_2 = nn_1 - 1\n        val nn_3 = nn_2 - 1\n        val nn_4 = nn_3 - 1\n        val nn_5 = nn_4 - 1\n        val nn_6 = nn_5 - 1\n        val nn_7 = nn_6 - 1\n        val nn_8 = nn_7 - 1\n        val nn_9 = nn_8 - 1\n        val nn_10 = nn_9 - 1\n        val nn_11 = nn_10 - 1\n        val nn_12 = nn_11 - 1\n        val nn_13 = nn_12 - 1\n        val nn_14 = nn_13 - 1\n        val nn_15 = nn_14 - 1\n        val nn_16 = nn_15 - 1\n        val nn_17 = nn_16 - 1\n        val nn_18 = nn_17 - 1\n        val nn_19 = nn_18 - 1\n        val nn_20 = nn_19 - 1\n        val nn_21 = nn_20 - 1\n        val nn_22 = nn_21 - 1\n        val nn_23 = nn_22 - 1\n        val nn_24 = nn_23 - 1\n        val nn_25 = nn_24 - 1\n        val nn_26 = nn_25 - 1\n        val nn_27 = nn_26 - 1\n        val nn_28 = nn_27 - 1\n        val nn_29 = nn_28 - 1\n        val nn_30 = nn_29 - 1\n        val nn_31 = nn_30 - 1\n        val nn_32 = nn_31 - 1\n        val nn_33 = nn_32 - 1\n        val nn_34 = nn_33 - 1\n        val nn_35 = nn_34 - 1\n        val nn_36 = nn_35 - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_bisugvl.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n1 = n.toLong\n        val n2 = n1.div(2)\n        val n3 = n1.div(2)\n        val n4 = n1.div(2)\n        val n5 = n1.div(2)\n        val n6 = n1.div(2)\n        val n7 = n1.div(2)\n        val n8 = n1.div(2)\n        val n9 = n1.div(2)\n        val n10 = n1.div(2)\n        val n11 = n1.div(2)\n        val n12 = n1.div(2)\n        val n13 = n1.div(2)\n        val n14 = n1.div(2)\n        val n15 = n1.div(2)\n        val n16 = n1.div(2)\n        val n17 = n1.div(2)\n        val n18 = n1.div(2)\n        val n19 = n1.div(2)\n        val n20 = n1.div(2)\n        val n21 = n1.div(2)\n        val n22 = n1.div(2)\n        val n23 = n1.div(2)\n        val n24 = n1.div(2)\n        val n25 = n1.div(2)\n        val n26 = n1.div(2)\n        val n27 = n1.div(2)\n        val n28 = n1.div(2)\n        val n29 = n1.div(2)\n        val n30 = n1.div(2)\n        val n31 = n1.div(2)\n        val n32 = n1.div(2)\n        val n33 = n1.div(2)\n        val n34 = n1.div(2)\n        val n35 = n1.div(2)\n        val n36 = n1.div(2)\n        val n37 = n1.div(2)\n        val n38 = n1.div(2)\n        val n39 = n1.div(2)\n        val n40 = n1.\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm5t03pn2.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn2\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn3\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn4\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn5\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn6\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn7\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn8\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2 == 0l ? nn / 2 : (nn + 1) / 2\n        val n2 = nn % 2 == 0l ? (nn + 1) / 2 : nn / 2\n        val n3 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n4 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n5 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n6 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n7 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n8 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n9 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n10 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n11 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n12 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n13 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n14 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n15 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n16 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n17 = nn % 2 == 0l ? (nn + 1) / 2 : (nn + 1) / 2\n        val n18 = nn % 2 == 0l ? (nn\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292661,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp27x57hv6.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27x57hv6.scala:16:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn1\u001b[0m = nn % \u001b[31m2\u001b[0m == \u001b[31m0l\u001b[0m ? nn / \u001b[31m2\u001b[0m : (\u001b[35mnn\u001b[0m \u001b[35m+\u001b[0m \u001b[31m1\u001b[0m) \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: type /\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27x57hv6.scala:16:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn1\u001b[0m = nn % \u001b[31m2\u001b[0m == \u001b[31m0l\u001b[0m ? nn / \u001b[31m2\u001b[0m : (\u001b[35mnn\u001b[0m \u001b[35m+\u001b[0m \u001b[31m1\u001b[0m) \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value ? is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27x57hv6.scala:17:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn2\u001b[0m = nn % \u001b[31m2\u001b[0m == \u001b[31m0l\u001b[0m ? (nn + \u001b[31m1\u001b[0m) / \u001b[31m2\u001b[0m : \u001b[35mnn\u001b[0m \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Not found: type /\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27x57hv6.scala:17:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn2\u001b[0m = nn % \u001b[31m2\u001b[0m == \u001b[31m0l\u001b[0m ? (nn + \u001b[31m1\u001b[0m) / \u001b[31m2\u001b[0m : \u001b[35mnn\u001b[0m \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value ? is not a member of Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp27x57hv6.scala:18:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ - 1\n        val n_2 = n_ - 2\n        val n_3 = n_ - 3\n        val n_4 = n_ - 4\n        val n_5 = n_ - 5\n        val n_6 = n_ - 6\n        val n_7 = n_ - 7\n        val n_8 = n_ - 8\n        val n_9 = n_ - 9\n        val n_10 = n_ - 10\n        val n_11 = n_ - 11\n        val n_12 = n_ - 12\n        val n_13 = n_ - 13\n        val n_14 = n_ - 14\n        val n_15 = n_ - 15\n        val n_16 = n_ - 16\n        val n_17 = n_ - 17\n        val n_18 = n_ - 18\n        val n_19 = n_ - 19\n        val n_20 = n_ - 20\n        val n_21 = n_ - 21\n        val n_22 = n_ - 22\n        val n_23 = n_ - 23\n        val n_24 = n_ - 24\n        val n_25 = n_ - 25\n        val n_26 = n_ - 26\n        val n_27 = n_ - 27\n        val n_28 = n_ - 28\n        val n_29 = n_ - 29\n        val n_30 = n_ - 30\n        val n_31 = n_ - 31\n        val n_32 = n_ - 32\n        val n_33 = n_ - 33\n        val n_34 = n_ - 34\n        val n_35 = n_ - 35\n        val n_36 = n_ - 36\n        val n_37 = n_ - 37\n        val n_38 = n_ - 38\n        val n_39 = n_ - 39\n        val n_40 = n_ - 40\n        val n_41 = n_ - 41\n        val n_42 = n_ - 42\n        val n_43 = n_ - 43\n        val n_44 = n_ - 44\n        val n_45 = n_ - 45\n        val n_46 = n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppjgs7wl1.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.of(n)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpi065ybh0.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi065ybh0.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi065ybh0.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_1 + 1l\n        val n_3 = n_2 + 1l\n        val n_4 = n_3 + 1l\n        val n_5 = n_4 + 1l\n        val n_6 = n_5 + 1l\n        val n_7 = n_6 + 1l\n        val n_8 = n_7 + 1l\n        val n_9 = n_8 + 1l\n        val n_10 = n_9 + 1l\n        val n_11 = n_10 + 1l\n        val n_12 = n_11 + 1l\n        val n_13 = n_12 + 1l\n        val n_14 = n_13 + 1l\n        val n_15 = n_14 + 1l\n        val n_16 = n_15 + 1l\n        val n_17 = n_16 + 1l\n        val n_18 = n_17 + 1l\n        val n_19 = n_18 + 1l\n        val n_20 = n_19 + 1l\n        val n_21 = n_20 + 1l\n        val n_22 = n_21 + 1l\n        val n_23 = n_22 + 1l\n        val n_24 = n_23 + 1l\n        val n_25 = n_24 + 1l\n        val n_26 = n_25 + 1l\n        val n_27 = n_26 + 1l\n        val n_28 = n_27 + 1l\n        val n_29 = n_28 + 1l\n        val n_30 = n_29 + 1l\n        val n_31 = n_30 + 1l\n        val n_32 = n_31 + 1l\n        val n_33 = n_32 + 1l\n        val n_34 = n_33 + 1l\n        val n_35 = n_34 + 1l\n        val n_36 = n_35 + 1l\n        val n_37 = n_36 + 1l\n        val n_38 = n_37 + 1l\n        val n_39 = n_38\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkvjsbogd.scala:55:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            var result = List[Long](0l)\n            var i = 1l\n            while (i <= n) {\n                result = result.append(i)\n                i = i + 2l\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7xvjrzz3.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ * 2l\n        val n_3 = n_ * 3l\n        val n_4 = n_ * 4l\n        val n_5 = n_ * 5l\n        val n_6 = n_ * 6l\n        val n_7 = n_ * 7l\n        val n_8 = n_ * 8l\n        val n_9 = n_ * 9l\n        val n_10 = n_ * 10l\n        val n_11 = n_ * 11l\n        val n_12 = n_ * 12l\n        val n_13 = n_ * 13l\n        val n_14 = n_ * 14l\n        val n_15 = n_ * 15l\n        val n_16 = n_ * 16l\n        val n_17 = n_ * 17l\n        val n_18 = n_ * 18l\n        val n_19 = n_ * 19l\n        val n_20 = n_ * 20l\n        val n_21 = n_ * 21l\n        val n_22 = n_ * 22l\n        val n_23 = n_ * 23l\n        val n_24 = n_ * 24l\n        val n_25 = n_ * 25l\n        val n_26 = n_ * 26l\n        val n_27 = n_ * 27l\n        val n_28 = n_ * 28l\n        val n_29 = n_ * 29l\n        val n_30 = n_ * 30l\n        val n_31 = n_ * 31l\n        val n_32 = n_ * 32l\n        val n_33 = n_ * 33l\n        val n_34 = n_ * 34l\n        val n_35 = n_ * 35l\n        val n_36 = n_ * 36l\n        val n_37 = n_ * 37l\n        val n_38 = n_ * 38l\n        val n_39 = n_ * 39l\n        val n_40 = n_ * 40l\n        val n_41 = n_ * 41l\n        val n_42 = n_ * 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8_r4jng.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return makeAPile(n - 1) + List[Long](n.toLong, n.toLong + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplncdoccs.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List[\u001b[35mLong\u001b[0m](n.toLong, n.toLong + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be positive\")\n        }\n        if (n == 0) {\n            return List.empty()\n        }\n        if (n == 1) {\n            return List.of(n)\n        }\n        if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp46ijw9b9.scala:19:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp46ijw9b9.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return Nil\n        }\n        val n1 = n.toInt\n        if (n1 % 2 == 1) {\n            return List(n.toLong, n1.toLong + 1l, n.toLong + 2l)\n        } else {\n            return List(n.toLong, n1.toLong + 2l, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplrearu6e.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n            val level = i + 1\n            if (level % 2 == 0) {\n                result = result.append(level * 2)\n            } else {\n                result = result.append(level)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpe6g05nz0.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe6g05nz0.scala:23:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                result = result.append(level * \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe6g05nz0.scala:25:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                result = result.append(level)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        if (n_ % 2 == 0) {\n            val n_1 = n_ / 2\n            val n_2 = n_1 + 1\n            val n_3 = n_2 + 1\n            val n_4 = n_3 + 1\n            val n_5 = n_4 + 1\n            val n_6 = n_5 + 1\n            val n_7 = n_6 + 1\n            val n_8 = n_7 + 1\n            val n_9 = n_8 + 1\n            val n_10 = n_9 + 1\n            val n_11 = n_10 + 1\n            val n_12 = n_11 + 1\n            val n_13 = n_12 + 1\n            val n_14 = n_13 + 1\n            val n_15 = n_14 + 1\n            val n_16 = n_15 + 1\n            val n_17 = n_16 + 1\n            val n_18 = n_17 + 1\n            val n_19 = n_18 + 1\n            val n_20 = n_19 + 1\n            val n_21 = n_20 + 1\n            val n_22 = n_21 + 1\n            val n_23 = n_22 + 1\n            val n_24 = n_23 + 1\n            val n_25 = n_24 + 1\n            val n_26 = n_25 + 1\n            val n_27 = n_26 + 1\n            val n_28 = n_27 + 1\n            val n_29 = n_28 + 1\n            val n_30 = n_29 + 1\n            val n_31 = n_30 + 1\n            val n_32 = n_31 + 1\n            val n_33 = n_32 + 1\n            val n_34 = n_33 + 1\n            val n_35 = n_34 + 1\n            val n_36 = n_35 + 1\n            val n_37 = n_36 + 1\n            val n_38 = n_37 + 1\n            val n_39 = n_38 + 1\n            val n_40 = n_39 + 1\n            val n_41 = n_40 + 1\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpho4kunvs.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4kunvs.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpho4kunvs.scala:59:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2l\n        val n2 = nn / 2l\n        val n3 = nn / 4l\n        val n4 = nn / 8l\n        val n5 = nn / 16l\n        val n6 = nn / 32l\n        val n7 = nn / 64l\n        val n8 = nn / 128l\n        val n9 = nn / 256l\n        val n10 = nn / 512l\n        val n11 = nn / 1024l\n        val n12 = nn / 2048l\n        val n13 = nn / 4096l\n        val n14 = nn / 8192l\n        val n15 = nn / 16384l\n        val n16 = nn / 32768l\n        val n17 = nn / 65536l\n        val n18 = nn / 131072l\n        val n19 = nn / 262144l\n        val n20 = nn / 524288l\n        val n21 = nn / 1048576l\n        val n22 = nn / 2097152l\n        val n23 = nn / 4194304l\n        val n24 = nn / 8388608l\n        val n25 = nn / 16777216l\n        val n26 = nn / 33554432l\n        val n27 = nn / 67108864l\n        val n28 = nn / 134217728l\n        val n29 = nn / 268435456l\n        val n30 = nn / 536870912l\n        val n31 = nn / 1073741824l\n        val n32 = nn / 2147483648l\n        val n33 = nn / 4294967296l\n        val n34 = nn / 8589934592l\n        val n35 = nn / 17179869184l\n        val n36 = nn / 34359738368l\n        val n37 = nn / 68719476736l\n        val n38 = nn / 137438953472l\n        val n39 = nn / 274877906944l\n        \n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp3dlwzyz.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            return makeAPile(n - 1) + List(n.toLong)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0y1kylz9.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be positive\")\n        }\n        if (n == 0) {\n            return List.empty()\n        }\n        if (n == 1) {\n            return List.of(n)\n        }\n        if (n % 2 == 0) {\n            return List.of(n, n + 1)\n        } else {\n            return List.of(n, n + 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpce2vidzh.scala:19:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpce2vidzh.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpce2vidzh.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n, n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpce2vidzh.scala:27:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n, n + \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toInt\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val res = List.empty[Long]\n            for (i <- 0 until nn2) {\n                res = res.append(i + 1)\n            }\n            return res\n        } else {\n            val nn3 = (nn + 1) / 2\n            val res = List.empty[Long]\n            for (i <- 0 until nn3) {\n                res = res.append(i + 1)\n            }\n            return res\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptt6ywrlf.scala:20:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                res = res.append(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value append is not a member of List[Long] - did you mean res.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptt6ywrlf.scala:27:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                res = res.append(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value append is not a member of List[Long] - did you mean res.appended?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val res = List[Long](nn2.toLong, nn2.toLong, nn2.toLong)\n            return res\n        } else {\n            val nn2 = nn + 1\n            val res = List[Long](nn2.toLong, nn2.toLong, nn2.toLong)\n            return res\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_u7yk751.scala:27)\n\tat Problem.main(tmp_u7yk751.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return List[Long](n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsy43h0t7.scala:22)\n\tat Problem.main(tmpsy43h0t7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return Nil\n        } else if (n == 1) {\n            return List(n)\n        } else if (n % 2 == 0) {\n            return List(n, n + 1)\n        } else {\n            return List(n, n + 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpc0_a4k4i.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            var result = List.empty()\n            for (i <- 0 until n) {\n                result = result.append(i)\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9itbyl6x.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9itbyl6x.scala:18:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9itbyl6x.scala:19:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (n : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n        for (var i = 0; i < n; i++) {\n            var stones = List[Long](i.toLong, i.toLong + 1)\n            if (i % 2 == 0) {\n                stones = stones.append(i.toLong + 2)\n            }\n            result = result.append(stones)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_nkh4mxf.scala:16:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < n; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_nkh4mxf.scala:16:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < n; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_nkh4mxf.scala:16:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < n; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_nkh4mxf.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < n; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1\n        val n_2 = n_ + 2\n        val n_3 = n_ + 3\n        val n_4 = n_ + 4\n        val n_5 = n_ + 5\n        val n_6 = n_ + 6\n        val n_7 = n_ + 7\n        val n_8 = n_ + 8\n        val n_9 = n_ + 9\n        val n_10 = n_ + 10\n        val n_11 = n_ + 11\n        val n_12 = n_ + 12\n        val n_13 = n_ + 13\n        val n_14 = n_ + 14\n        val n_15 = n_ + 15\n        val n_16 = n_ + 16\n        val n_17 = n_ + 17\n        val n_18 = n_ + 18\n        val n_19 = n_ + 19\n        val n_20 = n_ + 20\n        val n_21 = n_ + 21\n        val n_22 = n_ + 22\n        val n_23 = n_ + 23\n        val n_24 = n_ + 24\n        val n_25 = n_ + 25\n        val n_26 = n_ + 26\n        val n_27 = n_ + 27\n        val n_28 = n_ + 28\n        val n_29 = n_ + 29\n        val n_30 = n_ + 30\n        val n_31 = n_ + 31\n        val n_32 = n_ + 32\n        val n_33 = n_ + 33\n        val n_34 = n_ + 34\n        val n_35 = n_ + 35\n        val n_36 = n_ + 36\n        val n_37 = n_ + 37\n        val n_38 = n_ + 38\n        val n_39 = n_ + 39\n        val n_40 = n_ + 40\n        val n_41 = n_ + 41\n        val n_42 = n_ + 42\n        val n_43 = n_ + 43\n        val n_44 = n_ + 44\n        val n_45 = n_ + 45\n        val n_46 = n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwf53oxi0.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n                result = result.append(i + 1)\n            } else {\n                result = result.append(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjychfhmh.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjychfhmh.scala:18:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                result = result.append(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjychfhmh.scala:20:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            var level = List.empty()\n            var odd = n % 2 == 1\n            for (i <- 0 until n) {\n                if (odd) {\n                    level = level.append(i + 1)\n                } else {\n                    level = level.append(i)\n                }\n                odd = !odd\n            }\n            return level\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpoi2tvti7.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoi2tvti7.scala:18:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mlevel\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoi2tvti7.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (n : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            return makeAPile(n - 1) + List(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0ayqtqi4.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        val result = mutable.List[Long]()\n        for (i <- 1 to n) {\n            val level = mutable.List[Long]()\n            for (j <- 1 to i) {\n                level += j\n            }\n            result += level\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpzn6sgu1g.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzn6sgu1g.scala:16:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzn6sgu1g.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mlevel\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            return makeAPile(n - 1) + List.of(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292684,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpgxbo8_pu.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgxbo8_pu.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgxbo8_pu.scala:18:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val res = List(nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2, nn2\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4us8iw2e.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4us8iw2e.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4us8iw2e.scala:28:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp4us8iw2e.scala:20:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return makeAPile(n - 1) + List[Long](n.toLong, n.toLong + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplncdoccs.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List[\u001b[35mLong\u001b[0m](n.toLong, n.toLong + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            var result = List.empty[Long]\n            var i = n\n            while (i > 0) {\n                i = i - 1\n                result = result.append(i)\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292680,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpth_c0wtx.scala:22:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return List.empty()\n        }\n        if (n == 1) {\n            return List.of(n)\n        }\n        if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmgugnb6s.scala:19:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmgugnb6s.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2\n        val n2 = nn / 2\n        val n3 = nn + 1\n        val n4 = nn + 2\n        val n5 = nn + 3\n        val n6 = nn + 4\n        val n7 = nn + 5\n        val n8 = nn + 6\n        val n9 = nn + 7\n        val n10 = nn + 8\n        val n11 = nn + 9\n        val n12 = nn + 10\n        val n13 = nn + 11\n        val n14 = nn + 12\n        val n15 = nn + 13\n        val n16 = nn + 14\n        val n17 = nn + 15\n        val n18 = nn + 16\n        val n19 = nn + 17\n        val n20 = nn + 18\n        val n21 = nn + 19\n        val n22 = nn + 20\n        val n23 = nn + 21\n        val n24 = nn + 22\n        val n25 = nn + 23\n        val n26 = nn + 24\n        val n27 = nn + 25\n        val n28 = nn + 26\n        val n29 = nn + 27\n        val n30 = nn + 28\n        val n31 = nn + 29\n        val n32 = nn + 30\n        val n33 = nn + 31\n        val n34 = nn + 32\n        val n35 = nn + 33\n        val n36 = nn + 34\n        val n37 = nn + 35\n        val n38 = nn + 36\n        val n39 = nn + 37\n        val n40 = nn + 38\n        val n41 = nn + 39\n        val n42 = nn + 40\n        val n43 = nn + 41\n        val n44 = nn + 42\n        val n45 = nn + 43\n        val n46 = nn + 44\n        val n47 = nn + 45\n        val n48 = nn + 46\n        val n49 = nn + 47\n        val n50 = nn + 48\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp2w6n_9pq.scala:66:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2w6n_9pq.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val result = List[Long]()\n        for(i <- 0 until n) {\n            result <<= i + 1\n            if(i % 2 == 0) {\n                result <<= i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292683,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeyelom68.scala:16:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (n : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeyelom68.scala:17:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result <<= i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value <<= is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeyelom68.scala:19:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                result <<= i\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value <<= is not a member of List[Long]\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val nn_odd = nn % 2l\n        val nn_even = nn / 2l\n        val nn_odd_list = List.range(0, nn_odd).map(i => i + 1).toList\n        val nn_even_list = List.range(0, nn_even).map(i => i + 2).toList\n        val result = List.concat(nn_odd_list, nn_even_list)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1v0pwkqv.scala:18:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_odd_list\u001b[0m = List.range(\u001b[31m0\u001b[0m, nn_odd).map(\u001b[36mi\u001b[0m => i + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1v0pwkqv.scala:19:49 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_even_list\u001b[0m = List.range(\u001b[31m0\u001b[0m, nn_even).map(\u001b[36mi\u001b[0m => i + \u001b[31m2\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ - 1\n        val n_2 = n_ - 2\n        val n_3 = n_ - 3\n        val n_4 = n_ - 4\n        val n_5 = n_ - 5\n        val n_6 = n_ - 6\n        val n_7 = n_ - 7\n        val n_8 = n_ - 8\n        val n_9 = n_ - 9\n        val n_10 = n_ - 10\n        val n_11 = n_ - 11\n        val n_12 = n_ - 12\n        val n_13 = n_ - 13\n        val n_14 = n_ - 14\n        val n_15 = n_ - 15\n        val n_16 = n_ - 16\n        val n_17 = n_ - 17\n        val n_18 = n_ - 18\n        val n_19 = n_ - 19\n        val n_20 = n_ - 20\n        val n_21 = n_ - 21\n        val n_22 = n_ - 22\n        val n_23 = n_ - 23\n        val n_24 = n_ - 24\n        val n_25 = n_ - 25\n        val n_26 = n_ - 26\n        val n_27 = n_ - 27\n        val n_28 = n_ - 28\n        val n_29 = n_ - 29\n        val n_30 = n_ - 30\n        val n_31 = n_ - 31\n        val n_32 = n_ - 32\n        val n_33 = n_ - 33\n        val n_34 = n_ - 34\n        val n_35 = n_ - 35\n        val n_36 = n_ - 36\n        val n_37 = n_ - 37\n        val n_38 = n_ - 38\n        val n_39 = n_ - 39\n        val n_40 = n_ - 40\n        val n_41 = n_ - 41\n        val n_42 = n_ - 42\n        val n_43 = n_ - 43\n        val n_44 = n_ - 44\n        val n_45 = n_ - 45\n        val n_46 = n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppjgs7wl1.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.of(n)\n        } else if (n % 2 == 0) {\n            return List.of(n, n + 1)\n        } else {\n            return List.of(n, n + 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292686,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpl60dl7yd.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl60dl7yd.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl60dl7yd.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl60dl7yd.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n, n + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl60dl7yd.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n, n + \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.of(n)\n        } else {\n            val n_1 = n - 1\n            val n_2 = n_1 / 2\n            val n_3 = n_2 / 2\n            val n_4 = n_3 / 2\n            val n_5 = n_4 / 2\n            val n_6 = n_5 / 2\n            val n_7 = n_6 / 2\n            val n_8 = n_7 / 2\n            val n_9 = n_8 / 2\n            val n_10 = n_9 / 2\n            val n_11 = n_10 / 2\n            val n_12 = n_11 / 2\n            val n_13 = n_12 / 2\n            val n_14 = n_13 / 2\n            val n_15 = n_14 / 2\n            val n_16 = n_15 / 2\n            val n_17 = n_16 / 2\n            val n_18 = n_17 / 2\n            val n_19 = n_18 / 2\n            val n_20 = n_19 / 2\n            val n_21 = n_20 / 2\n            val n_22 = n_21 / 2\n            val n_23 = n_22 / 2\n            val n_24 = n_23 / 2\n            val n_25 = n_24 / 2\n            val n_26 = n_25 / 2\n            val n_27 = n_26 / 2\n            val n_28 = n_27 / 2\n            val n_29 = n_28 / 2\n            val n_30 = n_29 / 2\n            val n_31 = n_30 / 2\n            val n_32 = n_31 / 2\n            val n_33 = n_32 / 2\n            val n_34 = n_33 / 2\n            val n_35 = n_34 / 2\n            val n_36 = n_35 / 2\n            val n_37 = n_36 / 2\n            val n_38 = n_37 / 2\n            val n_39 = n_\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292685,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpam1vsulc.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpam1vsulc.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpam1vsulc.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpam1vsulc.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpam1vsulc.scala:59:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mn_39\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: n_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpam1vsulc.scala:69:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpam1vsulc.scala:61:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is inde",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        if (n_ % 2 == 0) {\n            val n_1 = n_ / 2\n            val n_2 = n_1 + 1\n            val n_3 = n_2 + 1\n            val n_4 = n_3 + 1\n            val n_5 = n_4 + 1\n            val n_6 = n_5 + 1\n            val n_7 = n_6 + 1\n            val n_8 = n_7 + 1\n            val n_9 = n_8 + 1\n            val n_10 = n_9 + 1\n            val n_11 = n_10 + 1\n            val n_12 = n_11 + 1\n            val n_13 = n_12 + 1\n            val n_14 = n_13 + 1\n            val n_15 = n_14 + 1\n            val n_16 = n_15 + 1\n            val n_17 = n_16 + 1\n            val n_18 = n_17 + 1\n            val n_19 = n_18 + 1\n            val n_20 = n_19 + 1\n            val n_21 = n_20 + 1\n            val n_22 = n_21 + 1\n            val n_23 = n_22 + 1\n            val n_24 = n_23 + 1\n            val n_25 = n_24 + 1\n            val n_26 = n_25 + 1\n            val n_27 = n_26 + 1\n            val n_28 = n_27 + 1\n            val n_29 = n_28 + 1\n            val n_30 = n_29 + 1\n            val n_31 = n_30 + 1\n            val n_32 = n_31 + 1\n            val n_33 = n_32 + 1\n            val n_34 = n_33 + 1\n            val n_35 = n_34 + 1\n            val n_36 = n_35 + 1\n            val n_37 = n_36 + 1\n            val n_38 = n_37 + 1\n            val n_39 = n_38 + 1\n            val n_40 = n_39 + 1\n            val n_41 = n_40 + 1\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpho4kunvs.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4kunvs.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpho4kunvs.scala:59:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2\n        val n2 = nn / 2\n        val n3 = nn % 4\n        val n4 = nn / 4\n        val n5 = nn % 8\n        val n6 = nn / 8\n        val n7 = nn % 16\n        val n8 = nn / 16\n        val n9 = nn % 32\n        val n10 = nn / 32\n        val n11 = nn % 64\n        val n12 = nn / 64\n        val n13 = nn % 128\n        val n14 = nn / 128\n        val n15 = nn % 256\n        val n16 = nn / 256\n        val n17 = nn % 512\n        val n18 = nn / 512\n        val n19 = nn % 1024\n        val n20 = nn / 1024\n        val n21 = nn % 2048\n        val n22 = nn / 2048\n        val n23 = nn % 4096\n        val n24 = nn / 4096\n        val n25 = nn % 8192\n        val n26 = nn / 8192\n        val n27 = nn % 16384\n        val n28 = nn / 16384\n        val n29 = nn % 32768\n        val n30 = nn / 32768\n        val n31 = nn % 65536\n        val n32 = nn / 65536\n        val n33 = nn % 131072\n        val n34 = nn / 131072\n        val n35 = nn % 262144\n        val n36 = nn / 262144\n        val n37 = nn % 524288\n        val n38 = nn / 524288\n        val n39 = nn % 1048576\n        val n40 = nn / 1048576\n        val n41 = nn % 2097152\n        val n42 = nn / 2097152\n        val n43 = nn % 4194304\n        val n44 = nn / 4194304\n        val n45 = nn % 8388608\n        val n46 = nn / 8388608\n        val n47 = nn %\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpl_kq5bhv.scala:62:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn47\u001b[0m = nn %\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl_kq5bhv.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            var result = List.empty()\n            var odd = n % 2 == 1\n            var even = n % 2 == 0\n            for (i <- 0 until n) {\n                if (odd) {\n                    result = result.append(i + 1)\n                } else if (even) {\n                    result = result.append(i + 2)\n                } else {\n                    result = result.append(i + 1)\n                }\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292685,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp0ttuvmjn.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0ttuvmjn.scala:18:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ttuvmjn.scala:21:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (n : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_2.toLong\n        val n_3 = n_3.toLong\n        val n_4 = n_4.toLong\n        val n_5 = n_5.toLong\n        val n_6 = n_6.toLong\n        val n_7 = n_7.toLong\n        val n_8 = n_8.toLong\n        val n_9 = n_9.toLong\n        val n_10 = n_10.toLong\n        val n_11 = n_11.toLong\n        val n_12 = n_12.toLong\n        val n_13 = n_13.toLong\n        val n_14 = n_14.toLong\n        val n_15 = n_15.toLong\n        val n_16 = n_16.toLong\n        val n_17 = n_17.toLong\n        val n_18 = n_18.toLong\n        val n_19 = n_19.toLong\n        val n_20 = n_20.toLong\n        val n_21 = n_21.toLong\n        val n_22 = n_22.toLong\n        val n_23 = n_23.toLong\n        val n_24 = n_24.toLong\n        val n_25 = n_25.toLong\n        val n_26 = n_26.toLong\n        val n_27 = n_27.toLong\n        val n_28 = n_28.toLong\n        val n_29 = n_29.toLong\n        val n_30 = n_30.toLong\n        val n_31 = n_31.toLong\n        val n_32 = n_32.toLong\n        val n_33 = n_33.toLong\n        val n_34 = n_34.toLong\n        val n_35 = n_35.toLong\n        val n_36 = n_36.toLong\n        val n_37 = n_37.toLong\n        val n_38 = n_38.toLong\n        val n_39 = n_39\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292692,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:17:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_2\u001b[0m = n_2.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_2\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:18:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_3\u001b[0m = n_3.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_3\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:19:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_4\u001b[0m = n_4.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:20:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_5\u001b[0m = n_5.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_5\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:21:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_6\u001b[0m = n_6.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_6\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:22:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_7\u001b[0m = n_7.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return List[Long](n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsy43h0t7.scala:22)\n\tat Problem.main(tmpsy43h0t7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be positive\")\n        }\n        if (n == 0) {\n            return List.empty()\n        }\n        if (n == 1) {\n            return List.singleton(n)\n        }\n        if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpagy_ch70.scala:19:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpagy_ch70.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mreturn\u001b[0m List.singleton(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue singleton is not a member of object scala.collection.immutable.List\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_1 + 1l\n        val n_3 = n_2 + 1l\n        val n_4 = n_3 + 1l\n        val n_5 = n_4 + 1l\n        val n_6 = n_5 + 1l\n        val n_7 = n_6 + 1l\n        val n_8 = n_7 + 1l\n        val n_9 = n_8 + 1l\n        val n_10 = n_9 + 1l\n        val n_11 = n_10 + 1l\n        val n_12 = n_11 + 1l\n        val n_13 = n_12 + 1l\n        val n_14 = n_13 + 1l\n        val n_15 = n_14 + 1l\n        val n_16 = n_15 + 1l\n        val n_17 = n_16 + 1l\n        val n_18 = n_17 + 1l\n        val n_19 = n_18 + 1l\n        val n_20 = n_19 + 1l\n        val n_21 = n_20 + 1l\n        val n_22 = n_21 + 1l\n        val n_23 = n_22 + 1l\n        val n_24 = n_23 + 1l\n        val n_25 = n_24 + 1l\n        val n_26 = n_25 + 1l\n        val n_27 = n_26 + 1l\n        val n_28 = n_27 + 1l\n        val n_29 = n_28 + 1l\n        val n_30 = n_29 + 1l\n        val n_31 = n_30 + 1l\n        val n_32 = n_31 + 1l\n        val n_33 = n_32 + 1l\n        val n_34 = n_33 + 1l\n        val n_35 = n_34 + 1l\n        val n_36 = n_35 + 1l\n        val n_37 = n_36 + 1l\n        val n_38 = n_37 + 1l\n        val n_39 = n_38\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkvjsbogd.scala:55:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return Nil.instance\n        } else if (n % 2 == 0) {\n            val n = n / 2\n            val result = Nil.instance\n            for (i <- 0 until n) {\n                result = Cons(i, result)\n            }\n            return result\n        } else {\n            val n = n + 1\n            val result = Nil.instance\n            for (i <- 0 until n) {\n                result = Cons(i, result)\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp089q3wdj.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp089q3wdj.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil.instance\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value instance is not a member of object scala.collection.immutable.Nil\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp089q3wdj.scala:19:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp089q3wdj.scala:20:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = Nil.instance\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value instance is not a member of object scala.collection.immutable.Nil\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp089q3wdj.scala:22:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result = Cons(i, result)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: Cons\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp089q3wdj.scala:26:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compili",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            var level = List.empty()\n            var stones = n\n            while (stones > 0) {\n                var odd = stones % 2\n                var even = stones / 2\n                if (odd == 1) {\n                    level = level.append(odd)\n                    stones = stones - odd\n                } else {\n                    level = level.append(even)\n                    stones = stones - even\n                }\n            }\n            return level\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292692,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpuck2w1u4.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmpuck2w1u4.scala:18:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mlevel\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be positive\")\n        }\n        if (n == 0) {\n            return List(0l)\n        }\n        if (n == 1) {\n            return List(1l)\n        }\n        if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc76ss_up.scala:31)\n\tat Problem.main(tmpc76ss_up.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val res = List(nn2, nn2 + 1, nn2 + 2, nn2 + 3, nn2 + 4, nn2 + 5, nn2 + 6, nn2 + 7, nn2 + 8, nn2 + 9, nn2 + 10, nn2 + 11, nn2 + 12, nn2 + 13, nn2 + 14, nn2 + 15, nn2 + 16, nn2 + 17, nn2 + 18, nn2 + 19, nn2 + 20, nn2 + 21, nn2 + 22, nn2 + 23, nn2 + 24, nn2 + 25, nn2 + 26, nn2 + 27, nn2 + 28, nn2 + 29, nn2 + 30, nn2 + 31, nn2 + 32, nn2 + 33, nn2 + 34, nn2 + 35, nn2 + 36, nn2 + 37, nn2 + 38, nn2 + 39, nn2 + 40, nn2 + 41, nn2 + 42, nn2 + 43, nn2 + 44, nn2 + 45, nn2 + 46, nn2 + 47, nn2 + 48, nn2 + 49, nn2 + 50, nn2 + 51, nn2 + 52, nn2 + 53, nn2 + 54, nn2 + 55, nn2 + 56, nn2 + 57, nn2 + 58, nn2 + 59, nn2 + 60, nn2 + 61, nn2 + 62, nn2 + 63, nn2 + 64, nn2 + 65, nn2 + 66, nn2 + 67, nn2 + 68, nn2 + 69, nn2 + 70, nn2 + 71, nn2 + 72, nn2 + 73, nn2 + 74, nn2 + 75, nn2 + 76, nn2 + 77, nn2 + 78, nn2\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx2lr1113.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx2lr1113.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2lr1113.scala:28:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpx2lr1113.scala:20:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            return List.range(0, n, 2).map(x => x + 1).map(x => x + 1).map(x => x + 1).toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292701,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp18nmxb7z.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmp18nmxb7z.scala:18:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m List.range(\u001b[31m0\u001b[0m, n, \u001b[31m2\u001b[0m).map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).map(\u001b[36mx\u001b[0m => x + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            return List(n.toLong, n.toLong + 1l, n.toLong + 2l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpenttaq4s.scala:22)\n\tat Problem.main(tmpenttaq4s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else if (n == 1) {\n            return List(1l)\n        } else if (n % 2 == 1) {\n            return List(n.toLong, n.toLong + 1l)\n        } else {\n            return List(n.toLong, n.toLong + 2l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr4k4634l.scala:26)\n\tat Problem.main(tmpr4k4634l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        if (n_ % 2 == 0) {\n            val n_1 = n_ / 2\n            val n_2 = n_1\n            val n_3 = n_1 + 1\n            val n_4 = n_3\n            val n_5 = n_3 + 1\n            val n_6 = n_5\n            val n_7 = n_5 + 1\n            val n_8 = n_7\n            val n_9 = n_7 + 1\n            val n_10 = n_9\n            val n_11 = n_9 + 1\n            val n_12 = n_11\n            val n_13 = n_11 + 1\n            val n_14 = n_13\n            val n_15 = n_13 + 1\n            val n_16 = n_15\n            val n_17 = n_15 + 1\n            val n_18 = n_17\n            val n_19 = n_17 + 1\n            val n_20 = n_19\n            val n_21 = n_19 + 1\n            val n_22 = n_21\n            val n_23 = n_21 + 1\n            val n_24 = n_23\n            val n_25 = n_23 + 1\n            val n_26 = n_25\n            val n_27 = n_25 + 1\n            val n_28 = n_27\n            val n_29 = n_27 + 1\n            val n_30 = n_29\n            val n_31 = n_29 + 1\n            val n_32 = n_31\n            val n_33 = n_31 + 1\n            val n_34 = n_33\n            val n_35 = n_33 + 1\n            val n_36 = n_35\n            val n_37 = n_35 + 1\n            val n_38 = n_37\n            val n_39 = n_37 + 1\n            val n_40 = n_39\n            val n_41 = n_39 + 1\n            val n_42 = n_41\n            val n_43 = n_41 + 1\n            val n_44 = n_43\n            val n_45 = n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbz4f1rtm.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz4f1rtm.scala:71:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpbz4f1rtm.scala:63:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m63 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toInt\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplj4dbkki.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplj4dbkki.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmplj4dbkki.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        }\n        if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$.makeAPile(tmpx3v4_yin.scala:21)\n\tat Problem$",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n            val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6 = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n            val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12 / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n            val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19 / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n            val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26 / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n            val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33 / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n            val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40 / 2\n            val nn42 = nn41 / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcilrb4ap.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcilrb4ap.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpcilrb4ap.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            var level = List.empty()\n            var stones = n\n            while (stones > 0) {\n                var odd = stones % 2\n                if (odd == 1) {\n                    level = level.append(stones)\n                    stones = stones / 2\n                } else {\n                    level = level.append(stones)\n                    stones = stones / 2\n                }\n            }\n            return level\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmj7qe4i8.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmj7qe4i8.scala:18:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mlevel\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            var i = n\n            var stones = List.empty()\n            while (i > 0) {\n                stones = stones.append(i)\n                i = i - 2\n            }\n            return stones\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpr9w0h9xw.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmpr9w0h9xw.scala:19:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mstones\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n1 = n.toLong\n        val n2 = n1.div(2).toLong\n        val n3 = n1.div(2).toLong\n        val n4 = n1.div(2).toLong\n        val n5 = n1.div(2).toLong\n        val n6 = n1.div(2).toLong\n        val n7 = n1.div(2).toLong\n        val n8 = n1.div(2).toLong\n        val n9 = n1.div(2).toLong\n        val n10 = n1.div(2).toLong\n        val n11 = n1.div(2).toLong\n        val n12 = n1.div(2).toLong\n        val n13 = n1.div(2).toLong\n        val n14 = n1.div(2).toLong\n        val n15 = n1.div(2).toLong\n        val n16 = n1.div(2).toLong\n        val n17 = n1.div(2).toLong\n        val n18 = n1.div(2).toLong\n        val n19 = n1.div(2).toLong\n        val n20 = n1.div(2).toLong\n        val n21 = n1.div(2).toLong\n        val n22 = n1.div(2).toLong\n        val n23 = n1.div(2).toLong\n        val n24 = n1.div(2).toLong\n        val n25 = n1.div(2).toLong\n        val n26 = n1.div(2).toLong\n        val n27 = n1.div(2).toLong\n        val n28 = n1.div(2).toLong\n        val n29 = n1.div(2).toLong\n        val n30 = n1.div(2).toLong\n        val n31 = n1.div(2).toLong\n        val n32 = n1.div(2).toLong\n        val n33 = n1.div(2).toLong\n        val n34 = n1.div(2).toLong\n        val n35 = n1\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif6pq1ju.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn2\u001b[0m = n1.div(\u001b[31m2\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif6pq1ju.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn3\u001b[0m = n1.div(\u001b[31m2\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif6pq1ju.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn4\u001b[0m = n1.div(\u001b[31m2\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif6pq1ju.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn5\u001b[0m = n1.div(\u001b[31m2\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif6pq1ju.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn6\u001b[0m = n1.div(\u001b[31m2\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif6pq1ju.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn7\u001b[0m = n1.div(\u001b[31m2\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif6pq1ju.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn8\u001b[0m = n1.div(\u001b[31m2\u001b[0m).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif6pq1ju.scala:23:20 -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n            val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6 = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n            val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12 / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n            val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19 / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n            val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26 / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n            val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33 / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n            val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40 / 2\n            val nn42 = nn41 / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcilrb4ap.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcilrb4ap.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpcilrb4ap.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.singleton(n)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2).map(x -> x * 2).append(makeAPile(n / 2 + 1))\n        } else {\n            return makeAPile(n / 2).map(x -> x * 2).append(makeAPile(n / 2 + 1))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp4qnkc460.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4qnkc460.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4qnkc460.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.singleton(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue singleton is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4qnkc460.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m).map(x -> x * \u001b[31m2\u001b[0m).append(makeAPile(n / \u001b[31m2\u001b[0m + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4qnkc460.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m).map(x -> x * \u001b[31m2\u001b[0m).append(makeAPile(n / \u001b[31m2\u001b[0m + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return makeAPile(n - 1) + makeAPile(n - 2) + makeAPile(n - 3)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpse3e1v1q.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + makeAPile(n - \u001b[31m2\u001b[0m) + makeAPile(n - \u001b[31m3\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n            val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6 = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n            val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12 / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n            val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19 / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n            val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26 / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n            val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33 / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n            val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40 / 2\n            val nn42 = nn41 / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcilrb4ap.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcilrb4ap.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpcilrb4ap.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toInt\n        val n1 = nn.toInt\n        val n2 = nn.toInt\n        if (n1 % 2 == 1) {\n            val n3 = n1 + 1\n            val n4 = n3.toInt\n            val n5 = n4.toInt\n            val n6 = n5.toInt\n            val n7 = n6.toInt\n            val n8 = n7.toInt\n            val n9 = n8.toInt\n            val n10 = n9.toInt\n            val n11 = n10.toInt\n            val n12 = n11.toInt\n            val n13 = n12.toInt\n            val n14 = n13.toInt\n            val n15 = n14.toInt\n            val n16 = n15.toInt\n            val n17 = n16.toInt\n            val n18 = n17.toInt\n            val n19 = n18.toInt\n            val n20 = n19.toInt\n            val n21 = n20.toInt\n            val n22 = n21.toInt\n            val n23 = n22.toInt\n            val n24 = n23.toInt\n            val n25 = n24.toInt\n            val n26 = n25.toInt\n            val n27 = n26.toInt\n            val n28 = n27.toInt\n            val n29 = n28.toInt\n            val n30 = n29.toInt\n            val n31 = n30.toInt\n            val n32 = n31.toInt\n            val n33 = n32.toInt\n            val n34 = n33.toInt\n            val n35 = n34.toInt\n            val n36 = n35.toInt\n            val n37 = n36.toInt\n            val n38 = n37.toInt\n            val n39 = n38.toInt\n            val n40 = n39.toInt\n            val n41 = n40.toInt\n            val n42 = n41.toInt\n            val n43 = n42.toInt\n            val n44 = n43.toInt\n            val n45 = n44\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_zpetb1i.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_zpetb1i.scala:71:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp_zpetb1i.scala:63:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m63 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return List(n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpscwu89cc.scala:22)\n\tat Problem.main(tmpscwu89cc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        if (n_ % 2 == 0) {\n            val n_1 = n_ / 2\n            val n_2 = n_1 + 1\n            val n_3 = n_2 + 1\n            val n_4 = n_3 + 1\n            val n_5 = n_4 + 1\n            val n_6 = n_5 + 1\n            val n_7 = n_6 + 1\n            val n_8 = n_7 + 1\n            val n_9 = n_8 + 1\n            val n_10 = n_9 + 1\n            val n_11 = n_10 + 1\n            val n_12 = n_11 + 1\n            val n_13 = n_12 + 1\n            val n_14 = n_13 + 1\n            val n_15 = n_14 + 1\n            val n_16 = n_15 + 1\n            val n_17 = n_16 + 1\n            val n_18 = n_17 + 1\n            val n_19 = n_18 + 1\n            val n_20 = n_19 + 1\n            val n_21 = n_20 + 1\n            val n_22 = n_21 + 1\n            val n_23 = n_22 + 1\n            val n_24 = n_23 + 1\n            val n_25 = n_24 + 1\n            val n_26 = n_25 + 1\n            val n_27 = n_26 + 1\n            val n_28 = n_27 + 1\n            val n_29 = n_28 + 1\n            val n_30 = n_29 + 1\n            val n_31 = n_30 + 1\n            val n_32 = n_31 + 1\n            val n_33 = n_32 + 1\n            val n_34 = n_33 + 1\n            val n_35 = n_34 + 1\n            val n_36 = n_35 + 1\n            val n_37 = n_36 + 1\n            val n_38 = n_37 + 1\n            val n_39 = n_38 + 1\n            val n_40 = n_39 + 1\n            val n_41 = n_40 + 1\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpho4kunvs.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4kunvs.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpho4kunvs.scala:59:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return List[Long](n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsy43h0t7.scala:22)\n\tat Problem.main(tmpsy43h0t7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n            val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6 = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n            val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12 / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n            val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19 / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n            val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26 / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n            val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33 / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n            val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40 / 2\n            val nn42 = nn41 / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcilrb4ap.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcilrb4ap.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpcilrb4ap.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ * 2l\n        val n_3 = n_ * 3l\n        val n_4 = n_ * 4l\n        val n_5 = n_ * 5l\n        val n_6 = n_ * 6l\n        val n_7 = n_ * 7l\n        val n_8 = n_ * 8l\n        val n_9 = n_ * 9l\n        val n_10 = n_ * 10l\n        val n_11 = n_ * 11l\n        val n_12 = n_ * 12l\n        val n_13 = n_ * 13l\n        val n_14 = n_ * 14l\n        val n_15 = n_ * 15l\n        val n_16 = n_ * 16l\n        val n_17 = n_ * 17l\n        val n_18 = n_ * 18l\n        val n_19 = n_ * 19l\n        val n_20 = n_ * 20l\n        val n_21 = n_ * 21l\n        val n_22 = n_ * 22l\n        val n_23 = n_ * 23l\n        val n_24 = n_ * 24l\n        val n_25 = n_ * 25l\n        val n_26 = n_ * 26l\n        val n_27 = n_ * 27l\n        val n_28 = n_ * 28l\n        val n_29 = n_ * 29l\n        val n_30 = n_ * 30l\n        val n_31 = n_ * 31l\n        val n_32 = n_ * 32l\n        val n_33 = n_ * 33l\n        val n_34 = n_ * 34l\n        val n_35 = n_ * 35l\n        val n_36 = n_ * 36l\n        val n_37 = n_ * 37l\n        val n_38 = n_ * 38l\n        val n_39 = n_ * 39l\n        val n_40 = n_ * 40l\n        val n_41 = n_ * 41l\n        val n_42 = n_ * 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8_r4jng.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val nn_ = nn.toLong\n        if (nn_ % 2 == 0) {\n            val nn_1 = nn_ / 2\n            val nn_2 = nn_1 + 1\n            val nn_3 = nn_2 + 1\n            val nn_4 = nn_3 + 1\n            val nn_5 = nn_4 + 1\n            val nn_6 = nn_5 + 1\n            val nn_7 = nn_6 + 1\n            val nn_8 = nn_7 + 1\n            val nn_9 = nn_8 + 1\n            val nn_10 = nn_9 + 1\n            val nn_11 = nn_10 + 1\n            val nn_12 = nn_11 + 1\n            val nn_13 = nn_12 + 1\n            val nn_14 = nn_13 + 1\n            val nn_15 = nn_14 + 1\n            val nn_16 = nn_15 + 1\n            val nn_17 = nn_16 + 1\n            val nn_18 = nn_17 + 1\n            val nn_19 = nn_18 + 1\n            val nn_20 = nn_19 + 1\n            val nn_21 = nn_20 + 1\n            val nn_22 = nn_21 + 1\n            val nn_23 = nn_22 + 1\n            val nn_24 = nn_23 + 1\n            val nn_25 = nn_24 + 1\n            val nn_26 = nn_25 + 1\n            val nn_27 = nn_26 + 1\n            val nn_28 = nn_27 + 1\n            val nn_29 = nn_28 + 1\n            val nn_30 = nn_29 + 1\n            val nn_31 = nn_30 + 1\n            val nn_32 = nn_31 + 1\n            val nn_33 = nn_32 + 1\n            val nn_34 = nn_33 + 1\n            val n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphyvek0k_.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphyvek0k_.scala:63:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphyvek0k_.scala:62:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmphyvek0k_.scala:54:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m54 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            var level = List(n.toLong)\n            var odd = n.toLong % 2 == 1\n            for (i <- 1 until n) {\n                if (odd) {\n                    level = level.append(level.head + 2l)\n                } else {\n                    level = level.append(level.head + 1l)\n                }\n            }\n            return level\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292708,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1bhkzy9.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (n : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps1bhkzy9.scala:22:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    level = level.append(level.head + \u001b[31m2l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps1bhkzy9.scala:24:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                    level = level.append(level.head + \u001b[31m1l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return List[Long](n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsy43h0t7.scala:22)\n\tat Problem.main(tmpsy43h0t7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            var i = n\n            var result = List[Long](0l)\n            while (i > 0) {\n                var stones = i\n                if (i % 2 == 0) {\n                    stones = stones / 2\n                }\n                result = result.append(stones)\n                i = i / 2\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8dw8ljcx.scala:25:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                result = result.append(stones)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            return List.range(n.toLong, n.toLong + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpd7vo_2ja.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val nn_odd = nn % 2l\n        val nn_even = nn / 2l\n        val nn_odd_list = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l, 16l, 17l, 18l, 19l, 20l, 21l, 22l, 23l, 24l, 25l, 26l, 27l, 28l, 29l, 30l, 31l, 32l, 33l, 34l, 35l, 36l, 37l, 38l, 39l, 40l, 41l, 42l, 43l, 44l, 45l, 46l, 47l, 48l, 49l, 50l, 51l, 52l, 53l, 54l, 55l, 56l, 57l, 58l, 59l, 60l, 61l, 62l, 63l, 64l, 65l, 66l, 67l, 68l, 69l, 70l, 71l, 72l, 73l, 74l, 75l, 76l, 77l, 78l, 79l, 80l, 81l, 82l, 83l, 84l, 85l, 86l, 87l, 88l, 89l, 90l, 91l, 92l, 93l, 94l, 95l, 96l, 97l, 98l, 99l, 100l, 101l, 102l, 103l, 104l, 105l, 106l, 107l, 108l, 109l, 110l, 111l, 112l, 113l, 114l, 115l, 116l, 117l, 118l, 119l, 120l, 121l, 122l, 123l, 124l, 125l, 126l, 127l, 128l, 129l, 130l, 131l, 132l, 133l, 134l, 135l, 136l, 137l, 138l, 139l, 140l, 141l, 142l, 143l, 144l, 145l, 146l, 147l, 148l, 149l, 150l, 151l, 152l, 153l, 154l,\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3qt4p06r.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3qt4p06r.scala:19:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return makeAPile(n - 1) + List[Long](n.toLong, n.toLong + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplncdoccs.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List[\u001b[35mLong\u001b[0m](n.toLong, n.toLong + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        if (n_ % 2 == 0) {\n            val n_1 = n_ / 2\n            val n_2 = n_1\n            val n_3 = n_2\n            val n_4 = n_3\n            val n_5 = n_4\n            val n_6 = n_5\n            val n_7 = n_6\n            val n_8 = n_7\n            val n_9 = n_8\n            val n_10 = n_9\n            val n_11 = n_10\n            val n_12 = n_11\n            val n_13 = n_12\n            val n_14 = n_13\n            val n_15 = n_14\n            val n_16 = n_15\n            val n_17 = n_16\n            val n_18 = n_17\n            val n_19 = n_18\n            val n_20 = n_19\n            val n_21 = n_20\n            val n_22 = n_21\n            val n_23 = n_22\n            val n_24 = n_23\n            val n_25 = n_24\n            val n_26 = n_25\n            val n_27 = n_26\n            val n_28 = n_27\n            val n_29 = n_28\n            val n_30 = n_29\n            val n_31 = n_30\n            val n_32 = n_31\n            val n_33 = n_32\n            val n_34 = n_33\n            val n_35 = n_34\n            val n_36 = n_35\n            val n_37 = n_36\n            val n_38 = n_37\n            val n_39 = n_38\n            val n_40 = n_39\n            val n_41 = n_40\n            val n_42 = n_41\n            val n_43 = n_42\n            val n_44 = n_43\n            val n_45 = n_44\n            val n_46 = n_45\n            val n_47 = n_46\n            val n_48 = n_47\n            val n_49 = n_48\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292715,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpauilwogz.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpauilwogz.scala:75:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpauilwogz.scala:67:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m67 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n            val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6 = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n            val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12 / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n            val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19 / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n            val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26 / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n            val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33 / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n            val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40 / 2\n            val nn42 = nn41 / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcilrb4ap.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcilrb4ap.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpcilrb4ap.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        if (n_ % 2 == 0) {\n            val n_1 = n_ / 2\n            val n_2 = n_1 + 1\n            val n_3 = n_2 + 1\n            val n_4 = n_3 + 1\n            val n_5 = n_4 + 1\n            val n_6 = n_5 + 1\n            val n_7 = n_6 + 1\n            val n_8 = n_7 + 1\n            val n_9 = n_8 + 1\n            val n_10 = n_9 + 1\n            val n_11 = n_10 + 1\n            val n_12 = n_11 + 1\n            val n_13 = n_12 + 1\n            val n_14 = n_13 + 1\n            val n_15 = n_14 + 1\n            val n_16 = n_15 + 1\n            val n_17 = n_16 + 1\n            val n_18 = n_17 + 1\n            val n_19 = n_18 + 1\n            val n_20 = n_19 + 1\n            val n_21 = n_20 + 1\n            val n_22 = n_21 + 1\n            val n_23 = n_22 + 1\n            val n_24 = n_23 + 1\n            val n_25 = n_24 + 1\n            val n_26 = n_25 + 1\n            val n_27 = n_26 + 1\n            val n_28 = n_27 + 1\n            val n_29 = n_28 + 1\n            val n_30 = n_29 + 1\n            val n_31 = n_30 + 1\n            val n_32 = n_31 + 1\n            val n_33 = n_32 + 1\n            val n_34 = n_33 + 1\n            val n_35 = n_34 + 1\n            val n_36 = n_35 + 1\n            val n_37 = n_36 + 1\n            val n_38 = n_37 + 1\n            val n_39 = n_38 + 1\n            val n_40 = n_39 + 1\n            val n_41 = n_40 + 1\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpho4kunvs.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4kunvs.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpho4kunvs.scala:59:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return List[Long](n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsy43h0t7.scala:22)\n\tat Problem.main(tmpsy43h0t7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            var i = n\n            var result = List.empty()\n            while (i > 0) {\n                var stones = i\n                if (i % 2 == 1) {\n                    stones = stones + 1\n                }\n                result = result.append(stones)\n                i = i / 2\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292710,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpjq7f2qow.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjq7f2qow.scala:19:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val res = List.range(0, nn2).map(i => 2 * i + 1).toList\n            return res\n        } else {\n            val nn2 = (nn + 1) / 2\n            val res = List.range(0, nn2).map(i => 2 * i).toList\n            return res\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292718,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpak93lui_.scala:18:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mres\u001b[0m = List.range(\u001b[31m0\u001b[0m, nn2).map(\u001b[36mi\u001b[0m => \u001b[31m2\u001b[0m * i + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- Error: /tmp/tmpak93lui_.scala:22:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mres\u001b[0m = List.range(\u001b[31m0\u001b[0m, nn2).map(\u001b[36mi\u001b[0m => \u001b[31m2\u001b[0m * i).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val nn2 = nn / 2\n        val nn3 = nn % 2\n        val nn4 = nn2 / 2\n        val nn5 = nn2 % 2\n        val nn6 = nn3 / 2\n        val nn7 = nn3 % 2\n        val nn8 = nn4 / 2\n        val nn9 = nn4 % 2\n        val nn10 = nn5 / 2\n        val nn11 = nn5 % 2\n        val nn12 = nn6 / 2\n        val nn13 = nn6 % 2\n        val nn14 = nn7 / 2\n        val nn15 = nn7 % 2\n        val nn16 = nn8 / 2\n        val nn17 = nn8 % 2\n        val nn18 = nn9 / 2\n        val nn19 = nn9 % 2\n        val nn20 = nn10 / 2\n        val nn21 = nn10 % 2\n        val nn22 = nn11 / 2\n        val nn23 = nn11 % 2\n        val nn24 = nn12 / 2\n        val nn25 = nn12 % 2\n        val nn26 = nn13 / 2\n        val nn27 = nn13 % 2\n        val nn28 = nn14 / 2\n        val nn29 = nn14 % 2\n        val nn30 = nn15 / 2\n        val nn31 = nn15 % 2\n        val nn32 = nn16 / 2\n        val nn33 = nn16 % 2\n        val nn34 = nn17 / 2\n        val nn35 = nn17 % 2\n        val nn36 = nn18 / 2\n        val nn37 = nn18 % 2\n        val nn38 = nn19 / 2\n        val nn39 = nn19 % 2\n        val nn40 = nn20 / 2\n        val nn41 = nn20 % 2\n        val nn42 = nn21 / 2\n        val nn43 = nn21 % 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292717,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp223x72gd.scala:59:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n                result = result.append(i)\n            } else {\n                result = result.append(i + 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsyf3t244.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsyf3t244.scala:21:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsyf3t244.scala:23:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                result = result.append(i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n1 = n.toLong\n        val n2 = n1.div(2)\n        val n3 = n1.div(2)\n        val n4 = n1.div(2)\n        val n5 = n1.div(2)\n        val n6 = n1.div(2)\n        val n7 = n1.div(2)\n        val n8 = n1.div(2)\n        val n9 = n1.div(2)\n        val n10 = n1.div(2)\n        val n11 = n1.div(2)\n        val n12 = n1.div(2)\n        val n13 = n1.div(2)\n        val n14 = n1.div(2)\n        val n15 = n1.div(2)\n        val n16 = n1.div(2)\n        val n17 = n1.div(2)\n        val n18 = n1.div(2)\n        val n19 = n1.div(2)\n        val n20 = n1.div(2)\n        val n21 = n1.div(2)\n        val n22 = n1.div(2)\n        val n23 = n1.div(2)\n        val n24 = n1.div(2)\n        val n25 = n1.div(2)\n        val n26 = n1.div(2)\n        val n27 = n1.div(2)\n        val n28 = n1.div(2)\n        val n29 = n1.div(2)\n        val n30 = n1.div(2)\n        val n31 = n1.div(2)\n        val n32 = n1.div(2)\n        val n33 = n1.div(2)\n        val n34 = n1.div(2)\n        val n35 = n1.div(2)\n        val n36 = n1.div(2)\n        val n37 = n1.div(2)\n        val n38 = n1.div(2)\n        val n39 = n1.div(2)\n        val n40 = n1.\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm5t03pn2.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn2\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn3\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn4\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn5\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn6\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn7\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn8\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            return List.range(0, n, 2).map(i => i + 1).toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnnxrjlyo.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnnxrjlyo.scala:18:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m List.range(\u001b[31m0\u001b[0m, n, \u001b[31m2\u001b[0m).map(\u001b[36mi\u001b[0m => i + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val res = List.range(0, nn2).map(i -> i + 1).toList\n            return res\n        } else {\n            val nn2 = (nn + 1) / 2\n            val res = List.range(0, nn2).map(i -> i + 1).toList\n            return res\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpor86medh.scala:18:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mres\u001b[0m = List.range(\u001b[31m0\u001b[0m, nn2).map(i -> i + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- Error: /tmp/tmpor86medh.scala:22:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mres\u001b[0m = List.range(\u001b[31m0\u001b[0m, nn2).map(i -> i + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_2.toLong\n        val n_3 = n_3.toLong\n        val n_4 = n_4.toLong\n        val n_5 = n_5.toLong\n        val n_6 = n_6.toLong\n        val n_7 = n_7.toLong\n        val n_8 = n_8.toLong\n        val n_9 = n_9.toLong\n        val n_10 = n_10.toLong\n        val n_11 = n_11.toLong\n        val n_12 = n_12.toLong\n        val n_13 = n_13.toLong\n        val n_14 = n_14.toLong\n        val n_15 = n_15.toLong\n        val n_16 = n_16.toLong\n        val n_17 = n_17.toLong\n        val n_18 = n_18.toLong\n        val n_19 = n_19.toLong\n        val n_20 = n_20.toLong\n        val n_21 = n_21.toLong\n        val n_22 = n_22.toLong\n        val n_23 = n_23.toLong\n        val n_24 = n_24.toLong\n        val n_25 = n_25.toLong\n        val n_26 = n_26.toLong\n        val n_27 = n_27.toLong\n        val n_28 = n_28.toLong\n        val n_29 = n_29.toLong\n        val n_30 = n_30.toLong\n        val n_31 = n_31.toLong\n        val n_32 = n_32.toLong\n        val n_33 = n_33.toLong\n        val n_34 = n_34.toLong\n        val n_35 = n_35.toLong\n        val n_36 = n_36.toLong\n        val n_37 = n_37.toLong\n        val n_38 = n_38.toLong\n        val n_39 = n_39\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292692,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:17:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_2\u001b[0m = n_2.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_2\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:18:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_3\u001b[0m = n_3.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_3\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:19:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_4\u001b[0m = n_4.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_4\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:20:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_5\u001b[0m = n_5.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_5\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:21:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_6\u001b[0m = n_6.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mn_6\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfbt04qw9.scala:22:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_7\u001b[0m = n_7.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toInt\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplj4dbkki.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplj4dbkki.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmplj4dbkki.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 1) {\n            val nn1 = nn + 1\n            val nn2 = nn1 + 1\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzi3pyhr0.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzi3pyhr0.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpzi3pyhr0.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toInt\n        val n1 = nn % 2\n        val n2 = nn / 2\n        val n3 = n2 + 1\n        val n4 = n3 + 1\n        val n5 = n4 + 1\n        val n6 = n5 + 1\n        val n7 = n6 + 1\n        val n8 = n7 + 1\n        val n9 = n8 + 1\n        val n10 = n9 + 1\n        val n11 = n10 + 1\n        val n12 = n11 + 1\n        val n13 = n12 + 1\n        val n14 = n13 + 1\n        val n15 = n14 + 1\n        val n16 = n15 + 1\n        val n17 = n16 + 1\n        val n18 = n17 + 1\n        val n19 = n18 + 1\n        val n20 = n19 + 1\n        val n21 = n20 + 1\n        val n22 = n21 + 1\n        val n23 = n22 + 1\n        val n24 = n23 + 1\n        val n25 = n24 + 1\n        val n26 = n25 + 1\n        val n27 = n26 + 1\n        val n28 = n27 + 1\n        val n29 = n28 + 1\n        val n30 = n29 + 1\n        val n31 = n30 + 1\n        val n32 = n31 + 1\n        val n33 = n32 + 1\n        val n34 = n33 + 1\n        val n35 = n34 + 1\n        val n36 = n35 + 1\n        val n37 = n36 + 1\n        val n38 = n37 + 1\n        val n39 = n38 + 1\n        val n40 = n39 + 1\n        val n41 = n40 + 1\n        val n42 = n41 + 1\n        val n43 = n42 + 1\n        val n44 = n43 + 1\n        val n45 = n44 + 1\n        val n46 = n45 + 1\n        val n47 = n46 + 1\n        val n48 = n47 + 1\n        val n49 = n48 + 1\n        val n50 = n49 + 1\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpi0mepjd9.scala:66:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0mepjd9.scala:67:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val res = List.range(0, nn2).map(i -> i + 1).toList\n            res.append(nn2)\n            return res\n        } else {\n            val nn2 = nn + 1\n            val res = List.range(0, nn2).map(i -> i + 1).toList\n            res.append(nn2)\n            return res\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpqvv34im7.scala:18:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mres\u001b[0m = List.range(\u001b[31m0\u001b[0m, nn2).map(i -> i + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqvv34im7.scala:23:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mres\u001b[0m = List.range(\u001b[31m0\u001b[0m, nn2).map(i -> i + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                No implicit Ordering defined for AnyVal.\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ * 2l\n        val n_3 = n_ * 3l\n        val n_4 = n_ * 4l\n        val n_5 = n_ * 5l\n        val n_6 = n_ * 6l\n        val n_7 = n_ * 7l\n        val n_8 = n_ * 8l\n        val n_9 = n_ * 9l\n        val n_10 = n_ * 10l\n        val n_11 = n_ * 11l\n        val n_12 = n_ * 12l\n        val n_13 = n_ * 13l\n        val n_14 = n_ * 14l\n        val n_15 = n_ * 15l\n        val n_16 = n_ * 16l\n        val n_17 = n_ * 17l\n        val n_18 = n_ * 18l\n        val n_19 = n_ * 19l\n        val n_20 = n_ * 20l\n        val n_21 = n_ * 21l\n        val n_22 = n_ * 22l\n        val n_23 = n_ * 23l\n        val n_24 = n_ * 24l\n        val n_25 = n_ * 25l\n        val n_26 = n_ * 26l\n        val n_27 = n_ * 27l\n        val n_28 = n_ * 28l\n        val n_29 = n_ * 29l\n        val n_30 = n_ * 30l\n        val n_31 = n_ * 31l\n        val n_32 = n_ * 32l\n        val n_33 = n_ * 33l\n        val n_34 = n_ * 34l\n        val n_35 = n_ * 35l\n        val n_36 = n_ * 36l\n        val n_37 = n_ * 37l\n        val n_38 = n_ * 38l\n        val n_39 = n_ * 39l\n        val n_40 = n_ * 40l\n        val n_41 = n_ * 41l\n        val n_42 = n_ * 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8_r4jng.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        if (n_ % 2 == 0) {\n            val n_1 = n_ / 2\n            val n_2 = n_1 + 1\n            val n_3 = n_2 + 1\n            val n_4 = n_3 + 1\n            val n_5 = n_4 + 1\n            val n_6 = n_5 + 1\n            val n_7 = n_6 + 1\n            val n_8 = n_7 + 1\n            val n_9 = n_8 + 1\n            val n_10 = n_9 + 1\n            val n_11 = n_10 + 1\n            val n_12 = n_11 + 1\n            val n_13 = n_12 + 1\n            val n_14 = n_13 + 1\n            val n_15 = n_14 + 1\n            val n_16 = n_15 + 1\n            val n_17 = n_16 + 1\n            val n_18 = n_17 + 1\n            val n_19 = n_18 + 1\n            val n_20 = n_19 + 1\n            val n_21 = n_20 + 1\n            val n_22 = n_21 + 1\n            val n_23 = n_22 + 1\n            val n_24 = n_23 + 1\n            val n_25 = n_24 + 1\n            val n_26 = n_25 + 1\n            val n_27 = n_26 + 1\n            val n_28 = n_27 + 1\n            val n_29 = n_28 + 1\n            val n_30 = n_29 + 1\n            val n_31 = n_30 + 1\n            val n_32 = n_31 + 1\n            val n_33 = n_32 + 1\n            val n_34 = n_33 + 1\n            val n_35 = n_34 + 1\n            val n_36 = n_35 + 1\n            val n_37 = n_36 + 1\n            val n_38 = n_37 + 1\n            val n_39 = n_38 + 1\n            val n_40 = n_39 + 1\n            val n_41 = n_40 + 1\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpho4kunvs.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho4kunvs.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpho4kunvs.scala:59:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return List[Long](n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsy43h0t7.scala:22)\n\tat Problem.main(tmpsy43h0t7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return List[Long](n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292681,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsy43h0t7.scala:22)\n\tat Problem.main(tmpsy43h0t7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n1 = n.toLong\n        val n2 = n1.toLong\n        val n3 = n2.toLong\n        val n4 = n3.toLong\n        val n5 = n4.toLong\n        val n6 = n5.toLong\n        val n7 = n6.toLong\n        val n8 = n7.toLong\n        val n9 = n8.toLong\n        val n10 = n9.toLong\n        val n11 = n10.toLong\n        val n12 = n11.toLong\n        val n13 = n12.toLong\n        val n14 = n13.toLong\n        val n15 = n14.toLong\n        val n16 = n15.toLong\n        val n17 = n16.toLong\n        val n18 = n17.toLong\n        val n19 = n18.toLong\n        val n20 = n19.toLong\n        val n21 = n20.toLong\n        val n22 = n21.toLong\n        val n23 = n22.toLong\n        val n24 = n23.toLong\n        val n25 = n24.toLong\n        val n26 = n25.toLong\n        val n27 = n26.toLong\n        val n28 = n27.toLong\n        val n29 = n28.toLong\n        val n30 = n29.toLong\n        val n31 = n30.toLong\n        val n32 = n31.toLong\n        val n33 = n32.toLong\n        val n34 = n33.toLong\n        val n35 = n34.toLong\n        val n36 = n35.toLong\n        val n37 = n36.toLong\n        val n38 = n37.toLong\n        val n39 = n38.toLong\n        val n40 = n39.toLong\n        val n41 = n40.toLong\n        val n42 = n41.toLong\n        val n43 = n42.toLong\n        val n44 = n43.toLong\n        val n45 = n44.toLong\n        val n46 = n45.toLong\n        val n47 = n46\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgoo_73f.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.of(n)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2).map(i -> i + i).toList\n        } else {\n            return makeAPile(n / 2).map(i -> i + i + 1).toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292725,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7bo2s8lc.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7bo2s8lc.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7bo2s8lc.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bo2s8lc.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m).map(i -> i + i).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bo2s8lc.scala:23:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m).map(i -> i + i + \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val nn2 = nn / 2\n        val nn3 = nn % 2\n        val nn4 = nn2 / 2\n        val nn5 = nn2 % 2\n        val nn6 = nn3 / 2\n        val nn7 = nn3 % 2\n        val nn8 = nn4 / 2\n        val nn9 = nn4 % 2\n        val nn10 = nn5 / 2\n        val nn11 = nn5 % 2\n        val nn12 = nn6 / 2\n        val nn13 = nn6 % 2\n        val nn14 = nn7 / 2\n        val nn15 = nn7 % 2\n        val nn16 = nn8 / 2\n        val nn17 = nn8 % 2\n        val nn18 = nn9 / 2\n        val nn19 = nn9 % 2\n        val nn20 = nn10 / 2\n        val nn21 = nn10 % 2\n        val nn22 = nn11 / 2\n        val nn23 = nn11 % 2\n        val nn24 = nn12 / 2\n        val nn25 = nn12 % 2\n        val nn26 = nn13 / 2\n        val nn27 = nn13 % 2\n        val nn28 = nn14 / 2\n        val nn29 = nn14 % 2\n        val nn30 = nn15 / 2\n        val nn31 = nn15 % 2\n        val nn32 = nn16 / 2\n        val nn33 = nn16 % 2\n        val nn34 = nn17 / 2\n        val nn35 = nn17 % 2\n        val nn36 = nn18 / 2\n        val nn37 = nn18 % 2\n        val nn38 = nn19 / 2\n        val nn39 = nn19 % 2\n        val nn40 = nn20 / 2\n        val nn41 = nn20 % 2\n        val nn42 = nn21 / 2\n        val nn43 = nn21 % 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292717,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp223x72gd.scala:59:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.of(n)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpi065ybh0.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi065ybh0.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi065ybh0.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            return makeAPile(n - 1) + List(n.toLong)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0y1kylz9.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long](n.toLong, 0l)\n        for (i <- 0 until n) {\n            result = result.updated(i + 1, result.updated(i + 2, result.updated(i + 3, result.updated(i + 4, result.updated(i + 5, result.updated(i + 6, result.updated(i + 7, result.updated(i + 8, result.updated(i + 9, result.updated(i + 10, result.updated(i + 11, result.updated(i + 12, result.updated(i + 13, result.updated(i + 14, result.updated(i + 15, result.updated(i + 16, result.updated(i + 17, result.updated(i + 18, result.updated(i + 19, result.updated(i + 20, result.updated(i + 21, result.updated(i + 22, result.updated(i + 23, result.updated(i + 24, result.updated(i + 25, result.updated(i + 26, result.updated(i + 27, result.updated(i + 28, result.updated(i + 29, result.updated(i + 30, result.updated(i + 31, result.updated(i + 32, result.updated(i + 33, result.updated(i + 34, result.updated(i + 35, result.updated(i + 36, result.updated(i + 37, result.updated(i + 38, result.updated(i + 39, result.updated(i + 40, result.updated(i + 41, result.updated(i + 42, result.updated(i + 43, result.updated(i + 44, result.updated(i + 45, result.updated(i + 46, result.updated(i + 47, result.updated(i + 48, result.updated(i + 49, result.updated(i + 50, result.updated(i + 51, result.updated(i + 52, result.updated(i + 53, result.updated(i + 54, result.updated(i + 55, result.updated(i + 56, result.updated(i + 57, result.updated(i + 58, result.updated(i + 59, result.updated(i + 60, result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbo13btud.scala:18:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbo13btud.scala:28:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbo13btud.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbo13btud.scala:17:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result = result.updated(i + \u001b[31m1\u001b[0m, result.updated(i + \u001b[31m2\u001b[0m, result.updated(i + \u001b[31m3\u001b[0m, result.updated(i + \u001b[31m4\u001b[0m, result.updated(i + \u001b[31m5\u001b[0m, result.updated(i + \u001b[31m6\u001b[0m, result.updated(i + \u001b[31m7\u001b[0m, result.updated(i + \u001b[31m8\u001b[0m, result.updated(i + \u001b[31m9\u001b[0m, result.updated(i + \u001b[31m10\u001b[0m, result.updated(i + \u001b[31m11\u001b[0m, result.updated(i + \u001b[31m12\u001b[0m, result.updated(i + \u001b[31m13\u001b[0m, result.updated(i + \u001b[31m14\u001b[0m, result.updated(i + \u001b[31m15\u001b[0m, result.updated(i + \u001b[31m16\u001b[0m, result.updated(i + \u001b[31m17\u001b[0m, result.updated(i + \u001b[31m18\u001b[0m, result.updated(i + \u001b[31m19\u001b[0m, result.updated(i + \u001b[31m20\u001b[0m, result.updated(i + \u001b[31m21\u001b[0m, result.updated(i + \u001b[31m22\u001b[0m, result.updated(i + \u001b[31m23\u001b[0m, result.updated(i + \u001b[31m24\u001b[0m, result.updated(i + \u001b[31m25\u001b[0m, result.updated(i + \u001b[31m26\u001b[0m, result.updated(i + \u001b[31m27\u001b[0m, result.updated(i + \u001b[31m28\u001b[0m, result.updated(i + \u001b[31m29\u001b[0m, result.updated(i + \u001b[31m30\u001b[0m, result.updated(i + \u001b[31m31\u001b[0m, result.updated(i + \u001b[31m32\u001b[0m, result.updated(i + \u001b[31m33\u001b[0m, result.updated(i + \u001b[31m34\u001b[0m, result.updated(i + \u001b[31m35\u001b[0m, result.updated(i + \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long](n.toLong)\n        for (i <- 0 until (n - 1).toLong) {\n            result = result.append(i.toLong + (n - 1).toLong)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn1k1unp0.scala:16:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (n - \u001b[31m1\u001b[0m).toLong) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Long\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn1k1unp0.scala:17:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result = result.append(i.toLong + (n - \u001b[31m1\u001b[0m).toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean List[Long].appended?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2l\n        val n2 = nn / 2l\n        val n3 = nn / 4l\n        val n4 = nn / 8l\n        val n5 = nn / 16l\n        val n6 = nn / 32l\n        val n7 = nn / 64l\n        val n8 = nn / 128l\n        val n9 = nn / 256l\n        val n10 = nn / 512l\n        val n11 = nn / 1024l\n        val n12 = nn / 2048l\n        val n13 = nn / 4096l\n        val n14 = nn / 8192l\n        val n15 = nn / 16384l\n        val n16 = nn / 32768l\n        val n17 = nn / 65536l\n        val n18 = nn / 131072l\n        val n19 = nn / 262144l\n        val n20 = nn / 524288l\n        val n21 = nn / 1048576l\n        val n22 = nn / 2097152l\n        val n23 = nn / 4194304l\n        val n24 = nn / 8388608l\n        val n25 = nn / 16777216l\n        val n26 = nn / 33554432l\n        val n27 = nn / 67108864l\n        val n28 = nn / 134217728l\n        val n29 = nn / 268435456l\n        val n30 = nn / 536870912l\n        val n31 = nn / 1073741824l\n        val n32 = nn / 2147483648l\n        val n33 = nn / 4294967296l\n        val n34 = nn / 8589934592l\n        val n35 = nn / 17179869184l\n        val n36 = nn / 34359738368l\n        val n37 = nn / 68719476736l\n        val n38 = nn / 137438953472l\n        val n39 = nn / 274877906944l\n        \n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp3dlwzyz.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            return makeAPile(n - 1) + List(n.toLong)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0y1kylz9.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.of(n)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2) + List.of(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpt2xqqub4.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt2xqqub4.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt2xqqub4.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt2xqqub4.scala:23:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m) + List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt2xqqub4.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m) + List.of(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value of is not a member of object scala.collection.immutable.List\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return makeAPile(n - 1) + List[Long](n.toLong, n.toLong + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292659,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplncdoccs.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List[\u001b[35mLong\u001b[0m](n.toLong, n.toLong + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List.empty()\n        } else {\n            var level = List.empty()\n            var stones = n\n            while (stones > 0) {\n                var nextLevel = stones\n                if (stones % 2 == 0) {\n                    nextLevel = stones / 2\n                } else {\n                    nextLevel = stones / 2 + 1\n                }\n                stones = stones - nextLevel\n                level = level.append(nextLevel)\n            }\n            return level\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292722,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpph7f0ugr.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- Error: /tmp/tmpph7f0ugr.scala:18:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mlevel\u001b[0m = List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n            result = result.append(i.toLong)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprg9fkm4h.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprg9fkm4h.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result.append(i.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n            val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6 = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n            val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12 / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n            val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19 / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n            val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26 / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n            val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33 / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n            val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40 / 2\n            val nn42 = nn41 / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcilrb4ap.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcilrb4ap.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpcilrb4ap.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        }\n        if (n == 0) {\n            return Nil.instance\n        }\n        val result = List.empty[Long]\n        for (i <- 0 until n) {\n            result = result.append(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmhf1vnoq.scala:19:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m Nil.instance\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value instance is not a member of object scala.collection.immutable.Nil\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhf1vnoq.scala:22:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmhf1vnoq.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            result = result.append(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue append is not a member of List[Long] - did you mean result.appended?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n            val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6 = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n            val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12 / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n            val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19 / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n            val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26 / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n            val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33 / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n            val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40 / 2\n            val nn42 = nn41 / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcilrb4ap.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcilrb4ap.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpcilrb4ap.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else if (n == 1) {\n            return List(1l)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2) + List(1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi9kc2zw6.scala:22:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m) + List(\u001b[31m1l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else if (n == 1) {\n            return List(1l)\n        } else {\n            var n_ = n\n            var n_1 = n_ - 1\n            var n_2 = n_ - 2\n            var n_3 = n_ - 3\n            var n_4 = n_ - 4\n            var n_5 = n_ - 5\n            var n_6 = n_ - 6\n            var n_7 = n_ - 7\n            var n_8 = n_ - 8\n            var n_9 = n_ - 9\n            var n_10 = n_ - 10\n            var n_11 = n_ - 11\n            var n_12 = n_ - 12\n            var n_13 = n_ - 13\n            var n_14 = n_ - 14\n            var n_15 = n_ - 15\n            var n_16 = n_ - 16\n            var n_17 = n_ - 17\n            var n_18 = n_ - 18\n            var n_19 = n_ - 19\n            var n_20 = n_ - 20\n            var n_21 = n_ - 21\n            var n_22 = n_ - 22\n            var n_23 = n_ - 23\n            var n_24 = n_ - 24\n            var n_25 = n_ - 25\n            var n_26 = n_ - 26\n            var n_27 = n_ - 27\n            var n_28 = n_ - 28\n            var n_29 = n_ - 29\n            var n_30 = n_ - 30\n            var n_31 = n_ - 31\n            var n_32 = n_ - 32\n            var n_33 = n_ - 33\n            var n_34 = n_ - 34\n            var n_35 = n_ - 35\n            var n_36 = n_ - 36\n            var n_37 = n_ - 37\n            var n_38 = n_ - 38\n            var n_39 = n_ - 39\n            var n_40 = n_ - 40\n            var n_41 = n_ - 41\n            var n_42 = n_ - 42\n            var\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmph158p3an.scala:63:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph158p3an.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph158p3an.scala:73:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmph158p3an.scala:65:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val res = List(nn2, nn2 + 1, nn2 + 2, nn2 + 3, nn2 + 4, nn2 + 5, nn2 + 6, nn2 + 7, nn2 + 8, nn2 + 9, nn2 + 10, nn2 + 11, nn2 + 12, nn2 + 13, nn2 + 14, nn2 + 15, nn2 + 16, nn2 + 17, nn2 + 18, nn2 + 19, nn2 + 20, nn2 + 21, nn2 + 22, nn2 + 23, nn2 + 24, nn2 + 25, nn2 + 26, nn2 + 27, nn2 + 28, nn2 + 29, nn2 + 30, nn2 + 31, nn2 + 32, nn2 + 33, nn2 + 34, nn2 + 35, nn2 + 36, nn2 + 37, nn2 + 38, nn2 + 39, nn2 + 40, nn2 + 41, nn2 + 42, nn2 + 43, nn2 + 44, nn2 + 45, nn2 + 46, nn2 + 47, nn2 + 48, nn2 + 49, nn2 + 50, nn2 + 51, nn2 + 52, nn2 + 53, nn2 + 54, nn2 + 55, nn2 + 56, nn2 + 57, nn2 + 58, nn2 + 59, nn2 + 60, nn2 + 61, nn2 + 62, nn2 + 63, nn2 + 64, nn2 + 65, nn2 + 66, nn2 + 67, nn2 + 68, nn2 + 69, nn2 + 70, nn2 + 71, nn2 + 72, nn2 + 73, nn2 + 74, nn2 + 75, nn2 + 76, nn2 + 77, nn2 + 78, nn2\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx2lr1113.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx2lr1113.scala:29:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2lr1113.scala:28:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpx2lr1113.scala:20:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List.empty()\n        } else if (n == 1) {\n            return List.singleton(n)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2) + List.singleton(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp44pbjzib.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp44pbjzib.scala:17:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m List.empty()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): A\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp44pbjzib.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mreturn\u001b[0m List.singleton(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue singleton is not a member of object scala.collection.immutable.List\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp44pbjzib.scala:23:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m) + List.singleton(n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp44pbjzib.scala:23:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m) + List.singleton(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue singleton is not a member of object scala.collection.immutable.List\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_1 + 1l\n        val n_3 = n_2 + 1l\n        val n_4 = n_3 + 1l\n        val n_5 = n_4 + 1l\n        val n_6 = n_5 + 1l\n        val n_7 = n_6 + 1l\n        val n_8 = n_7 + 1l\n        val n_9 = n_8 + 1l\n        val n_10 = n_9 + 1l\n        val n_11 = n_10 + 1l\n        val n_12 = n_11 + 1l\n        val n_13 = n_12 + 1l\n        val n_14 = n_13 + 1l\n        val n_15 = n_14 + 1l\n        val n_16 = n_15 + 1l\n        val n_17 = n_16 + 1l\n        val n_18 = n_17 + 1l\n        val n_19 = n_18 + 1l\n        val n_20 = n_19 + 1l\n        val n_21 = n_20 + 1l\n        val n_22 = n_21 + 1l\n        val n_23 = n_22 + 1l\n        val n_24 = n_23 + 1l\n        val n_25 = n_24 + 1l\n        val n_26 = n_25 + 1l\n        val n_27 = n_26 + 1l\n        val n_28 = n_27 + 1l\n        val n_29 = n_28 + 1l\n        val n_30 = n_29 + 1l\n        val n_31 = n_30 + 1l\n        val n_32 = n_31 + 1l\n        val n_33 = n_32 + 1l\n        val n_34 = n_33 + 1l\n        val n_35 = n_34 + 1l\n        val n_36 = n_35 + 1l\n        val n_37 = n_36 + 1l\n        val n_38 = n_37 + 1l\n        val n_39 = n_38\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkvjsbogd.scala:55:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ - 1\n        val n_2 = n_ - 2\n        val n_3 = n_ - 3\n        val n_4 = n_ - 4\n        val n_5 = n_ - 5\n        val n_6 = n_ - 6\n        val n_7 = n_ - 7\n        val n_8 = n_ - 8\n        val n_9 = n_ - 9\n        val n_10 = n_ - 10\n        val n_11 = n_ - 11\n        val n_12 = n_ - 12\n        val n_13 = n_ - 13\n        val n_14 = n_ - 14\n        val n_15 = n_ - 15\n        val n_16 = n_ - 16\n        val n_17 = n_ - 17\n        val n_18 = n_ - 18\n        val n_19 = n_ - 19\n        val n_20 = n_ - 20\n        val n_21 = n_ - 21\n        val n_22 = n_ - 22\n        val n_23 = n_ - 23\n        val n_24 = n_ - 24\n        val n_25 = n_ - 25\n        val n_26 = n_ - 26\n        val n_27 = n_ - 27\n        val n_28 = n_ - 28\n        val n_29 = n_ - 29\n        val n_30 = n_ - 30\n        val n_31 = n_ - 31\n        val n_32 = n_ - 32\n        val n_33 = n_ - 33\n        val n_34 = n_ - 34\n        val n_35 = n_ - 35\n        val n_36 = n_ - 36\n        val n_37 = n_ - 37\n        val n_38 = n_ - 38\n        val n_39 = n_ - 39\n        val n_40 = n_ - 40\n        val n_41 = n_ - 41\n        val n_42 = n_ - 42\n        val n_43 = n_ - 43\n        val n_44 = n_ - 44\n        val n_45 = n_ - 45\n        val n_46 = n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppjgs7wl1.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n1 = n.toLong\n        val n2 = n1.div(2)\n        val n3 = n1.div(2)\n        val n4 = n1.div(2)\n        val n5 = n1.div(2)\n        val n6 = n1.div(2)\n        val n7 = n1.div(2)\n        val n8 = n1.div(2)\n        val n9 = n1.div(2)\n        val n10 = n1.div(2)\n        val n11 = n1.div(2)\n        val n12 = n1.div(2)\n        val n13 = n1.div(2)\n        val n14 = n1.div(2)\n        val n15 = n1.div(2)\n        val n16 = n1.div(2)\n        val n17 = n1.div(2)\n        val n18 = n1.div(2)\n        val n19 = n1.div(2)\n        val n20 = n1.div(2)\n        val n21 = n1.div(2)\n        val n22 = n1.div(2)\n        val n23 = n1.div(2)\n        val n24 = n1.div(2)\n        val n25 = n1.div(2)\n        val n26 = n1.div(2)\n        val n27 = n1.div(2)\n        val n28 = n1.div(2)\n        val n29 = n1.div(2)\n        val n30 = n1.div(2)\n        val n31 = n1.div(2)\n        val n32 = n1.div(2)\n        val n33 = n1.div(2)\n        val n34 = n1.div(2)\n        val n35 = n1.div(2)\n        val n36 = n1.div(2)\n        val n37 = n1.div(2)\n        val n38 = n1.div(2)\n        val n39 = n1.div(2)\n        val n40 = n1.\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm5t03pn2.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn2\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn3\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn4\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn5\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn6\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn7\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn8\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        val n_mod_2 = n % 2\n        val n_mod_2_plus_1 = n_mod_2 + 1\n        val n_mod_2_plus_1_div_2 = n_mod_2_plus_1 / 2\n        val n_mod_2_plus_1_div_2_plus_1 = n_mod_2_plus_1_div_2 + 1\n        val result = List(n.toLong, n_mod_2_plus_1.toLong, n_mod_2_plus_1_div_2.toLong, n_mod_2_plus_1_div_2_plus_1.toLong)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwh293a9a.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n = n.toLong\n        if (n == 0) {\n            return List(0l)\n        } else if (n == 1) {\n            return List(1l)\n        } else if (n % 2 == 0) {\n            return List(n.toLong, n.toLong + 1l)\n        } else {\n            return List(n.toLong, n.toLong + 2l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjcq9cyr4.scala:15:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2\n        val n2 = nn / 2\n        val res = List(n1.toLong, n2.toLong)\n        if (n1 == 0) {\n            return res\n        } else {\n            return makeAPile(n1 - 1) + makeAPile(n2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc_mvvppx.scala:22:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n1 - \u001b[31m1\u001b[0m) + makeAPile(n2)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ * 2l\n        val n_3 = n_ * 3l\n        val n_4 = n_ * 4l\n        val n_5 = n_ * 5l\n        val n_6 = n_ * 6l\n        val n_7 = n_ * 7l\n        val n_8 = n_ * 8l\n        val n_9 = n_ * 9l\n        val n_10 = n_ * 10l\n        val n_11 = n_ * 11l\n        val n_12 = n_ * 12l\n        val n_13 = n_ * 13l\n        val n_14 = n_ * 14l\n        val n_15 = n_ * 15l\n        val n_16 = n_ * 16l\n        val n_17 = n_ * 17l\n        val n_18 = n_ * 18l\n        val n_19 = n_ * 19l\n        val n_20 = n_ * 20l\n        val n_21 = n_ * 21l\n        val n_22 = n_ * 22l\n        val n_23 = n_ * 23l\n        val n_24 = n_ * 24l\n        val n_25 = n_ * 25l\n        val n_26 = n_ * 26l\n        val n_27 = n_ * 27l\n        val n_28 = n_ * 28l\n        val n_29 = n_ * 29l\n        val n_30 = n_ * 30l\n        val n_31 = n_ * 31l\n        val n_32 = n_ * 32l\n        val n_33 = n_ * 33l\n        val n_34 = n_ * 34l\n        val n_35 = n_ * 35l\n        val n_36 = n_ * 36l\n        val n_37 = n_ * 37l\n        val n_38 = n_ * 38l\n        val n_39 = n_ * 39l\n        val n_40 = n_ * 40l\n        val n_41 = n_ * 41l\n        val n_42 = n_ * 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8_r4jng.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            return makeAPile(n - 1) + List(n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpctx7qvcr.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List(n.toLong, n.toLong + \u001b[31m1l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List[Long](0l)\n        } else {\n            return List[Long](n.toLong, (n + 1).toLong / 2l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppniamak7.scala:22)\n\tat Problem.main(tmppniamak7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toInt\n        if (nn % 2 == 1) {\n            val nn1 = nn + 1\n            val nn2 = nn1 + 1\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo85ajqrv.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo85ajqrv.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpo85ajqrv.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        var result = List[Long](n.toLong, 0l)\n        for (i <- 0 until n.toLong - 1) {\n            result = result.updated(i + 1, result(i) + (i + 1).toLong)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3cw498w.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n.toLong - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Long\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2\n        val n2 = nn / 2\n        val res = List(n1.toLong, n2.toLong)\n        if (n1 == 0) {\n            res = res.append(n2.toLong)\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeskpyr60.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            res = res.append(n2.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value append is not a member of List[Long] - did you mean res.appended?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1\n        val n_2 = n_ + 2\n        val n_3 = n_ + 3\n        val n_4 = n_ + 4\n        val n_5 = n_ + 5\n        val n_6 = n_ + 6\n        val n_7 = n_ + 7\n        val n_8 = n_ + 8\n        val n_9 = n_ + 9\n        val n_10 = n_ + 10\n        val n_11 = n_ + 11\n        val n_12 = n_ + 12\n        val n_13 = n_ + 13\n        val n_14 = n_ + 14\n        val n_15 = n_ + 15\n        val n_16 = n_ + 16\n        val n_17 = n_ + 17\n        val n_18 = n_ + 18\n        val n_19 = n_ + 19\n        val n_20 = n_ + 20\n        val n_21 = n_ + 21\n        val n_22 = n_ + 22\n        val n_23 = n_ + 23\n        val n_24 = n_ + 24\n        val n_25 = n_ + 25\n        val n_26 = n_ + 26\n        val n_27 = n_ + 27\n        val n_28 = n_ + 28\n        val n_29 = n_ + 29\n        val n_30 = n_ + 30\n        val n_31 = n_ + 31\n        val n_32 = n_ + 32\n        val n_33 = n_ + 33\n        val n_34 = n_ + 34\n        val n_35 = n_ + 35\n        val n_36 = n_ + 36\n        val n_37 = n_ + 37\n        val n_38 = n_ + 38\n        val n_39 = n_ + 39\n        val n_40 = n_ + 40\n        val n_41 = n_ + 41\n        val n_42 = n_ + 42\n        val n_43 = n_ + 43\n        val n_44 = n_ + 44\n        val n_45 = n_ + 45\n        val n_46 = n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292679,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwf53oxi0.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n1 = n.toLong\n        val n2 = n1.div(2)\n        val n3 = n1.div(2)\n        val n4 = n1.div(2)\n        val n5 = n1.div(2)\n        val n6 = n1.div(2)\n        val n7 = n1.div(2)\n        val n8 = n1.div(2)\n        val n9 = n1.div(2)\n        val n10 = n1.div(2)\n        val n11 = n1.div(2)\n        val n12 = n1.div(2)\n        val n13 = n1.div(2)\n        val n14 = n1.div(2)\n        val n15 = n1.div(2)\n        val n16 = n1.div(2)\n        val n17 = n1.div(2)\n        val n18 = n1.div(2)\n        val n19 = n1.div(2)\n        val n20 = n1.div(2)\n        val n21 = n1.div(2)\n        val n22 = n1.div(2)\n        val n23 = n1.div(2)\n        val n24 = n1.div(2)\n        val n25 = n1.div(2)\n        val n26 = n1.div(2)\n        val n27 = n1.div(2)\n        val n28 = n1.div(2)\n        val n29 = n1.div(2)\n        val n30 = n1.div(2)\n        val n31 = n1.div(2)\n        val n32 = n1.div(2)\n        val n33 = n1.div(2)\n        val n34 = n1.div(2)\n        val n35 = n1.div(2)\n        val n36 = n1.div(2)\n        val n37 = n1.div(2)\n        val n38 = n1.div(2)\n        val n39 = n1.div(2)\n        val n40 = n1.\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm5t03pn2.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn2\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn3\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn4\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn5\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn6\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn7\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value div is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm5t03pn2.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn8\u001b[0m = n1.div(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else {\n            return makeAPile(n - 1) + List(n.toLong)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292671,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0y1kylz9.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n - \u001b[31m1\u001b[0m) + List(n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else {\n            return List(n.toLong, n.toLong + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpscwu89cc.scala:22)\n\tat Problem.main(tmpscwu89cc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        val n1 = nn % 2l\n        val n2 = nn / 2l\n        val n3 = n2 + 1l\n        val n4 = n3 + 1l\n        val n5 = n4 + 1l\n        val n6 = n5 + 1l\n        val n7 = n6 + 1l\n        val n8 = n7 + 1l\n        val n9 = n8 + 1l\n        val n10 = n9 + 1l\n        val n11 = n10 + 1l\n        val n12 = n11 + 1l\n        val n13 = n12 + 1l\n        val n14 = n13 + 1l\n        val n15 = n14 + 1l\n        val n16 = n15 + 1l\n        val n17 = n16 + 1l\n        val n18 = n17 + 1l\n        val n19 = n18 + 1l\n        val n20 = n19 + 1l\n        val n21 = n20 + 1l\n        val n22 = n21 + 1l\n        val n23 = n22 + 1l\n        val n24 = n23 + 1l\n        val n25 = n24 + 1l\n        val n26 = n25 + 1l\n        val n27 = n26 + 1l\n        val n28 = n27 + 1l\n        val n29 = n28 + 1l\n        val n30 = n29 + 1l\n        val n31 = n30 + 1l\n        val n32 = n31 + 1l\n        val n33 = n32 + 1l\n        val n34 = n33 + 1l\n        val n35 = n34 + 1l\n        val n36 = n35 + 1l\n        val n37 = n36 + 1l\n        val n38 = n37 + 1l\n        val n39 = n38 + 1l\n        val n40 = n39 + 1l\n        val n41 = n40 + 1l\n        val n42 = n41 + 1l\n        val n43 = n42 + 1l\n        val n44 = n43 + 1l\n        val n45 = n44 + 1l\n        val n46 = n45\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3436497e.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        if (n == 0) {\n            return List(0l)\n        } else if (n == 1) {\n            return List(1l)\n        } else if (n % 2 == 0) {\n            return makeAPile(n / 2)\n        } else {\n            return makeAPile(n / 2) + List(1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi9kc2zw6.scala:22:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mreturn\u001b[0m makeAPile(n / \u001b[31m2\u001b[0m) + List(\u001b[31m1l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val n_ = n.toLong\n        val n_1 = n_ + 1l\n        val n_2 = n_ + 2l\n        val n_3 = n_ + 3l\n        val n_4 = n_ + 4l\n        val n_5 = n_ + 5l\n        val n_6 = n_ + 6l\n        val n_7 = n_ + 7l\n        val n_8 = n_ + 8l\n        val n_9 = n_ + 9l\n        val n_10 = n_ + 10l\n        val n_11 = n_ + 11l\n        val n_12 = n_ + 12l\n        val n_13 = n_ + 13l\n        val n_14 = n_ + 14l\n        val n_15 = n_ + 15l\n        val n_16 = n_ + 16l\n        val n_17 = n_ + 17l\n        val n_18 = n_ + 18l\n        val n_19 = n_ + 19l\n        val n_20 = n_ + 20l\n        val n_21 = n_ + 21l\n        val n_22 = n_ + 22l\n        val n_23 = n_ + 23l\n        val n_24 = n_ + 24l\n        val n_25 = n_ + 25l\n        val n_26 = n_ + 26l\n        val n_27 = n_ + 27l\n        val n_28 = n_ + 28l\n        val n_29 = n_ + 29l\n        val n_30 = n_ + 30l\n        val n_31 = n_ + 31l\n        val n_32 = n_ + 32l\n        val n_33 = n_ + 33l\n        val n_34 = n_ + 34l\n        val n_35 = n_ + 35l\n        val n_36 = n_ + 36l\n        val n_37 = n_ + 37l\n        val n_38 = n_ + 38l\n        val n_39 = n_ + 39l\n        val n_40 = n_ + 40l\n        val n_41 = n_ + 41l\n        val n_42 = n_ + 42\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajsw7yob.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val nn = n.toLong\n        if (nn % 2 == 0) {\n            val nn2 = nn / 2\n            val nn3 = nn2 + 1\n            val nn4 = nn3 + 1\n            val nn5 = nn4 + 1\n            val nn6 = nn5 + 1\n            val nn7 = nn6 + 1\n            val nn8 = nn7 + 1\n            val nn9 = nn8 + 1\n            val nn10 = nn9 + 1\n            val nn11 = nn10 + 1\n            val nn12 = nn11 + 1\n            val nn13 = nn12 + 1\n            val nn14 = nn13 + 1\n            val nn15 = nn14 + 1\n            val nn16 = nn15 + 1\n            val nn17 = nn16 + 1\n            val nn18 = nn17 + 1\n            val nn19 = nn18 + 1\n            val nn20 = nn19 + 1\n            val nn21 = nn20 + 1\n            val nn22 = nn21 + 1\n            val nn23 = nn22 + 1\n            val nn24 = nn23 + 1\n            val nn25 = nn24 + 1\n            val nn26 = nn25 + 1\n            val nn27 = nn26 + 1\n            val nn28 = nn27 + 1\n            val nn29 = nn28 + 1\n            val nn30 = nn29 + 1\n            val nn31 = nn30 + 1\n            val nn32 = nn31 + 1\n            val nn33 = nn32 + 1\n            val nn34 = nn33 + 1\n            val nn35 = nn34 + 1\n            val nn36 = nn35 + 1\n            val nn37 = nn36 + 1\n            val nn38 = nn37 + 1\n            val nn39 = nn38 + 1\n            val nn40 = nn39 + 1\n            val nn41 = nn40 + 1\n            val nn42 = nn41 + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n    }\n\n}\n",
      "timestamp": 1664292658,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf7_3ftxe.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7_3ftxe.scala:68:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpf7_3ftxe.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}