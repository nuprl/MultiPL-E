{
  "name": "HumanEval_162_string_to_md5",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3lng8vxq.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat Problem$.stringToMd5(tmpi2jfl43h.scala:12)\n\tat Problem$.main(tmpi2jfl43h.scala:16)\n\tat Problem.main(tmpi2jfl43h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0s4_a_s.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0s4_a_s.scala:24:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0s4_a_s.scala:36:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        val md5 = new java.security.MessageDigest(\"MD5\")\n        val bytes = text.getBytes(java.nio.charset.StandardCharsets.UTF_8)\n        md5.update(bytes)\n        val digest = md5.digest()\n        val hex = java.util.Base64.getEncoder().encodeToString(digest)\n        return Some(hex)\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpa687t8t2.scala:10:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmd5\u001b[0m = \u001b[33mnew\u001b[0m java.security.MessageDigest(\u001b[31m\"MD5\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnone of the overloaded alternatives named <init> can be accessed as a member of java.security.MessageDigest from module class Problem$.\n\u001b[31m   |\u001b[0m Access to protected \u001b[33mconstructor\u001b[0m \u001b[35mMessageDigest\u001b[0m not permitted because enclosing \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m\n\u001b[31m   |\u001b[0m is not a subclass of \u001b[33mclass\u001b[0m \u001b[35mMessageDigest\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mjava.security\u001b[0m where target is defined\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8j9kcqu3.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8j9kcqu3.scala:50:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8j9kcqu3.scala:12:165 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8j9kcqu3.scala:23:165 -------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8j9kcqu3.scala:34:165 -------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encod",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp701dtod7.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:58:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5(text : String) : String = {\n        val md5 = scala.util.MD5.md5(text)\n        return md5.toString\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5_1(text : String) : String = {\n        val md5 = scala.util.MD5.md5(text)\n        return md5.toString\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5_2(text : String) : String = {\n        val md5 = scala.util.MD5.md5(text)\n        return md5.toString\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5_3(text : String) : String = {\n        val md5 = scala.util.MD5.md5(text)\n        return md5.toString\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpadjqpu1_.scala:62:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpadjqpu1_.scala:21:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmd5\u001b[0m = scala.util.MD5.md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value MD5 is not a member of util\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpadjqpu1_.scala:30:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmd5\u001b[0m = scala.util.MD5.md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value MD5 is not a member of util\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpadjqpu1_.scala:39:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmd5\u001b[0m = scala.util.MD5.md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value MD5 is not a member of util\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpadjqpu1_.scala:48:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmd5\u001b[0m = scala.util.MD5.md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value MD5 is not a member of util\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadjqpu1_.scala:56:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    assert(stringToMd5((\u001b[31m\"Hello world\"\u001b[0m)).equals(\u001b[31m\"3e25960a79dbc69b674cd4ec67a72c62\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadjqpu1_.scala:57:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    assert(stringToMd5((\u001b[31m\"\"\u001b[0m)).equals(None));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp249uoi_e.scala:16)\n\tat Problem.main(tmp249uoi_e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo6l5vhew.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6l5vhew.scala:57:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (text : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpo6l5vhew.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpids6_oe9.scala:45:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpids6_oe9.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpids6_oe9.scala:24:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpids6_oe9.scala:36:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(j",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3d185tg9.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38l5tofs.scala:16)\n\tat Problem.main(tmp38l5tofs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp249uoi_e.scala:16)\n\tat Problem.main(tmp249uoi_e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuk2_rdut.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuk2_rdut.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuk2_rdut.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpuk2_rdut.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpuk2_rdut.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpq7mni2_j.scala:45:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfwip7b1m.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfwip7b1m.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfwip7b1m.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfwip7b1m.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfwip7b1m.scala:57:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Option[String]\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m58 |\u001b[0m            \u001b[33mreturn\u001b[0m None\n\u001b[31m59 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpfwip7b1m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38l5tofs.scala:16)\n\tat Problem.main(tmp38l5tofs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringTo\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp39hywku4.scala:44:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringTo\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp39hywku4.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39hywku4.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39hywku4.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:589)\n\tat Problem$.stringToMd5(tmpios7sxwv.scala:12)\n\tat Problem$.main(tmpios7sxwv.scala:16)\n\tat Problem.main(tmpios7sxwv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6_5umg3.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292709,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk8y_t0g.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38l5tofs.scala:16)\n\tat Problem.main(tmp38l5tofs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return md5(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return md5(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return md5(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return md5(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return md5(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292710,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv7w7lsic.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7w7lsic.scala:10:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mreturn\u001b[0m md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7w7lsic.scala:19:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7w7lsic.scala:28:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mreturn\u001b[0m md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7w7lsic.scala:37:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mreturn\u001b[0m md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7w7lsic.scala:46:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mreturn\u001b[0m md5(text)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpv7w7lsic.scala:17:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble defin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() ==\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292710,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4oopaq53.scala:57:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text.length() ==\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp4oopaq53.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo6l5vhew.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6l5vhew.scala:57:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (text : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpo6l5vhew.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n                .replaceAll(\"(.{8})(.{8})(.{8})(.{8})(.{8})(.{8})(.{8})(.{8})\", \"$1-$2-$3-$4-$5-$6-$7-$8\")\n            )\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292714,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8hweugmy.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292715,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper3pyc07.scala:12:165 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3d185tg9.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3lng8vxq.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpq7mni2_j.scala:45:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6_5umg3.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7bg6pzb2.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bg6pzb2.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp7bg6pzb2.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mO",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:589)\n\tat Problem$.stringToMd5(tmp0uqhikui.scala:12)\n\tat Problem$.main(tmp0uqhikui.scala:16)\n\tat Problem.main(tmp0uqhikui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiclg4ny8.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:589)\n\tat Problem$.stringToMd5(tmp9nr6n_5c.scala:12)\n\tat Problem$.main(tmp9nr6n_5c.scala:16)\n\tat Problem.main(tmp9nr6n_5c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292715,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9qu9i9ut.scala:44:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    Unit\n\u001b[31m   |\u001b[0m                                                Required: Option[String]\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp9qu9i9ut.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp9qu9i9ut.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp9qu9i9ut.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpshre_86o.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6_5umg3.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3d185tg9.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuk2_rdut.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuk2_rdut.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuk2_rdut.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpuk2_rdut.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpuk2_rdut.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat Problem$.stringToMd5(tmpxa_9hsdm.scala:12)\n\tat Problem$.main(tmpxa_9hsdm.scala:16)\n\tat Problem.main(tmpxa_9hsdm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpids6_oe9.scala:45:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpids6_oe9.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpids6_oe9.scala:24:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpids6_oe9.scala:36:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(j",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7bg6pzb2.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bg6pzb2.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp7bg6pzb2.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mO",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:589)\n\tat Problem$.stringToMd5(tmpios7sxwv.scala:12)\n\tat Problem$.main(tmpios7sxwv.scala:16)\n\tat Problem.main(tmpios7sxwv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292714,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpk146l6if.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().en\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292717,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7u65tjj.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7u65tjj.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt7u65tjj.scala:48:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().en\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue en is not a member of java.util.Base64#Encoder - did you mean Encoder.eq?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt7u65tjj.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpt7u65tjj.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpt7u65tjj.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n                    .replaceAll(\"(.{8})(.{8})(.{8})(.{8})(.{8})(.{8})(.{8})(.{8})\", \"$1$2$3$4$5$6$7$8\")\n            )\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphrpvsotm.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpshre_86o.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6_5umg3.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() ==\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292710,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4oopaq53.scala:57:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text.length() ==\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp4oopaq53.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3d185tg9.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38l5tofs.scala:16)\n\tat Problem.main(tmp38l5tofs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpshre_86o.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshre_86o.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:589)\n\tat Problem$.stringToMd5(tmpios7sxwv.scala:12)\n\tat Problem$.main(tmpios7sxwv.scala:16)\n\tat Problem.main(tmpios7sxwv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp701dtod7.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:58:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().en\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292717,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7u65tjj.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7u65tjj.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt7u65tjj.scala:48:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().en\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue en is not a member of java.util.Base64#Encoder - did you mean Encoder.eq?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt7u65tjj.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpt7u65tjj.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpt7u65tjj.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its sha1 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToSha1((\"Hello world\"))\n    // \"da39a3ee5e6b4b0d3255bfef95601890afd80709\"\n    def stringToSha1(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"SHA-1\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its sha256 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToSha256((\"Hello world\"))\n    // \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n    def stringToSha256(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"SHA-256\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its sha512 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToSha512((\"Hello world\"))\n    // \"d8022f2060ad6efd297ab73dcc5355c9b214054b0d1776a136a669d26a7d3b14f73aa0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292712,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpojv0zagu.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpojv0zagu.scala:46:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    assert(stringToMd5((\u001b[31m\"Hello world\"\u001b[0m)).equals(\u001b[31m\"3e25960a79dbc69b674cd4ec67a72c62\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpojv0zagu.scala:47:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    assert(stringToMd5((\u001b[31m\"\"\u001b[0m)).equals(None));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpojv0zagu.scala:48:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(stringToMd5((\u001b[31m\"A B C\"\u001b[0m)).equals(\u001b[31m\"0ef78513b0cb8cef12743f5aeb35f888\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpojv0zagu.scala:49:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    assert(stringToMd5((\u001b[31m\"password\"\u001b[0m)).equals(\u001b[31m\"5f4dcc3b5aa765d61d8327deb882cf99\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6_5umg3.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplcowtai_.scala:15)\n\tat Problem.main(tmplcowtai_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpq7mni2_j.scala:45:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp249uoi_e.scala:16)\n\tat Problem.main(tmp249uoi_e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3d185tg9.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().en\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292717,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7u65tjj.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7u65tjj.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt7u65tjj.scala:48:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().en\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue en is not a member of java.util.Base64#Encoder - did you mean Encoder.eq?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt7u65tjj.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpt7u65tjj.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpt7u65tjj.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringTo\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp39hywku4.scala:44:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringTo\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp39hywku4.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39hywku4.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39hywku4.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5(text : String) : String = {\n        return md5(text.getBytes())\n    }\n\n    // Given a byte array 'bytes', return its md5 hash equivalent string.\n    // If 'bytes' is an empty array, return None.\n    // >>> bytesToMd5([1, 2, 3])\n    // \"e4d909c290d0fb1ca068ffaddf22cbd0\"\n    def bytesToMd5(bytes : Array[Byte]) : Option[String] = {\n        if (bytes.length == 0) {\n            return None\n        } else {\n            return Some(md5(bytes))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> bytesToMd5(\"Hello world\")\n    // \"e4d909c290d0fb1ca068ffaddf22cbd0\"\n    def md5(bytes : Array[Byte]) : String = {\n        return md5(bytes.toArray)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> md5(\"Hello world\")\n    // \"e4d909c290d0fb1ca068ffaddf22cbd0\"\n    def md5(text : String) : String = {\n        return md5(text.getBytes())\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> md5(\"Hello world\")\n    // \"e4d909c290d\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292714,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkmws01cs.scala:64:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpkmws01cs.scala:48:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef md5(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef md5(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 48\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkmws01cs.scala:58:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    assert(stringToMd5((\u001b[31m\"Hello world\"\u001b[0m)).equals(\u001b[31m\"3e25960a79dbc69b674cd4ec67a72c62\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkmws01cs.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(stringToMd5((\u001b[31m\"\"\u001b[0m)).equals(None));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkmws01cs.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(stringToMd5((\u001b[31m\"A B C\"\u001b[0m)).equals(\u001b[31m\"0ef78513b0cb8cef12743f5aeb35f888\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkmws01cs.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpq7mni2_j.scala:45:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5(text : String) : String = {\n        val md5 = new java.security.MessageDigest(\"MD5\")\n        md5.update(text.getBytes())\n        val bytes = md5.digest()\n        val hex = bytes.map(_.toHexString).mkString(\"\")\n        return hex\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpiq_6aq72.scala:21:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmd5\u001b[0m = \u001b[33mnew\u001b[0m java.security.MessageDigest(\u001b[31m\"MD5\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnone of the overloaded alternatives named <init> can be accessed as a member of java.security.MessageDigest from module class Problem$.\n\u001b[31m   |\u001b[0m Access to protected \u001b[33mconstructor\u001b[0m \u001b[35mMessageDigest\u001b[0m not permitted because enclosing \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m\n\u001b[31m   |\u001b[0m is not a subclass of \u001b[33mclass\u001b[0m \u001b[35mMessageDigest\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mjava.security\u001b[0m where target is defined\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292714,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwo2g1g6d.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpwo2g1g6d.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpwo2g1g6d.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpwo2g1g6d.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38l5tofs.scala:16)\n\tat Problem.main(tmp38l5tofs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiclg4ny8.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6_5umg3.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5(text : String) : String = {\n        return md5$(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5$(text : String) : String = {\n        return md5$(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5$(text : String) : String = {\n        return md5$(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5$(text : String) : String = {\n        return md5$(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5$(text : String) : String = {\n        return md5$(text)\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292714,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvjhah5bh.scala:36:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmd5\u001b[0m$(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef md5(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 28 and\n\u001b[31m   |\u001b[0mdef md5(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvjhah5bh.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmd5\u001b[0m$(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef md5(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36 and\n\u001b[31m   |\u001b[0mdef md5(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvjhah5bh.scala:52:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmd5\u001b[0m$(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef md5(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44 and\n\u001b[31m   |\u001b[0mdef md5(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 52\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuk2_rdut.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuk2_rdut.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuk2_rdut.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpuk2_rdut.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpuk2_rdut.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() ==\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292710,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4oopaq53.scala:57:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text.length() ==\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp4oopaq53.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5(text : String) : String = {\n        return md5String(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5String(text : String) : String = {\n        return md5String(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5String(text : String) : String = {\n        return md5String(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5String(text : String) : String = {\n        return md5String(text)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def md5String(text : String) : String = {\n        return md5String(text)\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292714,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpe_pefut0.scala:36:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmd5String\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef md5String(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 28 and\n\u001b[31m   |\u001b[0mdef md5String(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpe_pefut0.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmd5String\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef md5String(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36 and\n\u001b[31m   |\u001b[0mdef md5String(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpe_pefut0.scala:52:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmd5String\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef md5String(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44 and\n\u001b[31m   |\u001b[0mdef md5String(text: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 52\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp701dtod7.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:58:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfwip7b1m.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfwip7b1m.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfwip7b1m.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfwip7b1m.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfwip7b1m.scala:57:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Option[String]\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m58 |\u001b[0m            \u001b[33mreturn\u001b[0m None\n\u001b[31m59 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpfwip7b1m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m :",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() ==\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292710,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4oopaq53.scala:57:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text.length() ==\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4oopaq53.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp4oopaq53.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n    }\n\n    // Given a string 'text', return its\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292715,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_xh1s78q.scala:49:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp_xh1s78q.scala:17:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 17\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp_xh1s78q.scala:26:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 17 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 26\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp_xh1s78q.scala:35:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 26 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6_5umg3.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292718,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj117d6x1.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj117d6x1.scala:45:93 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.get\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value get is not a member of object java.security.MessageDigest\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj117d6x1.scala:19:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 19\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj117d6x1.scala:30:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 19 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj117d6x1.scala:41",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3d185tg9.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d185tg9.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38l5tofs.scala:16)\n\tat Problem.main(tmp38l5tofs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:589)\n\tat Problem$.stringToMd5(tmp0uqhikui.scala:12)\n\tat Problem$.main(tmp0uqhikui.scala:16)\n\tat Problem.main(tmp0uqhikui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3lng8vxq.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp701dtod7.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:58:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3lng8vxq.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:589)\n\tat Problem$.stringToMd5(tmpios7sxwv.scala:12)\n\tat Problem$.main(tmpios7sxwv.scala:16)\n\tat Problem.main(tmpios7sxwv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().en\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292717,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7u65tjj.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt7u65tjj.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt7u65tjj.scala:48:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().en\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue en is not a member of java.util.Base64#Encoder - did you mean Encoder.eq?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt7u65tjj.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpt7u65tjj.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpt7u65tjj.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo6l5vhew.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6l5vhew.scala:57:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (text : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpo6l5vhew.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        val md5 = new java.security.MessageDigest(\"MD5\")\n        val bytes = text.getBytes(java.nio.charset.StandardCharsets.UTF_8)\n        md5.update(bytes)\n        val digest = md5.digest()\n        val hex = java.util.Base64.getEncoder().encodeToString(digest)\n        return Some(hex)\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) return None\n        val md5 = new java.security.MessageDigest(\"MD5\")\n        val bytes = text.getBytes(java.nio.charset.StandardCharsets.UTF_8)\n        md5.update(bytes)\n        val digest = md5.digest()\n        val hex = java.util.Base64.getEncoder().encodeToString(digest)\n        return Some(hex)\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292717,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzmz792fp.scala:10:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmd5\u001b[0m = \u001b[33mnew\u001b[0m java.security.MessageDigest(\u001b[31m\"MD5\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnone of the overloaded alternatives named <init> can be accessed as a member of java.security.MessageDigest from module class Problem$.\n\u001b[31m   |\u001b[0m Access to protected \u001b[33mconstructor\u001b[0m \u001b[35mMessageDigest\u001b[0m not permitted because enclosing \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m\n\u001b[31m   |\u001b[0m is not a subclass of \u001b[33mclass\u001b[0m \u001b[35mMessageDigest\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mjava.security\u001b[0m where target is defined\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmz792fp.scala:24:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmd5\u001b[0m = \u001b[33mnew\u001b[0m java.security.MessageDigest(\u001b[31m\"MD5\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnone of the overloaded alternatives named <init> can be accessed as a member of java.security.MessageDigest from module class Problem$.\n\u001b[31m   |\u001b[0m Access to protected \u001b[33mconstructor\u001b[0m \u001b[35mMessageDigest\u001b[0m not permitted because enclosing \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m\n\u001b[31m   |\u001b[0m is not a subclass of \u001b[33mclass\u001b[0m \u001b[35mMessageDigest\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mjava.security\u001b[0m where target is defined\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpzmz792fp.scala:22:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.lang.String.valueOf(java.security.MessageDigest.getInstance(\"MD5\").digest(java.lang.String.valueOf(text).getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292718,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbjs7zi_v.scala:16)\n\tat Problem.main(tmpbjs7zi_v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            \n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7bg6pzb2.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7bg6pzb2.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bg6pzb2.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp7bg6pzb2.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mO",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo6l5vhew.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6l5vhew.scala:57:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (text : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpo6l5vhew.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3lng8vxq.scala:12:147 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.ByteBuffer.wrap(text.getBytes()))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp701dtod7.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp701dtod7.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:58:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp701dtod7.scala:67:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m}\n\u001b[31m\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo6l5vhew.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6l5vhew.scala:57:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (text : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpo6l5vhew.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo6l5vhew.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6l5vhew.scala:57:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (text : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpo6l5vhew.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpq7mni2_j.scala:45:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpq7mni2_j.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5(\"Hello world\")\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text :\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292718,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxgjrwqav.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxgjrwqav.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpxgjrwqav.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpxgjrwqav.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxgjrwqav.scala:47:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    assert(stringToMd5((\u001b[31m\"Hello world\"\u001b[0m)).equals(\u001b[31m\"3e25960a79dbc69b674cd4ec67a72c62\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_6_5umg3.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n                .replaceAll(\"\\\\p{XDigit}\", \"\")\n                .replaceAll(\"=\", \"\"))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n                .replaceAll(\"\\\\p{XDigit}\", \"\")\n                .replaceAll(\"=\", \"\"))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n                .replaceAll(\"\\\\p{XDigit}\", \"\")\n                .replaceAll(\"=\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpm3pwpj65.scala:42:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                .replaceAll(\"=\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpm3pwpj65.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm3pwpj65.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm3pwpj65.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm3pwpj65.scala:26:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its sha1 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToSha1((\"Hello world\"))\n    // \"2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\"\n    def stringToSha1(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"SHA-1\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its sha256 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToSha256((\"Hello world\"))\n    // \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"\n    def stringToSha256(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"SHA-256\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its sha512 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToSha512((\"Hello world\"))\n    // \"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292718,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc2b4difc.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc2b4difc.scala:46:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    assert(stringToMd5((\u001b[31m\"Hello world\"\u001b[0m)).equals(\u001b[31m\"3e25960a79dbc69b674cd4ec67a72c62\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc2b4difc.scala:47:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    assert(stringToMd5((\u001b[31m\"\"\u001b[0m)).equals(None));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc2b4difc.scala:48:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(stringToMd5((\u001b[31m\"A B C\"\u001b[0m)).equals(\u001b[31m\"0ef78513b0cb8cef12743f5aeb35f888\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc2b4difc.scala:49:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    assert(stringToMd5((\u001b[31m\"password\"\u001b[0m)).equals(\u001b[31m\"5f4dcc3b5aa765d61d8327deb882cf99\"\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: stringToMd5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text.getBytes()))))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty())\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8uf62fbf.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp8uf62fbf.scala:19:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 19\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp8uf62fbf.scala:30:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 19 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp8uf62fbf.scala:41:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        }\n        return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjngdydy0.scala:12:165 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjngdydy0.scala:23:165 -------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpjngdydy0.scala:19:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 19\n\u001b[31m   |\u001b[0mhave the same type after erasure",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringTo\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp39hywku4.scala:44:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringTo\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp39hywku4.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39hywku4.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp39hywku4.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its sha1 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToSha1((\"Hello world\"))\n    // \"2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\"\n    def stringToSha1(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"SHA-1\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its sha256 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToSha256((\"Hello world\"))\n    // \"2c24b9b0b0d6fb5e9d9b9a3a5a8dc3d3d8c7d2d0da5\"\n    def stringToSha256(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"SHA-256\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its sha512 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringTo\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn9y3t60p.scala:51:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9y3t60p.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9y3t60p.scala:24:171 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"SHA-1\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9y3t60p.scala:36:173 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"SHA-256\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.util.Base64.getDecoder().decode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292716,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: Illegal base64 character 20\n\tat java.base/java.util.Base64$Decoder.decode0(Base64.java:847)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:566)\n\tat java.base/java.util.Base64$Decoder.decode(Base64.java:589)\n\tat Problem$.stringToMd5(tmp9nr6n_5c.scala:12)\n\tat Problem$.main(tmp9nr6n_5c.scala:16)\n\tat Problem.main(tmp9nr6n_5c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo6l5vhew.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo6l5vhew.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6l5vhew.scala:57:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mif\u001b[0m (text\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (text : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpo6l5vhew.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.get\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvcz1xa4m.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvcz1xa4m.scala:48:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.get\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value get is not a member of object java.util.Base64\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvcz1xa4m.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvcz1xa4m.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length() == 0) {\n            return None\n        } else {\n            return Some(java.util.\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj47x2gju.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj47x2gju.scala:57:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Option[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpj47x2gju.scala:32:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 20 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 32\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8o4nwqz1.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(md5(text))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292703,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgpwejze1.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:36:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgpwejze1.scala:48:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(md5(text))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: md5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgpwejze1.scala:20:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToMd5\u001b[0m(\u001b[36mtext\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mOption\u001b[0m[\u001b[35mString\u001b[0m] = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 8 and\n\u001b[31m   |\u001b[0mdef stringToMd5(text: String): Option[String] in \u001b[33mobject\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.isEmpty()) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp38l5tofs.scala:16)\n\tat Problem.main(tmp38l5tofs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292706,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpizqnwgue.scala:16)\n\tat Problem.main(tmpizqnwgue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5Opt(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5Opt2(text : String) : Option[String] = {\n        if (text.length == 0) {\n            return None\n        } else {\n            return Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\"MD5\").digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n        }\n    }\n\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\n    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"));\n    }\n\n}\n",
      "timestamp": 1664292720,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0cnb7eeu.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0cnb7eeu.scala:12:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0cnb7eeu.scala:24:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    java.nio.ByteBuffer\n\u001b[31m   |\u001b[0m                                           Required: Array[Byte]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0cnb7eeu.scala:36:169 -------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m Some(java.util.Base64.getEncoder().encodeToString(java.security.MessageDigest.getInstance(\u001b[31m\"MD5\"\u001b[0m).digest(java.nio.charset.StandardCharsets.UTF_8.encode(text))))\n\u001b[31m\u001b[31m   |\u001b[0m                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}