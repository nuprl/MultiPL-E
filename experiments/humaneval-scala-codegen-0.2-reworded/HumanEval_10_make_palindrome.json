{
  "name": "HumanEval_10_make_palindrome",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string : String) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n",
  "completions": [
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\")\n        var max = postfix.length\n        var i = 0\n        while (i < max) {\n            if (postfix[i].equals(postfix[max - i - 1])) {\n                max -= 1\n            } else {\n                break\n            }\n            i += 1\n        }\n        var prefix = string.substring(0, max - i)\n        return prefix + postfix[i].toString + postfix[max - i - 1].toString",
    "        var longestPalindrome = \"\"\n        var longestPalindromeIndex = -1\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            var j_ = j\n            while (j < string.length && string[j] == string[j_]) {\n                j += 1\n                j_ -= 1\n            }\n            if (j - i > longestPalindrome.length()) {\n                longestPalindrome = string[i:j]\n                longestPalindromeIndex = i\n            }\n            i = j + 1\n        }\n        if (longestPalindrome.length() == 0) {\n            return string\n        }\n        var newString = string\n        var newStringIndex = longestPalindromeIndex\n        var newStringLength = longestPalindrome.length()\n        var newStringReverse = longestPalindrome.reverse()\n        newString = newString.substring(0, newStringIndex) + newStringReverse + newString.substring(newStringIndex + newStringLength)\n        return newString",
    "        if (string.length == 1) {\n            return string\n        }\n        var postfix = string.substring(string.length - 1)\n        var palindrome = postfix.reverse()\n        return string + palindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last())\n        return prefix.append(postfix.reverse())",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.append(postfix.reverse())",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = postfix.takeWhile(x => x == postfix.last)\n        return string + postfix.takeWhile(x => x != palindrome.last).reverse()",
    "        if (string.length == 0) return string\n        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        for (i <- 0 until postfix.length) {\n            palindrome = palindrome + postfix[i]\n            if (palindrome.length == string.length) break\n        }\n        return string + palindrome",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            if (j - i > longest.length) {\n                longest = string[i:j]\n                longestSuffix = string[i:j]\n            }\n            i = j\n        }\n        var result = string + longestSuffix[::-1]\n        return result",
    "        var longestPalindrome = \"\"\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            var palindrome = string.substring(i, j + 1)\n            if (palindrome.equals(palindrome.reverse())) {\n                longestPalindrome = palindrome\n                i = j\n                j = i\n            } else {\n                j -= 1\n            }\n        }\n        return longestPalindrome",
    "        var longest = \"\"\n        var longest_postfix = \"\"\n        var longest_postfix_index = 0\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            var postfix = string.substring(i)\n            var postfix_index = 0\n            while (postfix_index < postfix.length) {\n                var palindrome = postfix.substring(postfix_index, postfix.length - postfix_index)\n                if (palindrome.equals(palindrome.reverse())) {\n                    if (postfix_index > longest_postfix_index) {\n                        longest_postfix = postfix\n                        longest_postfix_index = postfix_index\n                    }\n                }\n                postfix_index += 1\n            }\n            i += 1\n        }\n        if (longest_postfix_index > 0) {\n            var prefix = string.substring(0, longest_postfix_index)\n            var prefix_index = 0\n            while (prefix_index < prefix.length) {\n                var palindrome = prefix.substring(prefix_index, prefix.length - prefix_index)\n                if (palindrome.equals(palindrome.reverse())) {\n                    prefix = prefix.substring(0, prefix_index) + string.substring(longest_postfix_index)\n                    return prefix\n                }\n                prefix_index += 1\n            }\n        }\n        return string",
    "        var longest = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            if (j - i > longest.length) {\n                longest = string[i:j]\n            }\n            i = j\n        }\n        return longest + string[i:]",
    "        var longestPalindrome : String = \"\"\n        var maxLength : Int = 0\n        for (var i : Int = 0; i < string.length; i++) {\n            var palindrome : String = string.substring(i, string.length)\n            if (palindrome.length > maxLength) {\n                maxLength = palindrome.length\n                longestPalindrome = palindrome\n            }\n        }\n        var reverse : String = \"\"\n        for (var i : Int = 0; i < longestPalindrome.length; i++) {\n            reverse = reverse + string[i]\n        }\n        return longestPalindrome + reverse",
    "        if (string.length() == 0) {\n            return string\n        }\n        var postfix = string.reverse().toString()\n        var prefix = string.reverse().substring(0, string.length() - 1)\n        return prefix + postfix",
    "        var longestPalindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longestPalindrome.length) {\n                longestPalindrome = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i]\n            i = j + 1\n        }\n        return string + palindrome.reverse",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            var isPalindrome = true\n            while (j < string.length && isPalindrome) {\n                isPalindrome = string[i] == string[j]\n                j += 1\n            }\n            if (isPalindrome && j - i > longest.length) {\n                longest = string[i:j]\n                longestSuffix = string[i:j]\n            }\n            i += 1\n        }\n        return longest + longestSuffix.reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = string.substring(0, postfix.length)\n        return prefix + postfix",
    "        var maxPalindrome = \"\"\n        var maxPalindromeLength = 0\n        var maxPalindromeStart = 0\n        var maxPalindromeEnd = 0\n        for (i <- 0 until string.length) {\n            var palindrome = string.substring(i, string.length)\n            if (palindrome.length > maxPalindromeLength) {\n                maxPalindrome = palindrome\n                maxPalindromeLength = palindrome.length\n                maxPalindromeStart = i\n                maxPalindromeEnd = i + palindrome.length\n            }\n        }\n        var reversed = string.substring(maxPalindromeStart, maxPalindromeEnd)\n        return string + reversed",
    "        var longestPalindrome : String = \"\"\n        var i : Int = 0\n        while (i < string.length) {\n            var j : Int = i\n            while (j < string.length && string.charAt(j) == string.charAt(i)) {\n                j += 1\n            }\n            if (j - i > longestPalindrome.length) {\n                longestPalindrome = string.substring(i, j)\n            }\n            i = j\n        }\n        return longestPalindrome",
    "        var longestPalindrome = \"\"\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            var palindrome = string.substring(i, j)\n            if (palindrome.equals(palindrome.reverse())) {\n                longestPalindrome = palindrome\n                i = j\n                j = i\n            } else {\n                j = j - 1\n            }\n        }\n        return longestPalindrome",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          while (j < string.length && string[j] == string[j]) {\n            j += 1\n          }\n          if (j - i > longestPalindrome.length) {\n            longestPalindrome = string[i:j]\n          }\n          i = j + 1\n        }\n        return longestPalindrome + string.reverse()",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x.equals(x.reverse()))\n        return prefix.reverse().mkString(string)",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longestPalindrome.length) {\n                longestPalindrome = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = string.substring(0, string.length - 1)\n        var result = prefix + postfix\n        return result",
    "        var longest = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longest.length) {\n                longest = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return longest + string[i:]",
    "        var postfix = string.reverse().toString()\n        var prefix = string.reverse().substring(0, string.length() - 1)\n        return prefix + postfix",
    "        var max = string.length\n        var maxPal = \"\"\n        for (var i = 0; i < max; i++) {\n            var pal = string.substring(i, max)\n            if (pal.equals(pal.reverse())) {\n                maxPal = pal\n                break\n            }\n        }\n        var newString = string + maxPal.reverse()\n        return newString",
    "        if (string.length == 0) {\n            return string\n        }\n        var maxPalindrome = \"\"\n        var maxPalindromeIndex = 0\n        for (var i = 0; i < string.length; i++) {\n            var palindrome = string.substring(i, string.length - i)\n            if (palindrome.length() > maxPalindrome.length()) {\n                maxPalindrome = palindrome\n                maxPalindromeIndex = i\n            }\n        }\n        var reversed = string.substring(0, maxPalindromeIndex)\n        reversed = reversed.reverse()\n        return string + reversed",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          while (j < string.length && string[j] == string[j + 1]) {\n            j += 1\n          }\n          if (j - i + 1 > longestPalindrome.length) {\n            longestPalindrome = string[i:j + 1]\n          }\n          i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\")\n        var palindrome = \"\"\n        for (var i = 0; i < postfix.length; i++) {\n            var palindromePrefix = \"\"\n            for (var j = 0; j < postfix.length; j++) {\n                if (j == i) {\n                    palindromePrefix += postfix[j]\n                } else {\n                    palindromePrefix += postfix[j]\n                }\n            }\n            palindrome += palindromePrefix.reverse\n        }\n        return string + palindrome",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            if (string.substring(i, j).equals(string.substring(j, i))) {\n                longestPalindrome = string.substring(i, j) + longestPalindrome\n                i = i + 1\n                j = j - 1\n            } else {\n                j = j - 1\n            }\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        var i : Int = 0\n        while (i < string.length) {\n            var j : Int = i\n            var j_1 : Int = j + 1\n            while (j_1 < string.length && string[j] == string[j_1]) {\n                j_1 += 1\n            }\n            var palindrome : String = string[i:j_1]\n            if (palindrome.length > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindrome.length\n            }\n            i = j_1\n        }\n        var prefix : String = string[:longestPalindromeLength]\n        var suffix : String = string[longestPalindromeLength:]\n        return prefix + suffix.reverse()",
    "        var longestPalindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i > longestPalindrome.length) {\n                longestPalindrome = string[i:j]\n            }\n            i = j + 1\n        }\n        return longestPalindrome + string[i:]",
    "        var longestPalindrome = \"\"\n        var longestPalindromeIndex = 0\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          var j_ = j\n          var j_ = j\n          while (j < string.length && string[j] == string[j_]) {\n            j_ = j_ + 1\n            j = j + 1\n          }\n          if (j_ - i > longestPalindrome.length()) {\n            longestPalindrome = string[i:j_]\n            longestPalindromeIndex = i\n          }\n          i = j + 1\n        }\n        return string[longestPalindromeIndex:longestPalindromeIndex+longestPalindrome.length()] + string[longestPalindromeIndex+longestPalindrome.length():]",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome : String = \"\"\n        var maxLength : Int = 0\n        for (var i : Int = 0; i < string.length; i++) {\n            var palindrome : String = string.substring(i, string.length)\n            var length : Int = palindrome.length\n            if (length > maxLength) {\n                maxLength = length\n                longestPalindrome = palindrome\n            }\n        }\n        var reverse : String = longestPalindrome.reverse()\n        var prefix : String = string.substring(0, maxLength - 1)\n        return prefix + reverse\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome2((\"\"))\n    // (\"\")\n    // >>> makePalindrome2((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome2((\"cata\"))\n    // (\"catac\")\n    def makePalindrome2(string : String) : String = {\n        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome : String = \"\"\n        var maxLength : Int = 0\n        for (var i : Int = 0; i < string.length; i++) {\n            var palindrome : String = string.substring(i, string.length)\n            var length : Int = palindrome.length\n            if (length > maxLength) {\n                maxLength = length\n                longestPalindrome = palindrome\n            }\n        }\n        var reverse : String = longestPalindrome.reverse()\n        var prefix : String = string.substring(0, maxLength - 1)\n        return prefix + reverse\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string",
    "        if (string.length == 0) {\n            return \"\"\n        }\n        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        for (i <- 0 until postfix.length) {\n            if (postfix[i].equals(postfix[i + 1])) {\n                palindrome = palindrome + postfix[i]\n            } else {\n                break\n            }\n        }\n        var prefix = string.toLowerCase.split(\"\")\n        for (i <- 0 until prefix.length) {\n            if (prefix[i].equals(prefix[i + 1])) {\n                palindrome = palindrome + prefix[i]\n            } else {\n                break\n            }\n        }\n        return palindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.reverse().concat(postfix.last)",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            var palindrome = string.substring(i, j + 1)\n            if (palindrome.equals(palindrome.reverse())) {\n                if (palindrome.length() > longestPalindromeLength) {\n                    longestPalindrome = palindrome\n                    longestPalindromeLength = palindrome.length()\n                }\n            }\n            j -= 1\n            i += 1\n        }\n        return longestPalindrome",
    "        var longestPalindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            var palindrome = \"\"\n            while (j < string.length && string[j] == string[j]) {\n                palindrome += string[j]\n                j += 1\n            }\n            if (palindrome.length > longestPalindrome.length) {\n                longestPalindrome = palindrome\n            }\n            i += 1\n        }\n        return longestPalindrome + string",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var maxLength = string.length\n        var maxPalindrome = \"\"\n        var maxPalindromeLength = 0\n        for (var i = 0; i < string.length; i++) {\n            var postfix = string.substring(i)\n            var postfixLength = postfix.length\n            if (postfixLength > maxPalindromeLength) {\n                maxPalindrome = postfix\n                maxPalindromeLength = postfixLength\n            }\n            var prefix = string.substring(0, i)\n            var prefixLength = prefix.length\n            if (prefixLength > maxPalindromeLength) {\n                maxPalindrome = prefix + postfix\n                maxPalindromeLength = prefixLength + postfixLength\n            }\n        }\n        return maxPalindrome",
    "        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        for (var i = 0; i < string.length(); i++) {\n            var postfix : String = string.substring(i)\n            var postfixLength : Int = postfix.length()\n            if (postfixLength > longestPalindromeLength) {\n                longestPalindrome = postfix\n                longestPalindromeLength = postfixLength\n            }\n            var prefix : String = string.substring(0, i)\n            var prefixLength : Int = prefix.length()\n            if (prefixLength > longestPalindromeLength) {\n                longestPalindrome = prefix + postfix\n                longestPalindromeLength = prefixLength\n            }\n        }\n        return longestPalindrome",
    "        var longestPalindrome : String = \"\"\n        var maxLength : Int = 0\n        for (i <- 0 until string.length) {\n            var palindrome : String = string.substring(i, string.length - i)\n            if (palindrome.length > maxLength) {\n                maxLength = palindrome.length\n                longestPalindrome = palindrome\n            }\n        }\n        var reversed : String = longestPalindrome.reverse\n        var prefix : String = longestPalindrome.substring(0, maxLength / 2)\n        return prefix + reversed",
    "        var postfix = string.reverse().toString()\n        var prefix = string.reverse().toString()\n        var result = \"\"\n        while (postfix.length > 0) {\n            if (postfix.length > prefix.length) {\n                result = postfix.substring(0, postfix.length - prefix.length) + result\n                postfix = postfix.substring(postfix.length - prefix.length)\n            } else {\n                result = prefix.substring(0, prefix.length - postfix.length) + result\n                prefix = prefix.substring(prefix.length - postfix.length)\n            }\n        }\n        return result",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longestPalindrome.length) {\n                longestPalindrome = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i]\n            i = j + 1\n        }\n        return string + palindrome.reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome = \"\"\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            var palindrome = string[i] + string[j]\n            if (palindrome.equals(palindrome.reverse())) {\n                longestPalindrome = palindrome\n                i += 1\n                j -= 1\n            } else {\n                j -= 1\n            }\n        }\n        if (longestPalindrome.equals(\"\")) {\n            return string\n        } else {\n            return string + longestPalindrome\n        }",
    "        var longest = \"\"\n        var longest_index = -1\n        var i = 0\n        while (i < string.length) {\n            var postfix = string.substring(i)\n            if (isPalindrome(postfix)) {\n                if (postfix.length > longest.length) {\n                    longest = postfix\n                    longest_index = i\n                }\n            }\n            i += 1\n        }\n        if (longest_index == -1) return string\n        var prefix = string.substring(0, longest_index)\n        return prefix + reverse(longest)\n    }\n\n    // Check if a string is a palindrome.\n    // >>> isPalindrome(\"\")\n    // true\n    // >>> isPalindrome(\"cat\")\n    // true\n    // >>> isPalindrome(\"cata\")\n    // false\n    def isPalindrome(string : String) : Boolean = {\n        var i = 0\n        while (i < string.length) {\n            var j = string.length - 1\n            if (string[i] != string[j]) return false\n            i += 1\n            j -= 1\n        }\n        return true\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < string.length) {\n            result += string[i]\n            i += 1\n        }\n        return result",
    "        var longestPalindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          while (j < string.length && string[j] == string[j + 1]) {\n            j += 1\n          }\n          if (j - i + 1 > longestPalindrome.length) {\n            longestPalindrome = string[i:j + 1]\n          }\n          i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return \"\"\n        }\n        var postfix = string.split(\"\")\n        var palindrome = \"\"\n        var maxLength = postfix.length\n        for (i <- 1 to maxLength) {\n            var palindromePrefix = postfix[maxLength - i]\n            var palindromeSuffix = postfix[i - 1]\n            if (palindromePrefix.equals(palindromeSuffix)) {\n                palindrome = palindrome + palindromePrefix\n                maxLength = i\n            }\n        }\n        return string + reverse(palindrome)\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var reversed = \"\"\n        for (i <- 0 to string.length - 1) {\n            reversed = string[i] + reversed\n        }\n        return reversed",
    "        var longest = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i > longest.length) {\n                longest = string[i:j]\n            }\n            i = j + 1\n        }\n        return longest + string[i:]",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.append(postfix.reverse().takeWhile(x => x == postfix.last))",
    "        if (string.length() == 0) {\n            return string\n        }\n        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        for (var i = 0; i < string.length(); i++) {\n            var palindrome = string.substring(i, string.length())\n            var palindromeLength = palindrome.length()\n            if (palindromeLength > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindromeLength\n            }\n        }\n        var reversed = longestPalindrome.reverse()\n        return string + reversed[0:longestPalindromeLength]",
    "        if (string.length == 0) {\n            return string\n        }\n        var maxPalindrome = \"\"\n        var maxPalindromeLength = 0\n        for (var i = 0; i < string.length; i++) {\n            var palindrome = string.substring(i, string.length)\n            if (palindrome.length > maxPalindromeLength) {\n                maxPalindrome = palindrome\n                maxPalindromeLength = palindrome.length\n            }\n        }\n        var palindrome = string.substring(0, maxPalindromeLength)\n        var reverse = palindrome.reverse()\n        return palindrome + reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var maxPalindrome = \"\"\n        var maxPalindromeIndex = 0\n        var maxPalindromeLength = 0\n        for (var i = 0; i < string.length; i++) {\n            var palindrome = string.substring(i, string.length - i)\n            if (isPalindrome(palindrome)) {\n                if (palindrome.length > maxPalindromeLength) {\n                    maxPalindrome = palindrome\n                    maxPalindromeIndex = i\n                    maxPalindromeLength = palindrome.length\n                }\n            }\n        }\n        var newString = string.substring(0, maxPalindromeIndex) + reverse(string.substring(maxPalindromeIndex, string.length))\n        return newString\n    }\n\n    // Check if a string is a palindrome.\n    // >>> isPalindrome(\"\")\n    // true\n    // >>> isPalindrome(\"cat\")\n    // true\n    // >>> isPalindrome(\"cata\")\n    // false\n    def isPalindrome(string : String) : Boolean = {\n        if (string.length == 0) {\n            return true\n        }\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            if (string[i] != string[j]) {\n                return false\n            }\n            i += 1\n            j -= 1\n        }\n        return true\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var result = \"\"\n        for (var i = string.length - 1; i >= 0; i--) {\n            result += string[i]\n        }\n        return result",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var postfix = string.toLowerCase\n        var postfixLength = postfix.length\n        var postfixArray = postfix.toCharArray\n        var postfixArrayLength = postfixArray.length\n        var i = 0\n        while (i < postfixLength) {\n            var j = postfixLength - 1\n            while (j >= i && postfixArray[j] == postfixArray[i]) {\n                j -= 1\n            }\n            if (j - i + 1 > palindrome.length) {\n                palindrome = postfix.substring(i, j + 1)\n            }\n            i = j + 1\n        }\n        if (palindrome.length == 0) {\n            return string\n        }\n        var reverse = \"\"\n        var reverseArray = reverse.toCharArray\n        var reverseArrayLength = reverseArray.length\n        var j = 0\n        while (j < reverseArrayLength) {\n            var i = reverseArrayLength - 1\n            while (i >= j && postfixArray[i] == reverseArray[j]) {\n                i -= 1\n            }\n            if (i - j + 1 > reverse.length) {\n                reverse = reverse.substring(0, i - j + 1)\n            }\n            j = i + 1\n        }\n        return string + reverse",
    "        var longest = \"\"\n        var longest_postfix = \"\"\n        var longest_postfix_palindrome = \"\"\n        var longest_postfix_palindrome_index = 0\n        var i = 0\n        while (i < string.length) {\n            var postfix = string.substring(i)\n            var palindrome = postfix.reverse()\n            if (palindrome.equals(postfix)) {\n                if (postfix.length > longest_postfix_palindrome.length) {\n                    longest_postfix_palindrome = postfix\n                    longest_postfix_palindrome_index = i\n                }\n            }\n            i = i + 1\n        }\n        if (longest_postfix_palindrome.length > 0) {\n            var prefix = string.substring(0, longest_postfix_palindrome_index)\n            longest = prefix + longest_postfix_palindrome\n        }\n        return longest",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = string.substring(0, string.length - 1)\n        var result = prefix + postfix\n        return result",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            var palindrome = string.substring(i, i + 1)\n            var palindromeLength = 1\n            while (j < string.length - palindromeLength) {\n                if (string.substring(j, j + palindromeLength) == palindrome) {\n                    palindromeLength += 1\n                } else {\n                    break\n                }\n                j += 1\n            }\n            if (palindromeLength > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindromeLength\n            }\n            i += 1\n        }\n        return string + longestPalindrome.reverse()",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase().split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i]\n            i = j + 1\n        }\n        return string + palindrome.reverse()",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prefix(postfix.length)\n        return string + palindrome",
    "        if (string.length() == 1) {\n            return string\n        }\n        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        for (var i = 0; i < string.length(); i++) {\n            var postfix = string.substring(i)\n            if (isPalindrome(postfix)) {\n                if (postfix.length() > longestPalindromeLength) {\n                    longestPalindrome = postfix\n                    longestPalindromeLength = postfix.length()\n                }\n            }\n        }\n        var prefix = string.substring(0, longestPalindromeLength)\n        return prefix + reverse(longestPalindrome)\n    }\n\n    // Check if a string is a palindrome.\n    // >>> isPalindrome(\"\")\n    // true\n    // >>> isPalindrome(\"cat\")\n    // true\n    // >>> isPalindrome(\"cata\")\n    // false\n    def isPalindrome(string : String) : Boolean = {\n        if (string.length() == 1) {\n            return true\n        }\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false\n            }\n            i += 1\n            j -= 1\n        }\n        return true\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var result = \"\"\n        for (var i = string.length() - 1; i >= 0; i--) {\n            result += string.charAt(i)\n        }\n        return result\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"",
    "        if (string.length == 1) {\n            return string\n        }\n        var maxPalindrome = \"\"\n        for (var i = 0; i < string.length; i++) {\n            var palindrome = string.substring(i, string.length - i)\n            if (isPalindrome(palindrome)) {\n                maxPalindrome = palindrome\n            }\n        }\n        return string + maxPalindrome.reverse\n    }\n\n    // Check if a string is a palindrome.\n    // >>> isPalindrome(\"\")\n    // true\n    // >>> isPalindrome(\"cat\")\n    // true\n    // >>> isPalindrome(\"cata\")\n    // false\n    def isPalindrome(string : String) : Boolean = {\n        if (string.length == 1) {\n            return true\n        }\n        for (var i = 0; i < string.length / 2; i++) {\n            if (string[i] != string[string.length - i - 1]) {\n                return false\n            }\n        }\n        return true\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome2(string : String) : String = {\n        if (string.length == 1) {\n            return string\n        }\n        var maxPalindrome = \"\"\n        for (var i = 0; i < string.length; i++) {\n            var palindrome = string.substring(i, string.length - i)\n            if (isPalindrome(palindrome)) {\n                maxPalindrome = palindrome\n            }\n        }\n        return string + maxPalindrome.reverse\n    }\n\n    //",
    "        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        for (i <- 0 until string.length) {\n            var postfix : String = string.substring(i)\n            var postfixLength : Int = postfix.length\n            if (postfixLength > longestPalindromeLength) {\n                longestPalindrome = postfix\n                longestPalindromeLength = postfixLength\n            }\n        }\n        var prefix : String = string.substring(0, longestPalindromeLength)\n        var prefixLength : Int = prefix.length\n        var reversed : String = prefix.reverse\n        return prefix + reversed",
    "        var longestPalindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longestPalindrome.length) {\n                longestPalindrome = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixLength = 0\n        var i = 0\n        while (i < string.length) {\n            var postfix = string.substring(i)\n            var postfixLength = postfix.length\n            if (postfixLength > longestSuffixLength) {\n                longestSuffix = postfix\n                longestSuffixLength = postfixLength\n            }\n            i += 1\n        }\n        if (longestSuffixLength > 0) {\n            var reverse = longestSuffix.reverse\n            var prefix = string.substring(0, longestSuffixLength)\n            return prefix + reverse\n        } else {\n            return string\n        }",
    "        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        var i : Int = 0\n        var j : Int = 0\n        while (i < string.length) {\n            var palindrome : String = \"\"\n            var palindromeLength : Int = 0\n            while (i < string.length && j < string.length && string[i] == string[j]) {\n                palindrome += string[i]\n                palindromeLength += 1\n                i += 1\n                j += 1\n            }\n            if (palindromeLength > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindromeLength\n            }\n            i += 1\n            j += 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i]\n            i = j + 1\n        }\n        return palindrome + string[:string.length - palindrome.length]",
    "        var longestPalindrome : String = \"\"\n        var maxLength : Int = 0\n        for (var i : Int = 0; i < string.length(); i++) {\n            var postfix : String = string.substring(i)\n            var palindrome : String = postfix.reverse()\n            if (palindrome.equals(postfix)) {\n                if (palindrome.length() > maxLength) {\n                    maxLength = palindrome.length()\n                    longestPalindrome = palindrome\n                }\n            }\n        }\n        return string + longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            var isPalindrome = true\n            while (j < string.length && isPalindrome) {\n                isPalindrome = string[i] == string[j]\n                j += 1\n            }\n            if (isPalindrome) {\n                longestPalindrome = string[i] + longestPalindrome\n                i += 1\n            } else {\n                i += 1\n            }\n        }\n        return longestPalindrome + string",
    "        var postfix = string.reverse()\n        var prefix = string.reverse()\n        var result = \"\"\n        while (prefix.length > 0 && postfix.length > 0) {\n            if (prefix.length > postfix.length) {\n                result = result + prefix.head\n                prefix = prefix.tail\n            } else {\n                result = result + postfix.head\n                postfix = postfix.tail\n            }\n        }\n        result = result + prefix\n        return result",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i:j + 1]\n            i = j + 1\n        }\n        return palindrome + string",
    "        var postfix = string.toLowerCase.split(\"\")\n        var prefix = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            if (postfix[i].equals(postfix[postfix.length - 1 - i])) {\n                prefix += postfix[i]\n                i += 1\n            } else {\n                break\n            }\n        }\n        return prefix + postfix[i..postfix.length]",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = postfix.reverse()\n        return prefix + postfix",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixLength = 0\n        var longestSuffixStart = 0\n        var longestSuffixEnd = 0\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            if (string[i].toLowerCase() == string[i]) {\n                j = i\n                while (j < string.length && string[j].toLowerCase() == string[j]) {\n                    j += 1\n                }\n                if (j - i > longestSuffixLength) {\n                    longestSuffix = string[i:j]\n                    longestSuffixLength = j - i\n                    longestSuffixStart = i\n                    longestSuffixEnd = j\n                }\n                i = j\n            } else {\n                i += 1\n            }\n        }\n        if (longestSuffixLength > 0) {\n            var reverse = \"\"\n            var reverseStart = longestSuffixEnd\n            var reverseEnd = longestSuffixStart\n            while (reverseStart >= 0) {\n                reverse += string[reverseStart--]\n            }\n            reverse = reverse.reverse()\n            return string + reverse\n        } else {\n            return \"\"\n        }",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prepend(postfix.take(1))\n        return palindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        for (i <- 0 until postfix.length) {\n            if (postfix[i].equals(postfix[i + 1])) {\n                palindrome = palindrome + postfix[i]\n            } else {\n                break\n            }\n        }\n        return palindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.split(\"\")\n        var palindrome = \"\"\n        var maxLength = 0\n        for (var i = 0; i < postfix.length; i++) {\n            var palindromePrefix = \"\"\n            var palindromeSuffix = \"\"\n            var length = postfix.length - i\n            if (length > maxLength) {\n                maxLength = length\n                palindromePrefix = postfix[i]\n                palindromeSuffix = postfix[i]\n            }\n            for (var j = 0; j < length; j++) {\n                palindromePrefix = palindromePrefix + postfix[i + j]\n                palindromeSuffix = postfix[i + j] + palindromeSuffix\n            }\n            if (palindromePrefix.equals(palindromeSuffix)) {\n                palindrome = palindrome + palindromePrefix\n            }\n        }\n        return palindrome",
    "        var longestPalindrome = \"\"\n        var longestPalindromeIndex = -1\n        var i = 0\n        while (i < string.length) {\n            var palindrome = string.substring(i, i + 1)\n            if (palindrome.equals(palindrome.reverse())) {\n                if (palindrome.length > longestPalindrome.length) {\n                    longestPalindrome = palindrome\n                    longestPalindromeIndex = i\n                }\n            }\n            i = i + 1\n        }\n        if (longestPalindromeIndex == -1) {\n            return \"\"\n        } else {\n            return string.substring(0, longestPalindromeIndex) + string.substring(longestPalindromeIndex, string.length)\n        }",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prepend(postfix.take(postfix.length - 1))\n        return palindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome2((\"\"))\n    // (\"\")\n    // >>> makePalindrome2((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome2((\"cata\"))\n    // (\"catac\")\n    def makePalindrome2(string : String) : String = {\n        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prepend(postfix.take(postfix.length - 1))\n        return palindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome3((\"\"))\n    // (\"\")\n    // >>> makePalindrome3((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome3((\"cata\"))\n    // (\"catac\")\n    def makePalindrome3(string : String) : String = {\n        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prepend(postfix.take(postfix.length - 1))\n        return palindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is",
    "        var prefix = \"\"\n        var suffix = \"\"\n        var i = 0\n        while (i < string.length) {\n            var c = string.charAt(i)\n            if (c == ' ') {\n                i += 1\n                continue\n            }\n            prefix += c\n            i += 1\n        }\n        i = 0\n        while (i < string.length) {\n            var c = string.charAt(i)\n            if (c == ' ') {\n                i += 1\n                continue\n            }\n            suffix += c\n            i += 1\n        }\n        var p = \"\"\n        while (p.length < prefix.length) {\n            p += prefix[p.length]\n        }\n        var s = \"\"\n        while (s.length < suffix.length) {\n            s += suffix[s.length]\n        }\n        return p + s",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        for (i <- 0 until string.length) {\n            var postfix = string.substring(i)\n            var isPalindrome = postfix.equals(postfix.reverse())\n            if (isPalindrome && postfix.length > longestPalindromeLength) {\n                longestPalindrome = postfix\n                longestPalindromeLength = postfix.length\n            }\n        }\n        if (longestPalindromeLength == 0) {\n            return string\n        } else {\n            var prefix = string.substring(0, longestPalindromeLength)\n            return prefix + longestPalindrome + prefix.reverse()\n        }",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        for (i <- 0 until postfix.length) {\n            if (postfix[i].equals(postfix[postfix.length - 1 - i])) {\n                palindrome += postfix[i]\n            } else {\n                break\n            }\n        }\n        var prefix = \"\"\n        for (i <- 0 until i) {\n            if (postfix[i].equals(postfix[postfix.length - 1 - i])) {\n                prefix += postfix[i]\n            } else {\n                break\n            }\n        }\n        return prefix + palindrome",
    "        var longestPalindrome = \"\"\n        var longestPalindromePrefix = \"\"\n        var longestPalindromeSuffix = \"\"\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            var palindrome = string.substring(i, string.length)\n            if (palindrome.equals(palindrome.reverse())) {\n                if (palindrome.length > longestPalindrome.length) {\n                    longestPalindrome = palindrome\n                    longestPalindromePrefix = string.substring(0, i)\n                    longestPalindromeSuffix = string.substring(i, string.length)\n                }\n            }\n            i += 1\n        }\n        return longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix",
    "        var longestPalindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longestPalindrome.length) {\n                longestPalindrome = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.append(postfix.reverse())",
    "        var postfix = string.toLowerCase.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i] + postfix[j]\n            i = j + 1\n        }\n        return palindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome2(string : String) : String = {\n        var postfix = string.toLowerCase.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i] + postfix[j]\n            i = j + 1\n        }\n        return palindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome3(string : String",
    "        var prefix = \"\"\n        var suffix = \"\"\n        var i = 0\n        while (i < string.length) {\n            var c = string.charAt(i)\n            if (c == ' ') {\n                i += 1\n                continue\n            }\n            prefix += c\n            i += 1\n        }\n        i = string.length - 1\n        while (i >= 0) {\n            var c = string.charAt(i)\n            if (c == ' ') {\n                i -= 1\n                continue\n            }\n            suffix += c\n            i -= 1\n        }\n        if (suffix.length == 0) return prefix\n        var palindrome = prefix + suffix\n        return palindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        for (i <- 0 until postfix.length) {\n            if (postfix[i].equals(postfix[i + 1])) {\n                palindrome = palindrome + postfix[i]\n            } else {\n                break\n            }\n        }\n        return palindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\")\n        var postfixLength = postfix.length\n        var palindrome = \"\"\n        var palindromeLength = 0\n        var i = 0\n        while (i < postfixLength) {\n            var j = i\n            while (j < postfixLength && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            if (j - i > palindromeLength) {\n                palindrome = postfix[i] + postfix[j] + palindrome\n                palindromeLength = j - i\n            }\n            i = j + 1\n        }\n        if (palindromeLength == 0) {\n            return string\n        }\n        var prefix = string.substring(0, palindromeLength)\n        return prefix + palindrome + prefix.reverse",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            var palindrome = string.substring(i, i + 1)\n            if (palindrome.equals(palindrome.reverse())) {\n                if (palindromeLength(string, i) > longestPalindromeLength) {\n                    longestPalindrome = string.substring(i, i + 1)\n                    longestPalindromeLength = palindromeLength(string, i)\n                }\n            }\n            i += 1\n        }\n        return longestPalindrome + string.substring(i - 1, i)\n    }\n\n    def palindromeLength(string : String, i : Int) : Int = {\n        var j = i\n        var length = 0\n        while (j < string.length && string.charAt(j) == string.charAt(j - 1)) {\n            j += 1\n            length += 1\n        }\n        return length",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.append(postfix.reverse().takeWhile(x => x == postfix.last))",
    "        var longestPalindrome = \"\"\n        var longestPalindromePrefix = \"\"\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            var palindrome = string.substring(i, j + 1)\n            if (palindrome.equals(palindrome.reverse())) {\n                if (palindrome.length() > longestPalindrome.length()) {\n                    longestPalindrome = palindrome\n                    longestPalindromePrefix = string.substring(0, i)\n                }\n            }\n            j -= 1\n            i += 1\n        }\n        return longestPalindromePrefix + longestPalindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome2(string : String) : String = {\n        var longestPalindrome = \"\"\n        var longestPalindromePrefix = \"\"\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            var palindrome = string.substring(i, j + 1)\n            if (palindrome.equals(palindrome.reverse())) {\n                if (palindrome.length() > longestPalindrome.length()) {\n                    longestPalindrome = palindrome\n                    longestPalindromePrefix = string.substring(0, i)\n                }\n            }\n            j -= 1\n            i += 1\n        }\n        return longestPalindromePrefix + longestPalindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(p -> p.equals(\"\"))\n        var result = prefix.append(postfix.reverse())\n        return result",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        var result = prefix.append(postfix.reverse())\n        return result",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            palindrome = palindrome + postfix[i]\n            i = i + 1\n            if (isPalindrome(palindrome)) {\n                break\n            }\n        }\n        var prefix = string.toLowerCase.split(\"\")\n        var j = 0\n        while (j < i) {\n            prefix = prefix[j] + prefix[j + 1]\n            j = j + 2\n        }\n        return prefix + palindrome\n    }\n\n    def isPalindrome(string : String) : Boolean = {\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            if (string[i] != string[j]) {\n                return false\n            }\n            i = i + 1\n            j = j - 1\n        }\n        return true",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            palindrome += string[i:j]\n            i = j + 1\n        }\n        return palindrome + string",
    "        var longest = \"\"\n        var start = 0\n        var end = string.length() - 1\n        while(start < end) {\n            var palindrome = string.substring(start, end)\n            if(palindrome.equals(palindrome.reverse())) {\n                longest = palindrome\n                start = end\n                end = start\n            } else {\n                end -= 1\n            }\n        }\n        return longest",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            var j_ = string.length - 1\n            while (j < string.length && string[j] == string[j_]) {\n                j += 1\n                j_ -= 1\n            }\n            if (j - i > longestPalindromeLength) {\n                longestPalindrome = string[i:j]\n                longestPalindromeLength = j - i\n            }\n            i = j + 1\n        }\n        if (longestPalindromeLength == 0) {\n            return string\n        }\n        var palindrome = string[0:longestPalindromeLength]\n        var reverse = string[longestPalindromeLength:string.length]\n        return palindrome + reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prefix(postfix.length)\n        return string + palindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome2(string : String) : String = {\n        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prefix(postfix.length)\n        return string + palindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome3(string : String) : String = {\n        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prefix(postfix.length)\n        return string + palindrome\n    }\n\n    // Find the longest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    //",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longestPalindrome.length) {\n                longestPalindrome = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.append(postfix.last)",
    "        var longest = \"\"\n        var longest_postfix = \"\"\n        var longest_postfix_palindrome = \"\"\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            if (string[i].toLowerCase() == string[i]) {\n                j = i\n                while (j < string.length && string[j].toLowerCase() == string[j]) {\n                    j += 1\n                }\n                if (j - i > longest_postfix_palindrome.length) {\n                    longest_postfix_palindrome = string[i:j]\n                }\n                i = j\n            } else {\n                i += 1\n            }\n        }\n        if (longest_postfix_palindrome.length > longest.length) {\n            longest = longest_postfix_palindrome\n        }\n        return longest",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().toPrefix()\n        return string + palindrome",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            var palindrome : String = string[i:j]\n            if (palindrome.length() > longestPalindrome.length()) {\n                longestPalindrome = palindrome\n            }\n            i = j + 1\n        }\n        return longestPalindrome + string[i:]",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixLength = 0\n        var longestSuffixStart = 0\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            var jEnd = j\n            while (jEnd < string.length && string[jEnd] == string[j]) {\n                jEnd += 1\n            }\n            if (jEnd - j > longestSuffixLength) {\n                longest = string[i:jEnd]\n                longestSuffix = string[j:jEnd]\n                longestSuffixLength = jEnd - j\n                longestSuffixStart = i\n            }\n            i = jEnd\n        }\n        if (longestSuffixLength == 0) {\n            return string\n        }\n        var newString = string[longestSuffixStart:longestSuffixStart+longestSuffixLength] + longestSuffix[::-1]\n        return newString",
    "        if (string.length == 1) {\n            return string\n        }\n        var maxPalindrome : String = \"\"\n        for (var i = 0; i < string.length; i++) {\n            var palindrome : String = string.substring(i, string.length)\n            if (isPalindrome(palindrome)) {\n                maxPalindrome = palindrome\n            }\n        }\n        var maxPalindromePrefix : String = \"\"\n        for (var i = 0; i < maxPalindrome.length; i++) {\n            var palindromePrefix : String = maxPalindrome.substring(0, i + 1)\n            if (isPalindrome(palindromePrefix)) {\n                maxPalindromePrefix = palindromePrefix\n            }\n        }\n        return string + maxPalindromePrefix.reverse()\n    }\n\n    def isPalindrome(string : String) : Boolean = {\n        if (string.length == 1) {\n            return true\n        }\n        for (var i = 0; i < string.length / 2; i++) {\n            if (string[i] != string[string.length - 1 - i]) {\n                return false\n            }\n        }\n        return true",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.append(postfix.reverse().takeWhile(x => x == postfix.last))",
    "        var longestPalindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          var palindrome = \"\"\n          while (j < string.length && string[j] == string[j - i]) {\n            palindrome += string[j]\n            j += 1\n          }\n          if (palindrome.length > longestPalindrome.length) {\n            longestPalindrome = palindrome\n          }\n          i += 1\n        }\n        return longestPalindrome",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            var palindrome : String = string[i:j]\n            if (palindrome.length > longestPalindrome.length) {\n                longestPalindrome = palindrome\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prefix(postfix.length)\n        return string + palindrome",
    "        if (string.length() == 0) {\n            return string\n        }\n        var postfix = string.reverse().toString()\n        var prefix = string.substring(0, string.length() - postfix.length())\n        return prefix + postfix",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = string.substring(0, string.length - postfix.length)\n        return prefix + postfix",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.append(postfix.reverse())",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile{ it != \"\" }.reverse()\n        return prefix.append(postfix.takeWhile{ it != \"\" }).reverse().mkString(\"\")",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse().toString()\n        var prefix = string.reverse().substring(0, postfix.length)\n        return prefix + postfix",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixLength = 0\n        var longestSuffixStart = 0\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            if (j - i > longestSuffixLength) {\n                longestSuffix = string[i:j]\n                longestSuffixLength = j - i\n                longestSuffixStart = i\n            }\n            i = j\n        }\n        if (longestSuffixLength == 0) {\n            return string\n        }\n        var reverse = \"\"\n        var reverseStart = longestSuffixStart\n        for (var k = longestSuffixStart; k < longestSuffixStart + longestSuffixLength; k += 1) {\n            reverse += string[k]\n        }\n        return string + reverse",
    "        var postfix = string.reverse()\n        var prefix = string\n        while (postfix.length > prefix.length) {\n            var palindrome = prefix + postfix\n            if (palindrome.equals(palindrome.reverse())) {\n                return palindrome\n            }\n            postfix = postfix.substring(1)\n            prefix = prefix.substring(0, prefix.length - 1)\n        }\n        return string",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            if (j - i > palindrome.length) {\n                palindrome = postfix[i] + postfix[j] + palindrome\n            }\n            i = j + 1\n        }\n        return palindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i:j]\n            i = j + 1\n        }\n        return palindrome + string",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          while (j < string.length && string[j] == string[j]) {\n            j += 1\n          }\n          if (j - i > longestPalindrome.length) {\n            longestPalindrome = string[i:j]\n          }\n          i = j + 1\n        }\n        return longestPalindrome + string.reverse()",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            var c = string.charAt(i)\n            palindrome = palindrome + c\n            i += 1\n            j -= 1\n        }\n        var reverse = \"\"\n        while (i < j) {\n            var c = string.charAt(j)\n            reverse = reverse + c\n            j -= 1\n        }\n        return string + reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = string.substring(0, string.length - 1)\n        var result = prefix + postfix\n        return result",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            var palindrome = \"\"\n            var palindromeLength = 0\n            while (i < string.length && j < string.length && string[i] == string[j]) {\n                palindrome += string[i]\n                palindromeLength += 1\n                i += 1\n                j += 1\n            }\n            if (palindromeLength > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindromeLength\n            }\n            i += 1\n            j += 1\n        }\n        return longestPalindrome",
    "        var longestPalindrome = \"\"\n        var longestPalindromePrefix = \"\"\n        var longestPalindromeSuffix = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < string.length) {\n            var palindrome = string.substring(i, string.length - i)\n            if (palindrome.length() > longestPalindrome.length()) {\n                longestPalindrome = palindrome\n                longestPalindromePrefix = string.substring(0, i)\n                longestPalindromeSuffix = string.substring(string.length - i)\n            }\n            i = i + 1\n        }\n        return longestPalindromePrefix + longestPalindromeSuffix",
    "        var longest = \"\"\n        var longest_postfix = \"\"\n        var longest_postfix_palindrome = \"\"\n        var longest_postfix_palindrome_length = 0\n        var i = 0\n        while (i < string.length) {\n            var postfix = string[i:]\n            var palindrome = postfix.reverse()\n            if (palindrome.equals(postfix)) {\n                var postfix_length = postfix.length\n                if (postfix_length > longest_postfix_palindrome_length) {\n                    longest_postfix_palindrome = postfix\n                    longest_postfix_palindrome_length = postfix_length\n                }\n            }\n            i = i + 1\n        }\n        if (longest_postfix_palindrome_length > 0) {\n            var prefix = string[:longest_postfix_palindrome_length]\n            var result = prefix + longest_postfix_palindrome\n            return result\n        } else {\n            return string\n        }",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i] + postfix[j]\n            i = j + 1\n        }\n        return palindrome",
    "        var longest = \"\"\n        var start = 0\n        var end = string.length()\n        while (start < end) {\n            var mid = (start + end) / 2\n            var pal = string.substring(start, mid + 1).reverse()\n            if (pal.equals(string.substring(mid, end))) {\n                longest = string.substring(start, end)\n                start = mid + 1\n                end = start\n            } else {\n                end = mid\n            }\n        }\n        return longest",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.reverse().concat(postfix.last)",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixLength = 0\n        var longestSuffixIndex = 0\n        var i = 0\n        for (i = 0; i < string.length(); i++) {\n            var postfix = string.substring(i)\n            var postfixLength = postfix.length()\n            if (postfixLength > longestSuffixLength) {\n                longestSuffix = postfix\n                longestSuffixLength = postfixLength\n                longestSuffixIndex = i\n            }\n        }\n        var prefix = string.substring(0, longestSuffixIndex)\n        var prefixLength = prefix.length()\n        var prefixReverse = reverse(prefix)\n        var result = prefix + prefixReverse\n        return result\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var result = \"\"\n        for (i = 0; i < string.length(); i++) {\n            var c = string.charAt(i)\n            result = result + c\n        }\n        return result\n    }\n\n    // Return a string that is the reverse of a supplied string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverseString(string : String) : String = {\n        var result = \"\"\n        for (i = 0; i < string.length(); i++) {\n            var c = string.charAt(i)\n            result = result + c\n        }\n        return result\n    }\n\n    // Return a string that is the reverse of a supplied string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverseString2(string : String) : String = {\n        var result = \"\"\n        for (i = 0; i < string.length(); i++) {\n            var c = string.charAt(i)\n            result = result + c\n        }\n        return result\n    }\n\n    // Return a string that is the reverse of a supplied string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverseString3(string :",
    "        var longestPalindrome : String = \"\"\n        var palindrome : String = \"\"\n        var i : Int = 0\n        var j : Int = 0\n        while (i < string.length) {\n            if (string[i] == string[j]) {\n                palindrome = string[i] + palindrome\n                i = i + 1\n                j = j + 1\n            } else {\n                if (j - i > longestPalindrome.length()) {\n                    longestPalindrome = string[i:j]\n                }\n                i = i + 1\n            }\n        }\n        if (longestPalindrome.length() == 0) {\n            return string\n        } else {\n            return longestPalindrome + reverse(longestPalindrome)\n        }",
    "        var longestPalindrome = \"\"\n        var palindrome = \"\"\n        for (var i = 0; i < string.length(); i++) {\n            var char = string.charAt(i)\n            var isPalindrome = true\n            for (var j = 0; j < palindrome.length(); j++) {\n                if (palindrome.charAt(j) != char) {\n                    isPalindrome = false\n                    break\n                }\n            }\n            if (isPalindrome) {\n                palindrome += char\n            } else {\n                if (palindrome.length() > longestPalindrome.length()) {\n                    longestPalindrome = palindrome\n                }\n                palindrome = \"\"\n            }\n        }\n        if (palindrome.length() > longestPalindrome.length()) {\n            longestPalindrome = palindrome\n        }\n        return longestPalindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        var result = prefix.append(postfix.reverse())\n        return result",
    "        var longestPalindrome : String = \"\"\n        var maxLength : Int = 0\n        for (i <- 0 until string.length) {\n            var palindrome : String = string.substring(i, string.length)\n            if (palindrome.length > maxLength) {\n                maxLength = palindrome.length\n                longestPalindrome = palindrome\n            }\n        }\n        var reversed : String = longestPalindrome.reverse\n        var prefix : String = string.substring(0, maxLength - 1)\n        return prefix + reversed",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          while (j < string.length && string[j] == string[j + 1]) {\n            j += 1\n          }\n          if (j - i + 1 > longestPalindrome.length) {\n            longestPalindrome = string[i:j + 1]\n          }\n          i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = string.substring(0, string.length - 1)\n        var palindrome = prefix + postfix\n        return palindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        for (i <- 0 until string.length) {\n            var palindrome : String = string.substring(i, string.length)\n            if (palindrome.length > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindrome.length\n            }\n        }\n        var palindrome : String = string.substring(0, longestPalindromeLength)\n        var reverse : String = \"\"\n        for (i <- 0 until palindrome.length) {\n            reverse = reverse + palindrome[palindrome.length - 1 - i]\n        }\n        return string + reverse",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixLength = 0\n        var longestSuffixStart = 0\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            var isPalindrome = true\n            while (j < string.length && isPalindrome) {\n                isPalindrome = string[j] == string[j + 1]\n                j += 1\n            }\n            if (j - i > longestSuffixLength) {\n                longest = string[i:j]\n                longestSuffix = string[i:j]\n                longestSuffixLength = j - i\n                longestSuffixStart = i\n            }\n            i = j + 1\n        }\n        var newString = string\n        if (longestSuffixLength > 0) {\n            newString = string[:longestSuffixStart] + string[longestSuffixStart + longestSuffixLength :]\n            newString = newString + reverse(string[longestSuffixStart : longestSuffixStart + longestSuffixLength])\n        }\n        return newString\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var reversed = \"\"\n        var i = 0\n        while (i < string.length) {\n            reversed = string[i] + reversed\n            i += 1\n        }\n        return reversed",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            if (j - i > longestPalindrome.length) {\n                longestPalindrome = string[i:j]\n            }\n            i = j\n        }\n        return longestPalindrome + string[i:string.length]",
    "        var longest = \"\"\n        var longestPrefix = \"\"\n        var longestSuffix = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            if (j - i > longest.length) {\n                longest = string[i:j]\n                longestPrefix = string[:i]\n                longestSuffix = string[j:]\n            }\n            i = j\n        }\n        return longestPrefix + longestSuffix.reverse",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longestPalindromeLength) {\n                longestPalindrome = string[i:j + 1]\n                longestPalindromeLength = j - i + 1\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        for (var i = 0; i < string.length(); i++) {\n            var prefix : String = string.substring(0, i + 1)\n            var postfix : String = string.substring(i + 1)\n            var palindrome : String = prefix + postfix\n            if (palindrome.equals(palindrome.reverse())) {\n                if (palindrome.length() > longestPalindromeLength) {\n                    longestPalindrome = palindrome\n                    longestPalindromeLength = palindrome.length()\n                }\n            }\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i]\n            i = j + 1\n        }\n        return string + reverse(palindrome)\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var result = \"\"\n        for (i <- 0 to string.length - 1) {\n            result += string[i]\n        }\n        return result",
    "        var prefix = \"\"\n        var suffix = \"\"\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            if (string[i].equals(string[j])) {\n                prefix = string[i] + prefix\n                i += 1\n                j -= 1\n            } else {\n                break\n            }\n        }\n        while (i < j) {\n            if (string[i].equals(string[j])) {\n                suffix = string[j] + suffix\n                i += 1\n                j -= 1\n            } else {\n                break\n            }\n        }\n        return prefix + suffix",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j].equals(postfix[j].reverse())) {\n                j += 1\n            }\n            if (j - i > palindrome.length()) {\n                palindrome = postfix[i].concat(postfix[j - 1].reverse())\n            }\n            i = j\n        }\n        return palindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome : String = \"\"\n        var longestPalindromeIndex : Int = 0\n        var i : Int = 0\n        var j : Int = string.length - 1\n        while (i < j) {\n            if (string[i].equals(string[j])) {\n                longestPalindrome = string[i] + longestPalindrome\n                longestPalindromeIndex = i\n                i += 1\n                j -= 1\n            } else {\n                break\n            }\n        }\n        if (longestPalindromeIndex == 0) {\n            return string\n        }\n        var reverse : String = \"\"\n        var reverseIndex : Int = 0\n        while (longestPalindromeIndex > 0) {\n            reverse = string[longestPalindromeIndex] + reverse\n            reverseIndex = longestPalindromeIndex\n            longestPalindromeIndex -= 1\n        }\n        return string[reverseIndex] + reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        for (i <- 0 to string.length - 1) {\n            var palindrome : String = string.substring(i, string.length - i)\n            if (palindrome.length > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindrome.length\n            }\n        }\n        var reverse : String = \"\"\n        for (i <- 0 to longestPalindromeLength - 1) {\n            reverse = reverse + string[longestPalindromeLength - i - 1]\n        }\n        return string + reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        for (var i = 0; i < string.length; i++) {\n            var palindrome : String = string.substring(i, string.length)\n            if (palindrome.length > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindrome.length\n            }\n        }\n        var palindrome : String = string.substring(0, longestPalindromeLength)\n        var reverse : String = \"\"\n        for (var i = 0; i < palindrome.length; i++) {\n            reverse = reverse + palindrome[palindrome.length - 1 - i]\n        }\n        return string + reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var max = string.length\n        var i = 0\n        while (i < max) {\n            var j = i\n            while (j < max && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > palindrome.length) {\n                palindrome = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return string + reverse(palindrome)\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var reversed = \"\"\n        for (var i = string.length - 1; i >= 0; i--) {\n            reversed += string[i]\n        }\n        return reversed",
    "        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        var i : Int = 0\n        var j : Int = 0\n        while (i < string.length) {\n            var palindrome : String = \"\"\n            while (i < string.length && j < string.length && string[i] == string[j]) {\n                palindrome = palindrome + string[i]\n                i = i + 1\n                j = j + 1\n            }\n            if (palindrome.length > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindrome.length\n            }\n            i = i + 1\n        }\n        return longestPalindrome",
    "        var longestPalindrome : String = \"\"\n        var longestPalindromeLength : Int = 0\n        var i : Int = 0\n        var j : Int = 0\n        while (i < string.length) {\n            var palindrome : String = \"\"\n            while (i < string.length && j < string.length && string[i] == string[j]) {\n                palindrome = palindrome + string[i]\n                i = i + 1\n                j = j + 1\n            }\n            if (palindrome.length > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindrome.length\n            }\n            i = i + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase().split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i]\n            i = j + 1\n        }\n        var prefix = \"\"\n        while (i < postfix.length) {\n            prefix += postfix[i]\n            i += 1\n        }\n        prefix = prefix.reverse()\n        return prefix + palindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        for (i <- 0 until postfix.length) {\n            var prefix = postfix[i]\n            var suffix = postfix[postfix.length - 1 - i]\n            if (isPalindrome(prefix) && isPalindrome(suffix)) {\n                palindrome = prefix + suffix\n                break\n            }\n        }\n        return palindrome\n    }\n\n    // Check if a string is a palindrome.\n    // >>> isPalindrome(\"\")\n    // true\n    // >>> isPalindrome(\"cat\")\n    // true\n    // >>> isPalindrome(\"cata\")\n    // false\n    def isPalindrome(string : String) : Boolean = {\n        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        for (i <- 0 until postfix.length) {\n            var prefix = postfix[i]\n            var suffix = postfix[postfix.length - 1 - i]\n            if (prefix != suffix) {\n                return false\n            }\n        }\n        return true",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i > longestPalindrome.length) {\n                longestPalindrome = string[i:j]\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.split(\"\")\n        var palindrome = \"\"\n        for (var i = 0; i < postfix.length; i++) {\n            var palindromePrefix = \"\"\n            for (var j = 0; j < postfix.length; j++) {\n                if (j < i) {\n                    palindromePrefix += postfix[j]\n                } else {\n                    palindromePrefix += postfix[j].reverse()\n                }\n            }\n            if (palindromePrefix.length > palindrome.length) {\n                palindrome = palindromePrefix\n            }\n        }\n        return string + palindrome",
    "        var postfix = string.reverse()\n        var prefix = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            if (j - i > 1) {\n                prefix += postfix[i : j]\n            }\n            i = j + 1\n        }\n        return prefix + postfix",
    "        var longest = \"\"\n        var longestPostfix = \"\"\n        var longestPrefix = \"\"\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            if (string.charAt(i) == string.charAt(j)) {\n                j += 1\n                if (j == string.length()) {\n                    longestPostfix = string.substring(i)\n                    longestPrefix = string.substring(0, i)\n                    break\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (longestPrefix.length() > longest.length()) {\n            longest = longestPrefix + longestPostfix\n        }\n        return longest",
    "        var longest = \"\"\n        var i = 0\n        while (i < string.length) {\n            var palindrome = string.substring(i, string.length)\n            if (palindrome.equals(palindrome.reverse())) {\n                longest = palindrome\n                i = string.length\n            } else {\n                i += 1\n            }\n        }\n        return longest",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x.equals(x.reverse()))\n        return prefix.reverse().mkString(\"\") + postfix.mkString(\"\")",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(p => p.equals(\"\"))\n        var result = prefix.append(postfix.reverse())\n        return result",
    "        var longest = \"\"\n        var longestPrefix = \"\"\n        var longestSuffix = \"\"\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            var postfix = string.substring(i)\n            if (postfix.length > longest.length) {\n                longest = postfix\n                longestPrefix = string.substring(0, i)\n                longestSuffix = string.substring(i)\n            }\n            i = i + 1\n        }\n        return longestPrefix + longestSuffix.reverse()",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j - i]) {\n                j += 1\n            }\n            if (j - i > longestPalindromeLength) {\n                longestPalindrome = string[i:j]\n                longestPalindromeLength = j - i\n            }\n            i = j\n        }\n        if (longestPalindromeLength == 0) {\n            return string\n        } else {\n            return string + reverse(string[0:longestPalindromeLength])\n        }\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var reversedString = \"\"\n        for (i <- 0 to string.length - 1) {\n            reversedString = string[i] + reversedString\n        }\n        return reversedString",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile{ it != \"\" }\n        var result = prefix.append(postfix.reverse())\n        return result",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x == postfix.last)\n        return prefix.append(postfix.last)",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = string\n        var i = 0\n        while (i < postfix.length && postfix[i] == prefix[i]) {\n            i += 1\n        }\n        return prefix.substring(0, i) + postfix.substring(i)",
    "        if (string.length == 1) {\n            return string\n        }\n        var postfix = string.substring(1, string.length)\n        var palindrome = postfix.reverse()\n        var prefix = string.substring(0, string.length - postfix.length)\n        return prefix + palindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var palindromePrefix = \"\"\n        var palindromeSuffix = \"\"\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            if (string[i].equals(string[j])) {\n                palindromePrefix = string[i] + palindromePrefix\n                palindromeSuffix = string[j] + palindromeSuffix\n                i += 1\n                j -= 1\n            } else {\n                break\n            }\n        }\n        if (palindromePrefix.length == 0) {\n            palindrome = string\n        } else {\n            palindrome = string[0:i] + palindromePrefix + palindromeSuffix\n        }\n        return palindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x.equals(x.reverse()))\n        return string + prefix.reverse().mkString(\"\")",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x.equals(x.reverse()))\n        return prefix.reverse().mkString(string)",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixLength = 0\n        for (var i = 0; i < string.length(); i++) {\n            var postfix = string.substring(i)\n            if (postfix.length() > longestSuffixLength && isPalindrome(postfix)) {\n                longest = postfix\n                longestSuffix = string.substring(0, i)\n                longestSuffixLength = postfix.length()\n            }\n        }\n        return longestSuffix + longest.reverse()\n    }\n\n    // Check if a string is a palindrome.\n    // >>> isPalindrome(\"\")\n    // true\n    // >>> isPalindrome(\"cat\")\n    // true\n    // >>> isPalindrome(\"cata\")\n    // false\n    def isPalindrome(string : String) : Boolean = {\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) return false\n            i += 1\n            j -= 1\n        }\n        return true",
    "        var longestPalindrome = \"\"\n        var palindrome = \"\"\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            if (string[i] == string[j]) {\n                palindrome += string[i]\n                i += 1\n                j += 1\n            } else {\n                if (j - i > longestPalindrome.length()) {\n                    longestPalindrome = string[i:j]\n                }\n                i += 1\n            }\n        }\n        if (longestPalindrome.length() == 0) {\n            return string\n        } else {\n            return longestPalindrome + reverse(longestPalindrome)\n        }\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var reversed = \"\"\n        var i = 0\n        var j = string.length() - 1\n        while (i < j) {\n            reversed += string[i]\n            i += 1\n        }\n        reversed += string[j]\n        return reversed",
    "        var longestPalindrome = \"\"\n        var maxLength = 0\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          while (j < string.length && string[j] == string[j + 1]) {\n            j += 1\n          }\n          if (j - i + 1 > maxLength) {\n            maxLength = j - i + 1\n            longestPalindrome = string[i:j + 1]\n          }\n          i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return \"\"\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prepend(postfix.take(1))\n        return palindrome",
    "        if (string.length() == 0) {\n            return string\n        }\n        var maxPalindrome = \"\"\n        var maxPalindromeIndex = 0\n        for (var i = 0; i < string.length(); i++) {\n            var palindrome = string.substring(i, string.length() - i)\n            if (palindrome.length() > maxPalindrome.length()) {\n                maxPalindrome = palindrome\n                maxPalindromeIndex = i\n            }\n        }\n        var reverse = string.substring(0, maxPalindromeIndex)\n        reverse = reverse.reverse()\n        return string + reverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toPostfix()\n        var palindrome = postfix.reverse().prefix(postfix.length)\n        return string + palindrome",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            var palindrome = string[i:j]\n            if (palindrome.length > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindrome.length\n            }\n            i = j + 1\n        }\n        return longestPalindrome + string[longestPalindromeLength : string.length]",
    "        var prefix = \"\"\n        var suffix = \"\"\n        var length = string.length\n        for (var i = 0; i < length; i++) {\n            var c = string.charAt(i)\n            if (c == ' ') {\n                prefix += c\n            } else {\n                suffix += c\n            }\n        }\n        var palindrome = prefix + suffix\n        var palindromeLength = palindrome.length\n        if (palindromeLength == 1) {\n            return palindrome\n        }\n        var palindromePrefix = \"\"\n        var palindromeSuffix = \"\"\n        for (var i = 0; i < palindromeLength; i++) {\n            var c = palindrome.charAt(i)\n            if (c == ' ') {\n                palindromePrefix += c\n            } else {\n                palindromeSuffix += c\n            }\n        }\n        var palindromePrefixLength = palindromePrefix.length\n        if (palindromePrefixLength == 1) {\n            return palindrome\n        }\n        var palindromeSuffixLength = palindromeSuffix.length\n        if (palindromeSuffixLength == 1) {\n            return palindrome\n        }\n        var palindromePrefixReverse = \"\"\n        var palindromeSuffixReverse = \"\"\n        for (var i = 0; i < palindromePrefixLength; i++) {\n            var c = palindromePrefix.charAt(palindromePrefixLength - i - 1)\n            palindromePrefixReverse += c\n        }\n        for (var i = 0; i < palindromeSuffixLength; i++) {\n            var c = palindromeSuffix.charAt(i)\n            palindromeSuffixReverse += c\n        }\n        var palindromeReverse = palindromePrefixReverse + palindromeSuffixReverse\n        return palindromeReverse",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var maxLength = string.length\n        var maxPalindrome = \"\"\n        var maxPalindromeLength = 0\n        for (var i = 0; i < string.length; i++) {\n            var postfix = string.substring(i)\n            var postfixLength = postfix.length\n            if (postfixLength > maxPalindromeLength) {\n                maxPalindrome = postfix\n                maxPalindromeLength = postfixLength\n            }\n            var prefix = string.substring(0, i)\n            var prefixLength = prefix.length\n            if (prefixLength > maxPalindromeLength) {\n                maxPalindrome = prefix + postfix\n                maxPalindromeLength = prefixLength + postfixLength\n            }\n        }\n        return maxPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            if (string[i] == string[j]) {\n                palindrome = string[i] + palindrome\n                i += 1\n                j -= 1\n            } else {\n                break\n            }\n        }\n        if (i == j) {\n            palindrome = string[i] + palindrome\n        }\n        return makePalindrome(string[i + 1 : string.length]) + palindrome",
    "        var longestPalindrome : String = \"\"\n        var maxLength : Int = 0\n        for (var i : Int = 0; i < string.length; i++) {\n            var postfix : String = string.substring(i)\n            var isPalindrome : Boolean = postfix.equals(postfix.reverse())\n            if (isPalindrome && postfix.length() > maxLength) {\n                maxLength = postfix.length()\n                longestPalindrome = postfix\n            }\n        }\n        if (maxLength > 0) {\n            var prefix : String = string.substring(0, maxLength)\n            var reversedPrefix : String = prefix.reverse()\n            return prefix + reversedPrefix\n        } else {\n            return \"\"\n        }",
    "        var longest = \"\"\n        var longest_postfix = \"\"\n        var longest_postfix_reverse = \"\"\n        var i = 0\n        while (i < string.length) {\n            var postfix = string.substring(i)\n            var postfix_reverse = postfix.reverse()\n            if (postfix_reverse.equals(postfix)) {\n                if (postfix.length > longest.length) {\n                    longest = postfix\n                    longest_postfix = postfix\n                    longest_postfix_reverse = postfix_reverse\n                }\n            }\n            i = i + 1\n        }\n        if (longest_postfix_reverse.equals(longest_postfix)) {\n            return string + longest_postfix_reverse\n        } else {\n            return \"\"\n        }",
    "        if (string.length == 0) {\n            return string\n        }\n        var maxPalindrome = \"\"\n        var maxPalindromeLength = 0\n        for (var i = 0; i < string.length; i++) {\n            var palindrome = string.substring(i, string.length)\n            if (isPalindrome(palindrome)) {\n                if (palindrome.length > maxPalindromeLength) {\n                    maxPalindrome = palindrome\n                    maxPalindromeLength = palindrome.length\n                }\n            }\n        }\n        var newString = string + maxPalindrome[0:maxPalindromeLength]\n        return newString\n    }\n\n    def isPalindrome(string : String) : Boolean = {\n        if (string.length == 0) {\n            return true\n        }\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            if (string[i] != string[j]) {\n                return false\n            }\n            i += 1\n            j -= 1\n        }\n        return true",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        while (i < string.length) {\n          var j = i\n          while (j < string.length && string[j] == string[j + 1]) {\n            j += 1\n          }\n          if (j - i + 1 > longestPalindromeLength) {\n            longestPalindrome = string[i:j + 1]\n            longestPalindromeLength = j - i + 1\n          }\n          i = j + 1\n        }\n        return longestPalindrome",
    "        var postfix = string.toLowerCase.split(\"\").reverse()\n        var prefix = postfix.takeWhile(x => x.equals(x.reverse()))\n        return string + prefix.reverse().mkString(\"\")",
    "        if (string.length == 0) {\n            return \"\"\n        }\n        var maxPalindrome = \"\"\n        var maxPalindromeIndex = 0\n        var maxPalindromeLength = 0\n        for (var i = 0; i < string.length; i++) {\n            var palindrome = string.substring(i, string.length)\n            if (isPalindrome(palindrome)) {\n                if (palindrome.length > maxPalindromeLength) {\n                    maxPalindrome = palindrome\n                    maxPalindromeIndex = i\n                    maxPalindromeLength = palindrome.length\n                }\n            }\n        }\n        var reversed = string.substring(0, maxPalindromeIndex) + string.substring(maxPalindromeIndex + 1, string.length)\n        return reversed\n    }\n\n    // Check if a string is a palindrome.\n    // >>> isPalindrome(\"\")\n    // true\n    // >>> isPalindrome(\"cat\")\n    // true\n    // >>> isPalindrome(\"cata\")\n    // false\n    def isPalindrome(string : String) : Boolean = {\n        if (string.length == 0) {\n            return true\n        }\n        var i = 0\n        var j = string.length - 1\n        while (i < j) {\n            if (string[i] != string[j]) {\n                return false\n            }\n            i += 1\n            j -= 1\n        }\n        return true",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse().toString()\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i:j]\n            i = j + 1\n        }\n        return palindrome + string",
    "        var longestPalindrome : String = \"\"\n        var maxLength : Int = 0\n        for (i <- 0 until string.length) {\n            var palindrome : String = string.substring(i, string.length - i)\n            if (palindrome.length > maxLength) {\n                maxLength = palindrome.length\n                longestPalindrome = palindrome\n            }\n        }\n        return longestPalindrome + string.substring(0, string.length - maxLength)",
    "        var longestPalindrome = \"\"\n        var longestPalindromeLength = 0\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            var palindrome = \"\"\n            while (i < string.length && j < string.length && string[i] == string[j]) {\n                palindrome = string[i] + palindrome\n                i += 1\n                j += 1\n            }\n            if (palindrome.length > longestPalindromeLength) {\n                longestPalindrome = palindrome\n                longestPalindromeLength = palindrome.length\n            }\n            i += 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var longestPalindrome = \"\"\n        var longestPalindromeIndex = 0\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            var palindrome = \"\"\n            while (j < string.length && string[j] == string[i]) {\n                palindrome = palindrome + string[j]\n                j = j + 1\n            }\n            if (palindrome.length > longestPalindrome.length) {\n                longestPalindrome = palindrome\n                longestPalindromeIndex = i\n            }\n            i = i + 1\n        }\n        var newString = string\n        var newStringIndex = longestPalindromeIndex\n        while (newStringIndex < string.length) {\n            newString = newString + string[newStringIndex]\n            newStringIndex = newStringIndex + 1\n        }\n        newString = newString + string[newStringIndex]\n        return newString",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase.split(\"\").reverse()\n        var palindrome = \"\"\n        for (i <- 0 until postfix.length) {\n            palindrome = postfix[i] + palindrome\n            if (isPalindrome(palindrome)) {\n                break\n            }\n        }\n        var prefix = string.toLowerCase.split(\"\")\n        for (i <- 0 until prefix.length - 1) {\n            palindrome = prefix[i] + palindrome\n            if (isPalindrome(palindrome)) {\n                break\n            }\n        }\n        return palindrome\n    }\n\n    def isPalindrome(string : String) : Boolean = {\n        if (string.length == 0) {\n            return true\n        }\n        var postfix = string.toLowerCase.split(\"\").reverse()\n        return postfix.equals(string.toLowerCase)",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixLength = 0\n        var longestSuffixIndex = 0\n        var i = 0\n        var j = 0\n        while (i < string.length) {\n            var suffix = string.substring(i)\n            var suffixLength = suffix.length\n            if (suffixLength > longestSuffixLength) {\n                longest = string.substring(i, i + longestSuffixLength)\n                longestSuffix = string.substring(i, i + longestSuffixLength)\n                longestSuffixLength = suffixLength\n                longestSuffixIndex = i\n            }\n            i = i + suffixLength\n        }\n        if (longestSuffixLength == 0) {\n            return string\n        }\n        var prefix = string.substring(0, longestSuffixIndex)\n        var prefixLength = prefix.length\n        var prefixIndex = 0\n        while (prefixIndex < prefixLength) {\n            var suffix = string.substring(prefixIndex + longestSuffixIndex, prefixIndex + longestSuffixIndex + longestSuffixLength)\n            if (suffix.equals(longestSuffix)) {\n                return prefix + longestSuffix\n            }\n            prefixIndex = prefixIndex + 1\n        }\n        return prefix + longestSuffix",
    "        var longest = \"\"\n        var longestSuffix = \"\"\n        var longestSuffixIndex = 0\n        var i = 0\n        while (i < string.length) {\n            var postfix = string.substring(i)\n            if (postfix.equals(postfix.reverse())) {\n                if (postfix.length > longest.length) {\n                    longest = postfix\n                    longestSuffix = string.substring(i)\n                    longestSuffixIndex = i\n                }\n            }\n            i += 1\n        }\n        if (longestSuffix.length == 0) {\n            return string\n        }\n        var prefix = string.substring(0, longestSuffixIndex)\n        return prefix + longestSuffix.reverse()",
    "        var postfix = string.toLowerCase.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j] == postfix[j + 1]) {\n                j += 1\n            }\n            palindrome += postfix[i]\n            i = j + 1\n        }\n        return palindrome",
    "        var longestPalindrome = \"\"\n        var palindrome = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j]) {\n                j += 1\n            }\n            if (j - i > longestPalindrome.length) {\n                longestPalindrome = string[i:j]\n            }\n            i = j\n        }\n        if (longestPalindrome.length == 0) {\n            return string\n        }\n        var j = string.length - 1\n        while (j >= 0 && string[j] == string[j]) {\n            j -= 1\n        }\n        return string[j + 1:string.length] + reverse(string[0:j + 1])\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var result = \"\"\n        for (var i = string.length - 1; i >= 0; i -= 1) {\n            result += string[i]\n        }\n        return result",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.split(\"\")\n        var palindrome = \"\"\n        var i = 0\n        while (i < postfix.length) {\n            var j = i\n            while (j < postfix.length && postfix[j].equals(postfix[j].reverse())) {\n                j += 1\n            }\n            palindrome += postfix[i] + postfix[j]\n            i = j + 1\n        }\n        return palindrome",
    "        var longestPalindrome : String = \"\"\n        var i = 0\n        while (i < string.length) {\n            var j = i\n            while (j < string.length && string[j] == string[j + 1]) {\n                j += 1\n            }\n            if (j - i + 1 > longestPalindrome.length) {\n                longestPalindrome = string[i:j + 1]\n            }\n            i = j + 1\n        }\n        return longestPalindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var postfix = \"\"\n        var prefix = \"\"\n        var i = 0\n        while (i < string.length) {\n            postfix = postfix + string[i]\n            i = i + 1\n        }\n        while (postfix.length > 0) {\n            if (postfix.length > 1 && postfix.charAt(0) == postfix.charAt(postfix.length - 1)) {\n                palindrome = palindrome + postfix.charAt(0)\n                postfix = postfix.substring(1)\n            } else {\n                break\n            }\n        }\n        if (palindrome.length == 0) {\n            palindrome = string\n        }\n        while (palindrome.length > 0) {\n            if (palindrome.length > 1 && palindrome.charAt(0) == palindrome.charAt(palindrome.length - 1)) {\n                prefix = prefix + palindrome.charAt(0)\n                palindrome = palindrome.substring(1)\n            } else {\n                break\n            }\n        }\n        return prefix + palindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var palindrome = \"\"\n        var maxLength = 0\n        for (var i = 0; i < string.length; i++) {\n            var postfix = string.substring(i)\n            if (postfix.length > maxLength) {\n                maxLength = postfix.length\n                palindrome = postfix\n            }\n        }\n        var prefix = string.substring(0, maxLength)\n        return prefix + reverse(palindrome)\n    }\n\n    // Reverse a string.\n    // >>> reverse(\"cat\")\n    // \"tac\"\n    def reverse(string : String) : String = {\n        var reversed = \"\"\n        for (var i = string.length - 1; i >= 0; i--) {\n            reversed += string[i]\n        }\n        return reversed",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.reverse()\n        var prefix = string.substring(0, string.length - 1)\n        var palindrome = prefix + postfix\n        return palindrome",
    "        if (string.length == 0) {\n            return string\n        }\n        var postfix = string.toLowerCase().split(\"\")\n        var palindrome = \"\"\n        var maxLength = 0\n        for (var i = 0; i < postfix.length; i++) {\n            var palindromePrefix = \"\"\n            var palindromeSuffix = \"\"\n            var palindromeLength = 0\n            for (var j = 0; j < postfix.length; j++) {\n                if (j < i) {\n                    palindromePrefix += postfix[j]\n                } else if (j > i) {\n                    palindromeSuffix += postfix[j]\n                } else {\n                    palindromeLength += 1\n                }\n            }\n            if (palindromeLength > maxLength) {\n                maxLength = palindromeLength\n                palindrome = palindromePrefix + palindromeSuffix\n            }\n        }\n        return palindrome",
    "        var longest = \"\"\n        var longest_index = -1\n        var i = 0\n        while (i < string.length) {\n            var postfix = string.substring(i)\n            var is_palindrome = postfix.equals(postfix.reverse())\n            if (is_palindrome && postfix.length() > longest.length()) {\n                longest = postfix\n                longest_index = i\n            }\n            i += 1\n        }\n        if (longest_index == -1) return string\n        var prefix = string.substring(0, longest_index)\n        return prefix + longest.reverse()"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}