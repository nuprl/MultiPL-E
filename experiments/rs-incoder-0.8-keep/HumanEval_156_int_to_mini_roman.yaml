name: HumanEval_156_int_to_mini_roman
language: rs
prompt: "/// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  /// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n/// Examples:\n\
  /// >>> int_to_mini_roman(19) == 'xix'\n/// >>> int_to_mini_roman(152) == 'clii'\n\
  /// >>> int_to_mini_roman(426) == 'cdxxvi'\nfn int_to_mini_roman(number: isize)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
  \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
  ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
  \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
  ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
  \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"));\n\
  \    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
  \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
  ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
  \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"m\"\
  ));\n}\n"
completions: []
stop_tokens:
- "\n}"
