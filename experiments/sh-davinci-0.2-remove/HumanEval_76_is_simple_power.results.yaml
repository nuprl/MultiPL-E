language: sh
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [[ $result -eq $(echo \"scale=0; $n**$result\" | bc) ]];\
    \ then\n    echo true\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  while (( i < x\
    \ )); do\n    (( i *= n ))\n    if (( i == x )); then\n      echo true\n     \
    \ return\n    fi\n  done\n  echo false\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local int=$(echo \"$result\" | cut -d. -f1)\n  local float=$(echo\
    \ \"$result\" | cut -d. -f2)\n  if [ $float -eq 0 ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptyzn2zbj.sh: line 15: [: 87500000000000000000: integer expression
    expected

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n  echo\
    \ false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local m=$(echo \"scale=0; l($x)/l($n)\"\
    \ | bc -l)\n  [ $m -eq $(echo \"scale=0; $n^$m\" | bc -l) ] && echo \"true\" ||\
    \ echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=2;\
    \ $x/$n\" | bc)\n  local int_result=$(echo \"scale=0; $result\" | bc)\n  if [\
    \ $result -eq $int_result ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplmreo5g9.sh: line 14: [: 8.00: integer expression expected

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=0\n\
    \  while (( $result < $x )); do\n    (( result = n ** i ))\n    (( i++ ))\n  done\n\
    \  if (( $result == $x )); then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while (( result < x )); do\n    result=$(( n ** i ))\n    (( i++ ))\n  done\n\
    \  (( result == x )) && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n\
    \    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n    local x=$1\n    local n=$2\n    local result=$(echo \"\
    scale=0; $x/$n\" | bc)\n    if [ \"$result\" -eq \"$result\" ] 2>/dev/null\n \
    \   then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local int=$(echo \"scale=0;\
    \ l($x)/l($n)\" | bc -l)\n  local power=$(echo \"$n^$int\" | bc -l)\n  [[ $power\
    \ -eq $x ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$(( $n ** $i ))\n    if [ $result\
    \ -eq $x ]; then\n      echo true\n      return\n    fi\n    i=$(( $i + 1 ))\n\
    \  done\n  echo false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [[ $result -eq $n ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x\
    \ / $n\")\n  if [[ $result -eq $(bc <<< \"scale=0; $result\") ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local int=$(echo \"scale=0;\
    \ l($x)/l($n)\" | bc -l)\n  local result=$(echo \"$n^$int\" | bc -l)\n  if [[\
    \ $result -eq $x ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=20): Divide by zero

    (standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq $2 ]]; then\n    echo \"true\"\n  elif [[\
    \ $1 -eq 1 ]]; then\n    echo \"false\"\n  elif [[ $1%$2 -eq 0 ]]; then\n    is_simple_power\
    \ $(( $1/$2 )) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  echo $result\n  if [ $result -eq $(echo \"scale=0; $n^$result\"\
    \ | bc) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ \"$result\" = \"$n\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate\
    \ \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 2
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4yw6utud.sh: line 180: syntax error near unexpected token `}''

    /tmp/tmp4yw6utud.sh: line 180: `}''

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x^(1/$n)\"\
    )\n  if [[ $result =~ ^[0-9]+$ ]]; then\n    echo true\n  else\n    echo false\n\
    \  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x^(1/$n)\"\
    )\n  if [[ \"$result\" =~ ^[0-9]+$ ]]; then\n    echo true\n  else\n    echo false\n\
    \  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x/$n\"\
    )\n  local result2=$(bc <<< \"$result/$n\")\n  if [ \"$result\" -eq \"$result2\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 %\
    \ $2 )) -eq 0 ]; then\n      is_simple_power $(( $1 / $2 )) $2\n    else\n   \
    \   echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 0 ]]; then\n    echo false\n    return\n \
    \ fi\n  if [[ $1 -eq 1 ]]; then\n    echo true\n    return\n  fi\n  if [[ $1 -eq\
    \ $2 ]]; then\n    echo true\n    return\n  fi\n  if [[ $1 -lt $2 ]]; then\n \
    \   echo false\n    return\n  fi\n  local result=$(echo \"$1/$2\" | bc -l)\n \
    \ if [[ $result -eq $(echo \"$result%1\" | bc -l) ]]; then\n    is_simple_power\
    \ $result $2\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaw6cek9y.sh: line 27: [[: 8.00000000000000000000: syntax error:
    invalid arithmetic operator (error token is ".00000000000000000000")

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -le $x ]; do\n    if [ $result -eq $x ]; then\n      echo \"\
    true\"\n      return\n    fi\n    ((i++))\n    result=$((n**i))\n  done\n  echo\
    \ \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local int=$(echo \"scale=0;\
    \ l($x)/l($n)\" | bc -l)\n  if [[ $int == 0 ]]; then\n    return 1\n  fi\n  local\
    \ result=$(echo \"$n^$int\" | bc -l)\n  if [[ $result == $x ]]; then\n    return\
    \ 0\n  fi\n  return 1\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=20): Divide by zero

    (standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=0\n\
    \  while [[ $result -lt $x ]]; do\n    result=$((n**i))\n    if [[ $result -eq\
    \ $x ]]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 0 ]; then\n    echo \"false\"\n    return\n\
    \  fi\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n    return\n  fi\n  if [ $1\
    \ -eq $2 ]; then\n    echo \"true\"\n    return\n  fi\n  if [ $1 -lt $2 ]; then\n\
    \    echo \"false\"\n    return\n  fi\n  is_simple_power $(($1/$2)) $2\n}\n\n\
    candidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 2
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  # $1 is an integer\n  # $2 is\
    \ an integer\n  # return true or false\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpscwft2xy.sh: line 175: syntax error near unexpected token `}''

    /tmp/tmpscwft2xy.sh: line 175: `}''

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$(( $n ** $i ))\n    if [ $result\
    \ -eq $x ]; then\n      echo \"true\"\n      return\n    fi\n    i=$(( $i + 1\
    \ ))\n  done\n  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ 0 ]; then\n    echo \"false\"\n  elif [ $1 -eq $2 ]; then\n    echo \"true\"\
    \n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
    \ $(( $1 / $2 )) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate\
    \ \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
    \ $(($1/$2)) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n    return\n\
    \  fi\n  if [[ $1 -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[\
    \ $1 -lt $2 ]]; then\n    echo \"false\"\n    return\n  fi\n  local result=$(($1/$2))\n\
    \  if [[ $result -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  is_simple_power\
    \ $result $2\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n    return\n\
    \  fi\n  if [[ $1 -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[\
    \ $1 -lt $2 ]]; then\n    echo \"false\"\n    return\n  fi\n  is_simple_power\
    \ $(( $1 / $2 )) $2\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$(( n ** i ))\n    if [ $result -eq\
    \ $x ]; then\n      echo true\n      return\n    fi\n    i=$(( i + 1 ))\n  done\n\
    \  echo false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local int=$(echo \"$result\" | sed 's/\\..*//')\n  local float=$(echo\
    \ \"$result\" | sed 's/^[^.]*\\.//')\n  if [[ $float == 0 ]]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
    \ $(($1/$2)) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [ \"$result\" -eq \"$n\" ]; then\n    echo true\n  else\n   \
    \ echo false\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  if [ $1 -eq 1 ]; then\n    echo\
    \ \"true\"\n  elif [ $1 -eq 0 ]; then\n    echo \"false\"\n  else\n    local result=$(echo\
    \ \"scale=2; $1/$2\" | bc)\n    if [ $(echo \"$result % 1\" | bc) -eq 0 ]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprxzunqqm.sh: line 17: [: .87: integer expression expected

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 2
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  # $1 is an integer\n  # $2 is\
    \ an integer\n  # returns true if $1 is a simple power of $2\n  # returns false\
    \ in other cases\n  #\n  # Example:\n  # is_simple_power 4 2\n  # returns true\n\
    \  # is_simple_power 8 2\n  # returns false\n  # is_simple_power 64 4\n  # returns\
    \ true\n  # is_simple_power 256 4\n  # returns false\n  # is_simple_power 1024\
    \ 10\n  # returns true\n  # is_simple_power 100 10\n  # returns false\n  # is_simple_power\
    \ 1 1\n  # returns true\n  # is_simple_power 0 1\n  # returns false\n  # is_simple_power\
    \ 0 0\n  # returns false\n  # is_simple_power 1 0\n  # returns false\n  # is_simple_power\
    \ 1 -1\n  # returns false\n  # is_simple_power -1 -1\n  # returns false\n  # is_simple_power\
    \ -1 1\n  # returns false\n  # is_simple_power -1 0\n  # returns false\n  # is_simple_power\
    \ -1 -2\n  # returns false\n  # is_simple_power -2 -2\n  # returns false\n  #\
    \ is_simple_power -2 -1\n  # returns false\n  # is_simple_power -2 0\n  # returns\
    \ false\n  # is_simple_power -2 1\n  # returns false\n  # is_simple_power -2 2\n\
    \  # returns false\n  # is_simple_power -2 4\n  # returns false\n  # is_simple_power\
    \ -4 2\n  # returns false\n  # is_simple_power -4 -2\n  # returns false\n  # is_simple_power\
    \ -4 -4\n  # returns false\n  # is_simple_power -4 -8\n  # returns false\n  #\
    \ is_simple_power -8 -4\n  # returns false\n  # is_simple_power -8 -8\n  # returns\
    \ false\n  # is_simple_power -8 -16\n  # returns false\n  # is_simple_power -16\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprwjvhier.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmprwjvhier.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [[ $result -eq $n ]]; then\n    echo true\n  else\n    echo false\n\
    \  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [[ $result -eq $n ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate\
    \ \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n  echo\
    \ false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [[ $result -eq $n ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate\
    \ \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local int=$(echo \"scale=0;\
    \ l($x)/l($n)\" | bc -l)\n  if [[ $int == 0 ]]; then\n    return 1\n  fi\n  local\
    \ result=$(echo \"$n^$int\" | bc -l)\n  if [[ $result == $x ]]; then\n    return\
    \ 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=0\n\
    \  while [ $result -lt $x ]\n  do\n    result=$((n**i))\n    if [ $result -eq\
    \ $x ]\n    then\n      echo \"true\"\n      return 0\n    fi\n    i=$((i+1))\n\
    \  done\n  echo \"false\"\n  return 1\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local int=$(echo \"$result\" | cut -d'.' -f1)\n  local decimal=$(echo\
    \ \"$result\" | cut -d'.' -f2)\n  if [[ $decimal == 0 ]]; then\n    echo \"$n^$int=$x\"\
    \n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  if [ $(echo \"$result - $result\" | bc -l) -eq 0 ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  if [ \"$result\" == \"$(echo \"$result\" | bc -l)\" ]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local result_int=$(echo \"$result\" | cut -d '.' -f 1)\n  local\
    \ result_dec=$(echo \"$result\" | cut -d '.' -f 2)\n  if [[ $result_dec == 0 ]];\
    \ then\n    echo \"$result_int\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=0\n  local i=0\n\
    \  while [ $result -le $x ]\n  do\n    result=$((n**i))\n    if [ $result -eq\
    \ $x ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  if (( $x == $n**$n )); then\n\
    \    echo true\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
    \ $(($1/$2)) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x/$n\"\
    )\n  if [ \"$(bc <<< \"$result^$n\")\" == \"$x\" ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    local result=$(echo\
    \ \"$1/$2\" | bc)\n    is_simple_power $result $2\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ 0 ]; then\n    echo \"false\"\n  elif [ $1 -eq $2 ]; then\n    echo \"true\"\
    \n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
    \ $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  local x=$1\n  local n=$2\n  local\
    \ i=0\n  local res=1\n  while [ $res -lt $x ]\n  do\n    res=$((n**i))\n    i=$((i+1))\n\
    \  done\n  if [ $res -eq $x ]\n  then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local res=1\n\
    \  while [ $res -lt $x ]; do\n    res=$((n**i))\n    if [ $res -eq $x ]; then\n\
    \      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n  echo \"\
    false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x^(1/$n)\"\
    )\n  if [[ $result == *.* ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\
    \n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$(( $n ** $i ))\n    if [ $result\
    \ -eq $x ]; then\n      echo true\n      return\n    fi\n    i=$(( $i + 1 ))\n\
    \  done\n  echo false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\"\
    \ | awk '{print log($1)/log($2)}')\n  local int_result=$(echo \"$result\" | awk\
    \ '{print int($1)}')\n  if [[ $result == $int_result ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local result_int=$(echo \"$result\" | cut -d '.' -f 1)\n  local\
    \ result_dec=$(echo \"$result\" | cut -d '.' -f 2)\n  if [ \"$result_dec\" ==\
    \ \"0\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [ $result -eq $(bc <<< \"scale=0; $n^$result\") ]; then\n   \
    \ echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=2;\
    \ $x/$n\" | bc)\n  local int_result=$(echo \"scale=0; $result\" | bc)\n  if [\
    \ \"$result\" == \"$int_result\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  if [ \"$result\" == \"$(echo \"$result\" | cut -d '.' -f 1)\" ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n    local x=$1\n    local n=$2\n    local result=$(bc <<<\
    \ \"$x/$n\")\n    if [[ $result =~ ^[0-9]+$ ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n  elif [[ $1\
    \ -eq $2 ]]; then\n    echo \"true\"\n  elif [[ $1 -gt $2 ]]; then\n    is_simple_power\
    \ $(( $1 / $2 )) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n  \
    \  is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  if [[ $result =~ ^[0-9]+\\.[0]*$ ]]; then\n    echo \"true\"\n \
    \ else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [ $result -eq $(bc <<< \"scale=0; $n^$result\") ]; then\n   \
    \ echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq $2 ] || [ $1 -eq 1 ]; then\n    echo true\n\
    \  elif [ $1 -eq 0 ]; then\n    echo false\n  else\n    local n=$1\n    local\
    \ x=$2\n    local i=2\n    local result=1\n    while [ $result -lt $x ]; do\n\
    \      result=$((n**i))\n      if [ $result -eq $x ]; then\n        echo true\n\
    \        return\n      fi\n      i=$((i+1))\n    done\n    echo false\n  fi\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: -1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=false\n  local\
    \ i=1\n  local power=1\n  while [ $power -le $x ]; do\n    if [ $power -eq $x\
    \ ]; then\n      result=true\n    fi\n    power=$((n**i))\n    i=$((i+1))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659999938
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ 0 ]; then\n    echo \"false\"\n  elif [ $1 -eq $2 ]; then\n    echo \"true\"\
    \n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
    \ $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif\
    \ [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif [ $1 -lt $2 ]; then\n \
    \       echo \"false\"\n    else\n        is_simple_power $(($1/$2)) $2\n    fi\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=2;\
    \ $x/$n\" | bc)\n  local int_result=$(echo \"scale=0; $result\" | bc)\n  if [\
    \ \"$result\" == \"$int_result\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  # $1 is an integer\n  # $2 is\
    \ an integer\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ];\
    \ then\n    echo \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n\
    \    is_simple_power $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\
    \n  else\n    is_simple_power $(( $1 / $2 )) $2\n  fi\n}\n\ncandidate() {\n  \
    \  is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\
    \n  else\n    is_simple_power $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x/$n\"\
    )\n  if [[ $result == $(bc <<< \"scale=0; $result/1\") ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=0\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n  echo\
    \ false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if (( $1 == $2 ** ${1//$2/} )); then\n    echo true\n \
    \ else\n    echo false\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n  \
    \  [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x^(1/$n)\"\
    )\n  if [[ \"$result\" =~ ^[0-9]+$ ]]; then\n    echo true\n  else\n    echo false\n\
    \  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=1\n\
    \  while (( result < x ))\n  do\n    result=$(( n ** i ))\n    (( i++ ))\n  done\n\
    \  if (( result == x ))\n  then\n    echo true\n  else\n    echo false\n  fi\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [[ $result -eq $n ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate\
    \ \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n    if [[ $1 -eq 1 ]]; then\n        echo \"true\"\n    \
    \    return\n    fi\n    if [[ $1 -eq 0 ]]; then\n        echo \"false\"\n   \
    \     return\n    fi\n    if [[ $1 -eq $2 ]]; then\n        echo \"true\"\n  \
    \      return\n    fi\n    if [[ $1 -lt $2 ]]; then\n        echo \"false\"\n\
    \        return\n    fi\n    is_simple_power $(( $1 / $2 )) $2\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  local result2=$(echo \"scale=0; $result/$n\" | bc)\n  if [\
    \ $result -eq $n ] && [ $result2 -eq 1 ]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=0\n  local result=0\n\
    \  while [ $result -lt $x ]\n  do\n    result=$((n**i))\n    if [ $result -eq\
    \ $x ]\n    then\n      echo \"true\"\n      return 0\n    fi\n    i=$((i+1))\n\
    \  done\n  echo \"false\"\n  return 1\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x/$n\"\
    )\n  local result2=$(bc <<< \"$result/$n\")\n  if [ $result -eq $result2 ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif\
    \ [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif [ $1 -gt $2 ]; then\n \
    \       is_simple_power $(($1/$2)) $2\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: -1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    if [ \"\
    $result\" -eq \"1\" ]; then\n      echo \"true\"\n    else\n      is_simple_power\
    \ $result $n\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n \
    \   is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659999939
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x/$n\"\
    )\n  if [[ $result -eq $(bc <<< \"scale=0; $result\") ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$(( $n ** $i ))\n    if [ $result\
    \ -eq $x ]; then\n      echo \"true\"\n      return\n    fi\n    i=$(( $i + 1\
    \ ))\n  done\n  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ $result -eq $(echo \"scale=0; $n^$result\" | bc) ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 2
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  # $1 is an integer\n  # $2 is\
    \ an integer\n  # returns true if $1 is a simple power of $2\n  # returns false\
    \ otherwise\n  #\n  # Example:\n  # is_simple_power 2 4\n  # returns true\n  #\
    \ is_simple_power 2 3\n  # returns false\n  # is_simple_power 4 2\n  # returns\
    \ false\n  # is_simple_power 4 4\n  # returns true\n  # is_simple_power 4 8\n\
    \  # returns false\n  # is_simple_power 8 4\n  # returns false\n  # is_simple_power\
    \ 8 8\n  # returns true\n  # is_simple_power 8 16\n  # returns false\n  # is_simple_power\
    \ 16 8\n  # returns false\n  # is_simple_power 16 16\n  # returns true\n  # is_simple_power\
    \ 16 32\n  # returns false\n  # is_simple_power 32 16\n  # returns false\n  #\
    \ is_simple_power 32 32\n  # returns true\n  # is_simple_power 32 64\n  # returns\
    \ false\n  # is_simple_power 64 32\n  # returns false\n  # is_simple_power 64\
    \ 64\n  # returns true\n  # is_simple_power 64 128\n  # returns false\n  # is_simple_power\
    \ 128 64\n  # returns false\n  # is_simple_power 128 128\n  # returns true\n \
    \ # is_simple_power 128 256\n  # returns false\n  # is_simple_power 256 128\n\
    \  # returns false\n  # is_simple_power 256 256\n  # returns true\n  # is_simple_power\
    \ 256 512\n  # returns false\n  # is_simple_power 512 256\n  # returns false\n\
    \  # is_simple_power 512 512\n  # returns true\n  # is_simple_power 512 1024\n\
    \  # returns false\n  # is_simple_power 1024 512\n  # returns false\n  # is_simple_power\
    \ 1024 1024\n  # returns true\n  # is_simple_power 1024 2048\n  # returns false\n\
    \  # is_simple_power 2048 1024\n  # returns false\n  # is_simple_power 2048 2048\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4t4p_sfh.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmp4t4p_sfh.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\
    \n  else\n    is_simple_power $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x / $n\")\n  if [[ $result -eq $(bc <<< \"scale=0; $n ^ $result\") ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n    if [ $1 -eq $2 ]\n    then\n        echo \"true\"\n \
    \   elif [ $1 -gt $2 ]\n    then\n        if [ $(( $1 % $2 )) -eq 0 ]\n      \
    \  then\n            is_simple_power $(( $1 / $2 )) $2\n        else\n       \
    \     echo \"false\"\n        fi\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x^(1/$n)\"\
    )\n  if [[ $result =~ ^[0-9]+$ ]]; then\n    echo true\n  else\n    echo false\n\
    \  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [[ $result -eq $n ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\"\
    \ | awk '{print log($1)/log($2)}')\n  if [[ $result == *.* ]]; then\n    echo\
    \ false\n  else\n    echo true\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\"\
    \ | awk '{print log($1)/log($2)}')\n  local int_result=$(echo \"$result\" | awk\
    \ '{print int($1)}')\n  if [ \"$result\" == \"$int_result\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  while [ $((n**i))\
    \ -le $x ]; do\n    if [ $((n**i)) -eq $x ]; then\n      echo 'true'\n      return\n\
    \    fi\n    i=$((i+1))\n  done\n  echo 'false'\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=2;\
    \ $x/$n\" | bc)\n  local int_result=$(echo \"scale=0; $result\" | bc)\n  if [[\
    \ $result -eq $int_result ]]; then\n    echo true\n  else\n    echo false\n  fi\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2p3jyqr4.sh: line 14: [[: 8.00: syntax error: invalid arithmetic
    operator (error token is ".00")

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n  elif [[ $1\
    \ -eq $2 ]]; then\n    echo \"true\"\n  elif [[ $1 -eq 0 ]]; then\n    echo \"\
    false\"\n  elif [[ $1 -gt $2 ]]; then\n    is_simple_power $(( $1 / $2 )) $2\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local p=1\n  while (( $p <\
    \ $x )); do\n    (( p *= n ))\n  done\n  (( p == x ))\n}\n\ncandidate() {\n  \
    \  is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ $result -eq $(echo \"scale=0; $n**$result\" | bc) ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpwlo4l6um.sh: line 13: [: 8: unary operator expected

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n  echo\
    \ false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 2
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  # $1 is an integer\n  # $2 is\
    \ an integer\n  # return true if $1 is a simple power of $2\n  # return false\
    \ otherwise\n  #\n  # Example:\n  # is_simple_power 4 2\n  # should return true\n\
    \  # is_simple_power 4 3\n  # should return false\n  # is_simple_power 8 2\n \
    \ # should return false\n  # is_simple_power 9 3\n  # should return true\n  #\
    \ is_simple_power 27 3\n  # should return true\n  # is_simple_power 28 3\n  #\
    \ should return false\n  # is_simple_power 125 5\n  # should return true\n  #\
    \ is_simple_power 126 5\n  # should return false\n  # is_simple_power 1024 2\n\
    \  # should return true\n  # is_simple_power 1025 2\n  # should return false\n\
    \  # is_simple_power 1026 2\n  # should return false\n  # is_simple_power 1027\
    \ 2\n  # should return false\n  # is_simple_power 1028 2\n  # should return false\n\
    \  # is_simple_power 1029 2\n  # should return false\n  # is_simple_power 1030\
    \ 2\n  # should return false\n  # is_simple_power 1031 2\n  # should return false\n\
    \  # is_simple_power 1032 2\n  # should return false\n  # is_simple_power 1033\
    \ 2\n  # should return false\n  # is_simple_power 1034 2\n  # should return false\n\
    \  # is_simple_power 1035 2\n  # should return false\n  # is_simple_power 1036\
    \ 2\n  # should return false\n  # is_simple_power 1037 2\n  # should return false\n\
    \  # is_simple_power 1038 2\n  # should return false\n  # is_simple_power 1039\
    \ 2\n  # should return false\n  # is_simple_power 1040 2\n  # should return false\n\
    \  # is_simple_power 1041 2\n  # should return false\n  # is_simple_power 1042\
    \ 2\n  # should return false\n  # is_simple_power 1043\n}\n\ncandidate() {\n \
    \   is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmppcq1h55e.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmppcq1h55e.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x / $n\")\n  if [ \"$result\" -eq \"$n\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate\
    \ \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=2;\
    \ $x/$n\" | bc)\n  local int_result=$(echo \"scale=0; $result\" | bc)\n  if [[\
    \ $result -eq $int_result ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuylguiqm.sh: line 14: [[: 8.00: syntax error: invalid arithmetic
    operator (error token is ".00")

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local int=$(echo \"scale=0;\
    \ l($x)/l($n)\" | bc -l)\n  echo \"$n^$int\" | bc -l | grep -q \"^$x$\"\n}\n\n\
    candidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local int=$(echo \"l($x)/l($n)\"\
    \ | bc -l)\n  local int_rounded=$(echo \"scale=0; $int/1\" | bc)\n  local result=$(echo\
    \ \"$n^$int_rounded\" | bc -l)\n  if [[ $result -eq $x ]]; then\n    echo true\n\
    \  else\n    echo false\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n  \
    \  [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=11): Divide by zero

    (standard_in) 1: syntax error

    (standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local p=0\n  local i=0\n  local\
    \ result=0\n  local result_str=\"\"\n  local result_str_len=0\n  local n_str=\"\
    \"\n  local n_str_len=0\n  local x_str=\"\"\n  local x_str_len=0\n  local n_str_len_str=\"\
    \"\n  local n_str_len_str_len=0\n  local n_str_len_str_len_str=\"\"\n  local n_str_len_str_len_str_len=0\n\
    \  local n_str_len_str_len_str_len_str=\"\"\n  local n_str_len_str_len_str_len_str_len=0\n\
    \  local n_str_len_str_len_str_len_str_len_str=\"\"\n  local n_str_len_str_len_str_len_str_len_str_len=0\n\
    \  local n_str_len_str_len_str_len_str_len_str_len_str=\"\"\n  local n_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \  local n_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\"\n  local n_str_len_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \  local n_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\"\n\
    \  local n_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \  local n_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str=\"\
    \"\n  local n_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len=0\n\
    \  local n_str_\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n  echo\
    \ false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ 0 ]; then\n    echo \"false\"\n  elif [ $1 -eq $2 ]; then\n    echo \"true\"\
    \n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  local result2=$(bc <<< \"scale=0; $result/$n\")\n  if [ \"$result\"\
    \ -eq \"$result2\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=0\n\
    \  while [ $result -le $x ]\n  do\n    result=$((n**i))\n    if [ $result -eq\
    \ $x ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local int=$(echo \"scale=0;\
    \ l($x)/l($n)\" | bc -l)\n  local result=$(echo \"$n^$int\" | bc -l)\n  if [[\
    \ $result -eq $x ]]; then\n    echo true\n  else\n    echo false\n  fi\n}\n\n\
    candidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=20): Divide by zero

    (standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 2
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq $2 ]; then\n    echo \"true\"\n  elif [ $1\
    \ -eq 1 ]; then\n    echo \"false\"\n  elif [ $1 -eq 0 ]; then\n    echo \"false\"\
    \n  elif [ $1 -lt 0 ]; then\n    echo \"false\"\n  elif [ $2 -lt 0 ]; then\n \
    \   echo \"false\"\n  elif [ $1 -eq $(( $2 ** 2 )) ]; then\n    echo \"true\"\n\
    \  elif [ $1 -eq $(( $2 ** 3 )) ]; then\n    echo \"true\"\n  elif [ $1 -eq $((\
    \ $2 ** 4 )) ]; then\n    echo \"true\"\n  elif [ $1 -eq $(( $2 ** 5 )) ]; then\n\
    \    echo \"true\"\n  elif [ $1 -eq $(( $2 ** 6 )) ]; then\n    echo \"true\"\n\
    \  elif [ $1 -eq $(( $2 ** 7 )) ]; then\n    echo \"true\"\n  elif [ $1 -eq $((\
    \ $2 ** 8 )) ]; then\n    echo \"true\"\n  elif [ $1 -eq $(( $2 ** 9 )) ]; then\n\
    \    echo \"true\"\n  elif [ $1 -eq $(( $2 ** 10 )) ]; then\n    echo \"true\"\
    \n  elif [ $1 -eq $(( $2 ** 11 )) ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $(( $2 ** 12 )) ]; then\n    echo \"true\"\n  elif [ $1 -eq $(( $2 ** 13 ))\
    \ ]; then\n    echo \"true\"\n  elif [ $1 -eq $(( $2 ** 14 )) ]; then\n    echo\
    \ \"true\"\n  elif [ $1 -eq $(( $2 ** 15 )) ]; then\n    echo \"true\"\n  elif\
    \ [ $1 -eq $(( $2 ** 16 )) ]; then\n    echo \"true\"\n  elif [ $1 -eq $(( $2\
    \ ** 17 )) ]; then\n    echo \"true\"\n  elif [ $1 -eq $(( $2 ** 18 )) ]; then\n\
    \    echo \"true\"\n  elif [ $1 -eq $(( $2 **\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnrpd0bx4.sh: line 54: unexpected EOF while looking for matching
    `)''

    /tmp/tmpnrpd0bx4.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
    \ $(($1/$2)) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local int_result=$(echo \"$result\" | awk '{print int($1)}')\n \
    \ local is_int=$(echo \"$result==$int_result\" | bc -l)\n  if [ $is_int -eq 1\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local power=1\n\
    \  while [ $power -lt $x ]; do\n    power=$((n**i))\n    i=$((i+1))\n  done\n\
    \  if [ $power -eq $x ]; then\n    echo true\n  else\n    echo false\n  fi\n}\n\
    \ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  local x=$1\n  local n=$2\n  local\
    \ i=1\n  local result=1\n  while [ $result -lt $x ]\n  do\n    result=$(($n**$i))\n\
    \    if [ $result -eq $x ]\n    then\n      echo \"true\"\n      return 0\n  \
    \  fi\n    i=$(($i+1))\n  done\n  echo \"false\"\n  return 1\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local int_result=$(echo \"$result\" | cut -d '.' -f 1)\n  if [ \"\
    $result\" == \"$int_result\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\
    \n  else\n    is_simple_power $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [[ $result -eq $(bc <<< \"scale=0; $n^$result\") ]]; then\n \
    \   echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ 0 ]; then\n    echo \"false\"\n  elif [ $1 -eq $2 ]; then\n    echo \"true\"\
    \n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power\
    \ $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  if [ \"$result\" == \"$(echo \"$result\" | bc -l)\" ]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local int=$(echo \"$result\" | cut -d'.' -f1)\n  local decimal=$(echo\
    \ \"$result\" | cut -d'.' -f2)\n  if [ \"$decimal\" == \"0\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local int=$(echo \"scale=0;\
    \ l($x)/l($n)\" | bc -l)\n  local result=$(echo \"$n^$int\" | bc -l)\n  if [ \"\
    $result\" -eq \"$x\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=20): Divide by zero

    (standard_in) 2: syntax error

    /tmp/tmpmlkse1w9.sh: line 14: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n    return\n\
    \  fi\n  if [[ $1 -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[\
    \ $1 -lt $2 ]]; then\n    echo \"false\"\n    return\n  fi\n  is_simple_power\
    \ $(( $1 / $2 )) $2\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n    return\n\
    \  fi\n  if [[ $1 -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[\
    \ $1 -lt $2 ]]; then\n    echo \"false\"\n    return\n  fi\n  is_simple_power\
    \ $(($1/$2)) $2\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x /\
    \ $n\" | bc -l)\n  local int=$(echo \"$result / 1\" | bc -l)\n  if [ \"$result\"\
    \ == \"$int\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq $2**$(echo \"scale=0; l($1)/l($2)\" | bc -l)\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=20): Divide by zero

    /tmp/tmp4a6pmg9p.sh: line 10: [[: 2**: syntax error: operand expected (error token
    is "**")

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
    \ $(( $1 / $2 )) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n  \
    \  is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  # echo \"is_simple_power $1 $2\"\
    \n  local x=$1\n  local n=$2\n  local i=0\n  local result=0\n  while [ $result\
    \ -lt $x ]\n  do\n    result=$(($n**$i))\n    # echo \"result $result\"\n    if\
    \ [ $result -eq $x ]\n    then\n      echo \"true\"\n      return 0\n    fi\n\
    \    i=$(($i+1))\n  done\n  echo \"false\"\n  return 1\n}\n\ncandidate() {\n \
    \   is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
    \ $(( $1 / $2 )) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n  \
    \  is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$(($n**$i))\n    if [ $result -eq\
    \ $x ]; then\n      echo \"true\"\n      return\n    fi\n    i=$(($i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n  elif [[ $1\
    \ -eq $2 ]]; then\n    echo \"true\"\n  elif [[ $1%$2 -eq 0 ]]; then\n    is_simple_power\
    \ $(( $1/$2 )) $2\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\
    \n  else\n    is_simple_power $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x/$n\"\
    )\n  local result2=$(bc <<< \"$result/$n\")\n  if [ \"$result\" -eq \"$result2\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [[ $result -eq $(echo \"scale=0; $x/$n\" | bc) ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=2;\
    \ $x/$n\" | bc)\n  local int_result=$(echo \"scale=0; $result\" | bc)\n  if [\
    \ $int_result -eq $result ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph7ddlmpy.sh: line 14: [: 8.00: integer expression expected

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\"\
    \ | awk '{print log($1)/log($2)}')\n  if [[ $result =~ ^[0-9]+$ ]]; then\n   \
    \ echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=1\n  local i=1\n\
    \  while [[ $result -lt $x ]]; do\n    result=$((n**i))\n    if [[ $result -eq\
    \ $x ]]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while (( result < x )); do\n    result=$(( n ** i ))\n    (( i++ ))\n  done\n\
    \  (( result == x )) && echo true || echo false\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x/$n\"\
    )\n  if [ \"$result\" -eq \"$(bc <<< \"scale=0; $result\")\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\"\
    \ | awk '{print log($1)/log($2)}')\n  local result_int=$(echo \"$result\" | awk\
    \ '{print int($1)}')\n  if [ \"$result\" == \"$result_int\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x /\
    \ $n\" | bc -l)\n  local result2=$(echo \"$result / $n\" | bc -l)\n  if [ \"$result\"\
    \ -eq \"$result2\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpah2frfhp.sh: line 14: [: 8.00000000000000000000: integer expression
    expected

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n    return\n\
    \  fi\n  if [[ $1 -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[\
    \ $1 -lt $2 ]]; then\n    echo \"false\"\n    return\n  fi\n  is_simple_power\
    \ $(($1/$2)) $2\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ $result -eq $(echo \"scale=0; $n^$result\" | bc) ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local int_result=$(echo \"$result\" | awk '{print int($1)}')\n \
    \ local float_result=$(echo \"$result\" | awk '{print $1-int($1)}')\n  if [[ \"\
    $float_result\" == \"0\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local int=$(echo \"scale=0;l($x)/l($n)\"\
    \ | bc -l)\n  [[ $int == 0 ]] && return 1\n  [[ $(echo \"$n^$int\" | bc -l) ==\
    \ $x ]] && return 0 || return 1\n}\n\ncandidate() {\n    is_simple_power \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n\
    \    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=20): Divide by zero

    (standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n  echo\
    \ false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x /\
    \ $n\" | bc)\n  if [[ $result -eq $(echo \"$result / 1\" | bc) ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n  elif [[ $1\
    \ -eq $2 ]]; then\n    echo \"true\"\n  elif [[ $1 -gt $2 ]]; then\n    if [[\
    \ $1%$2 -eq 0 ]]; then\n      is_simple_power $(($1/$2)) $2\n    else\n      echo\
    \ \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n  \
    \  is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=1\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n    return\n\
    \  fi\n  if [[ $1 -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[\
    \ $1 -lt $2 ]]; then\n    echo \"false\"\n    return\n  fi\n  is_simple_power\
    \ $(( $1 / $2 )) $2\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(bc <<< \"scale=0;\
    \ $x/$n\")\n  if [[ $result -eq $n ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ $result -eq $n ]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n    return\n\
    \  fi\n  if [[ $1 -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[\
    \ $1 -lt $2 ]]; then\n    echo \"false\"\n    return\n  fi\n  is_simple_power\
    \ $(( $1 / $2 )) $2\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=0\n\
    \  while [ $result -le $x ]\n  do\n    result=$((n**i))\n    if [ $result -eq\
    \ $x ]; then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo false\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local n=$1\n  local x=$2\n  local i=0\n  local result=0\n\
    \  while [ $result -le $x ]\n  do\n    result=$((n**i))\n    if [ $result -eq\
    \ $x ]; then\n      echo \"true\"\n      return 0\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n  return 1\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n  \
    \  [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[\
    \ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n\
    \  while [[ $result -lt $x ]]; do\n    result=$((n**i))\n    if [[ $result -eq\
    \ $x ]]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq $2 ]; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n  elif [[ $1\
    \ -eq $2 ]]; then\n    echo \"true\"\n  elif [[ $1 -gt $2 ]]; then\n    if [[\
    \ $(( $1 % $2 )) -eq 0 ]]; then\n      is_simple_power $(( $1 / $2 )) $2\n   \
    \ else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"$x /\
    \ $n\" | bc -l)\n  if [[ $result -eq $(echo \"$result\" | bc) ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5oqnhulv.sh: line 13: [[: 8.00000000000000000000: syntax error:
    invalid arithmetic operator (error token is ".00000000000000000000")

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 0
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if (( $1 == 1 )); then\n    echo \"true\"\n  elif (( $1\
    \ % $2 != 0 )); then\n    echo \"false\"\n  elif (( $1 == $2 )); then\n    echo\
    \ \"true\"\n  else\n    is_simple_power $(( $1 / $2 )) $2\n  fi\n}\n\ncandidate()\
    \ {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\"\
    \ \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[\
    \ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\")\
    \ = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  echo $1\n  echo $2\n  echo $((\
    \ $1 ** $2 ))\n  if [ $(( $1 ** $2 )) -eq $1 ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate\
    \ \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=2;\
    \ $x/$n\" | bc)\n  local int_result=$(echo \"scale=0; $result\" | bc)\n  if [\
    \ \"$result\" == \"$int_result\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq $2 ] || [ $1 -eq 1 ]; then\n    echo true\n\
    \  elif [ $1 -eq 0 ]; then\n    echo false\n  else\n    local n=$1\n    local\
    \ x=$2\n    local i=1\n    local result=1\n    while [ $result -lt $x ]; do\n\
    \      result=$(( $n ** $i ))\n      if [ $result -eq $x ]; then\n        echo\
    \ true\n        return\n      fi\n      i=$(( $i + 1 ))\n    done\n    echo false\n\
    \  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\"\
    \ \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"\
    true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\"\
    \ \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ $result -eq $n ]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local i=0\n  local result=1\n\
    \  while [ $result -lt $x ]; do\n    result=$((n**i))\n    if [ $result -eq $x\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n    i=$((i+1))\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\"\
    \ \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\")\
    \ = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;$x/$n\"\
    \ | bc)\n  if [ \"$result\" -eq \"$(echo \"scale=0;$result^$n\" | bc)\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\"\
    \ \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n\
    \    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\"\
    ) = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate\
    \ \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999934
- exit_code: 2
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  # Write your code here\n  # $1 is an integer\n  # $2 is\
    \ an integer\n  # returns true if $1 is a simple power of $2\n  # returns false\
    \ in other cases\n  #\n  # Example:\n  # is_simple_power 4 2\n  # returns true\
    \ because 2**2=4\n  # is_simple_power 4 3\n  # returns false because 3**2=9\n\
    \  # is_simple_power 4 4\n  # returns false because 4**2=16\n  # is_simple_power\
    \ 8 2\n  # returns false because 2**3=8\n  # is_simple_power 8 3\n  # returns\
    \ false because 3**3=27\n  # is_simple_power 8 4\n  # returns false because 4**3=64\n\
    \  # is_simple_power 8 5\n  # returns false because 5**3=125\n  # is_simple_power\
    \ 8 6\n  # returns false because 6**3=216\n  # is_simple_power 8 7\n  # returns\
    \ false because 7**3=343\n  # is_simple_power 8 8\n  # returns false because 8**3=512\n\
    \  # is_simple_power 8 9\n  # returns false because 9**3=729\n  # is_simple_power\
    \ 8 10\n  # returns false because 10**3=1000\n  # is_simple_power 8 11\n  # returns\
    \ false because 11**3=1331\n  # is_simple_power 8 12\n  # returns false because\
    \ 12**3=1728\n  # is_simple_power 8 13\n  # returns false because 13**3=2197\n\
    \  # is_simple_power 8 14\n  # returns false because 14**3=2744\n  # is_simple_power\
    \ 8 15\n  # returns false because 15**3=3375\n  # is_simple_power 8 16\n  # returns\
    \ false because 16**3=4096\n  # is_simple_power 8 17\n  # returns false because\
    \ 17**3=4913\n  # is_simple_power 8 18\n  # returns false because 18**3=5832\n\
    \  # is_simple_power 8 19\n  # returns false because 19**3=6859\n  # is_simple_power\n\
    }\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
    16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n\
    \    [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"\
    4\") = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp72e1m306.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmp72e1m306.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1659999934
- exit_code: 1
  program: "#!/bin/bash\n# Your task is to write a function that returns true if a\
    \ number x is a simple\n# power of n and false in other cases.\n# x is a simple\
    \ power of n if n**int=x\n# For example:\n#\n# $1 is an integer\n# $2 is an integer\n\
    is_simple_power() {\n  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq\
    \ $2 ]; then\n    echo \"true\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\
    \n  else\n    is_simple_power $(($1/$2)) $2\n  fi\n}\n\ncandidate() {\n    is_simple_power\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"143214\" \"16\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate \"9\" \"3\") = \"true\" ]]\n\
    \    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n    [[ $(candidate \"24\" \"\
    2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\") = \"false\" ]]\n    [[\
    \ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate \"1\" \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999933
