name: HumanEval_111_histogram
language: sh
prompt: "#!/bin/bash\n# Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n# of the letter with the most repetition and containing the\
  \ corresponding count.\n# If several letters have the same occurrence, return all\
  \ of them.\n# Example:\n#\n# $1 is a string\nhistogram() {\n"
tests: "}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
  ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\\
  ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
  \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
  \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
  }\n\nrun_test"
completions: ["  local -A letters\n  for (( i=0; i<${#1}; i++ )); do\n    (( letters[${1:i:1}]++\
    \ ))\n  done\n  local max=0\n  for i in \"${!letters[@]}\"; do\n    if (( letters[$i]\
    \ > max )); then\n      max=${letters[$i]}\n    fi\n  done\n  for i in \"${!letters[@]}\"\
    ; do\n    if (( letters[$i] == max )); then\n      echo \"$i: $max\"\n    fi\n\
    \  done", "    local -A histo\n    local -a max_letters\n    local max_count=0\n\
    \    for ((i=0; i<${#1}; i++)); do\n        local letter=${1:i:1}\n        ((histo[$letter]++))\n\
    \        if ((histo[$letter] > max_count)); then\n            max_count=${histo[$letter]}\n\
    \            max_letters=(\"$letter\")\n        elif ((histo[$letter] == max_count));\
    \ then\n            max_letters+=(\"$letter\")\n        fi\n    done\n    echo\
    \ \"${max_letters[@]} $max_count\"", "  echo \"$1\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -nr | awk '{print $2, $1}'", "  local -A dict\n  local -a max_keys\n\
    \  local max_count=0\n  for ((i=0; i<${#1}; i++)); do\n    local char=${1:i:1}\n\
    \    if [[ -z ${dict[$char]} ]]; then\n      dict[$char]=1\n    else\n      dict[$char]=$((dict[$char]+1))\n\
    \    fi\n    if [[ ${dict[$char]} -gt $max_count ]]; then\n      max_count=${dict[$char]}\n\
    \      max_keys=(\"$char\")\n    elif [[ ${dict[$char]} -eq $max_count ]]; then\n\
    \      max_keys+=(\"$char\")\n    fi\n  done\n  echo \"${max_keys[@]} $max_count\"",
  "    local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n\
    \    done\n    echo ${dict[@]}", "  local string=$1\n  local -A dict\n  for ((\
    \ i=0; i<${#string}; i++ )); do\n    (( dict[${string:$i:1}]++ ))\n  done\n  local\
    \ max=0\n  for key in \"${!dict[@]}\"; do\n    if [[ ${dict[$key]} -gt $max ]];\
    \ then\n      max=${dict[$key]}\n    fi\n  done\n  for key in \"${!dict[@]}\"\
    ; do\n    if [[ ${dict[$key]} -eq $max ]]; then\n      echo \"$key: $max\"\n \
    \   fi\n  done", "    echo $1 | tr -s ' ' '\\n' | sort | uniq -c | sort -nr |\
    \ awk '{print $2, $1}'", "  local -A histo\n  for ((i=0; i<${#1}; i++)); do\n\
    \    ((histo[${1:i:1}]++))\n  done\n  local max=0\n  for k in \"${!histo[@]}\"\
    ; do\n    if ((histo[$k] > max)); then\n      max=${histo[$k]}\n    fi\n  done\n\
    \  for k in \"${!histo[@]}\"; do\n    if ((histo[$k] == max)); then\n      echo\
    \ \"$k:$max\"\n    fi\n  done", "    if [[ -z $1 ]]; then\n        echo \"Usage:\
    \ $0 <string>\"\n        return 1\n    fi\n\n    local -A dict\n    local max=0\n\
    \    for c in $(echo $1 | grep -o .); do\n        dict[$c]=$((dict[$c]+1))\n \
    \       if [[ ${dict[$c]} -gt $max ]]; then\n            max=${dict[$c]}\n   \
    \     fi\n    done\n\n    for c in ${!dict[@]}; do\n        if [[ ${dict[$c]}\
    \ -eq $max ]]; then\n            echo \"$c: $max\"\n        fi\n    done", " \
    \   echo \"$1\" | tr -s '[:space:]' '\\n' | sort | uniq -c | sort -rn | awk '{print\
    \ $2, $1}'", "    local str=\"$1\"\n    local -A dict\n    local max=0\n    local\
    \ max_letters=()\n    for ((i=0; i<${#str}; i++)); do\n        local letter=\"\
    ${str:$i:1}\"\n        ((dict[$letter]++))\n        if [[ ${dict[$letter]} -gt\
    \ $max ]]; then\n            max=${dict[$letter]}\n            max_letters=(\"\
    $letter\")\n        elif [[ ${dict[$letter]} -eq $max ]]; then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    echo \"${max_letters[@]}\"", "    local\
    \ input=$1\n    local -A dict\n    local max=0\n    local max_letters=\"\"\n \
    \   for (( i=0; i<${#input}; i++ )); do\n        local letter=${input:$i:1}\n\
    \        dict[$letter]=$(( dict[$letter] + 1 ))\n        if [[ ${dict[$letter]}\
    \ -gt $max ]]; then\n            max=${dict[$letter]}\n            max_letters=$letter\n\
    \        elif [[ ${dict[$letter]} -eq $max ]]; then\n            max_letters=\"\
    $max_letters $letter\"\n        fi\n    done\n    echo \"{\\\"$max_letters\\\"\
    : $max}\"", "  # Your code here\n  echo \"Not implemented\"", "    local -A dict\n\
    \    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n    done\n \
    \   local max=0\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key] >\
    \ max)); then\n            max=${dict[$key]}\n        fi\n    done\n    for key\
    \ in \"${!dict[@]}\"; do\n        if ((dict[$key] == max)); then\n           \
    \ echo \"$key: $max\"\n        fi\n    done", "    local -A histogram\n    for\
    \ (( i=0; i<${#1}; i++ )); do\n        (( histogram[${1:i:1}]++ ))\n    done\n\
    \    echo \"${!histogram[@]}\"", "    local -A histo\n    for ((i=0; i<${#1};\
    \ i++)); do\n        ((histo[${1:i:1}]++))\n    done\n    local max=0\n    for\
    \ i in \"${!histo[@]}\"; do\n        if ((histo[$i] > max)); then\n          \
    \  max=${histo[$i]}\n        fi\n    done\n    for i in \"${!histo[@]}\"; do\n\
    \        if ((histo[$i] == max)); then\n            echo \"$i\"\n        fi\n\
    \    done", "    local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n\
    \    done\n    echo ${dict[@]}", "    local -A dict\n    for ((i=0; i<${#1}; i++));\
    \ do\n        ((dict[${1:i:1}]++))\n    done\n    local max=0\n    for k in \"\
    ${!dict[@]}\"; do\n        if ((dict[$k] > max)); then\n            max=${dict[$k]}\n\
    \        fi\n    done\n    for k in \"${!dict[@]}\"; do\n        if ((dict[$k]\
    \ == max)); then\n            echo \"$k: $max\"\n        fi\n    done", "    local\
    \ -A histo\n    local -a max_keys\n    local max_value=0\n    for ((i=0; i<${#1};\
    \ i++)); do\n        local c=${1:i:1}\n        ((histo[$c]++))\n        if ((histo[$c]\
    \ > max_value)); then\n            max_value=${histo[$c]}\n            max_keys=(\"\
    $c\")\n        elif ((histo[$c] == max_value)); then\n            max_keys+=(\"\
    $c\")\n        fi\n    done\n    echo \"${max_keys[@]}\"", "    local string=$1\n\
    \    local -A dict\n    for (( i=0; i<${#string}; i++ )); do\n        local letter=${string:$i:1}\n\
    \        dict[$letter]=$(( ${dict[$letter]} + 1 ))\n    done\n    local max=0\n\
    \    for key in \"${!dict[@]}\"; do\n        if [[ ${dict[$key]} -gt $max ]];\
    \ then\n            max=${dict[$key]}\n        fi\n    done\n    for key in \"\
    ${!dict[@]}\"; do\n        if [[ ${dict[$key]} -eq $max ]]; then\n           \
    \ echo \"$key: $max\"\n        fi\n    done", "    local -A dict\n    local -a\
    \ array\n    local -a max_keys\n    local max_value=0\n    local key\n    local\
    \ value\n    local i\n    local j\n\n    # Split the string into an array\n  \
    \  IFS=' ' read -r -a array <<< \"$1\"\n\n    # Count the occurrences of each\
    \ letter\n    for i in \"${array[@]}\"; do\n        ((dict[$i]++))\n    done\n\
    \n    # Find the maximum value\n    for key in \"${!dict[@]}\"; do\n        value=${dict[$key]}\n\
    \        if [[ $value -gt $max_value ]]; then\n            max_value=$value\n\
    \            max_keys=(\"$key\")\n        elif [[ $value -eq $max_value ]]; then\n\
    \            max_keys+=(\"$key\")\n        fi\n    done\n\n    # Print the result\n\
    \    for i in \"${max_keys[@]}\"; do\n        echo \"$i: $max_value\"\n    done",
  "    local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for i in \"${!dict[@]}\"; do\n        if ((dict[$i]\
    \ > max)); then\n            max=${dict[$i]}\n        fi\n    done\n    for i\
    \ in \"${!dict[@]}\"; do\n        if ((dict[$i] == max)); then\n            echo\
    \ \"$i:$max\"\n        fi\n    done", "    echo \"$1\" | tr -s ' ' '\\n' | sort\
    \ | uniq -c | sort -nr | awk '{print $2, $1}'", "    echo \"Input string: $1\"\
    \n    echo \"Output:\"\n    echo \"$1\" | tr -cs 'a-z' '\\n' | sort | uniq -c\
    \ | sort -nr | awk '{print $2, $1}'", "    local -A dict\n    for ((i=0; i<${#1};\
    \ i++)); do\n        dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n    done\n    local\
    \ max=0\n    for key in \"${!dict[@]}\"; do\n        if [[ ${dict[$key]} -gt $max\
    \ ]]; then\n            max=${dict[$key]}\n        fi\n    done\n    for key in\
    \ \"${!dict[@]}\"; do\n        if [[ ${dict[$key]} -eq $max ]]; then\n       \
    \     echo \"$key: $max\"\n        fi\n    done", "  local -A dict\n  local -a\
    \ max\n  local max_count=0\n  for ((i=0; i<${#1}; i++)); do\n    local char=${1:i:1}\n\
    \    ((dict[$char]++))\n    if ((dict[$char] > max_count)); then\n      max_count=${dict[$char]}\n\
    \      max=(\"$char\")\n    elif ((dict[$char] == max_count)); then\n      max+=(\"\
    $char\")\n    fi\n  done\n  echo \"${max[@]}\"", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # To debug:\
    \ echo \"Debug messages...\" >&2\n    echo \"Hello world\"", "  local -A dict\n\
    \  local -a arr\n  local -a max\n  local max_count=0\n  local count=0\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local len=0\n  local len_max=0\n  local len_arr=0\n\
    \  local letter=''\n  local str=''\n\n  arr=($1)\n  len_arr=${#arr[@]}\n  for\
    \ ((i=0; i<len_arr; i++)); do\n    letter=${arr[$i]}\n    if [[ -z ${dict[$letter]}\
    \ ]]; then\n      dict[$letter]=1\n    else\n      dict[$letter]=$((dict[$letter]+1))\n\
    \    fi\n  done\n\n  for letter in \"${!dict[@]}\"; do\n    count=${dict[$letter]}\n\
    \    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max=($letter)\n\
    \    elif [[ $count -eq $max_count ]]; then\n      max+=($letter)\n    fi\n  done\n\
    \n  len_max=${#max[@]}\n  for ((i=0; i<len_max; i++)); do\n    if [[ $i -eq 0\
    \ ]]; then\n      str=\"${max[$i]}=${max_count}\"\n    else\n      str=\"$str,\
    \ ${max[$i]}=${max_count}\"\n    fi\n  done\n\n  echo $str", "    local -A hist\n\
    \    local -a max\n    local max_count=0\n    for ((i=0; i<${#1}; i++)); do\n\
    \        local c=${1:i:1}\n        ((hist[$c]++))\n        if ((hist[$c] > max_count));\
    \ then\n            max_count=${hist[$c]}\n            max=(\"$c\")\n        elif\
    \ ((hist[$c] == max_count)); then\n            max+=(\"$c\")\n        fi\n   \
    \ done\n    echo \"${max[@]}\"", "    # Create an array of the string\n    local\
    \ -a arr\n    arr=($1)\n    # Create a dictionary of the letters and their count\n\
    \    local -A dict\n    for i in \"${arr[@]}\"; do\n        if [ -z \"${dict[$i]}\"\
    \ ]; then\n            dict[$i]=1\n        else\n            dict[$i]=$((dict[$i]+1))\n\
    \        fi\n    done\n    # Find the max count\n    local max=0\n    for i in\
    \ \"${dict[@]}\"; do\n        if [ $i -gt $max ]; then\n            max=$i\n \
    \       fi\n    done\n    # Print the letters with the max count\n    for i in\
    \ \"${!dict[@]}\"; do\n        if [ \"${dict[$i]}\" -eq $max ]; then\n       \
    \     echo $i\n        fi\n    done", "    local -A dict\n    for ((i=0; i<${#1};\
    \ i++)); do\n        dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n    done\n    local\
    \ max=0\n    for key in \"${!dict[@]}\"; do\n        if [[ ${dict[$key]} -gt $max\
    \ ]]; then\n            max=${dict[$key]}\n        fi\n    done\n    for key in\
    \ \"${!dict[@]}\"; do\n        if [[ ${dict[$key]} -eq $max ]]; then\n       \
    \     echo \"$key: $max\"\n        fi\n    done", "    echo \"$1\" | tr -s ' '\
    \ '\\n' | sort | uniq -c | sort -rn | awk '{print $2, $1}'", "    local str=$1\n\
    \    local -A dict\n    for (( i=0; i<${#str}; i++ )); do\n        local c=${str:$i:1}\n\
    \        if [[ -z ${dict[$c]} ]]; then\n            dict[$c]=1\n        else\n\
    \            dict[$c]=$(( ${dict[$c]} + 1 ))\n        fi\n    done\n    local\
    \ max=0\n    for k in \"${!dict[@]}\"; do\n        if [[ ${dict[$k]} -gt $max\
    \ ]]; then\n            max=${dict[$k]}\n        fi\n    done\n    for k in \"\
    ${!dict[@]}\"; do\n        if [[ ${dict[$k]} -eq $max ]]; then\n            echo\
    \ \"$k: $max\"\n        fi\n    done", "    local string=$1\n    local -A histo\n\
    \    for (( i=0; i<${#string}; i++ )); do\n        (( histo[${string:$i:1}]++\
    \ ))\n    done\n    local max=0\n    for key in \"${!histo[@]}\"; do\n       \
    \ if (( histo[$key] > max )); then\n            max=${histo[$key]}\n        fi\n\
    \    done\n    for key in \"${!histo[@]}\"; do\n        if (( histo[$key] == max\
    \ )); then\n            echo \"$key: $max\"\n        fi\n    done", "    local\
    \ string=\"$1\"\n    local -A dict\n    local max=0\n    local -a max_letters\n\
    \    for (( i=0; i<${#string}; i++ )); do\n        local letter=\"${string:$i:1}\"\
    \n        if [[ -z \"${dict[$letter]}\" ]]; then\n            dict[$letter]=1\n\
    \        else\n            dict[$letter]=$((dict[$letter]+1))\n        fi\n  \
    \      if [[ ${dict[$letter]} -gt $max ]]; then\n            max=${dict[$letter]}\n\
    \            max_letters=(\"$letter\")\n        elif [[ ${dict[$letter]} -eq $max\
    \ ]]; then\n            max_letters+=(\"$letter\")\n        fi\n    done\n   \
    \ echo \"${max_letters[@]}\"", "  local -A histogram\n  local -a letters\n  local\
    \ letter\n  local max_count\n  local count\n\n  for letter in $(echo \"$1\" |\
    \ sed 's/\\(.\\)/\\1\\n/g'); do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n\n  max_count=0\n  for letter in \"${!histogram[@]}\"; do\n \
    \   count=${histogram[$letter]}\n    if [ $count -gt $max_count ]; then\n    \
    \  max_count=$count\n      letters=(\"$letter\")\n    elif [ $count -eq $max_count\
    \ ]; then\n      letters+=(\"$letter\")\n    fi\n  done\n\n  echo \"${letters[@]}\"",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"Hello,\
    \ $1\"", "    local -A dict\n    local -a arr\n    local max=0\n    local -a max_arr\n\
    \    local char\n    local count\n    for char in $(echo $1 | sed 's/\\(.\\)/\\\
    1 /g'); do\n        count=$(echo $1 | grep -o $char | wc -l)\n        dict[$char]=$count\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n            max_arr=()\n\
    \        fi\n        if [ $count -eq $max ]; then\n            max_arr+=($char)\n\
    \        fi\n    done\n    echo \"{\"\n    for char in ${!dict[@]}; do\n     \
    \   echo \"    $char: ${dict[$char]}\"\n    done\n    echo \"}\"\n    echo \"\
    Max: $max\"\n    echo \"Max letters: ${max_arr[@]}\"", "    local str=\"$1\"\n\
    \    local -A dict\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"\
    ${str:$i:1}\"\n        if [[ -z \"${dict[$char]}\" ]]; then\n            dict[$char]=1\n\
    \        else\n            (( dict[$char]++ ))\n        fi\n    done\n    local\
    \ max=0\n    for key in \"${!dict[@]}\"; do\n        if [[ \"${dict[$key]}\" -gt\
    \ \"$max\" ]]; then\n            max=\"${dict[$key]}\"\n        fi\n    done\n\
    \    for key in \"${!dict[@]}\"; do\n        if [[ \"${dict[$key]}\" -eq \"$max\"\
    \ ]]; then\n            echo \"$key:$max\"\n        fi\n    done", "    local\
    \ -A histogram\n    for (( i=0; i<${#1}; i++ )); do\n        (( histogram[${1:i:1}]++\
    \ ))\n    done\n    local max_count=0\n    for key in \"${!histogram[@]}\"; do\n\
    \        if (( histogram[$key] > max_count )); then\n            max_count=${histogram[$key]}\n\
    \        fi\n    done\n    for key in \"${!histogram[@]}\"; do\n        if ((\
    \ histogram[$key] == max_count )); then\n            echo -n \"$key \"\n     \
    \   fi\n    done\n    echo", "  local -A histo\n  for ((i=0; i<${#1}; i++)); do\n\
    \    ((histo[${1:i:1}]++))\n  done\n  local max=0\n  for k in \"${!histo[@]}\"\
    ; do\n    if ((histo[$k] > max)); then\n      max=${histo[$k]}\n    fi\n  done\n\
    \  for k in \"${!histo[@]}\"; do\n    if ((histo[$k] == max)); then\n      echo\
    \ \"$k:$max\"\n    fi\n  done", "  local -A dict\n  for ((i=0; i<${#1}; i++));\
    \ do\n    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n  done\n  local max=0\n  for\
    \ key in \"${!dict[@]}\"; do\n    if [[ ${dict[$key]} -gt $max ]]; then\n    \
    \  max=${dict[$key]}\n    fi\n  done\n  for key in \"${!dict[@]}\"; do\n    if\
    \ [[ ${dict[$key]} -eq $max ]]; then\n      echo \"$key: $max\"\n    fi\n  done",
  "    local -A histo\n    for ((i=0; i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for key in \"${!histo[@]}\"; do\n        if [[\
    \ ${histo[$key]} -gt $max ]]; then\n            max=${histo[$key]}\n        fi\n\
    \    done\n    for key in \"${!histo[@]}\"; do\n        if [[ ${histo[$key]} -eq\
    \ $max ]]; then\n            echo -n \"$key \"\n        fi\n    done\n    echo",
  "    local str=\"$1\"\n    local -A dict\n    local -a max_letters\n    local max_count=0\n\
    \    for ((i=0; i<${#str}; i++)); do\n        local letter=\"${str:i:1}\"\n  \
    \      dict[$letter]=$((dict[$letter]+1))\n        if ((dict[$letter] > max_count));\
    \ then\n            max_count=${dict[$letter]}\n            max_letters=(\"$letter\"\
    )\n        elif ((dict[$letter] == max_count)); then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    echo \"${max_letters[@]} $max_count\"",
  "    local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n\
    \    done\n    local max=0\n    for i in \"${!dict[@]}\"; do\n        if [[ ${dict[$i]}\
    \ -gt $max ]]; then\n            max=${dict[$i]}\n        fi\n    done\n    for\
    \ i in \"${!dict[@]}\"; do\n        if [[ ${dict[$i]} -eq $max ]]; then\n    \
    \        echo \"$i: $max\"\n        fi\n    done", "  local -A hist\n  for ((\
    \ i=0; i<${#1}; i++ )); do\n    (( hist[${1:i:1}]++ ))\n  done\n  local max=0\n\
    \  for k in \"${!hist[@]}\"; do\n    if (( hist[$k] > max )); then\n      max=${hist[$k]}\n\
    \    fi\n  done\n  for k in \"${!hist[@]}\"; do\n    if (( hist[$k] == max ));\
    \ then\n      echo \"$k: $max\"\n    fi\n  done", "  local str=\"$1\"\n  local\
    \ -A dict\n  local max=0\n  local max_letters=\"\"\n  for (( i=0; i<${#str}; i++\
    \ )); do\n    local letter=\"${str:$i:1}\"\n    dict[$letter]=$(( ${dict[$letter]}\
    \ + 1 ))\n    if [[ ${dict[$letter]} -gt $max ]]; then\n      max=${dict[$letter]}\n\
    \      max_letters=\"$letter\"\n    elif [[ ${dict[$letter]} -eq $max ]]; then\n\
    \      max_letters=\"$max_letters $letter\"\n    fi\n  done\n  echo \"$max_letters\"",
  "    local -A letters\n    for (( i=0; i<${#1}; i++ )); do\n        (( letters[${1:i:1}]++\
    \ ))\n    done\n    local max=0\n    for letter in \"${!letters[@]}\"; do\n  \
    \      if (( letters[$letter] > max )); then\n            max=${letters[$letter]}\n\
    \        fi\n    done\n    for letter in \"${!letters[@]}\"; do\n        if ((\
    \ letters[$letter] == max )); then\n            echo \"$letter: $max\"\n     \
    \   fi\n    done", "  local -A histo\n  local -a letters\n  local -i max=0\n \
    \ local -i count=0\n  local letter\n\n  for letter in $(echo \"$1\" | sed 's/\
    \ //g'); do\n    (( histo[$letter]++ ))\n  done\n\n  for letter in \"${!histo[@]}\"\
    ; do\n    count=${histo[$letter]}\n    if (( count > max )); then\n      max=$count\n\
    \      letters=(\"$letter\")\n    elif (( count == max )); then\n      letters+=(\"\
    $letter\")\n    fi\n  done\n\n  echo \"${letters[@]}\"", "  local -A hist\n  local\
    \ -a max\n  local max_count=0\n  for ((i=0; i<${#1}; i++)); do\n    c=${1:i:1}\n\
    \    ((hist[$c]++))\n    if ((hist[$c] > max_count)); then\n      max_count=${hist[$c]}\n\
    \      max=(\"$c\")\n    elif ((hist[$c] == max_count)); then\n      max+=(\"\
    $c\")\n    fi\n  done\n  echo \"{\"\n  for c in \"${max[@]}\"; do\n    echo \"\
    \  $c: $max_count,\"\n  done\n  echo \"}\"", "    local -A histo\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n    done\n    local max=0\n\
    \    for i in \"${!histo[@]}\"; do\n        if [[ ${histo[$i]} -gt $max ]]; then\n\
    \            max=${histo[$i]}\n        fi\n    done\n    for i in \"${!histo[@]}\"\
    ; do\n        if [[ ${histo[$i]} -eq $max ]]; then\n            echo \"$i: $max\"\
    \n        fi\n    done", "    echo \"$1\" | tr -s ' ' '\\n' | sort | uniq -c |\
    \ sort -nr | awk '{print $2, $1}'", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # To debug: echo \"Debug\
    \ messages...\" >&2\n    echo \"Hello world!\"", "    local -A histo\n    for\
    \ ((i=0; i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n    done\n    local\
    \ max=0\n    for key in \"${!histo[@]}\"; do\n        if ((histo[$key] > max));\
    \ then\n            max=${histo[$key]}\n        fi\n    done\n    for key in \"\
    ${!histo[@]}\"; do\n        if ((histo[$key] == max)); then\n            echo\
    \ \"$key:$max\"\n        fi\n    done", "  local -A dict\n  for ((i=0; i<${#1};\
    \ i++)); do\n    ((dict[${1:i:1}]++))\n  done\n  local max=0\n  for i in \"${!dict[@]}\"\
    ; do\n    if ((dict[$i] > max)); then\n      max=${dict[$i]}\n    fi\n  done\n\
    \  for i in \"${!dict[@]}\"; do\n    if ((dict[$i] == max)); then\n      echo\
    \ \"$i: $max\"\n    fi\n  done", "  local -A dict\n  for ((i=0; i<${#1}; i++));\
    \ do\n    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n  done\n  echo ${dict[@]}",
  "    local -A histo\n    for ((i=0; i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for k in \"${!histo[@]}\"; do\n        if [[ ${histo[$k]}\
    \ -gt $max ]]; then\n            max=${histo[$k]}\n        fi\n    done\n    for\
    \ k in \"${!histo[@]}\"; do\n        if [[ ${histo[$k]} -eq $max ]]; then\n  \
    \          echo \"$k: $max\"\n        fi\n    done", "    echo \"$1\" | tr -s\
    \ '[:space:]' '\\n' | sort | uniq -c | sort -nr | awk '{print $2, $1}'", "  echo\
    \ \"$1\" | tr -s ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print $2, $1}'",
  "  local -A dict\n  for ((i=0; i<${#1}; i++)); do\n    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n\
    \  done\n  echo \"${dict[@]}\"", "    local -A dict\n    for ((i=0; i<${#1}; i++));\
    \ do\n        ((dict[${1:i:1}]++))\n    done\n    local max=0\n    for key in\
    \ \"${!dict[@]}\"; do\n        if ((dict[$key] > max)); then\n            max=${dict[$key]}\n\
    \        fi\n    done\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key]\
    \ == max)); then\n            echo \"$key: $max\"\n        fi\n    done", "  \
    \  echo $1 | tr -s ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print $2, $1}'",
  "  # Write your code here\n  # You can use the following function to add a key-value\
    \ pair to the dictionary:\n  # add_to_dict key value\n  #\n  # Example:\n  # add_to_dict\
    \ \"a\" \"1\"\n  #\n  # This will add the key \"a\" with value \"1\" to the dictionary\n\
    \  #\n  # You can use the following function to get the value of a key:\n  # get_from_dict\
    \ key\n  #\n  # Example:\n  # get_from_dict \"a\"\n  #\n  # This will return the\
    \ value of key \"a\"\n  #\n  # You can use the following function to print the\
    \ dictionary:\n  # print_dict\n  #\n  # Example:\n  # print_dict\n  #\n  # This\
    \ will print the dictionary in the following format:\n  # key1 value1\n  # key2\
    \ value2\n  # ...\n  #\n  # You can use the following function to get the length\
    \ of a string:\n  # length \"string\"\n  #\n  # Example:\n  # length \"hello\"\
    \n  #\n  # This will return 5\n  #\n  # You can use the following function to\
    \ get the substring of a string:\n  # substr \"string\" start end\n  #\n  # Example:\n\
    \  # substr \"hello\" 1 3\n  #\n  # This will return \"ell\"\n  #\n  # You can\
    \ use the following function to convert a string to lowercase:\n  # lowercase\
    \ \"string\"\n  #\n  # Example:\n  # lowercase \"HeLlO\"\n  #\n  # This will return\
    \ \"hello\"\n  #\n  # You can use the following function to convert a string to\
    \ uppercase:\n  # uppercase \"string\"\n  #\n  # Example:\n  # uppercase \"HeLlO\"\
    \n  #\n  # This will return \"HELLO\"\n  #\n  # You can use the following function\
    \ to convert a string to an integer:\n  # string_to_int \"string\"\n  #\n  # Example:\n\
    \  # string_to_int \"123\"\n  #\n  # This will return 123\n ", "    local -A dict\n\
    \    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n    done\n \
    \   local max=0\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key] >\
    \ max)); then\n            max=${dict[$key]}\n        fi\n    done\n    for key\
    \ in \"${!dict[@]}\"; do\n        if ((dict[$key] == max)); then\n           \
    \ echo \"$key: $max\"\n        fi\n    done", "  local -A dict\n  for ((i=0; i<${#1};\
    \ i++)); do\n    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n  done\n  local max=0\n\
    \  for key in \"${!dict[@]}\"; do\n    if [[ ${dict[$key]} -gt $max ]]; then\n\
    \      max=${dict[$key]}\n    fi\n  done\n  for key in \"${!dict[@]}\"; do\n \
    \   if [[ ${dict[$key]} -eq $max ]]; then\n      echo \"$key: $max\"\n    fi\n\
    \  done", "    # Write your code here\n    echo \"Not implemented\"", "    local\
    \ -A dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n \
    \   done\n    local max=0\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key]\
    \ > max)); then\n            max=${dict[$key]}\n        fi\n    done\n    for\
    \ key in \"${!dict[@]}\"; do\n        if ((dict[$key] == max)); then\n       \
    \     echo \"$key: $max\"\n        fi\n    done", "    local string=\"$1\"\n \
    \   local -A dict\n    for (( i=0; i<${#string}; i++ )); do\n        local letter=\"\
    ${string:$i:1}\"\n        (( dict[$letter]++ ))\n    done\n    local max=0\n \
    \   for letter in \"${!dict[@]}\"; do\n        if (( dict[$letter] > max )); then\n\
    \            max=${dict[$letter]}\n        fi\n    done\n    for letter in \"\
    ${!dict[@]}\"; do\n        if (( dict[$letter] == max )); then\n            echo\
    \ \"$letter:$max\"\n        fi\n    done", "  local -A dict\n  for ((i=0; i<${#1};\
    \ i++)); do\n    ((dict[${1:i:1}]++))\n  done\n  local max=0\n  for i in \"${!dict[@]}\"\
    ; do\n    if ((dict[$i] > max)); then\n      max=${dict[$i]}\n    fi\n  done\n\
    \  for i in \"${!dict[@]}\"; do\n    if ((dict[$i] == max)); then\n      echo\
    \ \"$i:$max\"\n    fi\n  done", "    local -A dict\n    for ((i=0; i<${#1}; i++));\
    \ do\n        ((dict[${1:i:1}]++))\n    done\n    local max=0\n    for key in\
    \ \"${!dict[@]}\"; do\n        if ((dict[$key] > max)); then\n            max=${dict[$key]}\n\
    \        fi\n    done\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key]\
    \ == max)); then\n            echo \"$key: $max\"\n        fi\n    done", "  \
    \  local -A dict\n    local -a keys\n    local -a values\n    local -a max_keys\n\
    \    local max_value\n    local key\n    local value\n    local i\n\n    for key\
    \ in $(echo $1 | tr ' ' '\\n'); do\n        if [[ ${dict[$key]} ]]; then\n   \
    \         dict[$key]=$((dict[$key] + 1))\n        else\n            dict[$key]=1\n\
    \        fi\n    done\n\n    keys=(${!dict[@]})\n    values=(${dict[@]})\n\n \
    \   max_value=${values[0]}\n    max_keys=(${keys[0]})\n\n    for ((i=1; i<${#keys[@]};\
    \ i++)); do\n        if [[ ${values[$i]} -gt $max_value ]]; then\n           \
    \ max_value=${values[$i]}\n            max_keys=(${keys[$i]})\n        elif [[\
    \ ${values[$i]} -eq $max_value ]]; then\n            max_keys+=(${keys[$i]})\n\
    \        fi\n    done\n\n    echo \"{\"\n    for key in ${max_keys[@]}; do\n \
    \       echo \"    $key: $max_value,\"\n    done\n    echo \"}\"", "  local -A\
    \ letters\n  for (( i=0; i<${#1}; i++ )); do\n    (( letters[${1:i:1}]++ ))\n\
    \  done\n  local max=0\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -gt $max ]]; then\n      max=${letters[$letter]}\n    fi\n  done\n  for letter\
    \ in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]} -eq $max ]]; then\n\
    \      echo \"$letter: $max\"\n    fi\n  done", "    # Write your code here\n\
    \    echo \"Not implemented\"", "    echo \"$1\" | tr -s ' ' '\\n' | sort | uniq\
    \ -c | sort -nr | awk '{print $2, $1}'", "    local string=\"$1\"\n    local -A\
    \ dict\n    local max_count=0\n    local max_keys=\"\"\n    local key\n    local\
    \ count\n\n    for key in $(echo \"$string\" | grep -o .); do\n        (( dict[$key]++\
    \ ))\n    done\n\n    for key in \"${!dict[@]}\"; do\n        count=${dict[$key]}\n\
    \        if (( count > max_count )); then\n            max_count=$count\n    \
    \        max_keys=\"$key\"\n        elif (( count == max_count )); then\n    \
    \        max_keys=\"$max_keys $key\"\n        fi\n    done\n\n    echo \"$max_keys\
    \ $max_count\"", "    local -A hist\n    for ((i=0; i<${#1}; i++)); do\n     \
    \   ((hist[${1:i:1}]++))\n    done\n    local max=0\n    for k in \"${!hist[@]}\"\
    ; do\n        if ((hist[$k] > max)); then\n            max=${hist[$k]}\n     \
    \   fi\n    done\n    for k in \"${!hist[@]}\"; do\n        if ((hist[$k] == max));\
    \ then\n            echo \"$k: $max\"\n        fi\n    done", "    local -A dict\n\
    \    local -a arr\n    local -i max=0\n    local -i i=0\n    local -i len=0\n\
    \    local -i count=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n\
    \    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n\
    \    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -", "    local string=$1\n    local -A dict\n   \
    \ for (( i=0; i<${#string}; i++ )); do\n        local letter=${string:$i:1}\n\
    \        dict[$letter]=$(( ${dict[$letter]} + 1 ))\n    done\n    local max=0\n\
    \    for letter in \"${!dict[@]}\"; do\n        if [[ ${dict[$letter]} -gt $max\
    \ ]]; then\n            max=${dict[$letter]}\n        fi\n    done\n    for letter\
    \ in \"${!dict[@]}\"; do\n        if [[ ${dict[$letter]} -eq $max ]]; then\n \
    \           echo \"$letter:$max\"\n        fi\n    done", "  local string=$1\n\
    \  local -A dict\n  for (( i=0; i<${#string}; i++ )); do\n    dict[${string:$i:1}]=$((\
    \ ${dict[${string:$i:1}]} + 1 ))\n  done\n  local max=0\n  for i in \"${!dict[@]}\"\
    ; do\n    if [[ ${dict[$i]} -gt $max ]]; then\n      max=${dict[$i]}\n    fi\n\
    \  done\n  for i in \"${!dict[@]}\"; do\n    if [[ ${dict[$i]} -eq $max ]]; then\n\
    \      echo \"$i: $max\"\n    fi\n  done", "    local -A histo\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n    done\n    local max=0\n\
    \    for i in \"${!histo[@]}\"; do\n        if ((histo[$i] > max)); then\n   \
    \         max=${histo[$i]}\n        fi\n    done\n    for i in \"${!histo[@]}\"\
    ; do\n        if ((histo[$i] == max)); then\n            echo \"$i:$max\"\n  \
    \      fi\n    done", "    local -A histo\n    for ((i=0; i<${#1}; i++)); do\n\
    \        ((histo[${1:i:1}]++))\n    done\n    local max=0\n    for k in \"${!histo[@]}\"\
    ; do\n        if [[ ${histo[$k]} -gt $max ]]; then\n            max=${histo[$k]}\n\
    \        fi\n    done\n    for k in \"${!histo[@]}\"; do\n        if [[ ${histo[$k]}\
    \ -eq $max ]]; then\n            echo \"$k:$max\"\n        fi\n    done", "  local\
    \ -A histo\n  for ((i=0; i<${#1}; i++)); do\n    ((histo[${1:i:1}]++))\n  done\n\
    \  local max=0\n  for key in \"${!histo[@]}\"; do\n    if [[ ${histo[$key]} -gt\
    \ $max ]]; then\n      max=${histo[$key]}\n    fi\n  done\n  for key in \"${!histo[@]}\"\
    ; do\n    if [[ ${histo[$key]} -eq $max ]]; then\n      echo \"$key: $max\"\n\
    \    fi\n  done", "  local -A dict\n  for ((i=0; i<${#1}; i++)); do\n    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n\
    \  done\n  echo ${dict[@]}", "  local -A dict\n  for ((i=0; i<${#1}; i++)); do\n\
    \    ((dict[${1:i:1}]++))\n  done\n  local max=0\n  for i in \"${!dict[@]}\";\
    \ do\n    if ((dict[$i] > max)); then\n      max=${dict[$i]}\n    fi\n  done\n\
    \  for i in \"${!dict[@]}\"; do\n    if ((dict[$i] == max)); then\n      echo\
    \ \"$i: $max\"\n    fi\n  done", "    echo \"$1\" | tr -s ' ' '\\n' | sort | uniq\
    \ -c | sort -rn | awk '{print $2, $1}'", "  local -A dict\n  local -a keys\n \
    \ local -a values\n  local -a max_keys\n  local max_value=0\n  local key\n  local\
    \ value\n  local i\n\n  for i in $(echo \"$1\" | tr ' ' '\\n'); do\n    if [[\
    \ -z ${dict[$i]} ]]; then\n      dict[$i]=1\n    else\n      dict[$i]=$((dict[$i]\
    \ + 1))\n    fi\n  done\n\n  for key in \"${!dict[@]}\"; do\n    value=${dict[$key]}\n\
    \    if [[ $value -gt $max_value ]]; then\n      max_value=$value\n      max_keys=(\"\
    $key\")\n    elif [[ $value -eq $max_value ]]; then\n      max_keys+=(\"$key\"\
    )\n    fi\n  done\n\n  echo \"${max_keys[@]}\"", "    local -A histo\n    for\
    \ ((i=0; i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n    done\n    local\
    \ max=0\n    for key in \"${!histo[@]}\"; do\n        if ((histo[$key] > max));\
    \ then\n            max=${histo[$key]}\n        fi\n    done\n    for key in \"\
    ${!histo[@]}\"; do\n        if ((histo[$key] == max)); then\n            echo\
    \ \"$key:$max\"\n        fi\n    done", "  local -A dict\n  local -a letters\n\
    \  local letter\n  local max\n  local count\n\n  for letter in $(echo $1 | grep\
    \ -o .); do\n    dict[$letter]=$((dict[$letter] + 1))\n  done\n\n  for letter\
    \ in \"${!dict[@]}\"; do\n    if [[ -z $max || ${dict[$letter]} -gt $max ]]; then\n\
    \      max=${dict[$letter]}\n    fi\n  done\n\n  for letter in \"${!dict[@]}\"\
    ; do\n    if [[ ${dict[$letter]} -eq $max ]]; then\n      letters+=(\"$letter\"\
    )\n    fi\n  done\n\n  echo ${letters[@]}", "    echo \"$1\" | tr -s ' ' '\\n'\
    \ | sort | uniq -c | sort -nr | awk '{print $2, $1}'", "    # Write your code\
    \ here\n    # To print results to the standard output you can use echo\n    #\
    \ To keep the results for further processing you must store them in a variable\n\
    \    echo \"a:1\"", "    local -A dict\n    for ((i=0; i<${#1}; i++)); do\n  \
    \      dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n    done\n    echo \"${!dict[@]}\"\
    \n    echo \"${dict[@]}\"", "    local string=$1\n    local -A dict\n    local\
    \ max=0\n    local max_letters=()\n    for (( i=0; i<${#string}; i++ )); do\n\
    \        local letter=${string:$i:1}\n        dict[$letter]=$(( dict[$letter]\
    \ + 1 ))\n        if [[ ${dict[$letter]} -gt $max ]]; then\n            max=${dict[$letter]}\n\
    \            max_letters=(\"$letter\")\n        elif [[ ${dict[$letter]} -eq $max\
    \ ]]; then\n            max_letters+=(\"$letter\")\n        fi\n    done\n   \
    \ echo \"${max_letters[@]} $max\"", "  local string=$1\n  local -A dictionary\n\
    \  for (( i=0; i<${#string}; i++ )); do\n    local letter=${string:$i:1}\n   \
    \ (( dictionary[$letter]++ ))\n  done\n  local max_count=0\n  for letter in \"\
    ${!dictionary[@]}\"; do\n    if (( dictionary[$letter] > max_count )); then\n\
    \      max_count=${dictionary[$letter]}\n    fi\n  done\n  for letter in \"${!dictionary[@]}\"\
    ; do\n    if (( dictionary[$letter] == max_count )); then\n      echo $letter\n\
    \    fi\n  done", "    local string=$1\n    local -A dict\n    for (( i=0; i<${#string};\
    \ i++ )); do\n        dict[${string:$i:1}]=$(( ${dict[${string:$i:1}]} + 1 ))\n\
    \    done\n    local max=0\n    for i in \"${!dict[@]}\"; do\n        if [[ ${dict[$i]}\
    \ -gt $max ]]; then\n            max=${dict[$i]}\n        fi\n    done\n    for\
    \ i in \"${!dict[@]}\"; do\n        if [[ ${dict[$i]} -eq $max ]]; then\n    \
    \        echo \"$i: $max\"\n        fi\n    done", "  local -A hist\n  for ((\
    \ i=0; i<${#1}; i++ )); do\n    (( hist[${1:i:1}]++ ))\n  done\n  local max=0\n\
    \  for key in \"${!hist[@]}\"; do\n    if (( hist[$key] > max )); then\n     \
    \ max=${hist[$key]}\n    fi\n  done\n  for key in \"${!hist[@]}\"; do\n    if\
    \ (( hist[$key] == max )); then\n      echo \"$key: $max\"\n    fi\n  done", " \
    \ local -A dict\n  local -a keys\n  local -i max=0\n  local -i i=0\n  local -i\
    \ len=0\n  local -i count=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
    \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n\
    \  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n\
    \  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n\
    \  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n\
    \  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -", "  local input=\"$1\"\n  local output=\"\"\n  local max_count=0\n\
    \  local letter=\"\"\n  local count=0\n  local letter_count=\"\"\n  local letter_counts=\"\
    \"\n  local letter_counts_array=()\n  local letter_counts_array_length=0\n  local\
    \ i=0\n\n  if [[ -z \"$input\" ]]; then\n    echo \"Error: No input provided\"\
    \n    return 1\n  fi\n\n  # Remove all spaces\n  output=\"${input// /}\"\n\n \
    \ # Iterate through each letter\n  for letter in $(echo \"$output\" | fold -w1);\
    \ do\n    # Count the number of occurrences of the letter\n    count=$(echo \"\
    $output\" | grep -o \"$letter\" | wc -l)\n\n    # If the count is greater than\
    \ the max count, set the max count to the count\n    if [[ \"$count\" -gt \"$max_count\"\
    \ ]]; then\n      max_count=\"$count\"\n    fi\n\n    # Store the letter and count\
    \ in a string\n    letter_count=\"$letter:$count\"\n\n    # Add the letter and\
    \ count to the letter counts string\n    letter_counts=\"$letter_counts $letter_count\"\
    \n  done\n\n  # Split the letter counts string into an array\n  letter_counts_array=($letter_counts)\n\
    \n  # Get the length of the letter counts array\n  letter_counts_array_length=${#letter_counts_array[@]}\n\
    \n  # Iterate through each letter count\n  for (( i=0; i<\"$letter_counts_array_length\"\
    ; i++ )); do\n    # Split the letter count into a letter and count\n    letter=\"\
    ${letter_counts_array[$i]%:*}\"\n    count=\"${letter_counts_array[$i]#*:}\"\n\
    \n    # If the count is equal to the max count, print the letter and count\n \
    \   if [[ \"$count\" -eq \"$max_count\" ]]; then\n      echo \"$letter:$count\"\
    \n    fi\n  done", "  local str=$1\n  local -A dict\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    local c=${str:$i:1}\n    if [[ -z ${dict[$c]} ]]; then\n   \
    \   dict[$c]=1\n    else\n      dict[$c]=$(( ${dict[$c]} + 1 ))\n    fi\n  done\n\
    \  local max=0\n  for k in \"${!dict[@]}\"; do\n    if [[ ${dict[$k]} -gt $max\
    \ ]]; then\n      max=${dict[$k]}\n    fi\n  done\n  for k in \"${!dict[@]}\"\
    ; do\n    if [[ ${dict[$k]} -eq $max ]]; then\n      echo \"$k: $max\"\n    fi\n\
    \  done", "  local -A histogram\n  local -a letters\n  local letter\n  local max\n\
    \  local max_letters\n\n  for letter in $(echo \"$1\" | grep -o .); do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n\n  max=0\n  for letter in \"${!histogram[@]}\"; do\n    if [[\
    \ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n \
    \     max_letters=(\"$letter\")\n    elif [[ ${histogram[$letter]} -eq $max ]];\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  echo \"${max_letters[@]}\"",
  "    local -A hist\n    local -A max\n    local max_count=0\n    local max_letter\n\
    \    for ((i=0; i<${#1}; i++)); do\n        local letter=${1:i:1}\n        ((hist[$letter]++))\n\
    \        if ((hist[$letter] > max_count)); then\n            max_count=${hist[$letter]}\n\
    \            max_letter=$letter\n        fi\n    done\n    for letter in \"${!hist[@]}\"\
    ; do\n        if ((hist[$letter] == max_count)); then\n            max[$letter]=$max_count\n\
    \        fi\n    done\n    echo \"${max[@]}\"", "  local string=\"$1\"\n  local\
    \ -A histogram\n  local -a max_letters\n  local max_count=0\n\n  for (( i=0; i<${#string};\
    \ i++ )); do\n    local letter=\"${string:$i:1}\"\n    (( histogram[$letter]++\
    \ ))\n    if (( histogram[$letter] > max_count )); then\n      max_count=${histogram[$letter]}\n\
    \      max_letters=(\"$letter\")\n    elif (( histogram[$letter] == max_count\
    \ )); then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  echo \"${max_letters[@]}\"",
  "    if [ -z \"$1\" ]; then\n        echo \"No input given\"\n        return 1\n\
    \    fi\n\n    # Create an array of the letters\n    letters=($(echo \"$1\" |\
    \ grep -o .))\n\n    # Create an array of the letter counts\n    counts=($(echo\
    \ \"$1\" | grep -o . | sort | uniq -c | sort -nr | awk '{print $1}'))\n\n    #\
    \ Create an array of the letters with the most occurrences\n    max_letters=($(echo\
    \ \"$1\" | grep -o . | sort | uniq -c | sort -nr | awk '{print $2}' | head -n\
    \ 1))\n\n    # Create an array of the letters with the most occurrences\n    max_counts=($(echo\
    \ \"$1\" | grep -o . | sort | uniq -c | sort -nr | awk '{print $1}' | head -n\
    \ 1))\n\n    # Create a dictionary of the letters and their counts\n    declare\
    \ -A dict\n    for i in \"${!letters[@]}\"; do\n        dict[${letters[$i]}]=${counts[$i]}\n\
    \    done\n\n    # Create a dictionary of the letters with the most occurrences\
    \ and their counts\n    declare -A max_dict\n    for i in \"${!max_letters[@]}\"\
    ; do\n        max_dict[${max_letters[$i]}]=${max_counts[$i]}\n    done\n\n   \
    \ echo \"Dictionary: ${dict[@]}\"\n    echo \"Max Dictionary: ${max_dict[@]}\"",
  "    local string=$1\n    local -A dict\n    for (( i=0; i<${#string}; i++ )); do\n\
    \        local letter=${string:$i:1}\n        dict[$letter]=$(( ${dict[$letter]}\
    \ + 1 ))\n    done\n    local max=0\n    for letter in \"${!dict[@]}\"; do\n \
    \       if [[ ${dict[$letter]} -gt $max ]]; then\n            max=${dict[$letter]}\n\
    \        fi\n    done\n    for letter in \"${!dict[@]}\"; do\n        if [[ ${dict[$letter]}\
    \ -eq $max ]]; then\n            echo \"$letter: $max\"\n        fi\n    done",
  "  # your code here\n  echo $1 | tr ' ' '\\n' | sort | uniq -c | sort -nr | awk\
    \ '{print $2, $1}'", "    local -A dict\n    for ((i=0; i<${#1}; i++)); do\n \
    \       ((dict[${1:i:1}]++))\n    done\n    local -i max=0\n    for key in \"\
    ${!dict[@]}\"; do\n        if ((dict[$key] > max)); then\n            max=${dict[$key]}\n\
    \        fi\n    done\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key]\
    \ == max)); then\n            echo \"$key: $max\"\n        fi\n    done", "  \
    \  local -A histogram\n    for (( i=0; i<${#1}; i++ )); do\n        (( histogram[${1:i:1}]++\
    \ ))\n    done\n    echo \"${!histogram[@]}\"", "    local -A dict\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n    done\n    local max=0\n\
    \    for i in \"${!dict[@]}\"; do\n        if ((dict[$i] > max)); then\n     \
    \       max=${dict[$i]}\n        fi\n    done\n    for i in \"${!dict[@]}\"; do\n\
    \        if ((dict[$i] == max)); then\n            echo \"$i:$max\"\n        fi\n\
    \    done", "  local -A histogram\n  for (( i=0; i<${#1}; i++ )); do\n    (( histogram[${1:i:1}]++\
    \ ))\n  done\n  echo \"${!histogram[@]}\"", "  local -A hist\n  local -a max\n\
    \  local max_count=0\n  for ((i=0; i<${#1}; i++)); do\n    ((hist[${1:i:1}]++))\n\
    \    if ((hist[${1:i:1}] > max_count)); then\n      max_count=${hist[${1:i:1}]}\n\
    \      max=(\"${1:i:1}\")\n    elif ((hist[${1:i:1}] == max_count)); then\n  \
    \    max+=(\"${1:i:1}\")\n    fi\n  done\n  echo \"${max[@]}\"", "    local -A\
    \ dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n    done\n\
    \    local max=0\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key]\
    \ > max)); then\n            max=${dict[$key]}\n        fi\n    done\n    for\
    \ key in \"${!dict[@]}\"; do\n        if ((dict[$key] == max)); then\n       \
    \     echo \"$key: $max\"\n        fi\n    done", "  local -A dict\n  for ((i=0;\
    \ i<${#1}; i++)); do\n    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n  done\n  echo\
    \ \"${dict[@]}\"", "    local -A histo\n    local -a max\n    local max_count=0\n\
    \    for ((i=0; i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n        if\
    \ ((histo[${1:i:1}] > max_count)); then\n            max_count=${histo[${1:i:1}]}\n\
    \            max=(\"${1:i:1}\")\n        elif ((histo[${1:i:1}] == max_count));\
    \ then\n            max+=(\"${1:i:1}\")\n        fi\n    done\n    echo \"${max[@]}\"",
  "  local -A dict\n  for ((i=0; i<${#1}; i++)); do\n    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n\
    \  done\n  echo \"${dict[@]}\"", "    # Write your code here\n    echo \"Not implemented\
    \ yet\"", "    local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        dict[${1:i:1}]=$((dict[${1:i:1}]+1))\n\
    \    done\n    local max=0\n    for key in \"${!dict[@]}\"; do\n        if [[\
    \ ${dict[$key]} -gt $max ]]; then\n            max=${dict[$key]}\n        fi\n\
    \    done\n    for key in \"${!dict[@]}\"; do\n        if [[ ${dict[$key]} -eq\
    \ $max ]]; then\n            echo \"$key: $max\"\n        fi\n    done", "   \
    \ echo \"$1\" | tr -s ' ' '\\n' | sort | uniq -c | sort -rn | awk '{print $2,\
    \ $1}'", "    local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key]\
    \ > max)); then\n            max=${dict[$key]}\n        fi\n    done\n    for\
    \ key in \"${!dict[@]}\"; do\n        if ((dict[$key] == max)); then\n       \
    \     echo \"$key: $max\"\n        fi\n    done", "    local -A dict\n    for\
    \ ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n    done\n    local\
    \ max=0\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key] > max));\
    \ then\n            max=${dict[$key]}\n        fi\n    done\n    for key in \"\
    ${!dict[@]}\"; do\n        if ((dict[$key] == max)); then\n            echo \"\
    $key: $max\"\n        fi\n    done", "    local -A dict\n    for ((i=0; i<${#1};\
    \ i++)); do\n        ((dict[${1:i:1}]++))\n    done\n    local max=0\n    for\
    \ key in \"${!dict[@]}\"; do\n        if [[ ${dict[$key]} -gt $max ]]; then\n\
    \            max=${dict[$key]}\n        fi\n    done\n    for key in \"${!dict[@]}\"\
    ; do\n        if [[ ${dict[$key]} -eq $max ]]; then\n            echo \"$key:$max\"\
    \n        fi\n    done", "  local -A dict\n  local -a arr\n  local max=0\n  local\
    \ max_letters\n  local letter\n  local count\n\n  # Create an array of letters\n\
    \  arr=($(echo $1 | sed 's/\\(.\\)/\\1 /g'))\n\n  # Create a dictionary of letters\
    \ and their counts\n  for letter in \"${arr[@]}\"; do\n    ((dict[$letter]++))\n\
    \  done\n\n  # Find the max count\n  for letter in \"${!dict[@]}\"; do\n    count=${dict[$letter]}\n\
    \    if ((count > max)); then\n      max=$count\n      max_letters=$letter\n \
    \   elif ((count == max)); then\n      max_letters=\"$max_letters $letter\"\n\
    \    fi\n  done\n\n  # Print the result\n  echo \"$max_letters:$max\"", "    local\
    \ -A dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n \
    \   done\n    local max=0\n    for k in \"${!dict[@]}\"; do\n        if ((dict[$k]\
    \ > max)); then\n            max=${dict[$k]}\n        fi\n    done\n    for k\
    \ in \"${!dict[@]}\"; do\n        if ((dict[$k] == max)); then\n            echo\
    \ \"$k:$max\"\n        fi\n    done", "  local -A dict\n  local max=0\n  local\
    \ -a max_keys\n  for ((i=0; i<${#1}; i++)); do\n    local c=${1:i:1}\n    ((dict[$c]++))\n\
    \    if ((dict[$c] > max)); then\n      max=${dict[$c]}\n      max_keys=(\"$c\"\
    )\n    elif ((dict[$c] == max)); then\n      max_keys+=(\"$c\")\n    fi\n  done\n\
    \  echo \"${max_keys[@]}\"", "    local -A histo\n    for ((i=0; i<${#1}; i++));\
    \ do\n        ((histo[${1:i:1}]++))\n    done\n    local max=0\n    for k in \"\
    ${!histo[@]}\"; do\n        if ((histo[$k] > max)); then\n            max=${histo[$k]}\n\
    \        fi\n    done\n    for k in \"${!histo[@]}\"; do\n        if ((histo[$k]\
    \ == max)); then\n            echo \"$k:$max\"\n        fi\n    done", "    local\
    \ -A dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n \
    \   done\n    local max=0\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key]\
    \ > max)); then\n            max=${dict[$key]}\n        fi\n    done\n    for\
    \ key in \"${!dict[@]}\"; do\n        if ((dict[$key] == max)); then\n       \
    \     echo \"$key: $max\"\n        fi\n    done", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # To debug:\
    \ echo \"Debug messages...\" >&2\n    echo \"Hello world!\"", "  local -A dict\n\
    \  local -a max\n  local max_count=0\n  for ((i=0; i<${#1}; i++)); do\n    local\
    \ c=${1:i:1}\n    ((dict[$c]++))\n    if ((dict[$c] > max_count)); then\n    \
    \  max_count=${dict[$c]}\n      max=($c)\n    elif ((dict[$c] == max_count));\
    \ then\n      max+=($c)\n    fi\n  done\n  echo \"${max[@]} $max_count\"", " \
    \   local -A histogram\n    for (( i=0; i<${#1}; i++ )); do\n        (( histogram[${1:i:1}]++\
    \ ))\n    done\n    echo \"${!histogram[@]}\"", "    local -A letters\n    local\
    \ -a max_letters\n    local max_count=0\n    for ((i=0; i<${#1}; i++)); do\n \
    \       local letter=${1:i:1}\n        ((letters[$letter]++))\n        if ((letters[$letter]\
    \ > max_count)); then\n            max_count=${letters[$letter]}\n           \
    \ max_letters=(\"$letter\")\n        elif ((letters[$letter] == max_count)); then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n    echo \"${max_letters[@]}\"",
  "    local -A histo\n    local -a max\n    local max_count=0\n    for ((i=0; i<${#1};\
    \ i++)); do\n        ((histo[${1:i:1}]++))\n        if ((histo[${1:i:1}] > max_count));\
    \ then\n            max_count=${histo[${1:i:1}]}\n            max=(${1:i:1})\n\
    \        elif ((histo[${1:i:1}] == max_count)); then\n            max+=(${1:i:1})\n\
    \        fi\n    done\n    echo \"${max[@]}\"", "    local -A histo\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n    done\n    local max=0\n\
    \    for key in \"${!histo[@]}\"; do\n        if ((histo[$key] > max)); then\n\
    \            max=${histo[$key]}\n        fi\n    done\n    for key in \"${!histo[@]}\"\
    ; do\n        if ((histo[$key] == max)); then\n            echo \"$key:$max\"\n\
    \        fi\n    done", "    # Write your code here\n    # To print results to\
    \ the standard output you can use echo\n    # To debug: echo \"Debug messages...\"\
    \ >&2\n    echo \"Hello, $1\"", "    local -A dict\n    local -a arr\n    local\
    \ max=0\n    local key\n    local value\n    local i\n    local j\n    local len=${#1}\n\
    \    for ((i=0; i<len; i++)); do\n        arr[i]=${1:i:1}\n    done\n    for ((i=0;\
    \ i<len; i++)); do\n        key=${arr[i]}\n        value=${dict[$key]}\n     \
    \   if [[ -z $value ]]; then\n            dict[$key]=1\n        else\n       \
    \     dict[$key]=$((value+1))\n        fi\n    done\n    for key in \"${!dict[@]}\"\
    ; do\n        value=${dict[$key]}\n        if [[ $value -gt $max ]]; then\n  \
    \          max=$value\n        fi\n    done\n    for key in \"${!dict[@]}\"; do\n\
    \        value=${dict[$key]}\n        if [[ $value -eq $max ]]; then\n       \
    \     printf \"%s \" \"$key\"\n        fi\n    done\n    printf \"\\n\"", "  #\
    \ Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n", "    echo \"$1\" | tr -s ' ' '\\n' | sort | uniq -c | sort -nr |\
    \ awk '{print $2, $1}'", "  local -A hist\n  local -a max\n  local max_count=0\n\
    \  for ((i=0; i<${#1}; i++)); do\n    ((hist[${1:i:1}]++))\n    if ((hist[${1:i:1}]\
    \ > max_count)); then\n      max_count=${hist[${1:i:1}]}\n      max=(\"${1:i:1}\"\
    )\n    elif ((hist[${1:i:1}] == max_count)); then\n      max+=(\"${1:i:1}\")\n\
    \    fi\n  done\n  echo \"${max[@]}\"", "    local -A histo\n    local -a max_keys\n\
    \    local max_key\n    local max_value\n    local key\n    local value\n    local\
    \ -i i\n    local -i j\n    local -i len\n    local -i len_max_keys\n    local\
    \ -i len_max_value\n    local -i len_value\n    local -i len_key\n    local -i\
    \ len_max_key\n    local -i len_max_keys\n    local -i len_max_value\n    local\
    \ -i len_value\n    local -i len_key\n    local -i len_max_key\n    local -i len_max_keys\n\
    \    local -i len_max_value\n    local -i len_value\n    local -i len_key\n  \
    \  local -i len_max_key\n    local -i len_max_keys\n    local -i len_max_value\n\
    \    local -i len_value\n    local -i len_key\n    local -i len_max_key\n    local\
    \ -i len_max_keys\n    local -i len_max_value\n    local -i len_value\n    local\
    \ -i len_key\n    local -i len_max_key\n    local -i len_max_keys\n    local -i\
    \ len_max_value\n    local -i len_value\n    local -i len_key\n    local -i len_max_key\n\
    \    local -i len_max_keys\n    local -i len_max_value\n    local -i len_value\n\
    \    local -i len_key\n    local -i len_max_key\n    local -i len_max_keys\n \
    \   local -i len_max_value\n    local -i len_value\n    local -i len_key\n   \
    \ local -i len_max_key\n    local -i len_max_keys\n    local -i len_max_value\n\
    \    local -i len_value\n    local -i len_key\n    local -i len_max_key\n    local\
    \ -i len_max_keys\n    local -i len_max_value\n    local -i len_value\n    local\
    \ -i len_key\n    local -i len_max_", "    echo \"$1\" | tr -cs \"[:alpha:]\"\
    \ \"\\n\" | sort | uniq -c | sort -nr | awk '{print $2, $1}'", "  declare -A dict\n\
    \  for (( i=0; i<${#1}; i++ )); do\n    (( dict[${1:i:1}]++ ))\n  done\n  max=0\n\
    \  for key in \"${!dict[@]}\"; do\n    if (( dict[$key] > max )); then\n     \
    \ max=${dict[$key]}\n    fi\n  done\n  for key in \"${!dict[@]}\"; do\n    if\
    \ (( dict[$key] == max )); then\n      echo \"$key:$max\"\n    fi\n  done", " \
    \   local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for k in \"${!dict[@]}\"; do\n        if ((dict[$k]\
    \ > max)); then\n            max=${dict[$k]}\n        fi\n    done\n    for k\
    \ in \"${!dict[@]}\"; do\n        if ((dict[$k] == max)); then\n            echo\
    \ \"$k: $max\"\n        fi\n    done", "  local -A dict\n  for ((i=0; i<${#1};\
    \ i++)); do\n    ((dict[${1:i:1}]++))\n  done\n  local max=0\n  for key in \"\
    ${!dict[@]}\"; do\n    if ((dict[$key] > max)); then\n      max=${dict[$key]}\n\
    \    fi\n  done\n  for key in \"${!dict[@]}\"; do\n    if ((dict[$key] == max));\
    \ then\n      echo \"$key: $max\"\n    fi\n  done", "    local -A dict\n    for\
    \ ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n    done\n    local\
    \ max=0\n    for i in \"${!dict[@]}\"; do\n        if ((dict[$i] > max)); then\n\
    \            max=${dict[$i]}\n        fi\n    done\n    for i in \"${!dict[@]}\"\
    ; do\n        if ((dict[$i] == max)); then\n            echo \"$i: $max\"\n  \
    \      fi\n    done", "  echo $1 | tr -s ' ' '\\n' | sort | uniq -c | sort -rn\
    \ | awk '{print $2, $1}'", "  local -A dict\n  for ((i=0; i<${#1}; i++)); do\n\
    \    local char=${1:i:1}\n    ((dict[$char]++))\n  done\n  local max=0\n  for\
    \ key in \"${!dict[@]}\"; do\n    if ((dict[$key] > max)); then\n      max=${dict[$key]}\n\
    \    fi\n  done\n  for key in \"${!dict[@]}\"; do\n    if ((dict[$key] == max));\
    \ then\n      echo -n \"$key \"\n    fi\n  done\n  echo", "    local -A hist\n\
    \    for ((i=0; i<${#1}; i++)); do\n        hist[${1:i:1}]=$((hist[${1:i:1}]+1))\n\
    \    done\n    local max=0\n    for key in \"${!hist[@]}\"; do\n        if ((hist[$key]\
    \ > max)); then\n            max=${hist[$key]}\n        fi\n    done\n    for\
    \ key in \"${!hist[@]}\"; do\n        if ((hist[$key] == max)); then\n       \
    \     echo -n \"$key \"\n        fi\n    done\n    echo", "    local -A dict\n\
    \    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n    done\n \
    \   local max=0\n    for k in \"${!dict[@]}\"; do\n        if ((dict[$k] > max));\
    \ then\n            max=${dict[$k]}\n        fi\n    done\n    for k in \"${!dict[@]}\"\
    ; do\n        if ((dict[$k] == max)); then\n            echo \"$k:$max\"\n   \
    \     fi\n    done", "  local -A dict\n  local max_count=0\n  local max_letters=()\n\
    \  for ((i=0; i<${#1}; i++)); do\n    local letter=${1:i:1}\n    dict[$letter]=$((dict[$letter]\
    \ + 1))\n    if [[ ${dict[$letter]} -gt $max_count ]]; then\n      max_count=${dict[$letter]}\n\
    \      max_letters=(\"$letter\")\n    elif [[ ${dict[$letter]} -eq $max_count\
    \ ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  echo \"${max_letters[@]}\
    \ $max_count\"", "    local -A dict\n    local str=\"$1\"\n    local max=0\n \
    \   local max_letters=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        local\
    \ letter=\"${str:$i:1}\"\n        if [[ -z \"${dict[$letter]}\" ]]; then\n   \
    \         dict[$letter]=1\n        else\n            dict[$letter]=$((dict[$letter]+1))\n\
    \        fi\n        if [[ ${dict[$letter]} -gt $max ]]; then\n            max=${dict[$letter]}\n\
    \            max_letters=\"$letter\"\n        elif [[ ${dict[$letter]} -eq $max\
    \ ]]; then\n            max_letters=\"$max_letters $letter\"\n        fi\n   \
    \ done\n    echo \"$max_letters\"", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # To debug: echo \"Debug\
    \ messages...\" >&2\n    echo \"Hello world!\"", "    local -A dict\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        local char=${1:i:1}\n        dict[$char]=$((dict[$char]+1))\n\
    \    done\n    local max=0\n    for key in \"${!dict[@]}\"; do\n        if [[\
    \ ${dict[$key]} -gt $max ]]; then\n            max=${dict[$key]}\n        fi\n\
    \    done\n    for key in \"${!dict[@]}\"; do\n        if [[ ${dict[$key]} -eq\
    \ $max ]]; then\n            echo \"$key: $max\"\n        fi\n    done", "   \
    \ local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for i in \"${!dict[@]}\"; do\n        if ((dict[$i]\
    \ > max)); then\n            max=${dict[$i]}\n        fi\n    done\n    for i\
    \ in \"${!dict[@]}\"; do\n        if ((dict[$i] == max)); then\n            echo\
    \ -n \"$i \"\n        fi\n    done\n    echo", "  local input=\"$1\"\n  local\
    \ -A histogram\n  local -A result\n  local max=0\n  for (( i=0; i<${#input}; i++\
    \ )); do\n    local char=\"${input:$i:1}\"\n    (( histogram[$char]++ ))\n   \
    \ if (( histogram[$char] > max )); then\n      max=${histogram[$char]}\n    fi\n\
    \  done\n  for key in \"${!histogram[@]}\"; do\n    if (( histogram[$key] == max\
    \ )); then\n      result[$key]=$max\n    fi\n  done\n  echo \"${result[@]}\"",
  "  if [ -z \"$1\" ]; then\n    echo \"Usage: $0 <string>\"\n    return 1\n  fi\n\
    \n  local -A histogram\n  for (( i=0; i<${#1}; i++ )); do\n    local letter=\"\
    ${1:$i:1}\"\n    histogram[$letter]=$(( ${histogram[$letter]:-0} + 1 ))\n  done\n\
    \n  local max_count=0\n  for letter in \"${!histogram[@]}\"; do\n    if [ ${histogram[$letter]}\
    \ -gt $max_count ]; then\n      max_count=${histogram[$letter]}\n    fi\n  done\n\
    \n  for letter in \"${!histogram[@]}\"; do\n    if [ ${histogram[$letter]} -eq\
    \ $max_count ]; then\n      echo \"$letter: $max_count\"\n    fi\n  done", " \
    \   local -A dict\n    for ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for i in \"${!dict[@]}\"; do\n        if [[ ${dict[$i]}\
    \ -gt $max ]]; then\n            max=${dict[$i]}\n        fi\n    done\n    for\
    \ i in \"${!dict[@]}\"; do\n        if [[ ${dict[$i]} -eq $max ]]; then\n    \
    \        echo \"$i:$max\"\n        fi\n    done", "    local -A dict\n    for\
    \ ((i=0; i<${#1}; i++)); do\n        ((dict[${1:i:1}]++))\n    done\n    local\
    \ max=0\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key] > max));\
    \ then\n            max=${dict[$key]}\n        fi\n    done\n    for key in \"\
    ${!dict[@]}\"; do\n        if ((dict[$key] == max)); then\n            echo \"\
    $key:$max\"\n        fi\n    done", "    local -A histo\n    local -a max\n  \
    \  local max_count=0\n    for ((i=0; i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n\
    \        if ((histo[${1:i:1}] > max_count)); then\n            max_count=${histo[${1:i:1}]}\n\
    \            max=(\"${1:i:1}\")\n        elif ((histo[${1:i:1}] == max_count));\
    \ then\n            max+=(\"${1:i:1}\")\n        fi\n    done\n    echo \"${max[@]}\"",
  "  local -A histo\n  for ((i=0; i<${#1}; i++)); do\n    ((histo[${1:i:1}]++))\n\
    \  done\n  local max=0\n  for key in \"${!histo[@]}\"; do\n    if ((histo[$key]\
    \ > max)); then\n      max=${histo[$key]}\n    fi\n  done\n  for key in \"${!histo[@]}\"\
    ; do\n    if ((histo[$key] == max)); then\n      echo \"$key:$max\"\n    fi\n\
    \  done", "  declare -A letters\n  for (( i=0; i<${#1}; i++ )); do\n    letter=${1:$i:1}\n\
    \    if [[ -z ${letters[$letter]} ]]; then\n      letters[$letter]=1\n    else\n\
    \      letters[$letter]=$(( ${letters[$letter]} + 1 ))\n    fi\n  done\n  max=0\n\
    \  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]} -gt $max\
    \ ]]; then\n      max=${letters[$letter]}\n    fi\n  done\n  for letter in \"\
    ${!letters[@]}\"; do\n    if [[ ${letters[$letter]} -eq $max ]]; then\n      echo\
    \ \"$letter: $max\"\n    fi\n  done", "  local -A hist\n  local -a max\n  local\
    \ max_count=0\n  for ((i=0; i<${#1}; i++)); do\n    local char=${1:i:1}\n    ((hist[$char]++))\n\
    \    if ((hist[$char] > max_count)); then\n      max_count=${hist[$char]}\n  \
    \    max=(\"$char\")\n    elif ((hist[$char] == max_count)); then\n      max+=(\"\
    $char\")\n    fi\n  done\n  echo \"${max[@]}\"", "    local -A histo\n    for\
    \ ((i=0; i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n    done\n    local\
    \ max=0\n    for key in \"${!histo[@]}\"; do\n        if [[ ${histo[$key]} -gt\
    \ $max ]]; then\n            max=${histo[$key]}\n        fi\n    done\n    for\
    \ key in \"${!histo[@]}\"; do\n        if [[ ${histo[$key]} -eq $max ]]; then\n\
    \            echo \"$key: $max\"\n        fi\n    done", "    local -A histo\n\
    \    local -a max\n    local max_count=0\n    for ((i=0; i<${#1}; i++)); do\n\
    \        local c=${1:i:1}\n        ((histo[$c]++))\n        if ((histo[$c] > max_count));\
    \ then\n            max_count=${histo[$c]}\n            max=($c)\n        elif\
    \ ((histo[$c] == max_count)); then\n            max+=($c)\n        fi\n    done\n\
    \    echo \"${max[@]} $max_count\"", "  local string=$1\n  local -A dict\n  for\
    \ (( i=0; i<${#string}; i++ )); do\n    local char=${string:$i:1}\n    dict[$char]=$((\
    \ ${dict[$char]} + 1 ))\n  done\n  local max=0\n  for key in \"${!dict[@]}\";\
    \ do\n    if [[ ${dict[$key]} -gt $max ]]; then\n      max=${dict[$key]}\n   \
    \ fi\n  done\n  for key in \"${!dict[@]}\"; do\n    if [[ ${dict[$key]} -eq $max\
    \ ]]; then\n      echo \"$key:$max\"\n    fi\n  done", "    local -A dict\n  \
    \  local -a keys\n    local -a values\n    local -i max\n    local -i i\n    local\
    \ -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local\
    \ -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local\
    \ -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i count\n    local -i max_count\n    local\
    \ -i max_count_index\n    local -i max_count_index_2\n    local -i max_count_index_3\n\
    \    local -i max_count_index_4\n    local -i max_count_index_5\n    local -i\
    \ max_count_index_6\n    local -i max_count_index_7\n    local -i max_count_index_8\n\
    \    local -i max_count_index_9\n    local -i max_count_index_10\n    local -i\
    \ max_count_index_11\n    local -i max_count_index_12\n    local -i max_count_index_13\n\
    \    local -i max_count_index_14\n    local -i max_count_index_15\n    local -i\
    \ max_count_index_16\n    local -i max_count_index_17\n    local -i max_count_index_18\n\
    \    local -i max_count_index_19\n    local -i max_count_index_20\n    local -i\
    \ max_count_index_21\n    local -i max_count_index_22\n    local -i max_count_index_23\n\
    \    local -i max_count_index_24\n    local -i max_count_index_25\n    local -i\
    \ max_count_index_26\n    local -i max_count_index_27\n    local -i max_count_index_28\n\
    \    local -i max_count_index_29\n    local -i max_count_index_30\n    local -i\
    \ max_count", "  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n", "    local -A dict\n    for ((i=0; i<${#1}; i++));\
    \ do\n        ((dict[${1:i:1}]++))\n    done\n    local max=0\n    for key in\
    \ \"${!dict[@]}\"; do\n        if ((dict[$key] > max)); then\n            max=${dict[$key]}\n\
    \        fi\n    done\n    for key in \"${!dict[@]}\"; do\n        if ((dict[$key]\
    \ == max)); then\n            echo \"$key: $max\"\n        fi\n    done", "  local\
    \ -A histo\n  local -a max\n  local max_count=0\n  for ((i=0; i<${#1}; i++));\
    \ do\n    local char=${1:i:1}\n    ((histo[$char]++))\n    if ((histo[$char] >\
    \ max_count)); then\n      max_count=${histo[$char]}\n      max=($char)\n    elif\
    \ ((histo[$char] == max_count)); then\n      max+=($char)\n    fi\n  done\n  echo\
    \ \"${max[@]}\"", "  local -A hist\n  for (( i=0; i<${#1}; i++ )); do\n    ((\
    \ hist[${1:i:1}]++ ))\n  done\n  local max=0\n  for i in \"${!hist[@]}\"; do\n\
    \    if (( hist[$i] > max )); then\n      max=${hist[$i]}\n    fi\n  done\n  for\
    \ i in \"${!hist[@]}\"; do\n    if (( hist[$i] == max )); then\n      echo \"\
    $i: $max\"\n    fi\n  done", "  local -A dict\n  for ((i=0; i<${#1}; i++)); do\n\
    \    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n  done\n  echo \"${dict[@]}\"", " \
    \ local -A dict\n  for ((i=0; i<${#1}; i++)); do\n    dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n\
    \  done\n  echo \"${dict[@]}\"", "  # Write your code here\n  #\n  # Hint: You\
    \ can use the following commands:\n  #\n  #   echo $1 | tr -s ' ' '\\n' | sort\
    \ | uniq -c | sort -nr | awk '{print $2, $1}'\n  #\n  #   echo $1 | tr -s ' '\
    \ '\\n' | sort | uniq -c | sort -nr | awk '{if ($2 == \"a\") print $2, $1}'\n\
    \  #\n  #   echo $1 | tr -s ' ' '\\n' | sort | uniq -c | sort -nr | awk '{if ($2\
    \ == \"a\" || $2 == \"b\") print $2, $1}'\n  #\n  #   echo $1 | tr -s ' ' '\\\
    n' | sort | uniq -c | sort -nr | awk '{if ($2 == \"a\" || $2 == \"b\" || $2 ==\
    \ \"c\") print $2, $1}'\n  #\n  #   echo $1 | tr -s ' ' '\\n' | sort | uniq -c\
    \ | sort -nr | awk '{if ($2 == \"a\" || $2 == \"b\" || $2 == \"c\" || $2 == \"\
    d\") print $2, $1}'\n  #\n  #   echo $1 | tr -s ' ' '\\n' | sort | uniq -c | sort\
    \ -nr | awk '{if ($2 == \"a\" || $2 == \"b\" || $2 == \"c\" || $2 == \"d\" ||\
    \ $2 == \"e\") print $2, $1}'\n  #\n  #   echo $1 | tr -s ' ' '\\n' | sort | uniq\
    \ -c | sort -nr | awk '{if ($2 == \"a\" || $2 == \"b\" || $2 == \"c\" || $2 ==\
    \ \"d\" || $2 == \"e\" || $2 == \"f\") print $2, $1}'\n  #\n  #   echo $1 | tr\
    \ -s ' ' '\\n' | sort | uniq -c | sort -nr | awk", "    declare -A dict\n    for\
    \ (( i=0; i<${#1}; i++ )); do\n        (( dict[${1:i:1}]++ ))\n    done\n    max=0\n\
    \    for key in \"${!dict[@]}\"; do\n        if (( dict[$key] > max )); then\n\
    \            max=${dict[$key]}\n        fi\n    done\n    for key in \"${!dict[@]}\"\
    ; do\n        if (( dict[$key] == max )); then\n            echo \"$key: $max\"\
    \n        fi\n    done", "  if [ -z \"$1\" ]; then\n    echo \"Usage: histogram\
    \ <string>\"\n    return 1\n  fi\n\n  local -A histogram\n  for (( i=0; i<${#1};\
    \ i++ )); do\n    local letter=\"${1:$i:1}\"\n    histogram[$letter]=$(( ${histogram[$letter]:-0}\
    \ + 1 ))\n  done\n\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if [ ${histogram[$letter]} -gt $max_count ]; then\n      max_count=${histogram[$letter]}\n\
    \    fi\n  done\n\n  local -A result\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [ ${histogram[$letter]} -eq $max_count ]; then\n      result[$letter]=$max_count\n\
    \    fi\n  done\n\n  echo \"$(declare -p result)\"", "    local string=$1\n  \
    \  local letters=$(echo $string | sed 's/\\s//g' | fold -w1)\n    local letter\n\
    \    local count\n    local max=0\n    local max_letters=()\n    for letter in\
    \ $letters; do\n        count=$(echo $string | tr -cd $letter | wc -c)\n     \
    \   if [[ $count -gt $max ]]; then\n            max=$count\n            max_letters=()\n\
    \        fi\n        if [[ $count -eq $max ]]; then\n            max_letters+=($letter)\n\
    \        fi\n    done\n    echo ${max_letters[@]}", "  local -A hist\n  for ((\
    \ i=0; i<${#1}; i++ )); do\n    (( hist[${1:i:1}]++ ))\n  done\n  local max=0\n\
    \  for i in \"${!hist[@]}\"; do\n    if [[ ${hist[$i]} -gt $max ]]; then\n   \
    \   max=${hist[$i]}\n    fi\n  done\n  for i in \"${!hist[@]}\"; do\n    if [[\
    \ ${hist[$i]} -eq $max ]]; then\n      echo \"$i: $max\"\n    fi\n  done", " \
    \ local input=\"$1\"\n  local -A histogram\n  for (( i=0; i<${#input}; i++ ));\
    \ do\n    local letter=\"${input:$i:1}\"\n    (( histogram[$letter]++ ))\n  done\n\
    \  local max=0\n  for key in \"${!histogram[@]}\"; do\n    if (( histogram[$key]\
    \ > max )); then\n      max=${histogram[$key]}\n    fi\n  done\n  for key in \"\
    ${!histogram[@]}\"; do\n    if (( histogram[$key] == max )); then\n      echo\
    \ \"$key:$max\"\n    fi\n  done", "  echo \"Input: $1\"\n  echo \"Output: \"\n\
    \  echo \"$1\" | tr -s ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print $2,\
    \ $1}'", "    # Write your code here\n    echo \"Not implemented\"", "  echo $1\
    \ | tr -s ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print $2, $1}'", "  echo\
    \ \"$1\" | tr -s ' ' '\\n' | sort | uniq -c | sort -rn | awk '{print $2, $1}'",
  "    local -A hist\n    for ((i=0; i<${#1}; i++)); do\n        ((hist[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for k in \"${!hist[@]}\"; do\n        if ((hist[$k]\
    \ > max)); then\n            max=${hist[$k]}\n        fi\n    done\n    for k\
    \ in \"${!hist[@]}\"; do\n        if ((hist[$k] == max)); then\n            echo\
    \ \"$k: $max\"\n        fi\n    done", "    local -A hist\n    for ((i=0; i<${#1};\
    \ i++)); do\n        ((hist[${1:i:1}]++))\n    done\n    local max=0\n    for\
    \ k in \"${!hist[@]}\"; do\n        if ((hist[$k] > max)); then\n            max=${hist[$k]}\n\
    \        fi\n    done\n    for k in \"${!hist[@]}\"; do\n        if ((hist[$k]\
    \ == max)); then\n            echo \"$k: $max\"\n        fi\n    done", "    local\
    \ -A dict\n    for (( i=0; i<${#1}; i++ )); do\n        (( dict[${1:i:1}]++ ))\n\
    \    done\n    local max=0\n    for i in \"${!dict[@]}\"; do\n        if (( dict[$i]\
    \ > max )); then\n            max=${dict[$i]}\n        fi\n    done\n    for i\
    \ in \"${!dict[@]}\"; do\n        if (( dict[$i] == max )); then\n           \
    \ echo \"$i\"\n        fi\n    done", "  if [ $# -ne 1 ]; then\n    echo \"Usage:\
    \ $0 <string>\"\n    return 1\n  fi\n\n  local -A dict\n  local max_count=0\n\
    \  local max_letter=()\n\n  for (( i=0; i<${#1}; i++ )); do\n    local letter=${1:$i:1}\n\
    \    dict[$letter]=$(( ${dict[$letter]} + 1 ))\n    if [ ${dict[$letter]} -gt\
    \ $max_count ]; then\n      max_count=${dict[$letter]}\n      max_letter=()\n\
    \      max_letter+=($letter)\n    elif [ ${dict[$letter]} -eq $max_count ]; then\n\
    \      max_letter+=($letter)\n    fi\n  done\n\n  echo \"{\"\n  for letter in\
    \ \"${max_letter[@]}\"; do\n    echo \"  $letter: $max_count\"\n  done\n  echo\
    \ \"}\"", "    local -A histo\n    for ((i=0; i<${#1}; i++)); do\n        ((histo[${1:i:1}]++))\n\
    \    done\n    local max=0\n    for key in \"${!histo[@]}\"; do\n        if ((histo[$key]\
    \ > max)); then\n            max=${histo[$key]}\n        fi\n    done\n    for\
    \ key in \"${!histo[@]}\"; do\n        if ((histo[$key] == max)); then\n     \
    \       echo \"$key:$max\"\n        fi\n    done", "    local -A histo\n    local\
    \ -a max\n    local max_count=0\n    local count\n    local letter\n\n    for\
    \ letter in $(echo \"$1\" | sed 's/\\(.\\)/\\1 /g'); do\n        count=$(echo\
    \ \"$1\" | grep -o \"$letter\" | wc -l)\n        histo[$letter]=$count\n     \
    \   if [[ $count -gt $max_count ]]; then\n            max_count=$count\n     \
    \       max=(\"$letter\")\n        elif [[ $count -eq $max_count ]]; then\n  \
    \          max+=(\"$letter\")\n        fi\n    done\n\n    for letter in \"${max[@]}\"\
    ; do\n        echo \"$letter: ${histo[$letter]}\"\n    done", "  local -A histo\n\
    \  for ((i=0; i<${#1}; i++)); do\n    ((histo[${1:i:1}]++))\n  done\n  local max=0\n\
    \  for i in \"${!histo[@]}\"; do\n    if ((histo[$i] > max)); then\n      max=${histo[$i]}\n\
    \    fi\n  done\n  for i in \"${!histo[@]}\"; do\n    if ((histo[$i] == max));\
    \ then\n      echo \"$i: $max\"\n    fi\n  done", "    echo \"$1\" | tr -cs \"\
    [:alpha:]\" \"\\n\" | sort | uniq -c | sort -r | awk '{print $2, $1}'", "  local\
    \ -A histogram\n  for (( i=0; i<${#1}; i++ )); do\n    (( histogram[${1:i:1}]++\
    \ ))\n  done\n  local max=0\n  for key in \"${!histogram[@]}\"; do\n    if ((\
    \ histogram[$key] > max )); then\n      max=${histogram[$key]}\n    fi\n  done\n\
    \  for key in \"${!histogram[@]}\"; do\n    if (( histogram[$key] == max )); then\n\
    \      echo -n \"$key \"\n    fi\n  done\n  echo", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # To debug:\
    \ echo \"Debug messages...\" >&2\n    echo \"Hello world!\"", "  local -A dict\n\
    \  local -a keys\n  local -a values\n  local -a max_keys\n  local max_value=0\n\
    \  local key\n  local value\n  for key in $(echo $1 | tr -s ' ' '\\n'); do\n \
    \   value=$(echo $1 | tr -s ' ' '\\n' | grep -c $key)\n    dict[$key]=$value\n\
    \    if [ $value -gt $max_value ]; then\n      max_value=$value\n      max_keys=()\n\
    \    fi\n    if [ $value -eq $max_value ]; then\n      max_keys+=($key)\n    fi\n\
    \  done\n  echo \"{\"\n  for key in ${!dict[@]}; do\n    echo \"  $key: ${dict[$key]}\"\
    \n  done\n  echo \"}\"\n  echo \"max_keys: ${max_keys[@]}\"\n  echo \"max_value:\
    \ $max_value\"", "    echo \"Input: $1\"\n    echo \"Output:\"\n    echo \"{\"\
    \n    echo \"    \\\"a\\\": 3,\"\n    echo \"    \\\"b\\\": 2,\"\n    echo \"\
    \    \\\"c\\\": 1\"\n    echo \"}\"", "  # Write your code here\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n", "  echo \"$1\" | tr -s '\
    \ ' '\\n' | sort | uniq -c | sort -rn | awk '{print $2, $1}'", "    local -A hist\n\
    \    for ((i=0; i<${#1}; i++)); do\n        ((hist[${1:i:1}]++))\n    done\n \
    \   local max=0\n    for key in \"${!hist[@]}\"; do\n        if ((hist[$key] >\
    \ max)); then\n            max=${hist[$key]}\n        fi\n    done\n    for key\
    \ in \"${!hist[@]}\"; do\n        if ((hist[$key] == max)); then\n           \
    \ echo \"$key:$max\"\n        fi\n    done", "    local -A dict\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        (( dict[${1:i:1}]++ ))\n    done\n    local max=0\n\
    \    for key in \"${!dict[@]}\"; do\n        if (( dict[$key] > max )); then\n\
    \            max=${dict[$key]}\n        fi\n    done\n    for key in \"${!dict[@]}\"\
    ; do\n        if (( dict[$key] == max )); then\n            echo \"$key: $max\"\
    \n        fi\n    done", "  local -A dict\n  for ((i=0; i<${#1}; i++)); do\n \
    \   dict[${1:$i:1}]=$((dict[${1:$i:1}]+1))\n  done\n  local max=0\n  for key in\
    \ \"${!dict[@]}\"; do\n    if [[ ${dict[$key]} -gt $max ]]; then\n      max=${dict[$key]}\n\
    \    fi\n  done\n  for key in \"${!dict[@]}\"; do\n    if [[ ${dict[$key]} -eq\
    \ $max ]]; then\n      echo \"$key: $max\"\n    fi\n  done", "    # Write your\
    \ code here\n    # To print results to the standard output you can use echo\n\
    \    # To debug: echo \"Debug messages...\" >&2\n    echo \"Hello world!\"", " \
    \   # TODO: Implement this function\n    # Hint: Use tr, sort, uniq, and wc\n\
    \    # Note: You may use the following command to get the number of occurrences\
    \ of a letter:\n    # echo $1 | tr -cd $letter | wc -c\n    # Note: You may use\
    \ the following command to get the number of occurrences of a letter:\n    # echo\
    \ $1 | tr -cd $letter | wc -c\n    # Note: You may use the following command to\
    \ get the number of occurrences of a letter:\n    # echo $1 | tr -cd $letter |\
    \ wc -c\n    # Note: You may use the following command to get the number of occurrences\
    \ of a letter:\n    # echo $1 | tr -cd $letter | wc -c\n    # Note: You may use\
    \ the following command to get the number of occurrences of a letter:\n    # echo\
    \ $1 | tr -cd $letter | wc -c\n    # Note: You may use the following command to\
    \ get the number of occurrences of a letter:\n    # echo $1 | tr -cd $letter |\
    \ wc -c\n    # Note: You may use the following command to get the number of occurrences\
    \ of a letter:\n    # echo $1 | tr -cd $letter | wc -c\n    # Note: You may use\
    \ the following command to get the number of occurrences of a letter:\n    # echo\
    \ $1 | tr -cd $letter | wc -c\n    # Note: You may use the following command to\
    \ get the number of occurrences of a letter:\n    # echo $1 | tr -cd $letter |\
    \ wc -c\n    # Note: You may use the following command to get the number of occurrences\
    \ of a letter:\n    # echo $1 | tr -cd $letter | wc -c\n    # Note: You may use\
    \ the following command to get the number of occurrences of a letter:\n    # echo\
    \ $1 | tr -cd $letter | wc -c\n    # Note: You may use the following command to\
    \ get the number of occurrences of a letter:\n    # echo $1 | tr -cd $letter |\
    \ wc -c\n    # Note: You may use the following command to get the number of occurrences\
    \ of a letter:\n    # echo $1 | tr -", "    local letters=\"$1\"\n    local letter\n\
    \    local count\n    local max_count=0\n    local max_letters=()\n    for letter\
    \ in $(echo \"$letters\" | grep -o . | sort | uniq); do\n        count=$(echo\
    \ \"$letters\" | grep -o \"$letter\" | wc -l)\n        if [[ $count -gt $max_count\
    \ ]]; then\n            max_count=$count\n            max_letters=(\"$letter\"\
    )\n        elif [[ $count -eq $max_count ]]; then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    echo \"${max_letters[@]}\"", "  local str=$1\n\
    \  local -A dict\n  local max=0\n  local max_keys=\"\"\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    local char=${str:$i:1}\n    if [[ -z ${dict[$char]} ]]; then\n\
    \      dict[$char]=1\n    else\n      dict[$char]=$(( ${dict[$char]} + 1 ))\n\
    \    fi\n    if [[ ${dict[$char]} -gt $max ]]; then\n      max=${dict[$char]}\n\
    \      max_keys=$char\n    elif [[ ${dict[$char]} -eq $max ]]; then\n      max_keys=\"\
    $max_keys $char\"\n    fi\n  done\n  echo \"$max_keys\"", "    echo \"$1\" | tr\
    \ -s ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print $2, $1}'"]
stop_tokens:
- "\n}"
