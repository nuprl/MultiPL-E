language: sh
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  local digit\n\
    \  while [ $number -gt 0 ]; do\n    digit=$(( number % 10 ))\n    if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n      ((even_count++))\n    else\n      ((odd_count++))\n\
    \    fi\n    number=$(( number / 10 ))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit % 2 ))\
    \ -eq 0 ]; then\n            (( even++ ))\n        else\n            (( odd++\
    \ ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [[ $num -gt\
    \ 0 ]]; do\n        local digit=$(( num % 10 ))\n        if [[ $(( digit % 2 ))\
    \ -eq 0 ]]; then\n            even=$(( even + 1 ))\n        else\n           \
    \ odd=$(( odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo\
    \ \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit % 2 ))\
    \ -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n            odd=$((\
    \ odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even=0\n    local odd=0\n    local number=$1\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit % 2))\
    \ -eq 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        number=$((number / 10))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit % 2 ))\
    \ -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n            odd=$((\
    \ odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even_count=0\n    local odd_count=0\n    for ((i=0; i<${#1}; i++));\
    \ do\n        local digit=\"${1:$i:1}\"\n        if [[ \"$digit\" =~ ^[0-9]+$\
    \ ]]; then\n            if (( digit % 2 == 0 )); then\n                ((even_count++))\n\
    \            else\n                ((odd_count++))\n            fi\n        fi\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even=0\n    local odd=0\n    local num=$1\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even=0\n  local odd=0\n  while [ $number -gt 0\
    \ ]; do\n    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq 0 ];\
    \ then\n      even=$(( even + 1 ))\n    else\n      odd=$(( odd + 1 ))\n    fi\n\
    \    number=$(( number / 10 ))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  local digit\n\
    \  while [ $number -gt 0 ]; do\n    digit=$((number % 10))\n    if [ $((digit\
    \ % 2)) -eq 0 ]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n     \
    \       odd=$(( odd + 1 ))\n        fi\n        number=$(( number / 10 ))\n  \
    \  done\n    echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[\
    \ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\")\
    \ = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even_count=0\n  local odd_count=0\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ];\
    \ then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    num=$((num / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq\
    \ 0 ]; then\n      even_count=$(( even_count + 1 ))\n    else\n      odd_count=$((\
    \ odd_count + 1 ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo \"($even_count,\
    \ $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit % 2))\
    \ -eq 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        number=$((number / 10))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            ((even_count++))\n        else\n          \
    \  ((odd_count++))\n        fi\n        number=$((number / 10))\n    done\n  \
    \  echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [[ $num -gt\
    \ 0 ]]; do\n        local digit=$(( num % 10 ))\n        if [[ $(( digit % 2 ))\
    \ -eq 0 ]]; then\n            even=$(( even + 1 ))\n        else\n           \
    \ odd=$(( odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo\
    \ \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even_count=0\n    local odd_count=0\n    local num=$1\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            ((even_count++))\n        else\n          \
    \  ((odd_count++))\n        fi\n        num=$((num / 10))\n    done\n    echo\
    \ \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit % 2))\
    \ -eq 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        number=$((number / 10))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local even_count=0\n  local odd_count=0\n  local num=$1\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$(( num % 10 ))\n    if [ $(( digit % 2 )) -eq\
    \ 0 ]; then\n      even_count=$(( even_count + 1 ))\n    else\n      odd_count=$((\
    \ odd_count + 1 ))\n    fi\n    num=$(( num / 10 ))\n  done\n  echo \"($even_count,\
    \ $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit % 2))\
    \ -eq 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        number=$((number / 10))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit % 2))\
    \ -eq 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        number=$((number / 10))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [[ $number -gt 0 ]]; do\n        local digit=$((number % 10))\n        if [[\
    \ $((digit % 2)) -eq 0 ]]; then\n            even_count=$((even_count + 1))\n\
    \        else\n            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [[ $num -gt\
    \ 0 ]]; do\n        local digit=$((num % 10))\n        if [[ $((digit % 2)) -eq\
    \ 0 ]]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [[ $num -gt 0 ]];\
    \ do\n    local digit=$(( num % 10 ))\n    if [[ $(( digit % 2 )) -eq 0 ]]; then\n\
    \      even=$(( even + 1 ))\n    else\n      odd=$(( odd + 1 ))\n    fi\n    num=$((\
    \ num / 10 ))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even=0\n  local odd=0\n  while [ $number -gt 0\
    \ ]; do\n    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq 0 ];\
    \ then\n      even=$(( even + 1 ))\n    else\n      odd=$(( odd + 1 ))\n    fi\n\
    \    number=$(( number / 10 ))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit % 2 ))\
    \ -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n            odd=$((\
    \ odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n       \
    \ else\n            odd_count=$(( odd_count + 1 ))\n        fi\n        num=$((\
    \ num / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even=0\n  local odd=0\n  while [ $number -gt 0\
    \ ]; do\n    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq 0 ];\
    \ then\n      even=$(( even + 1 ))\n    else\n      odd=$(( odd + 1 ))\n    fi\n\
    \    number=$(( number / 10 ))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [[ $number\
    \ -gt 0 ]]; do\n        local digit=$((number % 10))\n        if [[ $((digit %\
    \ 2)) -eq 0 ]]; then\n            even=$((even + 1))\n        else\n         \
    \   odd=$((odd + 1))\n        fi\n        number=$((number / 10))\n    done\n\
    \    echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0\
    \ ]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even_count=0\n  local odd_count=0\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ];\
    \ then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    num=$((num / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even=0\n  local odd=0\n  while [ $number -gt 0\
    \ ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n\
    \      even=$((even + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    number=$((number\
    \ / 10))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n       \
    \ else\n            odd_count=$(( odd_count + 1 ))\n        fi\n        num=$((\
    \ num / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even=0\n    local odd=0\n    local num=$1\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [[ $num -gt\
    \ 0 ]]; do\n        local digit=$((num % 10))\n        if [[ $((digit % 2)) -eq\
    \ 0 ]]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [[ $number -gt 0 ]]; do\n        local digit=$((number % 10))\n        if [[\
    \ $((digit % 2)) -eq 0 ]]; then\n            even_count=$((even_count + 1))\n\
    \        else\n            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [[ $num -gt 0 ]];\
    \ do\n    local digit=$((num % 10))\n    if [[ $((digit % 2)) -eq 0 ]]; then\n\
    \      even=$((even + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num\
    \ / 10))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even_count=0\n    local odd_count=0\n    local num=$1\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0\
    \ ]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [[ $number -gt 0 ]]; do\n        local digit=$((number % 10))\n        if [[\
    \ $((digit % 2)) -eq 0 ]]; then\n            even_count=$((even_count + 1))\n\
    \        else\n            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n       \
    \ else\n            odd_count=$(( odd_count + 1 ))\n        fi\n        num=$((\
    \ num / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0\
    \ ]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [[ $num -gt\
    \ 0 ]]; do\n        local digit=$(( num % 10 ))\n        if [[ $(( digit % 2 ))\
    \ -eq 0 ]]; then\n            even=$(( even + 1 ))\n        else\n           \
    \ odd=$(( odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo\
    \ \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n     \
    \       odd=$(( odd + 1 ))\n        fi\n        number=$(( number / 10 ))\n  \
    \  done\n    echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[\
    \ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\")\
    \ = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    local\
    \ digit\n    while [ $number -gt 0 ]; do\n        digit=$((number % 10))\n   \
    \     if [ $((digit % 2)) -eq 0 ]; then\n            even_count=$((even_count\
    \ + 1))\n        else\n            odd_count=$((odd_count + 1))\n        fi\n\
    \        number=$((number / 10))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0\
    \ ]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local even_count=0\n  local odd_count=0\n  local num=$1\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$(( num % 10 ))\n    if [ $(( digit % 2 )) -eq\
    \ 0 ]; then\n      even_count=$(( even_count + 1 ))\n    else\n      odd_count=$((\
    \ odd_count + 1 ))\n    fi\n    num=$(( num / 10 ))\n  done\n  echo \"($even_count,\
    \ $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even=0\n  local odd=0\n  while [ $number -gt 0\
    \ ]; do\n    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq 0 ];\
    \ then\n      even=$(( even + 1 ))\n    else\n      odd=$(( odd + 1 ))\n    fi\n\
    \    number=$(( number / 10 ))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even_count=0\n    local odd_count=0\n    local num=$1\n    while\
    \ [[ $num -gt 0 ]]; do\n        local digit=$(( num % 10 ))\n        if [[ $((\
    \ digit % 2 )) -eq 0 ]]; then\n            (( even_count++ ))\n        else\n\
    \            (( odd_count++ ))\n        fi\n        num=$(( num / 10 ))\n    done\n\
    \    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0\
    \ ]; then\n      ((even_count++))\n    else\n      ((odd_count++))\n    fi\n \
    \   number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\n}\n\
    \ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n\
    \    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"\
    3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"\
    -2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq\
    \ 0 ]; then\n      even_count=$(( even_count + 1 ))\n    else\n      odd_count=$((\
    \ odd_count + 1 ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo \"($even_count,\
    \ $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local n=$1\n  local even=0\n  local odd=0\n  while [ $n -gt 0 ]; do\n \
    \   local digit=$((n % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    n=$((n / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [[ $num -gt 0 ]];\
    \ do\n    local digit=$((num % 10))\n    if [[ $((digit % 2)) -eq 0 ]]; then\n\
    \      even=$((even + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num\
    \ / 10))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [[ $num -gt\
    \ 0 ]]; do\n        local digit=$(( num % 10 ))\n        if [[ $(( digit % 2 ))\
    \ -eq 0 ]]; then\n            even=$(( even + 1 ))\n        else\n           \
    \ odd=$(( odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo\
    \ \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [[ $number -gt 0 ]]; do\n        local digit=$((number % 10))\n        if [[\
    \ $((digit % 2)) -eq 0 ]]; then\n            even_count=$((even_count + 1))\n\
    \        else\n            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even=0\n    local odd=0\n    local number=$1\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit % 2))\
    \ -eq 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        number=$((number / 10))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [[ $number\
    \ -gt 0 ]]; do\n        local digit=$((number % 10))\n        if [[ $((digit %\
    \ 2)) -eq 0 ]]; then\n            even=$((even + 1))\n        else\n         \
    \   odd=$((odd + 1))\n        fi\n        number=$((number / 10))\n    done\n\
    \    echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even_count=0\n  local odd_count=0\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ];\
    \ then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    num=$((num / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even_count=0\n  local odd_count=0\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$(( num % 10 ))\n    if [ $(( digit % 2 )) -eq\
    \ 0 ]; then\n      (( even_count++ ))\n    else\n      (( odd_count++ ))\n   \
    \ fi\n    num=$(( num / 10 ))\n  done\n  echo \"$even_count $odd_count\"\n}\n\n\
    candidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local n=$1\n    local even=0\n    local odd=0\n    while [ $n -gt 0 ];\
    \ do\n        local digit=$((n % 10))\n        if [ $((digit % 2)) -eq 0 ]; then\n\
    \            even=$((even + 1))\n        else\n            odd=$((odd + 1))\n\
    \        fi\n        n=$((n / 10))\n    done\n    echo \"($even, $odd)\"\n}\n\n\
    candidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  local digit\n\
    \  while [[ $number -gt 0 ]]; do\n    digit=$(( number % 10 ))\n    if [[ $((\
    \ digit % 2 )) -eq 0 ]]; then\n      even_count=$(( even_count + 1 ))\n    else\n\
    \      odd_count=$(( odd_count + 1 ))\n    fi\n    number=$(( number / 10 ))\n\
    \  done\n  echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local even_count=0\n  local odd_count=0\n  local number=$1\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0\
    \ ]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even=0\n  local odd=0\n  while [ $number -gt 0\
    \ ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n\
    \      even=$((even + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    number=$((number\
    \ / 10))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even=0\n  local odd=0\n  while [ $number -gt 0\
    \ ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n\
    \      even=$((even + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    number=$((number\
    \ / 10))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even_count=0\n  local odd_count=0\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$(( num % 10 ))\n    if [ $(( digit % 2 )) -eq\
    \ 0 ]; then\n      even_count=$(( even_count + 1 ))\n    else\n      odd_count=$((\
    \ odd_count + 1 ))\n    fi\n    num=$(( num / 10 ))\n  done\n  echo \"($even_count,\
    \ $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0\
    \ ]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local n=$1\n    local even=0\n    local odd=0\n    while [ $n -gt 0 ];\
    \ do\n        local digit=$((n % 10))\n        if [ $((digit % 2)) -eq 0 ]; then\n\
    \            even=$((even + 1))\n        else\n            odd=$((odd + 1))\n\
    \        fi\n        n=$((n / 10))\n    done\n    echo \"($even, $odd)\"\n}\n\n\
    candidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [[\
    \ $number -gt 0 ]]; do\n    local digit=$(( number % 10 ))\n    if [[ $(( digit\
    \ % 2 )) -eq 0 ]]; then\n      even_count=$(( even_count + 1 ))\n    else\n  \
    \    odd_count=$(( odd_count + 1 ))\n    fi\n    number=$(( number / 10 ))\n \
    \ done\n  echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    even=0\n    odd=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[\
    \ $(( ${1:$i:1} % 2 )) -eq 0 ]]; then\n            even=$(( even + 1 ))\n    \
    \    else\n            odd=$(( odd + 1 ))\n        fi\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$(( num % 10 ))\n    if [ $(( digit % 2 )) -eq 0 ]; then\n  \
    \    even=$(( even + 1 ))\n    else\n      odd=$(( odd + 1 ))\n    fi\n    num=$((\
    \ num / 10 ))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit % 2 ))\
    \ -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n            odd=$((\
    \ odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even=0\n    local odd=0\n    local num=$1\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"$even_count $odd_count\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [[ $num -gt 0 ]]; do\n        local digit=$((num % 10))\n        if [[ $((digit\
    \ % 2)) -eq 0 ]]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [[ $num -gt 0 ]];\
    \ do\n    local digit=$((num % 10))\n    if [[ $((digit % 2)) -eq 0 ]]; then\n\
    \      ((even++))\n    else\n      ((odd++))\n    fi\n    num=$((num / 10))\n\
    \  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even_count=0\n  local odd_count=0\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ];\
    \ then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    num=$((num / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit % 2))\
    \ -eq 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        number=$((number / 10))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit % 2 ))\
    \ -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n            odd=$((\
    \ odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [[ $number -gt 0 ]]; do\n        local digit=$((number % 10))\n        if [[\
    \ $((digit % 2)) -eq 0 ]]; then\n            even_count=$((even_count + 1))\n\
    \        else\n            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq\
    \ 0 ]; then\n      even_count=$(( even_count + 1 ))\n    else\n      odd_count=$((\
    \ odd_count + 1 ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo \"($even_count,\
    \ $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq\
    \ 0 ]; then\n      even_count=$(( even_count + 1 ))\n    else\n      odd_count=$((\
    \ odd_count + 1 ))\n    fi\n    number=$(( number / 10 ))\n  done\n  echo \"($even_count,\
    \ $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local even_count=0\n  local odd_count=0\n  local digit\n  local number=$1\n\
    \  while [[ $number -gt 0 ]]; do\n    digit=$((number % 10))\n    if [[ $((digit\
    \ % 2)) -eq 0 ]]; then\n      ((even_count++))\n    else\n      ((odd_count++))\n\
    \    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        num=$((num / 10))\n\
    \    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            ((even_count++))\n        else\n          \
    \  ((odd_count++))\n        fi\n        number=$((number / 10))\n    done\n  \
    \  echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n     \
    \       odd=$(( odd + 1 ))\n        fi\n        number=$(( number / 10 ))\n  \
    \  done\n    echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[\
    \ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\")\
    \ = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n       \
    \ else\n            odd_count=$(( odd_count + 1 ))\n        fi\n        num=$((\
    \ num / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even_count=0\n  local odd_count=0\n  while [ $num\
    \ -gt 0 ]; do\n    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ];\
    \ then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    num=$((num / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    while [ $number\
    \ -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit % 2))\
    \ -eq 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        number=$((number / 10))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [ $number\
    \ -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $((digit % 2)) -eq 0\
    \ ]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even=0\n    local odd=0\n    local digit\n\
    \    while [ $number -gt 0 ]; do\n        digit=$(( number % 10 ))\n        if\
    \ [ $(( digit % 2 )) -eq 0 ]; then\n            even=$(( even + 1 ))\n       \
    \ else\n            odd=$(( odd + 1 ))\n        fi\n        number=$(( number\
    \ / 10 ))\n    done\n    echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n       \
    \ else\n            odd_count=$(( odd_count + 1 ))\n        fi\n        num=$((\
    \ num / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [[ $num -gt\
    \ 0 ]]; do\n        local digit=$(( num % 10 ))\n        if [[ $(( digit % 2 ))\
    \ -eq 0 ]]; then\n            even=$(( even + 1 ))\n        else\n           \
    \ odd=$(( odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo\
    \ \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$(( number % 10 ))\n        if [\
    \ $(( digit % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  number=$(( number / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        local digit=$((number % 10))\n        if [ $((digit\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n\
    \    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            (( even_count++ ))\n        else\n       \
    \     (( odd_count++ ))\n        fi\n        num=$(( num / 10 ))\n    done\n \
    \   echo \"($even_count, $odd_count)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even_count=0\n    local odd_count=0\n    local num=$1\n    while\
    \ [ $num -gt 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit\
    \ % 2 )) -eq 0 ]; then\n            even_count=$(( even_count + 1 ))\n       \
    \ else\n            odd_count=$(( odd_count + 1 ))\n        fi\n        num=$((\
    \ num / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [[ $num -gt 0 ]]; do\n        local digit=$(( num % 10 ))\n        if [[ $((\
    \ digit % 2 )) -eq 0 ]]; then\n            even_count=$(( even_count + 1 ))\n\
    \        else\n            odd_count=$(( odd_count + 1 ))\n        fi\n      \
    \  num=$(( num / 10 ))\n    done\n    echo \"($even_count, $odd_count)\"\n}\n\n\
    candidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even=0\n    local odd=0\n    local num=$1\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$(( num % 10 ))\n    if [ $(( digit % 2 )) -eq 0 ]; then\n  \
    \    even=$(( even + 1 ))\n    else\n      odd=$(( odd + 1 ))\n    fi\n    num=$((\
    \ num / 10 ))\n  done\n  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=\"$1\"\n    local even_count=0\n    local odd_count=0\n   \
    \ while [ \"$num\" -gt 0 ]; do\n        if [ $((num % 10)) -eq 0 ]; then\n   \
    \         even_count=$((even_count + 1))\n        else\n            odd_count=$((odd_count\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"$even_count\
    \ $odd_count\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local even=0\n    local odd=0\n    local num=$1\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n  while [[\
    \ $number -gt 0 ]]; do\n    local digit=$((number % 10))\n    if [[ $((digit %\
    \ 2)) -eq 0 ]]; then\n      even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count\
    \ + 1))\n    fi\n    number=$((number / 10))\n  done\n  echo \"($even_count, $odd_count)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$(( num % 10 ))\n        if [ $(( digit % 2 ))\
    \ -eq 0 ]; then\n            even=$(( even + 1 ))\n        else\n            odd=$((\
    \ odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo \"($even,\
    \ $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [ $num -gt\
    \ 0 ]; do\n        local digit=$((num % 10))\n        if [ $((digit % 2)) -eq\
    \ 0 ]; then\n            even=$((even + 1))\n        else\n            odd=$((odd\
    \ + 1))\n        fi\n        num=$((num / 10))\n    done\n    echo \"($even, $odd)\"\
    \n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\"\
    \ ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local num=$1\n    local even=0\n    local odd=0\n    while [[ $num -gt\
    \ 0 ]]; do\n        local digit=$(( num % 10 ))\n        if [[ $(( digit % 2 ))\
    \ -eq 0 ]]; then\n            even=$(( even + 1 ))\n        else\n           \
    \ odd=$(( odd + 1 ))\n        fi\n        num=$(( num / 10 ))\n    done\n    echo\
    \ \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local num=$1\n  local even=0\n  local odd=0\n  while [ $num -gt 0 ]; do\n\
    \    local digit=$((num % 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    num=$((num / 10))\n  done\n\
    \  echo \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local -i even=0\n    local -i odd=0\n    local -i number=$1\n    while\
    \ [ $number -gt 0 ]; do\n        local -i digit=$((number % 10))\n        if [\
    \ $((digit % 2)) -eq 0 ]; then\n            ((even++))\n        else\n       \
    \     ((odd++))\n        fi\n        number=$((number / 10))\n    done\n    echo\
    \ \"($even, $odd)\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001164
