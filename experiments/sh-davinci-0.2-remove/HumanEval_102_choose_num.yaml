name: HumanEval_102_choose_num
language: sh
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  #\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
completions: ["\tif [ $1 -gt $2 ]; then\n\t\techo \"Error: $1 is greater than $2\"\
    \n\t\texit 1\n\tfi\n\tif [ $1 -lt 0 ]; then\n\t\techo \"Error: $1 is less than\
    \ 0\"\n\t\texit 1\n\tfi\n\tif [ $2 -lt 0 ]; then\n\t\techo \"Error: $2 is less\
    \ than 0\"\n\t\texit 1\n\tfi\n\tif [ $1 -eq $2 ]; then\n\t\tif [ $1 -eq 0 ]; then\n\
    \t\t\techo -1\n\t\t\texit 0\n\t\tfi\n\t\tif [ $1 -eq 1 ]; then\n\t\t\techo -1\n\
    \t\t\texit 0\n\t\tfi\n\t\tif [ $1 -eq 2 ]; then\n\t\t\techo 2\n\t\t\texit 0\n\t\
    \tfi\n\t\tif [ $1 -eq 3 ]; then\n\t\t\techo 2\n\t\t\texit 0\n\t\tfi\n\t\tif [\
    \ $1 -eq 4 ]; then\n\t\t\techo 4\n\t\t\texit 0\n\t\tfi\n\t\tif [ $1 -eq 5 ]; then\n\
    \t\t\techo 4\n\t\t\texit 0\n\t\tfi\n\t\tif [ $1 -eq 6 ]; then\n\t\t\techo 6\n\t\
    \t\texit 0\n\t\tfi\n\t\tif [ $1 -eq 7 ]; then\n\t\t\techo 6\n\t\t\texit 0\n\t\t\
    fi\n\t\tif [ $1 -eq 8 ]; then\n\t\t\techo 8\n\t\t\texit 0\n\t\tfi\n\t\tif [ $1\
    \ -eq 9 ]; then\n\t\t\techo 8\n\t\t\texit 0\n\t\tfi\n\t\tif [ $1 -eq 10 ]; then\n\
    \t\t\techo 10\n\t\t\texit 0\n\t\tfi\n\t\tif [ $1 -eq 11 ]; then\n\t\t\techo 10\n\
    \t\t\texit 0\n\t\tfi\n\t\tif [ $1 -eq 12 ]; then\n\t\t\techo 12\n\t\t\texit 0\n\
    \t\tfi\n\t\tif [ $1 -eq 13 ]; then\n\t\t\techo 12\n\t\t\texit 0\n\t\tfi\n\t\t\
    if [", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((\
    \ i = $1; i <= $2; i++ )); do\n            if [ $(( i % 2 )) -eq 0 ]; then\n \
    \               echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n       \
    \ for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n  \
    \              echo \"$i\"\n                break\n            fi\n        done\n\
    \    fi", "    # Write your code here\n    # You can add more functions if you\
    \ need\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((\
    \ i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n         \
    \       echo $i\n                break\n            fi\n        done\n    fi",
  "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo \"The first number should be smaller than the second\
    \ number\"\n        return 1\n    fi\n    if [[ $1 -lt 0 || $2 -lt 0 ]]; then\n\
    \        echo \"The numbers should be positive\"\n        return 1\n    fi\n \
    \   for (( i = $2; i >= $1; i-- )); do\n        if [[ $((i % 2)) -eq 0 ]]; then\n\
    \            echo $i\n            return 0\n        fi\n    done\n    echo -1\n\
    \    return 0", "    if [ $1 -lt $2 ]; then\n        for ((i=$1; i<=$2; i++));\
    \ do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n     \
    \           break\n            fi\n        done\n    else\n        echo -1\n \
    \   fi", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2\
    \ ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n\
    \            echo -1\n        fi\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $i%2 -eq 0 ]]; then\n                echo $i\n            \
    \    break\n            fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo \"Error: $1 is greater than $2\"\n        return -1\n    fi\n  \
    \  if [ $1 -lt 0 ]; then\n        echo \"Error: $1 is less than 0\"\n        return\
    \ -1\n    fi\n    if [ $2 -lt 0 ]; then\n        echo \"Error: $2 is less than\
    \ 0\"\n        return -1\n    fi\n    if [ $1 -eq $2 ]; then\n        if [ $1\
    \ -eq 0 ]; then\n            echo \"Error: $1 is equal to 0\"\n            return\
    \ -1\n        fi\n        if [ $1 -eq 1 ]; then\n            echo \"Error: $1\
    \ is equal to 1\"\n            return -1\n        fi\n        if [ $1 -eq 2 ];\
    \ then\n            echo \"Error: $1 is equal to 2\"\n            return -1\n\
    \        fi\n        if [ $1 -eq 3 ]; then\n            echo \"Error: $1 is equal\
    \ to 3\"\n            return -1\n        fi\n        if [ $1 -eq 4 ]; then\n \
    \           echo \"Error: $1 is equal to 4\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 5 ]; then\n            echo \"Error: $1 is equal to 5\"\n\
    \            return -1\n        fi\n        if [ $1 -eq 6 ]; then\n          \
    \  echo \"Error: $1 is equal to 6\"\n            return -1\n        fi\n     \
    \   if [ $1 -eq 7 ]; then\n            echo \"Error: $1 is equal to 7\"\n    \
    \        return -1\n        fi\n        if [ $1 -eq 8 ]; then\n            echo\
    \ \"Error: $1 is equal to 8\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 9 ]; then\n            echo \"Error: $1 is equal to 9\"\n           \
    \ return -1\n        fi\n        if [ $1 -eq 10 ]; then\n            echo \"Error:\
    \ $1 is equal to 10\"\n            return -1\n        fi\n        if [ $1 -eq\
    \ 11 ]; then\n            echo \"Error: $1 is equal to 11\"\n            return\
    \ -1\n        fi\n        if [ $1 -eq 12 ]; then\n            echo \"Error: $",
  "    if [ $1 -gt $2 ]; then\n        echo \"The first number should be smaller than\
    \ the second number\"\n        return -1\n    fi\n    for i in $(seq $1 $2); do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n            return\
    \ 0\n        fi\n    done\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n     \
    \   echo -1\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ -1\n    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2))\
    \ -eq 0 ]]; then\n                echo $i\n                break\n           \
    \ fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n\
    \    else\n        for (( i = $1; i <= $2; i++ )); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"ERROR: $1 is greater than $2\"\n        return -1\n    fi\n    for (( i=$1;\
    \ i<=$2; i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            echo $i\n\
    \            return 0\n        fi\n    done\n    echo -1", "    if [ $1 -eq $2\
    \ ]; then\n        if [ $1 -eq 0 ]; then\n            echo -1\n        elif [\
    \ $1 -eq 1 ]; then\n            echo -1\n        elif [ $1 -eq 2 ]; then\n   \
    \         echo 2\n        elif [ $1 -eq 3 ]; then\n            echo 2\n      \
    \  elif [ $1 -eq 4 ]; then\n            echo 4\n        elif [ $1 -eq 5 ]; then\n\
    \            echo 4\n        elif [ $1 -eq 6 ]; then\n            echo 6\n   \
    \     elif [ $1 -eq 7 ]; then\n            echo 6\n        elif [ $1 -eq 8 ];\
    \ then\n            echo 8\n        elif [ $1 -eq 9 ]; then\n            echo\
    \ 8\n        elif [ $1 -eq 10 ]; then\n            echo 10\n        elif [ $1\
    \ -eq 11 ]; then\n            echo 10\n        elif [ $1 -eq 12 ]; then\n    \
    \        echo 12\n        elif [ $1 -eq 13 ]; then\n            echo 12\n    \
    \    elif [ $1 -eq 14 ]; then\n            echo 14\n        elif [ $1 -eq 15 ];\
    \ then\n            echo 14\n        elif [ $1 -eq 16 ]; then\n            echo\
    \ 16\n        elif [ $1 -eq 17 ]; then\n            echo 16\n        elif [ $1\
    \ -eq 18 ]; then\n            echo 18\n        elif [ $1 -eq 19 ]; then\n    \
    \        echo 18\n        elif [ $1 -eq 20 ]; then\n            echo 20\n    \
    \    elif [ $1 -eq 21 ]; then\n            echo 20\n        elif [ $1 -eq 22 ];\
    \ then\n            echo 22\n        elif [ $1 -eq 23 ]; then\n            echo\
    \ 22\n        elif [ $1 -eq 24 ]; then\n            echo 24\n        elif [ $1\
    \ -eq 25 ]; then\n            echo 24\n        elif [ $1 -eq 26 ]; then\n    \
    \        echo 26\n        elif [ $1 -eq 27 ]; then\n            echo 26\n    \
    \    elif [ $1 -eq 28 ]; then\n            echo 28\n        elif [ $1 -eq 29 ];\
    \ then\n            echo 28\n        elif [ $1 -eq 30 ]; then\n            echo\
    \ 30\n        el", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i=0\n    local max=0\n  \
    \  for ((i=$x; i<=$y; i++)); do\n        if [ $((i%2)) -eq 0 ] && [ $i -gt $max\
    \ ]; then\n            max=$i\n        fi\n    done\n    if [ $max -eq 0 ]; then\n\
    \        echo -1\n    else\n        echo $max\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq\
    \ 0 ]]; then\n            echo $1\n        else\n            echo -1\n       \
    \ fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n            if [[ $i%2\
    \ -eq 0 ]]; then\n                echo $i\n                break\n           \
    \ fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"Error:\
    \ $1 is greater than $2\"\n        return -1\n    fi\n    if [ $1 -lt 0 ] || [\
    \ $2 -lt 0 ]; then\n        echo \"Error: $1 or $2 is less than 0\"\n        return\
    \ -1\n    fi\n    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n    \
    \        echo \"Error: $1 and $2 are both 0\"\n            return -1\n       \
    \ fi\n        if [ $1 -eq 1 ]; then\n            echo \"Error: $1 and $2 are both\
    \ 1\"\n            return -1\n        fi\n        if [ $1 -eq 2 ]; then\n    \
    \        echo \"Error: $1 and $2 are both 2\"\n            return -1\n       \
    \ fi\n        if [ $1 -eq 3 ]; then\n            echo \"Error: $1 and $2 are both\
    \ 3\"\n            return -1\n        fi\n        if [ $1 -eq 4 ]; then\n    \
    \        echo \"Error: $1 and $2 are both 4\"\n            return -1\n       \
    \ fi\n        if [ $1 -eq 5 ]; then\n            echo \"Error: $1 and $2 are both\
    \ 5\"\n            return -1\n        fi\n        if [ $1 -eq 6 ]; then\n    \
    \        echo \"Error: $1 and $2 are both 6\"\n            return -1\n       \
    \ fi\n        if [ $1 -eq 7 ]; then\n            echo \"Error: $1 and $2 are both\
    \ 7\"\n            return -1\n        fi\n        if [ $1 -eq 8 ]; then\n    \
    \        echo \"Error: $1 and $2 are both 8\"\n            return -1\n       \
    \ fi\n        if [ $1 -eq 9 ]; then\n            echo \"Error: $1 and $2 are both\
    \ 9\"\n            return -1\n        fi\n        if [ $1 -eq 10 ]; then\n   \
    \         echo \"Error: $1 and $2 are both 10\"\n            return -1\n     \
    \   fi\n        if [ $1 -eq 11 ]; then\n            echo \"Error: $1 and $2 are\
    \ both 11\"\n            return -1\n        fi\n        if [ $1 -eq 12 ]; then\n\
    \            echo \"", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"First argument must be less\
    \ than or equal to the second argument\"\n        return -1\n    fi\n    if [\
    \ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n        echo \"Both arguments must be positive\"\
    \n        return -1\n    fi\n    for i in $(seq $1 $2); do\n        if [ $((i\
    \ % 2)) -eq 0 ]; then\n            echo $i\n            return 0\n        fi\n\
    \    done\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n\
    \        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]];\
    \ then\n                echo $i\n                break\n            fi\n     \
    \   done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif [[\
    \ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n\
    \        else\n            echo -1\n        fi\n    else\n        for (( i=$2;\
    \ i>=$1; i-- )); do\n            if [[ $i%2 -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # Write\
    \ your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n    \
    \    for i in $(seq $1 $2); do\n            if [ $((i%2)) -eq 0 ]; then\n    \
    \            echo $i\n                break\n            fi\n        done\n  \
    \  fi", "    if [ $1 -gt $2 ]; then\n        echo \"Please enter the first number\
    \ as the smaller number\"\n        return\n    fi\n    if [ $1 -lt 0 ] || [ $2\
    \ -lt 0 ]; then\n        echo \"Please enter positive numbers\"\n        return\n\
    \    fi\n    for i in $(seq $1 $2); do\n        if [ $((i % 2)) -eq 0 ]; then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1",
  "    if [ $1 -gt $2 ]; then\n        echo \"Error: $1 is greater than $2\"\n   \
    \     return -1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n        echo\
    \ \"Error: $1 or $2 is negative\"\n        return -1\n    fi\n    if [ $1 -eq\
    \ $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"Error: $1 is zero\"\
    \n            return -1\n        fi\n        if [ $1 -eq 1 ]; then\n         \
    \   echo \"Error: $1 is one\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 2 ]; then\n            echo \"Error: $1 is two\"\n            return\
    \ -1\n        fi\n        if [ $1 -eq 3 ]; then\n            echo \"Error: $1\
    \ is three\"\n            return -1\n        fi\n        if [ $1 -eq 4 ]; then\n\
    \            echo \"Error: $1 is four\"\n            return -1\n        fi\n \
    \       if [ $1 -eq 5 ]; then\n            echo \"Error: $1 is five\"\n      \
    \      return -1\n        fi\n        if [ $1 -eq 6 ]; then\n            echo\
    \ \"Error: $1 is six\"\n            return -1\n        fi\n        if [ $1 -eq\
    \ 7 ]; then\n            echo \"Error: $1 is seven\"\n            return -1\n\
    \        fi\n        if [ $1 -eq 8 ]; then\n            echo \"Error: $1 is eight\"\
    \n            return -1\n        fi\n        if [ $1 -eq 9 ]; then\n         \
    \   echo \"Error: $1 is nine\"\n            return -1\n        fi\n        if\
    \ [ $1 -eq 10 ]; then\n            echo \"Error: $1 is ten\"\n            return\
    \ -1\n        fi\n        if [ $1 -eq 11 ]; then\n            echo \"Error: $1\
    \ is eleven\"\n            return -1\n        fi\n        if [ $1 -eq 12 ]; then\n\
    \            echo \"Error: $1 is twelve\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 13 ]; then\n            echo \"Error: $1 is thirteen\"\n\
    \            return -1\n        fi\n        if [ $", "    local x=$1\n    local\
    \ y=$2\n    local i=0\n    local max=-1\n    for ((i = x; i <= y; i++)); do\n\
    \        if [[ $((i % 2)) -eq 0 ]]; then\n            if [[ $i -gt $max ]]; then\n\
    \                max=$i\n            fi\n        fi\n    done\n    echo $max",
  "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $((i%2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    if [[ $x -gt $y ]]; then\n    \
    \    echo -1\n    else\n        for i in $(seq $x $y); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n\
    \    else\n        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq\
    \ 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [ $1 -lt $2 ]; then\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                return\n            fi\n        done\n    else\n        for i\
    \ in $(seq $2 $1); do\n            if [ $((i % 2)) -eq 0 ]; then\n           \
    \     echo $i\n                return\n            fi\n        done\n    fi\n\
    \    echo -1", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n      \
    \  for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n    \
    \            echo $i\n                break\n            fi\n        done\n  \
    \  fi", "    if [ $1 -gt $2 ]; then\n        echo \"The first number must be less\
    \ than the second number\"\n        exit 1\n    fi\n    if [ $1 -lt 0 ] || [ $2\
    \ -lt 0 ]; then\n        echo \"Both numbers must be positive\"\n        exit\
    \ 1\n    fi\n    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n     \
    \       echo -1\n        elif [ $1 -eq 1 ]; then\n            echo -1\n      \
    \  elif [ $1 -eq 2 ]; then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 4 ]; then\n            echo 4\n  \
    \      elif [ $1 -eq 5 ]; then\n            echo -1\n        elif [ $1 -eq 6 ];\
    \ then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n        elif [ $1 -eq\
    \ 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n         \
    \   echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo 14\n\
    \        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
    \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n\
    \            echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq\
    \ 23 ]; then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n        \
    \    echo 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n", "    #\
    \ Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # To debug your program, you can write to the standard error\n\
    \    # with echo \"Debug messages...\" >&2\n    if [[ $1 -gt $2 ]]; then\n   \
    \     echo -1\n        return\n    fi\n    for (( i=$2; i>=$1; i-- )); do\n  \
    \      if [[ $((i%2)) -eq 0 ]]; then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ -1\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2))\
    \ -eq 0 ]]; then\n                echo $i\n                break\n           \
    \ fi\n        done\n    fi", "    if [[ $1 -lt $2 ]]; then\n        for (( i=$1;\
    \ i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n             \
    \   echo $i\n                break\n            fi\n        done\n    else\n \
    \       for (( i=$2; i<=$1; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n         \
    \       echo $i\n                break\n            fi\n        done\n    fi",
  "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    if [ $1 -gt\
    \ $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1 $2); do\n \
    \           if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "    if [ $1 -lt $2 ]; then\n\
    \        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                return\n            fi\n        done\n\
    \    else\n        for i in $(seq $2 $1); do\n            if [ $(($i % 2)) -eq\
    \ 0 ]; then\n                echo $i\n                return\n            fi\n\
    \        done\n    fi\n    echo -1", "    # Write your code here\n    if [ $1\
    \ -lt $2 ]; then\n        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2))\
    \ -eq 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    else\n        echo -1\n    fi", "    if [[ $1 -gt $2 ]]; then\n\
    \        echo -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n           \
    \ if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            if ((i>max)); then\n                max=$i\n            fi\n\
    \        fi\n    done\n    echo $max", "    # TODO: Implement this function\n\
    \    # Hint: You can use the modulo operator to check if a number is even.\n \
    \   # For example:\n    #\n    # $ echo $((5 % 2))\n    # 1\n    # $ echo $((6\
    \ % 2))\n    # 0\n    #\n    # The above commands check if 5 is even and 6 is\
    \ even.\n    #\n    # Another hint: You can use the if statement to check if a\
    \ number is\n    # even. For example:\n    #\n    # if [[ $((6 % 2)) -eq 0 ]];\
    \ then\n    #     echo \"6 is even\"\n    # fi\n    #\n    # The above if statement\
    \ checks if 6 is even.\n    #\n    # Another hint: You can use the if statement\
    \ to check if a number is\n    # greater than another number. For example:\n \
    \   #\n    # if [[ $1 -gt $2 ]]; then\n    #     echo \"$1 is greater than $2\"\
    \n    # fi\n    #\n    # The above if statement checks if $1 is greater than $2.\n\
    \    #\n    # Another hint: You can use the if statement to check if a number\
    \ is\n    # less than another number. For example:\n    #\n    # if [[ $1 -lt\
    \ $2 ]]; then\n    #     echo \"$1 is less than $2\"\n    # fi\n    #\n    # The\
    \ above if statement checks if $1 is less than $2.\n    #\n    # Another hint:\
    \ You can use the if statement to check if a number is\n    # equal to another\
    \ number. For example:\n    #\n    # if [[ $1 -eq $2 ]]; then\n    #     echo\
    \ \"$1 is equal to $2\"\n    # fi\n    #\n    # The above if statement checks\
    \ if $1 is equal to $2.\n    #\n    # Another hint: You can use the if statement\
    \ to check if a number is\n    # not equal to another number. For example:\n \
    \   #\n    # if [[ $1 -ne $2 ]]; then\n    #     echo \"$1 is not equal to $2\"\
    \n    # fi\n    #\n    # The above if statement checks if $1 is not equal to $",
  "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo \"Error: $1 is greater than $2\"\n        return 1\n\
    \    fi\n    if [[ $1 -lt 0 ]]; then\n        echo \"Error: $1 is less than 0\"\
    \n        return 1\n    fi\n    if [[ $2 -lt 0 ]]; then\n        echo \"Error:\
    \ $2 is less than 0\"\n        return 1\n    fi\n    if [[ $1 -eq $2 ]]; then\n\
    \        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n      \
    \      echo -1\n        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n\
    \            if [[ $i%2 -eq 0 ]]; then\n                echo $i\n            \
    \    return 0\n            fi\n        done\n        echo -1\n    fi", "    if\
    \ [ $1 -gt $2 ]; then\n        echo \"The first number must be less than the second\
    \ number\"\n        return -1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n\
    \        echo \"The numbers must be positive\"\n        return -1\n    fi\n  \
    \  if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"\
    0\"\n            return 0\n        fi\n        if [ $1 -eq 1 ]; then\n       \
    \     echo \"-1\"\n            return 0\n        fi\n        if [ $1 -eq 2 ];\
    \ then\n            echo \"2\"\n            return 0\n        fi\n        if [\
    \ $1 -eq 3 ]; then\n            echo \"2\"\n            return 0\n        fi\n\
    \        if [ $1 -eq 4 ]; then\n            echo \"4\"\n            return 0\n\
    \        fi\n        if [ $1 -eq 5 ]; then\n            echo \"4\"\n         \
    \   return 0\n        fi\n        if [ $1 -eq 6 ]; then\n            echo \"6\"\
    \n            return 0\n        fi\n        if [ $1 -eq 7 ]; then\n          \
    \  echo \"6\"\n            return 0\n        fi\n        if [ $1 -eq 8 ]; then\n\
    \            echo \"8\"\n            return 0\n        fi\n        if [ $1 -eq\
    \ 9 ]; then\n            echo \"8\"\n            return 0\n        fi\n      \
    \  if [ $1 -eq 10 ]; then\n            echo \"10\"\n            return 0\n   \
    \     fi\n        if [ $1 -eq 11 ]; then\n            echo \"10\"\n          \
    \  return 0\n        fi\n        if [ $1 -eq 12 ]; then\n            echo \"12\"\
    \n            return 0\n        fi\n        if [ $1 -eq 13 ]; then\n         \
    \   echo \"12\"\n            return 0\n        fi\n        if [ $1 -eq 14 ]; then\n\
    \            echo \"14\"\n            return 0\n        fi\n        if [ $1 -eq\
    \ 15 ]; then\n            echo \"14\"\n            return 0\n        fi\n    \
    \    if [ $1 -eq 16 ]; then\n            echo \"16\"\n            return 0\n \
    \       fi\n        if [ $1 -eq 17 ]; then\n            echo \"16\"\n        \
    \    return", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n       \
    \ for (( i = $1; i <= $2; i++ )); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n         \
    \       echo $i\n                break\n            fi\n        done\n    fi",
  "    if [ $1 -lt $2 ]; then\n        for ((i=$1; i<=$2; i++)); do\n            if\
    \ [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n \
    \           fi\n        done\n    else\n        echo -1\n    fi", "    if [ $1\
    \ -lt $2 ]; then\n        for i in $(seq $1 $2); do\n            if [ $((i % 2))\
    \ -eq 0 ]; then\n                echo $i\n                return\n           \
    \ fi\n        done\n    else\n        for i in $(seq $2 $1); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                return\n\
    \            fi\n        done\n    fi\n    echo -1", "    local x=$1\n    local\
    \ y=$2\n    local i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n      \
    \  if [ $((i % 2)) -eq 0 ]; then\n            if [ $i -gt $max ]; then\n     \
    \           max=$i\n            fi\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $max", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n    \
    \    if [ $1 -eq $2 ]; then\n            if [ $1 -eq 0 ]; then\n             \
    \   echo -1\n            else\n                if [ $1 -eq 1 ]; then\n       \
    \             echo -1\n                else\n                    if [ $1 -eq 2\
    \ ]; then\n                        echo 2\n                    else\n        \
    \                if [ $1 -eq 3 ]; then\n                            echo -1\n\
    \                        else\n                            if [ $1 -eq 4 ]; then\n\
    \                                echo 4\n                            else\n  \
    \                              if [ $1 -eq 5 ]; then\n                       \
    \             echo -1\n                                else\n                \
    \                    if [ $1 -eq 6 ]; then\n                                 \
    \       echo 6\n                                    else\n                   \
    \                     if [ $1 -eq 7 ]; then\n                                \
    \            echo -1\n                                        else\n         \
    \                                   if [ $1 -eq 8 ]; then\n                  \
    \                              echo 8\n                                      \
    \      else\n                                                if [ $1 -eq 9 ];\
    \ then\n                                                    echo -1\n        \
    \                                        else\n                              \
    \                      if [ $1 -eq 10 ]; then\n                              \
    \                          echo 10\n                                         \
    \           else\n                                                        if [\
    \ $1 -eq 11 ]; then\n                                                        \
    \    echo -1\n                                                        else\n \
    \                                                           if [ $1 -eq 12 ];\
    \ then\n                                                                echo 12\n\
    \                                                            else\n          \
    \                                                      if [ $1 -eq 13 ]; then\n\
    \                                                                    echo -1\n\
    \                                                                else\n      \
    \                                                              if [ $1 -eq 14\
    \ ]; then\n                                                                  \
    \      echo 14\n                                                             \
    \       else\n                                                               \
    \         if [ $1 -eq 15 ]; then\n                                           \
    \                                 echo -1\n                                  \
    \                                      else\n                                \
    \                                            if [ $1 -eq 16 ]; then\n        \
    \                                                                        echo\
    \ 16\n                                                                       \
    \     else\n                                                                 \
    \               if [ $1 -eq 17 ]; then\n                                     \
    \                                               echo -1\n                    \
    \                                                            else\n          \
    \                                                                          if\
    \ [ $1 -eq 18 ]; then\n                                                      \
    \                                  echo 18\n                                 \
    \                                                   else\n                   \
    \                                                                     if [ $1\
    \ -eq 19 ]; then\n", "\tif [ $1 -gt $2 ]; then\n\t\techo -1\n\t\treturn\n\tfi\n\
    \tfor i in $(seq $1 $2); do\n\t\tif [ $((i % 2)) -eq 0 ]; then\n\t\t\techo $i\n\
    \t\t\treturn\n\t\tfi\n\tdone\n\techo -1", "    if [ $1 -gt $2 ]; then\n      \
    \  echo -1\n    else\n        for i in $(seq $1 $2); do\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                echo $i\n                break\n      \
    \      fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ -1\n    else\n        for ((i = $1; i <= $2; i++)); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n\
    \    else\n        if [ $1 -eq $2 ]; then\n            if [ $1 -eq 0 ]; then\n\
    \                echo -1\n            else\n                if [ $1 -eq 1 ]; then\n\
    \                    echo -1\n                else\n                    if [ $1\
    \ -eq 2 ]; then\n                        echo 2\n                    else\n  \
    \                      if [ $1 -eq 3 ]; then\n                            echo\
    \ 2\n                        else\n                            if [ $1 -eq 4 ];\
    \ then\n                                echo 4\n                            else\n\
    \                                if [ $1 -eq 5 ]; then\n                     \
    \               echo 4\n                                else\n               \
    \                     if [ $1 -eq 6 ]; then\n                                \
    \        echo 6\n                                    else\n                  \
    \                      if [ $1 -eq 7 ]; then\n                               \
    \             echo 6\n                                        else\n         \
    \                                   if [ $1 -eq 8 ]; then\n                  \
    \                              echo 8\n                                      \
    \      else\n                                                if [ $1 -eq 9 ];\
    \ then\n                                                    echo 8\n         \
    \                                       else\n                               \
    \                     if [ $1 -eq 10 ]; then\n                               \
    \                         echo 10\n                                          \
    \          else\n                                                        if [\
    \ $1 -eq 11 ]; then\n                                                        \
    \    echo 10\n                                                        else\n \
    \                                                           if [ $1 -eq 12 ];\
    \ then\n                                                                echo 12\n\
    \                                                            else\n          \
    \                                                      if [ $1 -eq 13 ]; then\n\
    \                                                                    echo 12\n\
    \                                                                else\n      \
    \                                                              if [ $1 -eq 14\
    \ ]; then\n                                                                  \
    \      echo 14\n                                                             \
    \       else\n                                                               \
    \         if [ $1 -eq 15 ]; then\n                                           \
    \                                 echo 14\n                                  \
    \                                      else\n                                \
    \                                            if [ $1 -eq 16 ]; then\n        \
    \                                                                        echo\
    \ 16\n                                                                       \
    \     else\n                                                                 \
    \               if [ $1 -eq 17 ]; then\n                                     \
    \                                               echo 16\n                    \
    \                                                            else\n          \
    \                                                                          if\
    \ [ $1 -eq 18 ]; then\n                                                      \
    \                                  echo 18\n                                 \
    \                                                   else\n                   \
    \                                                                     if [ $1\
    \ -eq 19 ]; then\n                                                           \
    \                                 echo 18", "    if [ $1 -gt $2 ]; then\n    \
    \    echo -1\n    else\n        for i in $(seq $1 $2); do\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                echo $i\n                break\n      \
    \      fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n\
    \    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 1 ]; then\n            echo -1\n        elif [ $1\
    \ -eq 2 ]; then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n       \
    \     echo -1\n        elif [ $1 -eq 4 ]; then\n            echo 4\n        elif\
    \ [ $1 -eq 5 ]; then\n            echo -1\n        elif [ $1 -eq 6 ]; then\n \
    \           echo 6\n        elif [ $1 -eq 7 ]; then\n            echo -1\n   \
    \     elif [ $1 -eq 8 ]; then\n            echo 8\n        elif [ $1 -eq 9 ];\
    \ then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n            echo\
    \ 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n        elif [ $1\
    \ -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ]; then\n    \
    \        echo -1\n        elif [ $1 -eq 14 ]; then\n            echo 14\n    \
    \    elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq 16 ];\
    \ then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif [ $1\
    \ -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n    \
    \        echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n    \
    \    elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
    \ then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo\
    \ 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1\
    \ -eq 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n    \
    \        echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n    \
    \    elif", "    if [[ $1 -lt 0 || $2 -lt 0 ]]; then\n        echo \"Error: The\
    \ numbers must be positive.\"\n        exit 1\n    fi\n    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"Error: The first number must be smaller than the second.\"\
    \n        exit 1\n    fi\n    if [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq\
    \ 0 ]]; then\n            echo $1\n        else\n            echo -1\n       \
    \ fi\n    fi\n    if [[ $1 -lt $2 ]]; then\n        for (( i=$2; i>=$1; i-- ));\
    \ do\n            if [[ $i%2 -eq 0 ]]; then\n                echo $i\n       \
    \         break\n            fi\n        done\n    fi", "    if [ $1 -gt $2 ];\
    \ then\n        echo \"Error: $1 is greater than $2\"\n        return -1\n   \
    \ fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n        echo \"Error: $1 or $2\
    \ is less than 0\"\n        return -1\n    fi\n    if [ $1 -eq $2 ]; then\n  \
    \      if [ $1 -eq 0 ]; then\n            echo \"Error: $1 and $2 are both 0\"\
    \n            return -1\n        fi\n        if [ $1 -eq 1 ]; then\n         \
    \   echo \"Error: $1 and $2 are both 1\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 2 ]; then\n            echo \"Error: $1 and $2 are both 2\"\
    \n            return -1\n        fi\n        if [ $1 -eq 3 ]; then\n         \
    \   echo \"Error: $1 and $2 are both 3\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 4 ]; then\n            echo \"Error: $1 and $2 are both 4\"\
    \n            return -1\n        fi\n        if [ $1 -eq 5 ]; then\n         \
    \   echo \"Error: $1 and $2 are both 5\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 6 ]; then\n            echo \"Error: $1 and $2 are both 6\"\
    \n            return -1\n        fi\n        if [ $1 -eq 7 ]; then\n         \
    \   echo \"Error: $1 and $2 are both 7\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 8 ]; then\n            echo \"Error: $1 and $2 are both 8\"\
    \n            return -1\n        fi\n        if [ $1 -eq 9 ]; then\n         \
    \   echo \"Error: $1 and $2 are both 9\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 10 ]; then\n            echo \"Error: $1 and $2 are both\
    \ 10\"\n            return -1\n        fi\n        if [ $1 -eq 11 ]; then\n  \
    \          echo \"Error: $1 and $2 are both 11\"\n            return -1\n    \
    \    fi\n        if [ $1 -eq 12 ]; then\n            echo \"", "    if [ $1 -gt\
    \ $2 ]; then\n        echo -1\n    else\n        for (( i=$1; i<=$2; i++ )); do\n\
    \            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n          \
    \      break\n            fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo -1\n    else\n        if [ $1 -eq $2 ]; then\n            if [ $1\
    \ -eq 0 ]; then\n                echo -1\n            else\n                if\
    \ [ $1 -eq 1 ]; then\n                    echo -1\n                else\n    \
    \                if [ $1 -eq 2 ]; then\n                        echo 2\n     \
    \               else\n                        if [ $1 -eq 3 ]; then\n        \
    \                    echo 2\n                        else\n                  \
    \          if [ $1 -eq 4 ]; then\n                                echo 4\n   \
    \                         else\n                                if [ $1 -eq 5\
    \ ]; then\n                                    echo 4\n                      \
    \          else\n                                    if [ $1 -eq 6 ]; then\n \
    \                                       echo 6\n                             \
    \       else\n                                        if [ $1 -eq 7 ]; then\n\
    \                                            echo 6\n                        \
    \                else\n                                            if [ $1 -eq\
    \ 8 ]; then\n                                                echo 8\n        \
    \                                    else\n                                  \
    \              if [ $1 -eq 9 ]; then\n                                       \
    \             echo 8\n                                                else\n \
    \                                                   if [ $1 -eq 10 ]; then\n \
    \                                                       echo 10\n            \
    \                                        else\n                              \
    \                          if [ $1 -eq 11 ]; then\n                          \
    \                                  echo 10\n                                 \
    \                       else\n                                               \
    \             if [ $1 -eq 12 ]; then\n                                       \
    \                         echo 12\n                                          \
    \                  else\n                                                    \
    \            if [ $1 -eq 13 ]; then\n                                        \
    \                            echo 12\n                                       \
    \                         else\n                                             \
    \                       if [ $1 -eq 14 ]; then\n                             \
    \                                           echo 14\n                        \
    \                                            else\n                          \
    \                                              if [ $1 -eq 15 ]; then\n      \
    \                                                                      echo 14\n\
    \                                                                        else\n\
    \                                                                            if\
    \ [ $1 -eq 16 ]; then\n                                                      \
    \                          echo 16\n                                         \
    \                                   else\n                                   \
    \                                             if [ $1 -eq 17 ]; then\n       \
    \                                                                            \
    \ echo 16\n                                                                  \
    \              else\n                                                        \
    \                            if [ $1 -eq 18 ]; then\n                        \
    \                                                                echo 18\n   \
    \                                                                            \
    \     else\n                                                                 \
    \                       if [ $1 -eq 19 ]; then\n                             \
    \                                                               echo 18", "  \
    \  if [ $1 -lt $2 ]; then\n        if [ $1%2 -eq 0 ]; then\n            echo $1\n\
    \        else\n            echo $(( $1 + 1 ))\n        fi\n    else\n        echo\
    \ -1\n    fi", "    if [ $1 -ge $2 ]; then\n        echo -1\n    else\n      \
    \  for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n    \
    \            echo $i\n                break\n            fi\n        done\n  \
    \  fi", "    if [ $1 -gt $2 ]; then\n        echo \"Error: $1 is greater than\
    \ $2\"\n        return -1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n\
    \        echo \"Error: $1 or $2 is less than 0\"\n        return -1\n    fi\n\
    \    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"\
    Error: $1 and $2 are both 0\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 1 ]; then\n            echo \"Error: $1 and $2 are both 1\"\n       \
    \     return -1\n        fi\n        if [ $1 -eq 2 ]; then\n            echo \"\
    Error: $1 and $2 are both 2\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 3 ]; then\n            echo \"Error: $1 and $2 are both 3\"\n       \
    \     return -1\n        fi\n        if [ $1 -eq 4 ]; then\n            echo \"\
    Error: $1 and $2 are both 4\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 5 ]; then\n            echo \"Error: $1 and $2 are both 5\"\n       \
    \     return -1\n        fi\n        if [ $1 -eq 6 ]; then\n            echo \"\
    Error: $1 and $2 are both 6\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 7 ]; then\n            echo \"Error: $1 and $2 are both 7\"\n       \
    \     return -1\n        fi\n        if [ $1 -eq 8 ]; then\n            echo \"\
    Error: $1 and $2 are both 8\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 9 ]; then\n            echo \"Error: $1 and $2 are both 9\"\n       \
    \     return -1\n        fi\n        if [ $1 -eq 10 ]; then\n            echo\
    \ \"Error: $1 and $2 are both 10\"\n            return -1\n        fi\n      \
    \  if [ $1 -eq 11 ]; then\n            echo \"Error: $1 and $2 are both 11\"\n\
    \            return -1\n        fi\n        if [ $1 -eq 12 ]; then\n         \
    \   echo \"", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n     \
    \   for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n \
    \               echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n         \
    \       echo $i\n                return\n            fi\n        done\n      \
    \  echo -1\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif\
    \ [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo \"\
    $1\"\n        else\n            echo \"-1\"\n        fi\n    else\n        if\
    \ [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n            choose_num\
    \ $(( $1 + 1 )) $2\n        fi\n    fi", "    # Write your code here\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n", "    if [ $1 -lt $2 ]; then\n        if [ $(( $1 % 2 )) -eq\
    \ 0 ]; then\n            echo $1\n        else\n            echo $(( $1 + 1 ))\n\
    \        fi\n    else\n        echo -1\n    fi", "  if [ $1 -gt $2 ]; then\n \
    \   echo -1\n  elif [ $1 -eq $2 ]; then\n    if [ $1 -eq 0 ]; then\n      echo\
    \ -1\n    elif [ $1 -eq 1 ]; then\n      echo -1\n    elif [ $1 -eq 2 ]; then\n\
    \      echo 2\n    elif [ $1 -eq 3 ]; then\n      echo -1\n    elif [ $1 -eq 4\
    \ ]; then\n      echo 4\n    elif [ $1 -eq 5 ]; then\n      echo -1\n    elif\
    \ [ $1 -eq 6 ]; then\n      echo 6\n    elif [ $1 -eq 7 ]; then\n      echo -1\n\
    \    elif [ $1 -eq 8 ]; then\n      echo 8\n    elif [ $1 -eq 9 ]; then\n    \
    \  echo -1\n    elif [ $1 -eq 10 ]; then\n      echo 10\n    elif [ $1 -eq 11\
    \ ]; then\n      echo -1\n    elif [ $1 -eq 12 ]; then\n      echo 12\n    elif\
    \ [ $1 -eq 13 ]; then\n      echo -1\n    elif [ $1 -eq 14 ]; then\n      echo\
    \ 14\n    elif [ $1 -eq 15 ]; then\n      echo -1\n    elif [ $1 -eq 16 ]; then\n\
    \      echo 16\n    elif [ $1 -eq 17 ]; then\n      echo -1\n    elif [ $1 -eq\
    \ 18 ]; then\n      echo 18\n    elif [ $1 -eq 19 ]; then\n      echo -1\n   \
    \ elif [ $1 -eq 20 ]; then\n      echo 20\n    elif [ $1 -eq 21 ]; then\n    \
    \  echo -1\n    elif [ $1 -eq 22 ]; then\n      echo 22\n    elif [ $1 -eq 23\
    \ ]; then\n      echo -1\n    elif [ $1 -eq 24 ]; then\n      echo 24\n    elif\
    \ [ $1 -eq 25 ]; then\n      echo -1\n    elif [ $1 -eq 26 ]; then\n      echo\
    \ 26\n    elif [ $1 -eq 27 ]; then\n      echo -1\n    elif [ $1 -eq 28 ]; then\n\
    \      echo 28\n    elif", "    # TODO: Write your code here\n    # \n    # Hint:\n\
    \    #\n    # 1. Use the modulo operator to check if a number is even.\n    #\
    \ 2. Use the if-else statement to check if a number is in the range\n    #   \
    \ [x, y] inclusive.\n    # 3. Use the if-else statement to check if a number is\
    \ the biggest\n    #    even integer number in the range [x, y] inclusive.\n \
    \   # 4. Use the if-else statement to check if there's no such number.\n    #\n\
    \    # Note:\n    #\n    # 1. The function should return an integer.\n    # 2.\
    \ The function should return -1 if there's no such number.\n    # 3. The function\
    \ should return the biggest even integer number if\n    #    there's such number.\n\
    \    # 4. The function should return the biggest even integer number in\n    #\
    \    the range [x, y] inclusive.\n    # 5. The function should return -1 if there's\
    \ no such number.\n    # 6. The function should return the biggest even integer\
    \ number if\n    #    there's such number.\n    # 7. The function should return\
    \ the biggest even integer number in\n    #    the range [x, y] inclusive.\n \
    \   # 8. The function should return -1 if there's no such number.\n    # 9. The\
    \ function should return the biggest even integer number if\n    #    there's\
    \ such number.\n    # 10. The function should return the biggest even integer\
    \ number in\n    #    the range [x, y] inclusive.\n    # 11. The function should\
    \ return -1 if there's no such number.\n    # 12. The function should return the\
    \ biggest even integer number if\n    #    there's such number.\n    # 13. The\
    \ function should return the biggest even integer number in\n    #    the range\
    \ [x, y] inclusive.\n    # 14. The function should return -1 if there's no such\
    \ number.\n    # 15. The function should return the biggest even integer number\
    \ if\n    #    there's such number.\n    # 16. The function should return the\
    \ biggest even integer number in\n    #    the range [x, y] inclusive.\n    #\
    \ 17. The function should return -1", "    local x=$1\n    local y=$2\n    local\
    \ max=$x\n    local i=0\n    if [ $x -gt $y ]; then\n        max=$y\n    fi\n\
    \    for ((i=$max; i>=x; i--)); do\n        if [ $((i%2)) -eq 0 ]; then\n    \
    \        echo $i\n            return\n        fi\n    done\n    echo -1", "  \
    \  if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n\
    \        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n      \
    \      echo -1\n        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n\
    \            if [[ $i%2 -eq 0 ]]; then\n                echo $i\n            \
    \    break\n            fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo \"The first number must be smaller than the second number.\"\n \
    \       return -1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n       \
    \ echo \"Both numbers must be positive.\"\n        return -1\n    fi\n    if [\
    \ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"0\"\n \
    \           return 0\n        fi\n        if [ $(( $1 % 2 )) -eq 0 ]; then\n \
    \           echo \"$1\"\n            return 0\n        else\n            echo\
    \ \"-1\"\n            return 0\n        fi\n    fi\n    if [ $1 -eq 0 ]; then\n\
    \        echo \"0\"\n        return 0\n    fi\n    for i in $(seq $1 $2); do\n\
    \        if [ $(( $i % 2 )) -eq 0 ]; then\n            echo \"$i\"\n         \
    \   return 0\n        fi\n    done\n    echo \"-1\"\n    return 0", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n      \
    \  if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n            echo\
    \ -1\n        fi\n    else\n        for i in $(seq $1 $2); do\n            if\
    \ [[ $i%2 -eq 0 ]]; then\n                echo $i\n                break\n   \
    \         fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ -1\n    elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n    \
    \        echo $1\n        else\n            echo -1\n        fi\n    else\n  \
    \      for (( i=$2; i>=$1; i-- )); do\n            if [[ $i%2 -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n       \
    \         echo $i\n                break\n            fi\n        done\n    fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n      \
    \  if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n            echo\
    \ -1\n        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n         \
    \   if [[ $i%2 -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo\
    \ \"The first number must be smaller than the second number.\"\n        return\
    \ -1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n        echo \"Both numbers\
    \ must be positive.\"\n        return -1\n    fi\n    if [ $1 -eq $2 ]; then\n\
    \        if [ $1 -eq 0 ]; then\n            echo \"0\"\n            return 0\n\
    \        fi\n        if [ $(( $1 % 2 )) -eq 0 ]; then\n            echo \"$1\"\
    \n            return 0\n        else\n            echo \"-1\"\n            return\
    \ 0\n        fi\n    fi\n    if [ $(( $1 % 2 )) -eq 0 ]; then\n        echo \"\
    $1\"\n        return 0\n    fi\n    if [ $(( $2 % 2 )) -eq 0 ]; then\n       \
    \ echo \"$2\"\n        return 0\n    fi\n    echo \"-1\"\n    return 0", "   \
    \ if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    if [ $1 -lt\
    \ $2 ]; then\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq\
    \ 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    else\n        echo -1\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo \"The first number should be smaller than the second number\"\n\
    \        return -1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n      \
    \  echo \"Both numbers should be positive\"\n        return -1\n    fi\n    if\
    \ [ $1 -eq $2 ]; then\n        if [ $(($1 % 2)) -eq 0 ]; then\n            echo\
    \ $1\n        else\n            echo -1\n        fi\n    else\n        for ((\
    \ i=$2; i>=$1; i-- )); do\n            if [ $(($i % 2)) -eq 0 ]; then\n      \
    \          echo $i\n                break\n            fi\n        done\n    fi",
  "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo -1\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n      \
    \          break\n            fi\n        done\n    fi", "    if [ $1 -gt $2 ];\
    \ then\n        echo \"The first number must be smaller than the second number\"\
    \n        return -1\n    fi\n    if [ $1 -lt 0 ]; then\n        echo \"The first\
    \ number must be positive\"\n        return -1\n    fi\n    if [ $2 -lt 0 ]; then\n\
    \        echo \"The second number must be positive\"\n        return -1\n    fi\n\
    \    for i in $(seq $1 $2); do\n        if [ $((i % 2)) -eq 0 ]; then\n      \
    \      echo $i\n            return 0\n        fi\n    done\n    echo -1\n    return\
    \ 0", "    # Write your code here\n    # You can use the following variables:\n\
    \    # $1 - the first number\n    # $2 - the second number\n    # $biggest - the\
    \ biggest number\n    # $smallest - the smallest number\n    # $biggest_even -\
    \ the biggest even number\n    # $smallest_even - the smallest even number\n \
    \   # $biggest_odd - the biggest odd number\n    # $smallest_odd - the smallest\
    \ odd number\n    # $i - the current number\n    # $n - the number of numbers\
    \ in the range\n    # $n_even - the number of even numbers in the range\n    #\
    \ $n_odd - the number of odd numbers in the range\n    # $n_zero - the number\
    \ of zeros in the range\n    # $n_positive - the number of positive numbers in\
    \ the range\n    # $n_negative - the number of negative numbers in the range\n\
    \    # $n_non_zero - the number of non-zero numbers in the range\n    # $n_non_positive\
    \ - the number of non-positive numbers in the range\n    # $n_non_negative - the\
    \ number of non-negative numbers in the range\n    # $n_non_positive_non_zero\
    \ - the number of non-positive non-zero numbers in the range\n    # $n_non_negative_non_zero\
    \ - the number of non-negative non-zero numbers in the range\n    # $n_non_positive_non_negative\
    \ - the number of non-positive non-negative numbers in the range\n    # $n_non_positive_non_negative_non_zero\
    \ - the number of non-positive non-negative non-zero numbers in the range\n  \
    \  # $n_non_positive_non_negative_non_zero_non_even - the number of non-positive\
    \ non-negative non-zero non-even numbers in the range\n    # $n_non_positive_non_negative_non_zero_non_odd\
    \ - the number of non-positive non-negative non-zero non-odd numbers in the range\n\
    \    # $n_non_positive_non_negative_non_zero_non_even_non_odd - the number of\
    \ non-positive non-negative non-zero non-even non-odd numbers in", "    if [ $1\
    \ -gt $2 ]; then\n        echo \"Error: $1 is greater than $2\"\n        return\
    \ -1\n    fi\n    if [ $1 -lt 0 ]; then\n        echo \"Error: $1 is less than\
    \ 0\"\n        return -1\n    fi\n    if [ $2 -lt 0 ]; then\n        echo \"Error:\
    \ $2 is less than 0\"\n        return -1\n    fi\n    if [ $1 -eq $2 ]; then\n\
    \        if [ $1 -eq 0 ]; then\n            echo \"Error: $1 is equal to 0\"\n\
    \            return -1\n        fi\n        if [ $1 -eq 1 ]; then\n          \
    \  echo \"Error: $1 is equal to 1\"\n            return -1\n        fi\n     \
    \   if [ $1 -eq 2 ]; then\n            echo \"Error: $1 is equal to 2\"\n    \
    \        return -1\n        fi\n        if [ $1 -eq 3 ]; then\n            echo\
    \ \"Error: $1 is equal to 3\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 4 ]; then\n            echo \"Error: $1 is equal to 4\"\n           \
    \ return -1\n        fi\n        if [ $1 -eq 5 ]; then\n            echo \"Error:\
    \ $1 is equal to 5\"\n            return -1\n        fi\n        if [ $1 -eq 6\
    \ ]; then\n            echo \"Error: $1 is equal to 6\"\n            return -1\n\
    \        fi\n        if [ $1 -eq 7 ]; then\n            echo \"Error: $1 is equal\
    \ to 7\"\n            return -1\n        fi\n        if [ $1 -eq 8 ]; then\n \
    \           echo \"Error: $1 is equal to 8\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 9 ]; then\n            echo \"Error: $1 is equal to 9\"\n\
    \            return -1\n        fi\n        if [ $1 -eq 10 ]; then\n         \
    \   echo \"Error: $1 is equal to 10\"\n            return -1\n        fi\n   \
    \     if [ $1 -eq 11 ]; then\n            echo \"Error: $1 is equal to 11\"\n\
    \            return -1\n        fi\n        if [ $1 -eq 12 ]; then\n         \
    \   echo \"Error: $", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "\tif [ $1 -gt $2 ]; then\n\t\techo -1\n\telse\n\t\tfor i in $(seq $1\
    \ $2); do\n\t\t\tif [ $((i%2)) -eq 0 ]; then\n\t\t\t\techo $i\n\t\t\t\tbreak\n\
    \t\t\tfi\n\t\tdone\n\tfi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif\
    \ [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo -1\n  \
    \      elif [ $1 -eq 1 ]; then\n            echo -1\n        elif [ $1 -eq 2 ];\
    \ then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 4 ]; then\n            echo 4\n        elif [ $1 -eq\
    \ 5 ]; then\n            echo -1\n        elif [ $1 -eq 6 ]; then\n          \
    \  echo 6\n        elif [ $1 -eq 7 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 8 ]; then\n            echo 8\n        elif [ $1 -eq 9 ]; then\n  \
    \          echo -1\n        elif [ $1 -eq 10 ]; then\n            echo 10\n  \
    \      elif [ $1 -eq 11 ]; then\n            echo -1\n        elif [ $1 -eq 12\
    \ ]; then\n            echo 12\n        elif [ $1 -eq 13 ]; then\n           \
    \ echo -1\n        elif [ $1 -eq 14 ]; then\n            echo 14\n        elif\
    \ [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq 16 ]; then\n\
    \            echo 16\n        elif [ $1 -eq 17 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif [ $1 -eq\
    \ 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n        \
    \    echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 24 ]; then\n            echo 24\n\
    \        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n        elif",
  "\tif [[ $1 -gt $2 ]]; then\n\t\techo -1\n\t\treturn\n\tfi\n\tfor (( i=$2; i>=$1;\
    \ i-- )); do\n\t\tif [[ $((i%2)) -eq 0 ]]; then\n\t\t\techo $i\n\t\t\treturn\n\
    \t\tfi\n\tdone\n\techo -1", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n \
    \   else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq\
    \ 0 ]]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2\
    \ ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n\
    \            echo -1\n        fi\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $i%2 -eq 0 ]]; then\n                echo $i\n            \
    \    break\n            fi\n        done\n    fi", "    # Write your code here\n\
    \    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2;\
    \ i++)); do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n        if [[\
    \ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n            echo -1\n\
    \        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n            if\
    \ [[ $i%2 -eq 0 ]]; then\n                echo $i\n                break\n   \
    \         fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ max=$((x > y ? x : y))\n    local min=$((x < y ? x : y))\n    local i=$max\n\
    \    while [ $i -ge $min ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n      \
    \      echo $i\n            return\n        fi\n        i=$((i - 1))\n    done\n\
    \    echo -1", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n      \
    \  for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n    \
    \            echo $i\n                break\n            fi\n        done\n  \
    \  fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i\
    \ in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n          \
    \      echo $i\n                break\n            fi\n        done\n    fi",
  "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    if [ $1 -lt\
    \ $2 ]; then\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq\
    \ 0 ]; then\n                echo $i\n                return\n            fi\n\
    \        done\n    else\n        for i in $(seq $2 $1); do\n            if [ $((i\
    \ % 2)) -eq 0 ]; then\n                echo $i\n                return\n     \
    \       fi\n        done\n    fi\n    echo -1", "    if [ $1 -gt $2 ]; then\n\
    \        echo -1\n    else\n        for i in $(seq $1 $2); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo \"First argument must be less than or equal to the second argument\"\n\
    \        return 1\n    fi\n    if [[ $1 -lt 0 || $2 -lt 0 ]]; then\n        echo\
    \ \"Both arguments must be positive integers\"\n        return 1\n    fi\n   \
    \ if [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo\
    \ $1\n        else\n            echo -1\n        fi\n    else\n        for ((\
    \ i=$2; i>=$1; i-- )); do\n            if [[ $i%2 -eq 0 ]]; then\n           \
    \     echo $i\n                return 0\n            fi\n        done\n      \
    \  echo -1\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif\
    \ [[ $1 -lt 0 || $2 -lt 0 ]]; then\n        echo -1\n    else\n        for ((\
    \ i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n       \
    \         echo $i\n                break\n            fi\n        done\n    fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for (( i=$1; i<=$2;\
    \ i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "\tif [[ $1\
    \ -gt $2 ]]; then\n\t\treturn -1\n\tfi\n\tfor (( i=$1; i<=$2; i++ )); do\n\t\t\
    if [[ $((i%2)) -eq 0 ]]; then\n\t\t\techo $i\n\t\t\treturn 0\n\t\tfi\n\tdone\n\
    \treturn -1", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n     \
    \   for (( i = $1; i <= $2; i++ )); do\n            if [[ $(( i % 2 )) -eq 0 ]];\
    \ then\n                echo $i\n                break\n            fi\n     \
    \   done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"Error: $1 is greater\
    \ than $2\"\n        return -1\n    fi\n    if [ $1 -lt 0 ]; then\n        echo\
    \ \"Error: $1 is negative\"\n        return -1\n    fi\n    if [ $2 -lt 0 ]; then\n\
    \        echo \"Error: $2 is negative\"\n        return -1\n    fi\n    if [ $1\
    \ -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"Error: $1\
    \ and $2 are both zero\"\n            return -1\n        fi\n        if [ $1 -eq\
    \ 1 ]; then\n            echo \"Error: $1 and $2 are both one\"\n            return\
    \ -1\n        fi\n        if [ $1 -eq 2 ]; then\n            echo \"Error: $1\
    \ and $2 are both two\"\n            return -1\n        fi\n        if [ $1 -eq\
    \ 3 ]; then\n            echo \"Error: $1 and $2 are both three\"\n          \
    \  return -1\n        fi\n        if [ $1 -eq 4 ]; then\n            echo \"Error:\
    \ $1 and $2 are both four\"\n            return -1\n        fi\n        if [ $1\
    \ -eq 5 ]; then\n            echo \"Error: $1 and $2 are both five\"\n       \
    \     return -1\n        fi\n        if [ $1 -eq 6 ]; then\n            echo \"\
    Error: $1 and $2 are both six\"\n            return -1\n        fi\n        if\
    \ [ $1 -eq 7 ]; then\n            echo \"Error: $1 and $2 are both seven\"\n \
    \           return -1\n        fi\n        if [ $1 -eq 8 ]; then\n           \
    \ echo \"Error: $1 and $2 are both eight\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 9 ]; then\n            echo \"Error: $1 and $2 are both nine\"\
    \n            return -1\n        fi\n        if [ $1 -eq 10 ]; then\n        \
    \    echo \"Error: $1 and $2 are both ten\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 11 ]; then\n            echo \"Error: $1 and $2 are both\
    \ eleven\"\n            return -1\n", "    if [ $1 -gt $2 ]; then\n        echo\
    \ -1\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n          \
    \  echo -1\n        elif [ $1 -eq 1 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 2 ]; then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n  \
    \          echo -1\n        elif [ $1 -eq 4 ]; then\n            echo 4\n    \
    \    elif [ $1 -eq 5 ]; then\n            echo -1\n        elif [ $1 -eq 6 ];\
    \ then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n        elif [ $1 -eq\
    \ 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n         \
    \   echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo 14\n\
    \        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
    \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n\
    \            echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq\
    \ 23 ]; then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n        \
    \    echo 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n\
    \        elif", "    # Write your code here\n    if [ $1 -gt $2 ]; then\n    \
    \    echo -1\n    else\n        for i in $(seq $1 $2); do\n            if [ $((i%2))\
    \ -eq 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    # Write your code here\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
  "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
    \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $1 -eq 1 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n  \
    \      elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ];\
    \ then\n            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq\
    \ 7 ]; then\n            echo -1\n        elif [ $1 -eq 8 ]; then\n          \
    \  echo 8\n        elif [ $1 -eq 9 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 10 ]; then\n            echo 10\n        elif [ $1 -eq 11 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 12 ]; then\n            echo 12\n\
    \        elif [ $1 -eq 13 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 14 ]; then\n            echo 14\n        elif [ $1 -eq 15 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 16 ]; then\n            echo 16\n        elif\
    \ [ $1 -eq 17 ]; then\n            echo -1\n        elif [ $1 -eq 18 ]; then\n\
    \            echo 18\n        elif [ $1 -eq 19 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 20 ]; then\n            echo 20\n        elif [ $1 -eq\
    \ 21 ]; then\n            echo -1\n        elif [ $1 -eq 22 ]; then\n        \
    \    echo 22\n        elif [ $1 -eq 23 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 24 ]; then\n            echo 24\n        elif [ $1 -eq 25 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 26 ]; then\n            echo 26\n\
    \        elif [ $1 -eq 27 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 28 ]; then\n            echo 28\n        elif [", "    if [ $1 -lt $2 ]; then\n\
    \        if [ $1 -eq 0 ]; then\n            echo $2\n        else\n          \
    \  echo $1\n        fi\n    else\n        echo -1\n    fi", "    if [ $1 -gt $2\
    \ ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq\
    \ 0 ]; then\n            echo -1\n        elif [ $1 -eq 1 ]; then\n          \
    \  echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n        elif\
    \ [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n \
    \           echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n   \
    \     elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ];\
    \ then\n            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo\
    \ 8\n        elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 10 ]; then\n            echo 10\n        elif [ $1 -eq 11 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 12 ]; then\n            echo 12\n        elif\
    \ [ $1 -eq 13 ]; then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n\
    \            echo 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 16 ]; then\n            echo 16\n        elif [ $1 -eq\
    \ 17 ]; then\n            echo -1\n        elif [ $1 -eq 18 ]; then\n        \
    \    echo 18\n        elif [ $1 -eq 19 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 20 ]; then\n            echo 20\n        elif [ $1 -eq 21 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 22 ]; then\n            echo 22\n\
    \        elif [ $1 -eq 23 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 24 ]; then\n            echo 24\n        elif [ $1 -eq 25 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 26 ]; then\n            echo 26\n        elif\
    \ [ $1 -eq 27 ]; then\n            echo -1\n        elif [ $1 -eq 28 ]; then\n\
    \            echo 28\n        elif", "    if [ $1 -gt $2 ]; then\n        echo\
    \ \"Error: $1 is greater than $2\"\n        return -1\n    fi\n    if [ $1 -lt\
    \ 0 ]; then\n        echo \"Error: $1 is less than 0\"\n        return -1\n  \
    \  fi\n    if [ $2 -lt 0 ]; then\n        echo \"Error: $2 is less than 0\"\n\
    \        return -1\n    fi\n    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0\
    \ ]; then\n            echo \"Error: $1 is equal to 0\"\n            return -1\n\
    \        fi\n        if [ $1 -eq 1 ]; then\n            echo \"Error: $1 is equal\
    \ to 1\"\n            return -1\n        fi\n        if [ $1 -eq 2 ]; then\n \
    \           echo \"Error: $1 is equal to 2\"\n            return -1\n        fi\n\
    \        if [ $1 -eq 3 ]; then\n            echo \"Error: $1 is equal to 3\"\n\
    \            return -1\n        fi\n        if [ $1 -eq 4 ]; then\n          \
    \  echo \"Error: $1 is equal to 4\"\n            return -1\n        fi\n     \
    \   if [ $1 -eq 5 ]; then\n            echo \"Error: $1 is equal to 5\"\n    \
    \        return -1\n        fi\n        if [ $1 -eq 6 ]; then\n            echo\
    \ \"Error: $1 is equal to 6\"\n            return -1\n        fi\n        if [\
    \ $1 -eq 7 ]; then\n            echo \"Error: $1 is equal to 7\"\n           \
    \ return -1\n        fi\n        if [ $1 -eq 8 ]; then\n            echo \"Error:\
    \ $1 is equal to 8\"\n            return -1\n        fi\n        if [ $1 -eq 9\
    \ ]; then\n            echo \"Error: $1 is equal to 9\"\n            return -1\n\
    \        fi\n        if [ $1 -eq 10 ]; then\n            echo \"Error: $1 is equal\
    \ to 10\"\n            return -1\n        fi\n        if [ $1 -eq 11 ]; then\n\
    \            echo \"Error: $1 is equal to 11\"\n            return -1\n      \
    \  fi\n        if [ $1 -eq 12 ]; then\n            echo \"Error: $", "    local\
    \ x=$1\n    local y=$2\n    local max=-1\n    local i\n    for ((i=$x; i<=$y;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            if ((i > max)); then\n\
    \                max=$i\n            fi\n        fi\n    done\n    echo $max",
  "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq $1 $2);\
    \ do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n \
    \               break\n            fi\n        done\n    fi", "    if [ $1 -gt\
    \ $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1 $2); do\n \
    \           if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        break\n            fi\n        done\n    fi", "\tif [ $1 -lt $2 ]; then\n\
    \t\tfor i in $(seq $1 $2); do\n\t\t\tif [ $((i%2)) -eq 0 ]; then\n\t\t\t\techo\
    \ $i\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\telse\n\t\tfor i in $(seq $2 $1); do\n\
    \t\t\tif [ $((i%2)) -eq 0 ]; then\n\t\t\t\techo $i\n\t\t\t\tbreak\n\t\t\tfi\n\t\
    \tdone\n\tfi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n      \
    \  for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n    \
    \            echo $i\n                break\n            fi\n        done\n  \
    \  fi", "    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n         \
    \   echo -1\n        elif [ $1 -eq 1 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 2 ]; then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n  \
    \          echo 2\n        elif [ $1 -eq 4 ]; then\n            echo 4\n     \
    \   elif [ $1 -eq 5 ]; then\n            echo 4\n        elif [ $1 -eq 6 ]; then\n\
    \            echo 6\n        elif [ $1 -eq 7 ]; then\n            echo 6\n   \
    \     elif [ $1 -eq 8 ]; then\n            echo 8\n        elif [ $1 -eq 9 ];\
    \ then\n            echo 8\n        elif [ $1 -eq 10 ]; then\n            echo\
    \ 10\n        elif [ $1 -eq 11 ]; then\n            echo 10\n        elif [ $1\
    \ -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ]; then\n    \
    \        echo 12\n        elif [ $1 -eq 14 ]; then\n            echo 14\n    \
    \    elif [ $1 -eq 15 ]; then\n            echo 14\n        elif [ $1 -eq 16 ];\
    \ then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n            echo\
    \ 16\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif [ $1\
    \ -eq 19 ]; then\n            echo 18\n        elif [ $1 -eq 20 ]; then\n    \
    \        echo 20\n        elif [ $1 -eq 21 ]; then\n            echo 20\n    \
    \    elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq 23 ];\
    \ then\n            echo 22\n        elif [ $1 -eq 24 ]; then\n            echo\
    \ 24\n        elif [ $1 -eq 25 ]; then\n            echo 24\n        elif [ $1\
    \ -eq 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n    \
    \        echo 26\n        elif [ $1 -eq 28 ]; then\n            echo 28\n    \
    \    elif [ $1 -eq 29 ]; then\n            echo 28\n        elif [ $1 -eq 30 ];\
    \ then\n            echo 30\n        el", "    if [[ $1 -gt $2 ]]; then\n    \
    \    echo -1\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"\
    Error: $1 is greater than $2\"\n        return -1\n    fi\n    for i in $(seq\
    \ $1 $2); do\n        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n   \
    \         return 0\n        fi\n    done\n    echo -1", "    if [ $1 -gt $2 ];\
    \ then\n        echo \"The first number must be less than the second number\"\n\
    \        return -1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n      \
    \  echo \"Both numbers must be positive\"\n        return -1\n    fi\n    if [\
    \ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"0\"\n \
    \           return 0\n        fi\n        if [ $1 -eq 1 ]; then\n            echo\
    \ \"-1\"\n            return 0\n        fi\n        if [ $1 -eq 2 ]; then\n  \
    \          echo \"2\"\n            return 0\n        fi\n        if [ $1 -eq 3\
    \ ]; then\n            echo \"2\"\n            return 0\n        fi\n        if\
    \ [ $1 -eq 4 ]; then\n            echo \"4\"\n            return 0\n        fi\n\
    \        if [ $1 -eq 5 ]; then\n            echo \"4\"\n            return 0\n\
    \        fi\n        if [ $1 -eq 6 ]; then\n            echo \"6\"\n         \
    \   return 0\n        fi\n        if [ $1 -eq 7 ]; then\n            echo \"6\"\
    \n            return 0\n        fi\n        if [ $1 -eq 8 ]; then\n          \
    \  echo \"8\"\n            return 0\n        fi\n        if [ $1 -eq 9 ]; then\n\
    \            echo \"8\"\n            return 0\n        fi\n        if [ $1 -eq\
    \ 10 ]; then\n            echo \"10\"\n            return 0\n        fi\n    \
    \    if [ $1 -eq 11 ]; then\n            echo \"10\"\n            return 0\n \
    \       fi\n        if [ $1 -eq 12 ]; then\n            echo \"12\"\n        \
    \    return 0\n        fi\n        if [ $1 -eq 13 ]; then\n            echo \"\
    12\"\n            return 0\n        fi\n        if [ $1 -eq 14 ]; then\n     \
    \       echo \"14\"\n            return 0\n        fi\n        if [ $1 -eq 15\
    \ ]; then\n            echo \"14\"\n            return 0\n        fi\n       \
    \ if [ $1 -eq 16 ]; then\n            echo \"16\"\n            return 0\n    \
    \    fi\n        if [ $1 -eq 17 ]; then\n            echo \"16\"\n           \
    \ return", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        if\
    \ [ $1 -eq $2 ]; then\n            if [ $1 -eq 0 ]; then\n                echo\
    \ -1\n            else\n                if [ $1 -eq 1 ]; then\n              \
    \      echo -1\n                else\n                    if [ $1 -eq 2 ]; then\n\
    \                        echo 2\n                    else\n                  \
    \      if [ $1 -eq 3 ]; then\n                            echo 2\n           \
    \             else\n                            if [ $1 -eq 4 ]; then\n      \
    \                          echo 4\n                            else\n        \
    \                        if [ $1 -eq 5 ]; then\n                             \
    \       echo 4\n                                else\n                       \
    \             if [ $1 -eq 6 ]; then\n                                        echo\
    \ 6\n                                    else\n                              \
    \          if [ $1 -eq 7 ]; then\n                                           \
    \ echo 6\n                                        else\n                     \
    \                       if [ $1 -eq 8 ]; then\n                              \
    \                  echo 8\n                                            else\n\
    \                                                if [ $1 -eq 9 ]; then\n     \
    \                                               echo 8\n                     \
    \                           else\n                                           \
    \         if [ $1 -eq 10 ]; then\n                                           \
    \             echo 10\n                                                    else\n\
    \                                                        if [ $1 -eq 11 ]; then\n\
    \                                                            echo 10\n       \
    \                                                 else\n                     \
    \                                       if [ $1 -eq 12 ]; then\n             \
    \                                                   echo 12\n                \
    \                                            else\n                          \
    \                                      if [ $1 -eq 13 ]; then\n              \
    \                                                      echo 12\n             \
    \                                                   else\n                   \
    \                                                 if [ $1 -eq 14 ]; then\n   \
    \                                                                     echo 14\n\
    \                                                                    else\n  \
    \                                                                      if [ $1\
    \ -eq 15 ]; then\n                                                           \
    \                 echo 14\n                                                  \
    \                      else\n                                                \
    \                            if [ $1 -eq 16 ]; then\n                        \
    \                                                        echo 16\n           \
    \                                                                 else\n     \
    \                                                                           if\
    \ [ $1 -eq 17 ]; then\n                                                      \
    \                              echo 16\n                                     \
    \                                           else\n                           \
    \                                                         if [ $1 -eq 18 ]; then\n\
    \                                                                            \
    \            echo 18\n                                                       \
    \                             else\n                                         \
    \                                               if [ $1 -eq 19 ]; then\n     \
    \                                                                            \
    \           echo 18", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n\
    \        for (( i = $1; i <= $2; i++ )); do\n            if [[ $((i % 2)) -eq\
    \ 0 ]]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"The first\
    \ number must be smaller than the second number.\"\n        return 1\n    fi\n\
    \    if [ $1 -lt 0 ]; then\n        echo \"The first number must be positive.\"\
    \n        return 1\n    fi\n    if [ $2 -lt 0 ]; then\n        echo \"The second\
    \ number must be positive.\"\n        return 1\n    fi\n    if [ $(( $1 % 2 ))\
    \ -ne 0 ]; then\n        x=$(( $1 + 1 ))\n    else\n        x=$1\n    fi\n   \
    \ if [ $(( $2 % 2 )) -ne 0 ]; then\n        y=$(( $2 - 1 ))\n    else\n      \
    \  y=$2\n    fi\n    if [ $x -gt $y ]; then\n        echo -1\n    else\n     \
    \   echo $y\n    fi", "    # Write your code here\n    if [[ $1 -gt $2 ]]; then\n\
    \        echo -1\n    else\n        for i in $(seq $1 $2); do\n            if\
    \ [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "  # TODO: write your code here\n  # Note:\
    \ Please use a while loop\n  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n   \
    \ while [ $1 -le $2 ]; do\n      if [ $(( $1 % 2 )) -eq 0 ]; then\n        echo\
    \ $1\n        break\n      else\n        (( $1++ ))\n      fi\n    done\n  fi",
  "    if [ $1 -gt $2 ]; then\n        echo \"The first number must be smaller than\
    \ the second number\"\n        return -1\n    fi\n    if [ $1 -lt 0 ] || [ $2\
    \ -lt 0 ]; then\n        echo \"The numbers must be positive\"\n        return\
    \ -1\n    fi\n    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n    \
    \        echo \"0\"\n            return 0\n        fi\n        if [ $1 -eq 1 ];\
    \ then\n            echo \"-1\"\n            return 0\n        fi\n        if\
    \ [ $1 -eq 2 ]; then\n            echo \"2\"\n            return 0\n        fi\n\
    \        if [ $1 -eq 3 ]; then\n            echo \"2\"\n            return 0\n\
    \        fi\n        if [ $1 -eq 4 ]; then\n            echo \"4\"\n         \
    \   return 0\n        fi\n        if [ $1 -eq 5 ]; then\n            echo \"4\"\
    \n            return 0\n        fi\n        if [ $1 -eq 6 ]; then\n          \
    \  echo \"6\"\n            return 0\n        fi\n        if [ $1 -eq 7 ]; then\n\
    \            echo \"6\"\n            return 0\n        fi\n        if [ $1 -eq\
    \ 8 ]; then\n            echo \"8\"\n            return 0\n        fi\n      \
    \  if [ $1 -eq 9 ]; then\n            echo \"8\"\n            return 0\n     \
    \   fi\n        if [ $1 -eq 10 ]; then\n            echo \"10\"\n            return\
    \ 0\n        fi\n        if [ $1 -eq 11 ]; then\n            echo \"10\"\n   \
    \         return 0\n        fi\n        if [ $1 -eq 12 ]; then\n            echo\
    \ \"12\"\n            return 0\n        fi\n        if [ $1 -eq 13 ]; then\n \
    \           echo \"12\"\n            return 0\n        fi\n        if [ $1 -eq\
    \ 14 ]; then\n            echo \"14\"\n            return 0\n        fi\n    \
    \    if [ $1 -eq 15 ]; then\n            echo \"14\"\n            return 0\n \
    \       fi\n        if [ $1 -eq 16 ]; then\n            echo \"16\"\n        \
    \    return 0\n        fi\n        if [ $1 -eq 17 ]; then\n            echo \"\
    16\"\n            return", "    # Write your code here\n    if [ $1 -lt $2 ];\
    \ then\n        for i in $(seq $1 $2); do\n            if [ $((i%2)) -eq 0 ];\
    \ then\n                echo $i\n                return\n            fi\n    \
    \    done\n    else\n        for i in $(seq $2 $1); do\n            if [ $((i%2))\
    \ -eq 0 ]; then\n                echo $i\n                return\n           \
    \ fi\n        done\n    fi\n    echo -1", "    if [ $1 -gt $2 ]; then\n      \
    \  echo -1\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n    \
    \        echo 0\n        elif [ $1 -eq 1 ]; then\n            echo -1\n      \
    \  elif [ $1 -eq 2 ]; then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 4 ]; then\n            echo 4\n  \
    \      elif [ $1 -eq 5 ]; then\n            echo -1\n        elif [ $1 -eq 6 ];\
    \ then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n        elif [ $1 -eq\
    \ 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n         \
    \   echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo 14\n\
    \        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
    \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n\
    \            echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq\
    \ 23 ]; then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n        \
    \    echo 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n\
    \        elif [", "    if [ $1 -gt $2 ]; then\n        echo \"The first number\
    \ must be less than the second number\"\n        return\n    fi\n    if [ $1 -lt\
    \ 0 ] || [ $2 -lt 0 ]; then\n        echo \"Both numbers must be positive\"\n\
    \        return\n    fi\n    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ];\
    \ then\n            echo -1\n            return\n        fi\n        if [ $1 -eq\
    \ 1 ]; then\n            echo -1\n            return\n        fi\n        if [\
    \ $1 -eq 2 ]; then\n            echo 2\n            return\n        fi\n     \
    \   if [ $1 -eq 3 ]; then\n            echo -1\n            return\n        fi\n\
    \        if [ $1 -eq 4 ]; then\n            echo 4\n            return\n     \
    \   fi\n        if [ $1 -eq 5 ]; then\n            echo -1\n            return\n\
    \        fi\n        if [ $1 -eq 6 ]; then\n            echo 6\n            return\n\
    \        fi\n        if [ $1 -eq 7 ]; then\n            echo -1\n            return\n\
    \        fi\n        if [ $1 -eq 8 ]; then\n            echo 8\n            return\n\
    \        fi\n        if [ $1 -eq 9 ]; then\n            echo -1\n            return\n\
    \        fi\n        if [ $1 -eq 10 ]; then\n            echo 10\n           \
    \ return\n        fi\n        if [ $1 -eq 11 ]; then\n            echo -1\n  \
    \          return\n        fi\n        if [ $1 -eq 12 ]; then\n            echo\
    \ 12\n            return\n        fi\n        if [ $1 -eq 13 ]; then\n       \
    \     echo -1\n            return\n        fi\n        if [ $1 -eq 14 ]; then\n\
    \            echo 14\n            return\n        fi\n        if [ $1 -eq 15 ];\
    \ then\n            echo -1\n            return\n        fi\n        if [ $1 -eq\
    \ 16 ]; then\n            echo 16\n            return\n        fi\n        if\
    \ [ $1 -eq 17 ]; then\n            echo -1\n            return\n        fi\n \
    \       if [ $1 -eq 18 ]; then\n            echo 18\n            return\n    \
    \    fi\n        if [ $1 -eq 19 ]; then\n            echo -1\n            return\n\
    \        fi\n", "    if [ $1 -ge $2 ]; then\n        echo -1\n    else\n     \
    \   for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n   \
    \             echo $i\n                break\n            fi\n        done\n \
    \   fi", "    # Write your code here\n    # You can use the following command\
    \ to print a message to the standard output:\n    # echo \"Your message\"\n  \
    \  # You can use the following command to print a message to the standard error:\n\
    \    # echo \"Your message\" >&2\n    # You can use the following command to print\
    \ a message to the standard output and exit:\n    # echo \"Your message\" && exit\
    \ 0\n    # You can use the following command to print a message to the standard\
    \ error and exit:\n    # echo \"Your message\" >&2 && exit 1\n    # You can use\
    \ the following command to exit without printing a message:\n    # exit 0\n  \
    \  # You can use the following command to exit with a message:\n    # exit 1\n\
    \    # You can use the following command to print a message to the standard output\
    \ and exit with a message:\n    # echo \"Your message\" && exit 1\n    # You can\
    \ use the following command to print a message to the standard error and exit\
    \ with a message:\n    # echo \"Your message\" >&2 && exit 1\n    # You can use\
    \ the following command to print a message to the standard output and exit without\
    \ a message:\n    # echo \"Your message\" && exit 0\n    # You can use the following\
    \ command to print a message to the standard error and exit without a message:\n\
    \    # echo \"Your message\" >&2 && exit 0\n    # You can use the following command\
    \ to exit without printing a message:\n    # exit 0\n    # You can use the following\
    \ command to exit with a message:\n    # exit 1\n    # You can use the following\
    \ command to print a message to the standard output and exit with a message:\n\
    \    # echo \"Your message\" && exit 1\n    # You can use the following command\
    \ to print a message to the standard error and exit with a message:\n    # echo\
    \ \"Your message\" >&2 && exit 1\n    # You can use the following command to print\
    \ a message to the standard output and exit without a message:\n    # echo \"\
    Your message\" && exit 0\n    # You can use the following command to print a message\
    \ to the standard error and exit without a message:\n    # echo \"Your message\"\
    \ >&2 && exit 0\n    # You can use the following command to exit without printing\
    \ a message:\n    #", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    # Write your code here\n    if [ $1 -gt $2 ]; then\n        echo\
    \ -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n            if [ $(($i %\
    \ 2)) -eq 0 ]; then\n                echo $i\n                break\n        \
    \    fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"Error:\
    \ $1 is greater than $2\"\n        return 1\n    fi\n    if [ $1 -lt 0 ]; then\n\
    \        echo \"Error: $1 is less than 0\"\n        return 1\n    fi\n    if [\
    \ $2 -lt 0 ]; then\n        echo \"Error: $2 is less than 0\"\n        return\
    \ 1\n    fi\n    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n     \
    \       echo -1\n            return 0\n        fi\n        if [ $1 -eq 1 ]; then\n\
    \            echo -1\n            return 0\n        fi\n        if [ $1 -eq 2\
    \ ]; then\n            echo 2\n            return 0\n        fi\n        if [\
    \ $1 -eq 3 ]; then\n            echo 2\n            return 0\n        fi\n   \
    \     if [ $1 -eq 4 ]; then\n            echo 4\n            return 0\n      \
    \  fi\n        if [ $1 -eq 5 ]; then\n            echo 4\n            return 0\n\
    \        fi\n        if [ $1 -eq 6 ]; then\n            echo 6\n            return\
    \ 0\n        fi\n        if [ $1 -eq 7 ]; then\n            echo 6\n         \
    \   return 0\n        fi\n        if [ $1 -eq 8 ]; then\n            echo 8\n\
    \            return 0\n        fi\n        if [ $1 -eq 9 ]; then\n           \
    \ echo 8\n            return 0\n        fi\n        if [ $1 -eq 10 ]; then\n \
    \           echo 10\n            return 0\n        fi\n        if [ $1 -eq 11\
    \ ]; then\n            echo 10\n            return 0\n        fi\n        if [\
    \ $1 -eq 12 ]; then\n            echo 12\n            return 0\n        fi\n \
    \       if [ $1 -eq 13 ]; then\n            echo 12\n            return 0\n  \
    \      fi\n        if [ $1 -eq 14 ]; then\n            echo 14\n            return\
    \ 0\n        fi\n        if [ $1 -eq 15 ]; then\n            echo 14\n       \
    \     return 0\n        fi\n        if [ $1 -eq 16 ]; then\n            echo 16\n\
    \            return 0\n        fi\n        if [ $1 -eq 17 ]; then\n          \
    \  echo 16\n            return 0\n        fi\n        if [ $1 -", "    # Write\
    \ your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n", "    if [ $1 -lt $2 ]; then\n  \
    \      if [ $1 -eq 0 ]; then\n            echo $2\n        elif [ $1 -eq 1 ];\
    \ then\n            echo $2\n        elif [ $1 -eq 2 ]; then\n            echo\
    \ $2\n        elif [ $1 -eq 3 ]; then\n            echo $2\n        elif [ $1\
    \ -eq 4 ]; then\n            echo $2\n        elif [ $1 -eq 5 ]; then\n      \
    \      echo $2\n        elif [ $1 -eq 6 ]; then\n            echo $2\n       \
    \ elif [ $1 -eq 7 ]; then\n            echo $2\n        elif [ $1 -eq 8 ]; then\n\
    \            echo $2\n        elif [ $1 -eq 9 ]; then\n            echo $2\n \
    \       elif [ $1 -eq 10 ]; then\n            echo $2\n        elif [ $1 -eq 11\
    \ ]; then\n            echo $2\n        elif [ $1 -eq 12 ]; then\n           \
    \ echo $2\n        elif [ $1 -eq 13 ]; then\n            echo $2\n        elif\
    \ [ $1 -eq 14 ]; then\n            echo $2\n        elif [ $1 -eq 15 ]; then\n\
    \            echo $2\n        elif [ $1 -eq 16 ]; then\n            echo $2\n\
    \        elif [ $1 -eq 17 ]; then\n            echo $2\n        elif [ $1 -eq\
    \ 18 ]; then\n            echo $2\n        elif [ $1 -eq 19 ]; then\n        \
    \    echo $2\n        elif [ $1 -eq 20 ]; then\n            echo $2\n        elif\
    \ [ $1 -eq 21 ]; then\n            echo $2\n        elif [ $1 -eq 22 ]; then\n\
    \            echo $2\n        elif [ $1 -eq 23 ]; then\n            echo $2\n\
    \        elif [ $1 -eq 24 ]; then\n            echo $2\n        elif [ $1 -eq\
    \ 25 ]; then\n            echo $2\n        elif [ $1 -eq 26 ]; then\n        \
    \    echo $2\n        elif [ $1 -eq 27 ]; then\n            echo $2\n        elif\
    \ [ $1 -eq 28 ]; then\n            echo $2\n        elif [ $1 -", "    if [ $1\
    \ -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n        if [\
    \ $1 -eq 0 ]; then\n            echo -1\n        elif [ $1 -eq 1 ]; then\n   \
    \         echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n     \
    \   elif [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n\
    \            echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n  \
    \      elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ];\
    \ then\n            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo\
    \ 8\n        elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 10 ]; then\n            echo 10\n        elif [ $1 -eq 11 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 12 ]; then\n            echo 12\n        elif\
    \ [ $1 -eq 13 ]; then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n\
    \            echo 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 16 ]; then\n            echo 16\n        elif [ $1 -eq\
    \ 17 ]; then\n            echo -1\n        elif [ $1 -eq 18 ]; then\n        \
    \    echo 18\n        elif [ $1 -eq 19 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 20 ]; then\n            echo 20\n        elif [ $1 -eq 21 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 22 ]; then\n            echo 22\n\
    \        elif [ $1 -eq 23 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 24 ]; then\n            echo 24\n        elif [ $1 -eq 25 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 26 ]; then\n            echo 26\n        elif\
    \ [ $1 -eq 27 ]; then\n            echo -1\n        elif [ $1 -eq 28 ]; then\n\
    \            echo 28\n        elif", "  if [[ $1 -gt $2 ]]; then\n    echo -1\n\
    \  else\n    for ((i=$1; i<=$2; i++)); do\n      if [[ $((i%2)) -eq 0 ]]; then\n\
    \        echo $i\n        break\n      fi\n    done\n  fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo -1\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n      \
    \          break\n            fi\n        done\n    fi", "  local x=$1\n  local\
    \ y=$2\n  local i\n  local max=-1\n  for ((i=x; i<=y; i++)); do\n    if ((i %\
    \ 2 == 0)); then\n      if ((i > max)); then\n        max=$i\n      fi\n    fi\n\
    \  done\n  echo $max", "    # Write your code here\n    if [ $1 -gt $2 ]; then\n\
    \        echo -1\n    else\n        for i in $(seq $1 $2); do\n            if\
    \ [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n \
    \           fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo\
    \ -1\n    else\n        if [ $1 -eq $2 ]; then\n            if [ $1 -eq 0 ]; then\n\
    \                echo 0\n            else\n                if [ $1 -eq 1 ]; then\n\
    \                    echo -1\n                else\n                    if [ $1\
    \ -eq 2 ]; then\n                        echo 2\n                    else\n  \
    \                      if [ $1 -eq 3 ]; then\n                            echo\
    \ -1\n                        else\n                            if [ $1 -eq 4\
    \ ]; then\n                                echo 4\n                          \
    \  else\n                                if [ $1 -eq 5 ]; then\n             \
    \                       echo -1\n                                else\n      \
    \                              if [ $1 -eq 6 ]; then\n                       \
    \                 echo 6\n                                    else\n         \
    \                               if [ $1 -eq 7 ]; then\n                      \
    \                      echo -1\n                                        else\n\
    \                                            if [ $1 -eq 8 ]; then\n         \
    \                                       echo 8\n                             \
    \               else\n                                                if [ $1\
    \ -eq 9 ]; then\n                                                    echo -1\n\
    \                                                else\n                      \
    \                              if [ $1 -eq 10 ]; then\n                      \
    \                                  echo 10\n                                 \
    \                   else\n                                                   \
    \     if [ $1 -eq 11 ]; then\n                                               \
    \             echo -1\n                                                      \
    \  else\n                                                            if [ $1 -eq\
    \ 12 ]; then\n                                                               \
    \ echo 12\n                                                            else\n\
    \                                                                if [ $1 -eq 13\
    \ ]; then\n                                                                  \
    \  echo -1\n                                                                else\n\
    \                                                                    if [ $1 -eq\
    \ 14 ]; then\n                                                               \
    \         echo 14\n                                                          \
    \          else\n                                                            \
    \            if [ $1 -eq 15 ]; then\n                                        \
    \                                    echo -1\n                               \
    \                                         else\n                             \
    \                                               if [ $1 -eq 16 ]; then\n     \
    \                                                                           echo\
    \ 16\n                                                                       \
    \     else\n                                                                 \
    \               if [ $1 -eq 17 ]; then\n                                     \
    \                                               echo -1\n                    \
    \                                                            else\n          \
    \                                                                          if\
    \ [ $1 -eq 18 ]; then\n                                                      \
    \                                  echo 18\n                                 \
    \                                                   else\n                   \
    \                                                                     if [ $1\
    \ -eq 19 ]; then\n                ", "    # Write your code here\n    # You may\
    \ use the following functions:\n    # is_even(x) - returns true if x is even,\
    \ false otherwise\n    # is_integer(x) - returns true if x is an integer, false\
    \ otherwise\n    # is_positive(x) - returns true if x is positive, false otherwise\n\
    \    # is_in_range(x, y, z) - returns true if x is in the range [y, z], false\
    \ otherwise\n    #\n    # You may not use any other functions or external commands\n\
    \    #\n    # You may not use any global variables\n    #\n    # You may not use\
    \ any arithmetic operators\n    #\n    # You may not use any conditional statements\
    \ (if, then, else,\n    # elif, while, for, do, case, select, etc.)\n    #\n \
    \   # You may not use any logical operators (&&, ||, !, -o, -a, etc.)\n    #\n\
    \    # You may not use any bitwise operators (&, |, ^, ~, <<, >>, etc.)\n    #\n\
    \    # You may not use any comparison operators (==, !=, <, >, <=, >=, etc.)\n\
    \    #\n    # You may not use any string operators (e.g. =, ., etc.)\n    #\n\
    \    # You may not use any command substitution (e.g. `cmd` or $(cmd))\n    #\n\
    \    # You may not use any process substitution (e.g. <(cmd) or >(cmd))\n    #\n\
    \    # You may not use any arithmetic expansion (e.g. $((x)) or $[x])\n    #\n\
    \    # You may not use any parameter expansion (e.g. ${x})\n    #\n    # You may\
    \ not use any brace expansion (e.g. {x,y,z})\n    #\n    # You may not use any\
    \ word splitting\n    #\n    # You may not use any pathname expansion (e.g. *,\
    \ ?, [], etc.)\n    #\n    # You may not use any quote removal (e.g. \"x\" or\
    \ 'x')\n    #\n    # You may not use any variable assignment (e.g. x=y)\n    #\n\
    \    #", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i\
    \ in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n           \
    \     echo $i\n                break\n            fi\n        done\n    fi", " \
    \   if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        if [ $1 -eq $2\
    \ ]; then\n            if [ $1 -eq 0 ]; then\n                echo -1\n      \
    \      else\n                if [ $1 -eq 1 ]; then\n                    echo -1\n\
    \                else\n                    if [ $1 -eq 2 ]; then\n           \
    \             echo 2\n                    else\n                        if [ $1\
    \ -eq 3 ]; then\n                            echo 2\n                        else\n\
    \                            if [ $1 -eq 4 ]; then\n                         \
    \       echo 4\n                            else\n                           \
    \     if [ $1 -eq 5 ]; then\n                                    echo 4\n    \
    \                            else\n                                    if [ $1\
    \ -eq 6 ]; then\n                                        echo 6\n            \
    \                        else\n                                        if [ $1\
    \ -eq 7 ]; then\n                                            echo 6\n        \
    \                                else\n                                      \
    \      if [ $1 -eq 8 ]; then\n                                               \
    \ echo 8\n                                            else\n                 \
    \                               if [ $1 -eq 9 ]; then\n                      \
    \                              echo 8\n                                      \
    \          else\n                                                    if [ $1 -eq\
    \ 10 ]; then\n                                                        echo 10\n\
    \                                                    else\n                  \
    \                                      if [ $1 -eq 11 ]; then\n              \
    \                                              echo 10\n                     \
    \                                   else\n                                   \
    \                         if [ $1 -eq 12 ]; then\n                           \
    \                                     echo 12\n                              \
    \                              else\n                                        \
    \                        if [ $1 -eq 13 ]; then\n                            \
    \                                        echo 12\n                           \
    \                                     else\n                                 \
    \                                   if [ $1 -eq 14 ]; then\n                 \
    \                                                       echo 14\n            \
    \                                                        else\n              \
    \                                                          if [ $1 -eq 15 ]; then\n\
    \                                                                            echo\
    \ 14\n                                                                       \
    \ else\n                                                                     \
    \       if [ $1 -eq 16 ]; then\n                                             \
    \                                   echo 16\n                                \
    \                                            else\n                          \
    \                                                      if [ $1 -eq 17 ]; then\n\
    \                                                                            \
    \        echo 16\n                                                           \
    \                     else\n                                                 \
    \                                   if [ $1 -eq 18 ]; then\n                 \
    \                                                                       echo 18\n\
    \                                                                            \
    \        else\n                                                              \
    \                          if [ $1 -eq 19 ]; then\n                          \
    \                                                                  echo 18", " \
    \   if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "\tif [ $1\
    \ -gt $2 ]; then\n\t\techo \"The first number should be less than the second number\"\
    \n\t\texit 1\n\tfi\n\tif [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n\t\techo \"The numbers\
    \ should be positive\"\n\t\texit 1\n\tfi\n\tif [ $1 -eq $2 ]; then\n\t\tif [ $1\
    \ -eq 0 ]; then\n\t\t\techo -1\n\t\telse\n\t\t\tif [ $1 -eq 1 ]; then\n\t\t\t\t\
    echo -1\n\t\t\telse\n\t\t\t\tif [ $1 -eq 2 ]; then\n\t\t\t\t\techo 2\n\t\t\t\t\
    else\n\t\t\t\t\tif [ $1 -eq 3 ]; then\n\t\t\t\t\t\techo -1\n\t\t\t\t\telse\n\t\
    \t\t\t\t\tif [ $1 -eq 4 ]; then\n\t\t\t\t\t\t\techo 4\n\t\t\t\t\t\telse\n\t\t\t\
    \t\t\t\tif [ $1 -eq 5 ]; then\n\t\t\t\t\t\t\t\techo -1\n\t\t\t\t\t\t\telse\n\t\
    \t\t\t\t\t\t\tif [ $1 -eq 6 ]; then\n\t\t\t\t\t\t\t\t\techo 6\n\t\t\t\t\t\t\t\t\
    else\n\t\t\t\t\t\t\t\t\tif [ $1 -eq 7 ]; then\n\t\t\t\t\t\t\t\t\t\techo -1\n\t\
    \t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tif [ $1 -eq 8 ]; then\n\t\t\t\t\t\t\t\
    \t\t\t\techo 8\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tif [ $1 -eq 9\
    \ ]; then\n\t\t\t\t\t\t\t\t\t\t\t\techo -1\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\
    \t\t\t\t\t\t\t\t\tif [ $1 -eq 10 ]; then\n\t\t\t\t\t\t\t\t\t\t\t\t\techo 10\n\t\
    \t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t", "    local x=$1\n    local\
    \ y=$2\n    local result=-1\n    if [ $x -gt $y ]; then\n        echo $result\n\
    \        return\n    fi\n    if [ $x -eq $y ]; then\n        if [ $((x % 2)) -eq\
    \ 0 ]; then\n            echo $x\n            return\n        else\n         \
    \   echo $result\n            return\n        fi\n    fi\n    local i=$x\n   \
    \ while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n           \
    \ result=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $result", " \
    \   if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # Write\
    \ your code here\n    # You can use the following command to print to standard\
    \ error\n    # echo \"Error: $1\" >&2\n    #\n    # You can use the following\
    \ command to print to standard output\n    # echo \"$1\"\n    #\n    # You can\
    \ use the following command to read from standard input\n    # read var\n    #\n\
    \    # You can use the following command to read from a file\n    # read var <\
    \ file\n    #\n    # You can use the following command to write to a file\n  \
    \  # echo \"$1\" > file\n    #\n    # You can use the following command to append\
    \ to a file\n    # echo \"$1\" >> file\n    #\n    # You can use the following\
    \ command to execute a command\n    # $(command)\n    #\n    # You can use the\
    \ following command to execute a command and\n    # store the result in a variable\n\
    \    # var=$(command)\n    #\n    # You can use the following command to execute\
    \ a command and\n    # store the result in a variable\n    # var=$(command)\n\
    \    #\n    # You can use the following command to execute a command and\n   \
    \ # store the result in a variable\n    # var=$(command)\n    #\n    # You can\
    \ use the following command to execute a command and\n    # store the result in\
    \ a variable\n    # var=$(command)\n    #\n    # You can use the following command\
    \ to execute a command and\n    # store the result in a variable\n    # var=$(command)\n\
    \    #\n    # You can use the following command to execute a command and\n   \
    \ # store the result in a variable\n    # var=$(command)\n    #\n    # You can\
    \ use the following command to execute a command and\n    # store the result in\
    \ a variable\n    # var=$(command)\n    #\n    # You can use the following command\
    \ to execute a command and\n    # store the result in a variable\n    # var=$(command)\n\
    \    #\n    # You can use the following command to execute a command and\n   \
    \ # store the result in a variable\n    # var=$(command)\n    #\n    # You can\
    \ use the following command to execute a command and\n    # store the result in\
    \ a variable\n   ", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
    \       for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        if [\
    \ $1 -eq $2 ]; then\n            if [ $1 -eq 0 ]; then\n                echo 0\n\
    \            else\n                if [ $(($1 % 2)) -eq 0 ]; then\n          \
    \          echo $1\n                else\n                    echo -1\n      \
    \          fi\n            fi\n        else\n            if [ $(($1 % 2)) -eq\
    \ 0 ]; then\n                echo $1\n            else\n                choose_num\
    \ $(($1 + 1)) $2\n            fi\n        fi\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo -1\n    elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq\
    \ 0 ]]; then\n            echo $1\n        else\n            echo -1\n       \
    \ fi\n    else\n        for ((i=$2; i>=$1; i--)); do\n            if [[ $i%2 -eq\
    \ 0 ]]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    # Write your code here\n    # You can use the following\
    \ command to print your output:\n    # echo $((2#10101010))\n    # This will print\
    \ 170\n    #echo $((2#10101010))\n    #echo $1\n    #echo $2\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo $((2#10101010))\n    #echo $((2#10101010))\n    #echo $((2#10101010))\n\
    \    #echo", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n      \
    \  for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n  \
    \              echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n         \
    \       echo $i\n                break\n            fi\n        done\n    fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for (( i = $1;\
    \ i <= $2; i++ )); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n         \
    \       echo $i\n                return\n            fi\n        done\n      \
    \  echo -1\n    fi", "    # Write your code here\n    if [ $1 -gt $2 ]; then\n\
    \        echo -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n           \
    \ if [ $((i%2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo\
    \ -1\n    else\n        for i in $(seq $1 $2); do\n            if [ $(($i % 2))\
    \ -eq 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    # Write your code here\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
  "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "  if [[ $1\
    \ -lt 0 || $2 -lt 0 ]]; then\n    echo -1\n    return\n  fi\n  if [[ $1 -gt $2\
    \ ]]; then\n    echo -1\n    return\n  fi\n  if [[ $1 -eq $2 ]]; then\n    if\
    \ [[ $1%2 -eq 0 ]]; then\n      echo $1\n      return\n    else\n      echo -1\n\
    \      return\n    fi\n  fi\n  if [[ $1%2 -eq 0 ]]; then\n    echo $1\n    return\n\
    \  fi\n  if [[ $2%2 -eq 0 ]]; then\n    echo $2\n    return\n  fi\n  echo -1",
  "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    if [ $1 -gt\
    \ $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq\
    \ 0 ]; then\n            echo -1\n        elif [ $1 -eq 1 ]; then\n          \
    \  echo -1\n        elif [ $1 -eq 2 ]; then\n            echo 2\n        elif\
    \ [ $1 -eq 3 ]; then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n \
    \           echo 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n   \
    \     elif [ $1 -eq 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ];\
    \ then\n            echo -1\n        elif [ $1 -eq 8 ]; then\n            echo\
    \ 8\n        elif [ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 10 ]; then\n            echo 10\n        elif [ $1 -eq 11 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 12 ]; then\n            echo 12\n        elif\
    \ [ $1 -eq 13 ]; then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n\
    \            echo 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 16 ]; then\n            echo 16\n        elif [ $1 -eq\
    \ 17 ]; then\n            echo -1\n        elif [ $1 -eq 18 ]; then\n        \
    \    echo 18\n        elif [ $1 -eq 19 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 20 ]; then\n            echo 20\n        elif [ $1 -eq 21 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 22 ]; then\n            echo 22\n\
    \        elif [ $1 -eq 23 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 24 ]; then\n            echo 24\n        elif [ $1 -eq 25 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 26 ]; then\n            echo 26\n        elif\
    \ [ $1 -eq 27 ]; then\n            echo -1\n        elif [ $1 -eq 28 ]; then\n\
    \            echo 28\n        elif", "    if [ $1 -gt $2 ]; then\n        echo\
    \ -1\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n          \
    \  echo -1\n        elif [ $1 -eq 1 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 2 ]; then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n  \
    \          echo -1\n        elif [ $1 -eq 4 ]; then\n            echo 4\n    \
    \    elif [ $1 -eq 5 ]; then\n            echo -1\n        elif [ $1 -eq 6 ];\
    \ then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n        elif [ $1 -eq\
    \ 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n         \
    \   echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo 14\n\
    \        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
    \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n\
    \            echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq\
    \ 23 ]; then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n        \
    \    echo 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n\
    \        elif", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n     \
    \   for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n   \
    \             echo $i\n                break\n            fi\n        done\n \
    \   fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ];\
    \ then\n        if [ $1 -eq 0 ]; then\n            echo -1\n        elif [ $1\
    \ -eq 1 ]; then\n            echo -1\n        elif [ $1 -eq 2 ]; then\n      \
    \      echo 2\n        elif [ $1 -eq 3 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 4 ]; then\n            echo 4\n        elif [ $1 -eq 5 ]; then\n  \
    \          echo -1\n        elif [ $1 -eq 6 ]; then\n            echo 6\n    \
    \    elif [ $1 -eq 7 ]; then\n            echo -1\n        elif [ $1 -eq 8 ];\
    \ then\n            echo 8\n        elif [ $1 -eq 9 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 10 ]; then\n            echo 10\n        elif [ $1\
    \ -eq 11 ]; then\n            echo -1\n        elif [ $1 -eq 12 ]; then\n    \
    \        echo 12\n        elif [ $1 -eq 13 ]; then\n            echo -1\n    \
    \    elif [ $1 -eq 14 ]; then\n            echo 14\n        elif [ $1 -eq 15 ];\
    \ then\n            echo -1\n        elif [ $1 -eq 16 ]; then\n            echo\
    \ 16\n        elif [ $1 -eq 17 ]; then\n            echo -1\n        elif [ $1\
    \ -eq 18 ]; then\n            echo 18\n        elif [ $1 -eq 19 ]; then\n    \
    \        echo -1\n        elif [ $1 -eq 20 ]; then\n            echo 20\n    \
    \    elif [ $1 -eq 21 ]; then\n            echo -1\n        elif [ $1 -eq 22 ];\
    \ then\n            echo 22\n        elif [ $1 -eq 23 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 24 ]; then\n            echo 24\n        elif [ $1\
    \ -eq 25 ]; then\n            echo -1\n        elif [ $1 -eq 26 ]; then\n    \
    \        echo 26\n        elif [ $1 -eq 27 ]; then\n            echo -1\n    \
    \    elif [ $1 -eq 28 ]; then\n            echo 28\n        elif", "    # Write\
    \ your code here\n    # You can use the following command to print your output:\n\
    \    # echo $[your_number]\n    # You can use the following command to read the\
    \ input:\n    # read x\n    # read y\n    # You can use the following command\
    \ to print your output:\n    # echo $[your_number]\n    # You can use the following\
    \ command to read the input:\n    # read x\n    # read y\n    # You can use the\
    \ following command to print your output:\n    # echo $[your_number]\n    # You\
    \ can use the following command to read the input:\n    # read x\n    # read y\n\
    \    # You can use the following command to print your output:\n    # echo $[your_number]\n\
    \    # You can use the following command to read the input:\n    # read x\n  \
    \  # read y\n    # You can use the following command to print your output:\n \
    \   # echo $[your_number]\n    # You can use the following command to read the\
    \ input:\n    # read x\n    # read y\n    # You can use the following command\
    \ to print your output:\n    # echo $[your_number]\n    # You can use the following\
    \ command to read the input:\n    # read x\n    # read y\n    # You can use the\
    \ following command to print your output:\n    # echo $[your_number]\n    # You\
    \ can use the following command to read the input:\n    # read x\n    # read y\n\
    \    # You can use the following command to print your output:\n    # echo $[your_number]\n\
    \    # You can use the following command to read the input:\n    # read x\n  \
    \  # read y\n    # You can use the following command to print your output:\n \
    \   # echo $[your_number]\n    # You can use the following command to read the\
    \ input:\n    # read x\n    # read y\n    # You can use the following command\
    \ to print your output:\n    # echo $[your_number]\n    # You can use the following\
    \ command to read the input:\n    # read x\n    # read y\n    # You can use the\
    \ following command to print your output:\n    # echo $[your_number]\n", "   \
    \ if [ $1 -gt $2 ]; then\n        echo \"The first number must be less than the\
    \ second number\"\n        return -1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt\
    \ 0 ]; then\n        echo \"The numbers must be positive\"\n        return -1\n\
    \    fi\n    for i in $(seq $1 $2); do\n        if [ $(($i % 2)) -eq 0 ]; then\n\
    \            echo $i\n            return 0\n        fi\n    done\n    echo -1",
  "    # Write your code here\n    # You can use the following variables:\n    # $1\
    \ is an integer\n    # $2 is an integer\n    # $result is an integer\n    result=-1\n\
    \    for ((i=$1; i<=$2; i++))\n    do\n        if [ $((i%2)) -eq 0 ]\n       \
    \ then\n            result=$i\n        fi\n    done\n    echo $result", "    if\
    \ [ $1 -gt $2 ]; then\n        echo \"The first number must be smaller than the\
    \ second number.\"\n        return -1\n    fi\n    for (( i=$1; i<=$2; i++ ));\
    \ do\n        if [ $((i%2)) -eq 0 ]; then\n            echo $i\n            return\
    \ 0\n        fi\n    done\n    echo -1", "    if [ $1 -gt $2 ]; then\n       \
    \ echo \"Error: the first argument must be less than or equal to the second argument.\"\
    \n        return\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n        echo\
    \ \"Error: both arguments must be positive integers.\"\n        return\n    fi\n\
    \    if [ $1 -eq $2 ]; then\n        if [ $(( $1 % 2 )) -eq 0 ]; then\n      \
    \      echo $1\n        else\n            echo -1\n        fi\n    else\n    \
    \    if [ $(( $2 % 2 )) -eq 0 ]; then\n            echo $2\n        else\n   \
    \         echo $(( $2 - 1 ))\n        fi\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo -1\n    else\n        for i in $(seq $1 $2); do\n            if\
    \ [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    # Write your code here\n    # You\
    \ can use the following command to print your output:\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#101010101))\n    # echo $((2#101010101))\n    # echo $((2#101010101))\n\
    \    # echo $((2#10101", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n\
    \        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i=0\n    local max=-1\n \
    \   for ((i=x; i<=y; i++)); do\n        if [[ $((i%2)) -eq 0 ]]; then\n      \
    \      if [[ $i -gt $max ]]; then\n                max=$i\n            fi\n  \
    \      fi\n    done\n    echo $max", "    if [ $1 -gt $2 ]; then\n        echo\
    \ -1\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n          \
    \  echo -1\n        elif [ $1 -eq 1 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 2 ]; then\n            echo 2\n        elif [ $1 -eq 3 ]; then\n  \
    \          echo -1\n        elif [ $1 -eq 4 ]; then\n            echo 4\n    \
    \    elif [ $1 -eq 5 ]; then\n            echo -1\n        elif [ $1 -eq 6 ];\
    \ then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n            echo\
    \ -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n        elif [ $1 -eq\
    \ 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n         \
    \   echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 14 ]; then\n            echo 14\n\
    \        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n        elif\
    \ [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq 20 ]; then\n\
    \            echo 20\n        elif [ $1 -eq 21 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 22 ]; then\n            echo 22\n        elif [ $1 -eq\
    \ 23 ]; then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n        \
    \    echo 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 26 ]; then\n            echo 26\n        elif [ $1 -eq 27 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 28 ]; then\n            echo 28\n\
    \        elif", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n   \
    \     for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i\n    local max=-1\n   \
    \ for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n            if ((i>max));\
    \ then\n                max=$i\n            fi\n        fi\n    done\n    echo\
    \ $max", "    # Write your code here\n    if [[ $1 -gt $2 ]]; then\n        echo\
    \ -1\n    elif [[ $1 -lt 0 || $2 -lt 0 ]]; then\n        echo -1\n    else\n \
    \       for ((i=$1; i<=$2; i++)); do\n            if [[ $((i%2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"The first number must be\
    \ smaller than the second number\"\n        return -1\n    fi\n    if [ $1 -lt\
    \ 0 ] || [ $2 -lt 0 ]; then\n        echo \"Both numbers must be positive\"\n\
    \        return -1\n    fi\n    if [ $1 -eq $2 ]; then\n        if [ $1 -eq 0\
    \ ]; then\n            echo \"-1\"\n            return 0\n        fi\n       \
    \ if [ $1 -eq 1 ]; then\n            echo \"-1\"\n            return 0\n     \
    \   fi\n        if [ $1 -eq 2 ]; then\n            echo \"2\"\n            return\
    \ 0\n        fi\n        if [ $1 -eq 3 ]; then\n            echo \"2\"\n     \
    \       return 0\n        fi\n        if [ $1 -eq 4 ]; then\n            echo\
    \ \"4\"\n            return 0\n        fi\n        if [ $1 -eq 5 ]; then\n   \
    \         echo \"4\"\n            return 0\n        fi\n        if [ $1 -eq 6\
    \ ]; then\n            echo \"6\"\n            return 0\n        fi\n        if\
    \ [ $1 -eq 7 ]; then\n            echo \"6\"\n            return 0\n        fi\n\
    \        if [ $1 -eq 8 ]; then\n            echo \"8\"\n            return 0\n\
    \        fi\n        if [ $1 -eq 9 ]; then\n            echo \"8\"\n         \
    \   return 0\n        fi\n        if [ $1 -eq 10 ]; then\n            echo \"\
    10\"\n            return 0\n        fi\n        if [ $1 -eq 11 ]; then\n     \
    \       echo \"10\"\n            return 0\n        fi\n        if [ $1 -eq 12\
    \ ]; then\n            echo \"12\"\n            return 0\n        fi\n       \
    \ if [ $1 -eq 13 ]; then\n            echo \"12\"\n            return 0\n    \
    \    fi\n        if [ $1 -eq 14 ]; then\n            echo \"14\"\n           \
    \ return 0\n        fi\n        if [ $1 -eq 15 ]; then\n            echo \"14\"\
    \n            return 0\n        fi\n        if [ $1 -eq 16 ]; then\n         \
    \   echo \"16\"\n            return 0\n        fi\n        if [ $1 -eq 17 ]; then\n\
    \            echo \"16\"\n            return", "    if [ $1 -gt $2 ]; then\n \
    \       echo -1\n    else\n        for i in $(seq $1 $2); do\n            if [\
    \ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n \
    \           fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ result=-1\n    if [ $x -gt $y ]; then\n        echo \"x is greater than y\"\n\
    \        return\n    fi\n    for (( i=$x; i<=$y; i++ )); do\n        if [ $((i%2))\
    \ -eq 0 ]; then\n            result=$i\n        fi\n    done\n    echo $result",
  "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for ((i=$1; i<=$2; i++));\
    \ do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n   \
    \             break\n            fi\n        done\n    fi", "    if [ $1 -gt $2\
    \ ]; then\n        echo -1\n    else\n        for i in $(seq $1 $2); do\n    \
    \        if [ $(($i % 2)) -eq 0 ]; then\n                echo $i\n           \
    \     break\n            fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo \"The first number should be less than the second number\"\n   \
    \     exit 1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n        echo\
    \ \"The numbers should be positive\"\n        exit 1\n    fi\n    for i in $(seq\
    \ $1 $2); do\n        if [ $((i % 2)) -eq 0 ]; then\n            echo $i\n   \
    \         exit 0\n        fi\n    done\n    echo -1", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo -1\n    else\n        for (( i = $1; i <= $2; i++ )); do\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n      \
    \          break\n            fi\n        done\n    fi", "    if [ $1 -gt $2 ];\
    \ then\n        echo -1\n    else\n        for ((i=$1; i<=$2; i++)); do\n    \
    \        if [ $((i%2)) -eq 0 ]; then\n                echo $i\n              \
    \  break\n            fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo -1\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 1 ]; then\n            echo -1\n \
    \       elif [ $1 -eq 2 ]; then\n            echo 2\n        elif [ $1 -eq 3 ];\
    \ then\n            echo -1\n        elif [ $1 -eq 4 ]; then\n            echo\
    \ 4\n        elif [ $1 -eq 5 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 6 ]; then\n            echo 6\n        elif [ $1 -eq 7 ]; then\n           \
    \ echo -1\n        elif [ $1 -eq 8 ]; then\n            echo 8\n        elif [\
    \ $1 -eq 9 ]; then\n            echo -1\n        elif [ $1 -eq 10 ]; then\n  \
    \          echo 10\n        elif [ $1 -eq 11 ]; then\n            echo -1\n  \
    \      elif [ $1 -eq 12 ]; then\n            echo 12\n        elif [ $1 -eq 13\
    \ ]; then\n            echo -1\n        elif [ $1 -eq 14 ]; then\n           \
    \ echo 14\n        elif [ $1 -eq 15 ]; then\n            echo -1\n        elif\
    \ [ $1 -eq 16 ]; then\n            echo 16\n        elif [ $1 -eq 17 ]; then\n\
    \            echo -1\n        elif [ $1 -eq 18 ]; then\n            echo 18\n\
    \        elif [ $1 -eq 19 ]; then\n            echo -1\n        elif [ $1 -eq\
    \ 20 ]; then\n            echo 20\n        elif [ $1 -eq 21 ]; then\n        \
    \    echo -1\n        elif [ $1 -eq 22 ]; then\n            echo 22\n        elif\
    \ [ $1 -eq 23 ]; then\n            echo -1\n        elif [ $1 -eq 24 ]; then\n\
    \            echo 24\n        elif [ $1 -eq 25 ]; then\n            echo -1\n\
    \        elif [ $1 -eq 26 ]; then\n            echo 26\n        elif [ $1 -eq\
    \ 27 ]; then\n            echo -1\n        elif [ $1 -eq 28 ]; then\n        \
    \    echo 28\n        elif", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n\
    \    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2))\
    \ -eq 0 ]]; then\n                echo $i\n                break\n           \
    \ fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n\
    \    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2))\
    \ -eq 0 ]]; then\n                echo $i\n                break\n           \
    \ fi\n        done\n    fi"]
stop_tokens:
- "\n}"
