language: sh
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local -a temp\n    local -i i\n    local -i j\n    local -i max\n\
    \    local -i max_index\n    local -i len=${#arr[@]}\n    local -i temp_len\n\
    \    local -i temp_index\n    local -i temp_max\n    local -i temp_max_index\n\
    \    local -i temp_max_index_2\n    local -i temp_max_index_3\n    local -i temp_max_index_4\n\
    \    local -i temp_max_index_5\n    local -i temp_max_index_6\n    local -i temp_max_index_7\n\
    \    local -i temp_max_index_8\n    local -i temp_max_index_9\n    local -i temp_max_index_10\n\
    \    local -i temp_max_index_11\n    local -i temp_max_index_12\n    local -i\
    \ temp_max_index_13\n    local -i temp_max_index_14\n    local -i temp_max_index_15\n\
    \    local -i temp_max_index_16\n    local -i temp_max_index_17\n    local -i\
    \ temp_max_index_18\n    local -i temp_max_index_19\n    local -i temp_max_index_20\n\
    \    local -i temp_max_index_21\n    local -i temp_max_index_22\n    local -i\
    \ temp_max_index_23\n    local -i temp_max_index_24\n    local -i temp_max_index_25\n\
    \    local -i temp_max_index_26\n    local -i temp_max_index_27\n    local -i\
    \ temp_max_index_28\n    local -i temp_max_index_29\n    local -i temp_max_index_30\n\
    \    local -i temp_max_index_31\n    local -i temp_max_index_32\n    local -i\
    \ temp_max_index_33\n    local -i temp_max_index_34\n    local -i temp_max_index_35\n\
    \    local\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n\
    \                local tmp=${max[j]}\n                max[j]=${arr[i]}\n     \
    \           arr[i]=$tmp\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcj1o3rqe.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a max\n    local i\n    local j\n    local len=${#arr[@]}\n    for ((i=0; i<k;\
    \ i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<len; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=()\n    local -i k=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i n=0\n    local -i tmp=0\n    local -i\
    \ max=0\n    local -i max_idx=0\n    local -i len=0\n    local -i start=0\n  \
    \  local -i end=0\n    local -i mid=0\n    local -i result=0\n    local -i left=0\n\
    \    local -i right=0\n    local -i mid_idx=0\n    local -i left_idx=0\n    local\
    \ -i right_idx=0\n    local -i left_val=0\n    local -i right_val=0\n    local\
    \ -i mid_val=0\n    local -i left_max=0\n    local -i right_max=0\n    local -i\
    \ mid_max=0\n    local -i left_max_idx=0\n    local -i right_max_idx=0\n    local\
    \ -i mid_max_idx=0\n    local -i left_len=0\n    local -i right_len=0\n    local\
    \ -i mid_len=0\n    local -i left_start=0\n    local -i right_start=0\n    local\
    \ -i mid_start=0\n    local -i left_end=0\n    local -i right_end=0\n    local\
    \ -i mid_end=0\n    local -i left_mid=0\n    local -i right_mid=0\n    local -i\
    \ mid_mid=0\n    local -i left_result=0\n    local -i right_result=0\n    local\
    \ -i mid_result=0\n    local -i left_left=0\n    local -i right_left=0\n    local\
    \ -i mid_left=0\n    local -i left_right=0\n    local -i right_right=0\n    local\
    \ -i mid_right=0\n    local -i left_mid_idx=0\n    local -i right_mid_idx=0\n\
    \    local -i mid_mid_idx=0\n    local -i left_left\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local -i k\n    local -i\
    \ i\n    local -i j\n    local -i max\n    local -i max_index\n    local -i temp\n\
    \    local -i len\n    arr=($1)\n    k=$2\n    len=${#arr[@]}\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if ((arr[j] > max)); then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$temp\n    done\n  \
    \  echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n  local -n arr=$1\n  local k=$2\n  local -a max\n\
    \  for ((i=0; i<k; i++)); do\n    max[i]=${arr[i]}\n  done\n  for ((i=k; i<${#arr[@]};\
    \ i++)); do\n    for ((j=0; j<k; j++)); do\n      if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n        max[j]=${arr[i]}\n        break\n      fi\n    done\n  done\n\
    \  echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp294xdd8u.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local max=0\n    local tmp=0\n\
    \    local result=()\n    # find the maximum k numbers\n    for ((i=0; i<k; i++));\
    \ do\n        max=0\n        for ((j=0; j<len; j++)); do\n            if [[ ${arr[j]}\
    \ -gt $max ]]; then\n                max=${arr[j]}\n                tmp=$j\n \
    \           fi\n        done\n        result[i]=$max\n        arr[tmp]=0\n   \
    \ done\n    # sort the result\n    for ((i=0; i<k; i++)); do\n        max=0\n\
    \        for ((j=0; j<k; j++)); do\n            if [[ ${result[j]} -gt $max ]];\
    \ then\n                max=${result[j]}\n                tmp=$j\n           \
    \ fi\n        done\n        echo -n \"$max \"\n        result[tmp]=0\n    done\n\
    \    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local k\n    local -a res\n\
    \    local i\n    local j\n    local max\n    local max_index\n    arr=($1)\n\
    \    k=$2\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n\
    \        for ((j=1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt $max\
    \ ]]; then\n                max=${arr[j]}\n                max_index=$j\n    \
    \        fi\n        done\n        res[i]=$max\n        unset arr[$max_index]\n\
    \        arr=(${arr[@]})\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n \
    \   maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr9yb4fng.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local i\n    local j\n    local max\n    local max_index\n  \
    \  for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n   \
    \     for ((j=1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt $max\
    \ ]]; then\n                max=${arr[j]}\n                max_index=$j\n    \
    \        fi\n        done\n        result[i]=$max\n        unset arr[$max_index]\n\
    \        arr=(${arr[@]})\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr9yb4fng.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local -i i j\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${result[j]} ]]; then\n                result[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a result\n    local -a sorted\n    local i\n    local j\n    local\
    \ len=${#arr[@]}\n    local max\n    local max_index\n    local temp\n\n    if\
    \ [[ $len -eq 0 ]]; then\n        echo \"\"\n        return\n    fi\n\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        result[i]=$max\n        temp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_index]=$temp\n    done\n\n    sorted=($(echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -n))\n    echo \"${sorted[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwuvrk4bs.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a result=()\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((${#result[@]}\
    \ < k)); then\n            result+=(\"${arr[i]}\")\n        else\n           \
    \ local max=${result[0]}\n            local max_index=0\n            for ((j=1;\
    \ j<${#result[@]}; j++)); do\n                if ((${result[j]} > max)); then\n\
    \                    max=${result[j]}\n                    max_index=$j\n    \
    \            fi\n            done\n            if ((${arr[i]} < max)); then\n\
    \                result[max_index]=${arr[i]}\n            fi\n        fi\n   \
    \ done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9rstts3k.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a res\n    local -a tmp\n    local i\n    local j\n    local max\n\
    \    local max_idx\n    local len=${#arr[@]}\n    if [ $len -le $k ]; then\n \
    \       echo \"${arr[@]}\"\n        return\n    fi\n    for ((i=0; i<k; i++));\
    \ do\n        res[$i]=${arr[$i]}\n    done\n    for ((i=k; i<len; i++)); do\n\
    \        tmp=(\"${res[@]}\")\n        max=${arr[$i]}\n        max_idx=$i\n   \
    \     for ((j=i; j<len; j++)); do\n            if [ ${arr[$j]} -gt $max ]; then\n\
    \                max=${arr[$j]}\n                max_idx=$j\n            fi\n\
    \        done\n        tmp[$i]=$max\n        arr[$max_idx]=${arr[$i]}\n      \
    \  arr[$i]=$max\n        res=(\"${tmp[@]}\")\n    done\n    echo \"${res[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmr7sfj7p.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo ${arr[i]}\n    done\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a result\n    local i\n    local j\n    local max\n    local max_index\n  \
    \  for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n   \
    \     for ((j=1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt $max\
    \ ]]; then\n                max=${arr[j]}\n                max_index=$j\n    \
    \        fi\n        done\n        result[i]=$max\n        unset arr[$max_index]\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphbky257g.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local -a max\n    local -a min\n    local -a tmp\n    local i\n\
    \    local j\n    local len=${#arr[@]}\n    local max_len=0\n    local min_len=0\n\
    \    local max_idx=0\n    local min_idx=0\n    local tmp_len=0\n    local tmp_idx=0\n\
    \    local tmp_val=0\n    local tmp_idx2=0\n    local tmp_val2=0\n    local tmp_idx3=0\n\
    \    local tmp_val3=0\n    local tmp_idx4=0\n    local tmp_val4=0\n    local tmp_idx5=0\n\
    \    local tmp_val5=0\n    local tmp_idx6=0\n    local tmp_val6=0\n    local tmp_idx7=0\n\
    \    local tmp_val7=0\n    local tmp_idx8=0\n    local tmp_val8=0\n    local tmp_idx9=0\n\
    \    local tmp_val9=0\n    local tmp_idx10=0\n    local tmp_val10=0\n    local\
    \ tmp_idx11=0\n    local tmp_val11=0\n    local tmp_idx12=0\n    local tmp_val12=0\n\
    \    local tmp_idx13=0\n    local tmp_val13=0\n    local tmp_idx14=0\n    local\
    \ tmp_val14=0\n    local tmp_idx15=0\n    local tmp_val15=0\n    local tmp_idx16=0\n\
    \    local tmp_val16=0\n    local tmp_idx17=0\n    local tmp_val17=0\n    local\
    \ tmp_idx18=0\n    local tmp_val18=0\n    local tmp_idx19=0\n    local tmp_val19=0\n\
    \    local tmp_idx20=0\n    local tmp_val20=0\n    local tmp_idx21=0\n    local\
    \ tmp_val21=0\n    local tmp_idx22=0\n    local tmp\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n\
    \                local tmp=${max[$j]}\n                max[$j]=${arr[$i]}\n  \
    \              arr[$i]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfn3unos2.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a result\n    local i j\n    for ((i=0; i<k; i++)); do\n        result[$i]=${arr[$i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[$i]} -gt ${result[$j]} ]]; then\n              \
    \  result[$j]=${arr[$i]}\n                break\n            fi\n        done\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp36fh5ml.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local tmp=()\n    local i=0\n    local j=0\n    local max=0\n\
    \    local max_index=0\n    local tmp_index=0\n    for ((i=0; i<k; i++)); do\n\
    \        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<len; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        tmp[$tmp_index]=$max\n\
    \        ((tmp_index++))\n        arr[$max_index]=${arr[i]}\n        arr[i]=$max\n\
    \    done\n    echo ${tmp[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++));\
    \ do\n            if ((arr[i] < arr[j])); then\n                local tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpty7q7_d7.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local i j\n\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${result[j]} ]]; then\n                result[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    while [[\
    \ $i -lt $k ]]; do\n        max[$i]=${arr[$i]}\n        i=$((i+1))\n    done\n\
    \    while [[ $i -lt $len ]]; do\n        j=0\n        while [[ $j -lt $k ]];\
    \ do\n            if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n                max[$j]=${arr[$i]}\n\
    \                break\n            fi\n            j=$((j+1))\n        done\n\
    \        i=$((i+1))\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_rs2ig23.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a res=()\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_index=0\n    local tmp=0\n    for ((i=0; i<k; i++)); do\n\
    \        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        res[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_index]=$tmp\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${max[@]}\"\
    \ | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnox7p2al.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n\
    \                local t=${max[$j]}\n                max[$j]=${arr[$i]}\n    \
    \            arr[$i]=$t\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7p2tfiia.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a result\n    local -a max\n    local -a min\n    local i\n    local\
    \ j\n    local len=${#arr[@]}\n    local max_len=0\n    local min_len=0\n    local\
    \ max_val\n    local min_val\n    local max_index\n    local min_index\n    local\
    \ max_index_len=0\n    local min_index_len=0\n    local max_index_val\n    local\
    \ min_index_val\n    local max_index_index\n    local min_index_index\n    local\
    \ max_index_index_len=0\n    local min_index_index_len=0\n    local max_index_index_val\n\
    \    local min_index_index_val\n    local max_index_index_index\n    local min_index_index_index\n\
    \    local max_index_index_index_len=0\n    local min_index_index_index_len=0\n\
    \    local max_index_index_index_val\n    local min_index_index_index_val\n  \
    \  local max_index_index_index_index\n    local min_index_index_index_index\n\
    \    local max_index_index_index_index_len=0\n    local min_index_index_index_index_len=0\n\
    \    local max_index_index_index_index_val\n    local min_index_index_index_index_val\n\
    \    local max_index_index_index_index_index\n    local min_index_index_index_index_index\n\
    \    local max_index_index_index_index_index_len=0\n    local min_index_index_index_index_index_len=0\n\
    \    local max_index_index_index_index_index_val\n    local min_index_index_index_index_index_val\n\
    \    local max_index_index_index_index_index_index\n    local min_index_index_index_index_index_index\n\
    \    local max_index_index_index_index_index_index_len=0\n    local min_index_index_index_index_index_index\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1mrosquh.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiizgr6pl.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a res=()\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  for ((j=0; j<${#res[@]}; j++)); do\n            if [[ ${arr[i]} -gt ${res[j]}\
    \ ]]; then\n                res=(${res[@]:0:j} ${arr[i]} ${res[@]:j})\n      \
    \          break\n            fi\n        done\n        if [[ ${#res[@]} -lt $k\
    \ ]]; then\n            res+=(${arr[i]})\n        fi\n    done\n    echo ${res[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local -i k\n    local -i\
    \ i\n    local -i j\n    local -i max\n    local -i max_index\n    local -i temp\n\
    \    local -i len\n    local -i start\n    local -i end\n    local -i middle\n\
    \    local -i pivot\n\n    arr=($1)\n    k=$2\n    len=${#arr[@]}\n    start=0\n\
    \    end=$((len-1))\n    while [ $start -lt $end ]; do\n        middle=$(((start+end)/2))\n\
    \        pivot=${arr[$middle]}\n        i=$start\n        j=$end\n        while\
    \ [ $i -lt $j ]; do\n            while [ ${arr[$i]} -gt $pivot ]; do\n       \
    \         i=$((i+1))\n            done\n            while [ ${arr[$j]} -lt $pivot\
    \ ]; do\n                j=$((j-1))\n            done\n            if [ $i -lt\
    \ $j ]; then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$temp\n            fi\n        done\n        if [ $i\
    \ -eq $j ]; then\n            if [ $i -eq $((len-k)) ]; then\n               \
    \ break\n            elif [ $i -lt $((len-k)) ]; then\n                start=$((i+1))\n\
    \            else\n                end=$((i-1))\n            fi\n        fi\n\
    \    done\n    for ((i=len-k; i<len; i++)); do\n        echo -n \"${arr[$i]} \"\
    \n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for\
    \ ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]}\
    \ ]]; then\n                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<$k; i++)); do\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a result\n    local -a temp\n    local len=${#arr[@]}\n    local i=0\n\
    \    local j=0\n    local max=0\n    local max_index=0\n    local temp_len=0\n\
    \    local temp_index=0\n    local temp_max=0\n    local temp_max_index=0\n  \
    \  local temp_i=0\n    local temp_j=0\n    local temp_k=0\n    local temp_len=0\n\
    \    local temp_max=0\n    local temp_max_index=0\n    local temp_i=0\n    local\
    \ temp_j=0\n    local temp_k=0\n    local temp_len=0\n    local temp_max=0\n \
    \   local temp_max_index=0\n    local temp_i=0\n    local temp_j=0\n    local\
    \ temp_k=0\n    local temp_len=0\n    local temp_max=0\n    local temp_max_index=0\n\
    \    local temp_i=0\n    local temp_j=0\n    local temp_k=0\n    local temp_len=0\n\
    \    local temp_max=0\n    local temp_max_index=0\n    local temp_i=0\n    local\
    \ temp_j=0\n    local temp_k=0\n    local temp_len=0\n    local temp_max=0\n \
    \   local temp_max_index=0\n    local temp_i=0\n    local temp_j=0\n    local\
    \ temp_k=0\n    local temp_len=0\n    local temp_max=0\n    local temp_max_index=0\n\
    \    local temp_i=0\n    local temp_j=0\n    local temp_k=0\n    local temp_len=0\n\
    \    local temp_max=0\n    local temp_max_index=0\n    local temp_i=0\n    local\
    \ temp_j=0\n    local temp_k=0\n    local temp_len=0\n    local temp_max=0\n \
    \   local temp_max_index=0\n    local temp_i=0\n   \n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3mtpv7f5.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=$1\n    local k=$2\n    local max_list=()\n\
    \    local max_list_len=0\n    local i=0\n    local j=0\n    local tmp=0\n   \
    \ local len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo \"\"\n     \
    \   return\n    fi\n    if [ $k -eq 0 ]; then\n        echo \"\"\n        return\n\
    \    fi\n    if [ $k -gt $len ]; then\n        k=$len\n    fi\n    for ((i=0;\
    \ i<k; i++)); do\n        max_list[$i]=${arr[$i]}\n    done\n    max_list_len=$k\n\
    \    for ((i=k; i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n        \
    \    if [ ${arr[$i]} -gt ${max_list[$j]} ]; then\n                tmp=${max_list[$j]}\n\
    \                max_list[$j]=${arr[$i]}\n                arr[$i]=$tmp\n     \
    \       fi\n        done\n    done\n    echo ${max_list[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local i j\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${result[j]} ]]; then\n                result[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local result=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local res=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local max=(${arr[@]:0:k})\n    local max_len=${#max[@]}\n\
    \    local i=0\n    local j=0\n    local tmp=0\n    for ((i=k; i<len; i++)); do\n\
    \        for ((j=0; j<max_len; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                tmp=${max[j]}\n                max[j]=${arr[i]}\n\
    \                arr[i]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    if [ $k -gt $len ]; then\n  \
    \      echo \"k is greater than the length of the array\"\n        return 1\n\
    \    fi\n\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n\
    \        for ((j=1; j<len-i; j++)); do\n            if [ ${arr[j]} -gt $max ];\
    \ then\n                max=${arr[j]}\n                max_idx=$j\n          \
    \  fi\n        done\n        result[i]=$max\n        arr[max_idx]=${arr[len-i-1]}\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a res=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpinxhokof.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr9yb4fng.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local max=0\n    local max_idx=0\n\
    \    local tmp=0\n    local result=()\n    for ((i=0; i<k; i++)); do\n       \
    \ max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n  \
    \          if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result+=($max)\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a res=()\n    local -a tmp=()\n    local -i i=0\n    local -i j=0\n\
    \    local -i n=${#arr[@]}\n    local -i m=0\n    local -i max=0\n    local -i\
    \ max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_l=0\n\
    \    local -i max_m=0\n    local -i max_n=0\n    local -i max_o=0\n    local -i\
    \ max_p=0\n    local -i max_q=0\n    local -i max_r=0\n    local -i max_s=0\n\
    \    local -i max_t=0\n    local -i max_u=0\n    local -i max_v=0\n    local -i\
    \ max_w=0\n    local -i max_x=0\n    local -i max_y=0\n    local -i max_z=0\n\
    \    local -i max_aa=0\n    local -i max_ab=0\n    local -i max_ac=0\n    local\
    \ -i max_ad=0\n    local -i max_ae=0\n    local -i max_af=0\n    local -i max_ag=0\n\
    \    local -i max_ah=0\n    local -i max_ai=0\n    local -i max_aj=0\n    local\
    \ -i max_ak=0\n    local -i max_al=0\n    local -i max_am=0\n    local -i max_an=0\n\
    \    local -i max_ao=0\n    local -i max_ap=0\n    local -i max_aq=0\n    local\
    \ -i max_ar=0\n    local -i max_as=0\n    local -i max_at=0\n    local -i max_au=0\n\
    \    local -i max_av=0\n    local -i max_aw=0\n    local -i max_ax=0\n    local\
    \ -i max_ay=0\n   \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfzl2icty.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i\n    local j\n    local tmp\n    for ((i=0; i<k;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a result\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i temp=0\n    local\
    \ -i temp_index=0\n    local -i temp_len=0\n    local -i temp_max=0\n    local\
    \ -i temp_max_index=0\n    local -i temp_max_len=0\n    local -i temp_max_temp=0\n\
    \    local -i temp_max_temp_index=0\n    local -i temp_max_temp_len=0\n    local\
    \ -i temp_max_temp_max=0\n    local -i temp_max_temp_max_index=0\n    local -i\
    \ temp_max_temp_max_len=0\n    local -i temp_max_temp_max_temp=0\n    local -i\
    \ temp_max_temp_max_temp_index=0\n    local -i temp_max_temp_max_temp_len=0\n\
    \    local -i temp_max_temp_max_temp_max=0\n    local -i temp_max_temp_max_temp_max_index=0\n\
    \    local -i temp_max_temp_max_temp_max_len=0\n    local -i temp_max_temp_max_temp_max_temp=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_index=0\n    local -i temp_max_temp_max_temp_max_temp_len=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_max=0\n    local -i temp_max_temp_max_temp_max_temp_max_index=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_max_len=0\n    local -i temp_max_temp_max_temp_max_temp_max_temp=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_max_temp_index=0\n    local\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwjm1cc9c.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[j]} -gt ${arr[i]} ]]; then\n     \
    \           local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local result=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n\
    \    local tmp=0\n    local result=()\n    if [[ $k -gt $len ]]; then\n      \
    \  k=$len\n    fi\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n    \
    \    max_index=0\n        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]}\
    \ -gt $max ]]; then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n\
    \        arr[len-i-1]=$max\n        arr[max_index]=$tmp\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local res=()\n\
    \    if [[ $k -gt $len ]]; then\n        k=$len\n    fi\n    for ((i=0; i<k; i++));\
    \ do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]}\
    \ ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n        res[i]=${arr[i]}\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local result=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local res=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${max[@]}\
    \ | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=\"$1\"\n    local k=\"$2\"\n  \
    \  local maxes=()\n    local max=0\n    local i=0\n    local j=0\n    local len=0\n\
    \    local tmp=0\n    local max_len=0\n    local max_idx=0\n    local max_val=0\n\
    \    local max_idx_val=0\n    local max_idx_val_len=0\n    local max_idx_val_len_idx=0\n\
    \    local max_idx_val_len_idx_val=0\n    local max_idx_val_len_idx_val_len=0\n\
    \    local max_idx_val_len_idx_val_len_idx=0\n    local max_idx_val_len_idx_val_len_idx_val=0\n\
    \    local max_idx_val_len_idx_val_len_idx_val_len=0\n    local max_idx_val_len_idx_val_len_idx_val_len_idx=0\n\
    \    local max_idx_val_len_idx_val_len_idx_val_len_idx_val=0\n    local max_idx_val_len_idx_val_len_idx_val_len_idx_val_len=0\n\
    \    local max_idx_val_len_idx_val_len_idx_val_len_idx_val_len_idx=0\n    local\
    \ max_idx_val_len_idx_val_len_idx_val_len_idx_val_len_idx_val=0\n    local max_idx_val_len_idx_val_len_idx_val_len_idx_val_len_idx_val_len=0\n\
    \    local max_idx_val_len_idx_val_len_idx_val_len_idx_val_len_idx_val_len_idx=0\n\
    \    local max_idx_val_len_idx_val_len_idx_val_\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        arr[max_idx]=${arr[len-i-1]}\n    done\n\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a res\n    local -a tmp\n    local i\n    local j\n    local n\n \
    \   local m\n    local l\n    local r\n    local t\n    local p\n    local q\n\
    \    local -i len=${#arr[@]}\n    local -i max=${arr[0]}\n    local -i min=${arr[0]}\n\
    \    for ((i=0; i<len; i++)); do\n        if ((arr[i] > max)); then\n        \
    \    max=${arr[i]}\n        fi\n        if ((arr[i] < min)); then\n          \
    \  min=${arr[i]}\n        fi\n    done\n    if ((k == len)); then\n        echo\
    \ \"${arr[@]}\"\n        return\n    fi\n    if ((k == 1)); then\n        echo\
    \ \"$max\"\n        return\n    fi\n    if ((k == 2)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 3)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 4)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 5)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 6)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 7)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 8)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 9)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 10)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 11)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 12)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 13)); then\n        echo \"$max\
    \ $min\"\n        return\n    fi\n    if ((k == 14)); then\n        echo \"$max\
    \ $min\"\n       \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxduy1tam.sh: line 98: syntax error near unexpected token `}''

    /tmp/tmpxduy1tam.sh: line 98: `}''

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a result\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n\
    \    local len=${#arr[@]}\n    while [ $i -lt $k ]; do\n        max=${arr[0]}\n\
    \        max_index=0\n        for ((j=1; j<len; j++)); do\n            if [ ${arr[$j]}\
    \ -gt $max ]; then\n                max=${arr[$j]}\n                max_index=$j\n\
    \            fi\n        done\n        result[$i]=$max\n        arr[$max_index]=$((-1000000000))\n\
    \        i=$((i+1))\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpgdx43e0c.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local max=()\n    local i=0\n    local j=0\n    local max_i=0\n\
    \    local max_j=0\n    local max_val=0\n    local tmp=0\n    local tmp_i=0\n\
    \    local tmp_j=0\n    local tmp_val=0\n    local tmp_arr=()\n    local result=()\n\
    \    if [ $len -le $k ]; then\n        echo ${arr[@]}\n        return\n    fi\n\
    \    for ((i=0; i<$k; i++)); do\n        max[$i]=${arr[$i]}\n    done\n    for\
    \ ((i=0; i<$k; i++)); do\n        max_val=${max[$i]}\n        max_i=$i\n     \
    \   for ((j=$i+1; j<$k; j++)); do\n            if [ ${max[$j]} -gt $max_val ];\
    \ then\n                max_val=${max[$j]}\n                max_i=$j\n       \
    \     fi\n        done\n        tmp=${max[$i]}\n        max[$i]=$max_val\n   \
    \     max[$max_i]=$tmp\n    done\n    for ((i=$k; i<$len; i++)); do\n        if\
    \ [ ${arr[$i]} -gt ${max[0]} ]; then\n            max[0]=${arr[$i]}\n        \
    \    for ((j=0; j<$k; j++)); do\n                max_val=${max[$j]}\n        \
    \        max_i=$j\n                for ((j=$j+1; j<$k; j++)); do\n           \
    \         if [ ${max[$j]} -gt $max_val ]; then\n                        max_val=${max[$j]}\n\
    \                        max_i=$j\n                    fi\n                done\n\
    \                tmp=${max[$j]}\n                max[$j]=$max_val\n          \
    \      max[$max_i]=$tmp\n            done\n        fi\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_index=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n\
    \        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        arr[max_index]=${arr[len-i-1]}\n    done\n\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n\
    \                local t=${max[j]}\n                max[j]=${arr[i]}\n       \
    \         arr[i]=$t\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl88s5r0k.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local -a max_heap\n    local i\n    local j\n    local temp\n\
    \    local len=${#arr[@]}\n    local max_heap_size=0\n    local max_heap_index=0\n\
    \    local max_heap_last_index=0\n    local max_heap_last_index_parent=0\n   \
    \ local max_heap_last_index_left_child=0\n    local max_heap_last_index_right_child=0\n\
    \    local max_heap_last_index_left_child_value=0\n    local max_heap_last_index_right_child_value=0\n\
    \    local max_heap_last_index_parent_value=0\n    local max_heap_last_index_value=0\n\
    \    local max_heap_last_index_value_temp=0\n    local max_heap_last_index_parent_value_temp=0\n\
    \    local max_heap_last_index_left_child_value_temp=0\n    local max_heap_last_index_right_child_value_temp=0\n\
    \    local max_heap_last_index_value_temp=0\n    local max_heap_last_index_parent_value_temp=0\n\
    \    local max_heap_last_index_left_child_value_temp=0\n    local max_heap_last_index_right_child_value_temp=0\n\
    \    local max_heap_last_index_value_temp=0\n    local max_heap_last_index_parent_value_temp=0\n\
    \    local max_heap_last_index_left_child_value_temp=0\n    local max_heap_last_index_right_child_value_temp=0\n\
    \    local max_heap_last_index_value_temp=0\n    local max_heap_last_index_parent_value_temp=0\n\
    \    local max_heap_last_index_left_child_value_temp=0\n    local max_heap_last_index_right\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a max=()\n    local -a min=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local max_len=0\n    local min_len=0\n    local max_i=0\n    local min_i=0\n\
    \    local max_j=0\n    local min_j=0\n    local max_val=0\n    local min_val=0\n\
    \    local tmp=0\n    local tmp_i=0\n    local tmp_j=0\n    local tmp_val=0\n\
    \    local tmp_len=0\n    local -a res=()\n    if [ $len -le $k ]; then\n    \
    \    echo ${arr[@]}\n        return\n    fi\n    for ((i=0; i<len; i++)); do\n\
    \        if [ $i -lt $k ]; then\n            max[$i]=${arr[$i]}\n            max_len=$i\n\
    \        else\n            max_val=${max[0]}\n            max_i=0\n          \
    \  max_j=0\n            for ((j=0; j<=max_len; j++)); do\n                if [\
    \ ${max[$j]} -gt $max_val ]; then\n                    max_val=${max[$j]}\n  \
    \                  max_i=$j\n                    max_j=$j\n                fi\n\
    \            done\n            if [ ${arr[$i]} -gt $max_val ]; then\n        \
    \        max[$max_i]=${arr[$i]}\n            fi\n        fi\n    done\n    for\
    \ ((i=0; i<len; i++)); do\n        if [ $i -lt $k ]; then\n            min[$i]=${arr[$i]}\n\
    \            min_len=$i\n        else\n            min_val=${min[0]}\n       \
    \     min_i=0\n            min_j=0\n            for ((j=0; j<=min_len; j++));\
    \ do\n                if [ ${min[$j]} -lt $min_val ]; then\n                 \
    \   min_val=${min[$j]}\n                    min_i=$j\n                   \n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3ihnpodi.sh: line 73: syntax error near unexpected token `}''

    /tmp/tmp3ihnpodi.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=$1\n    local k=$2\n    local len=${#arr[@]}\n\
    \    local i=0\n    local j=0\n    local tmp=0\n    local res=()\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local max=0\n    local max_idx=0\n\
    \    local tmp=0\n    local result=()\n\n    if [ $k -le 0 ]; then\n        echo\
    \ \"\"\n        return\n    fi\n\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n\
    \        max_idx=0\n        for ((j=1; j<$((n-i)); j++)); do\n            if [\
    \ ${arr[j]} -gt $max ]; then\n                max=${arr[j]}\n                max_idx=$j\n\
    \            fi\n        done\n        result[$i]=$max\n        tmp=${arr[$((n-i-1))]}\n\
    \        arr[$((n-i-1))]=$max\n        arr[$max_idx]=$tmp\n    done\n\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    echo \"$1\" | tr ' ' '\\n' | sort -rn | head\
    \ -n $2 | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local result=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local -i k\n    local -i\
    \ i\n    local -i j\n    local -i max\n    local -i max_index\n    local -i tmp\n\
    \    local -i len\n    arr=($1)\n    k=$2\n    len=${#arr[@]}\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n          \
    \      max=${arr[j]}\n                max_index=$j\n            fi\n        done\n\
    \        tmp=${arr[i]}\n        arr[i]=${arr[max_index]}\n        arr[max_index]=$tmp\n\
    \    done\n    echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<len; i++)); do\n        for\
    \ ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n\
    \                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n     \
    \           arr[j]=$tmp\n            fi\n        done\n    done\n    for ((i=0;\
    \ i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a max\n    local i\n    local j\n    local len=${#arr[@]}\n    for ((i=0; i<k;\
    \ i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<len; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=\"$1\"\n    local k=\"$2\"\n  \
    \  local i=0\n    local j=0\n    local max=0\n    local max_index=0\n    local\
    \ temp=0\n    local result=()\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n\
    \        max_index=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n           \
    \ if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n         \
    \       max_index=$j\n            fi\n        done\n        result[i]=$max\n \
    \       arr[max_index]=$((-1 * ${arr[max_index]}))\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi775771s.sh: line 33: -1 * -3 -4 5: syntax error in expression
    (error token is "5")

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local result=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    if [[ $len -lt $k ]]; then\n\
    \        echo \"Error: length of array is less than k\"\n        exit 1\n    fi\n\
    \n    for ((i=0; i<k; i++)); do\n        max=${arr[$i]}\n        max_idx=$i\n\
    \        for ((j=$i+1; j<len; j++)); do\n            if [[ ${arr[$j]} -gt $max\
    \ ]]; then\n                max=${arr[$j]}\n                max_idx=$j\n     \
    \       fi\n        done\n        tmp=${arr[$i]}\n        arr[$i]=$max\n     \
    \   arr[$max_idx]=$tmp\n        result+=($max)\n    done\n\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprks42983.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    local j\n    local max_i\n    local max_j\n    local\
    \ max_val\n    local val\n\n    for ((i=0; i<k; i++)); do\n        max_val=${arr[i]}\n\
    \        max_i=$i\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            val=${arr[j]}\n\
    \            if ((val > max_val)); then\n                max_val=$val\n      \
    \          max_i=$j\n            fi\n        done\n        max[i]=$max_val\n \
    \       if ((max_i != i)); then\n            arr[max_i]=${arr[i]}\n          \
    \  arr[i]=$max_val\n        fi\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkt4wlh09.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local max=0\n    local max_idx=0\n\
    \    local tmp=0\n    local result=()\n    for ((i=0; i<k; i++)); do\n       \
    \ max=${arr[0]}\n        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n  \
    \          if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_idx=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local max=()\n    local i=0\n    local j=0\n    local tmp=0\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<len; i++)); do\n        tmp=${arr[i]}\n        for ((j=0; j<k; j++)); do\n\
    \            if [[ $tmp -gt ${max[j]} ]]; then\n                max[j]=$tmp\n\
    \                break\n            fi\n        done\n    done\n    for ((i=0;\
    \ i<k; i++)); do\n        echo ${max[i]}\n    done\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local i j\n    for ((i=0; i<k; i++)); do\n        result[$i]=${arr[$i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[$i]} -gt ${result[$j]} ]]; then\n              \
    \  result[$j]=${arr[$i]}\n                break\n            fi\n        done\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a max\n    local -a max_index\n    local -a max_index_new\n    local\
    \ -a max_new\n    local -a max_index_old\n    local -a max_old\n    local -a max_index_new_old\n\
    \    local -a max_new_old\n    local -a max_index_old_new\n    local -a max_old_new\n\
    \    local -a max_index_old_new_old\n    local -a max_old_new_old\n    local -a\
    \ max_index_new_old_new\n    local -a max_new_old_new\n    local -a max_index_new_old_new_old\n\
    \    local -a max_new_old_new_old\n    local -a max_index_new_old_new_old_new\n\
    \    local -a max_new_old_new_old_new\n    local -a max_index_new_old_new_old_new_old\n\
    \    local -a max_new_old_new_old_new_old\n    local -a max_index_new_old_new_old_new_old_new\n\
    \    local -a max_new_old_new_old_new_old_new\n    local -a max_index_new_old_new_old_new_old_new_old\n\
    \    local -a max_new_old_new_old_new_old_new_old\n    local -a max_index_new_old_new_old_new_old_new_old_new\n\
    \    local -a max_new_old_new_old_new_old_new_old_new\n    local -a max_index_new_old_new_old_new_old_new_old_new_old\n\
    \    local -a max_new_old_new_old_new_old_new_old_new_old\n    local -a max_index_new_old_new_old_new_old_new_old_new_old_new\n\
    \    local -a max_new_old_new_old_new_old_new_old_\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpai5yn7cy.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${max[@]}\"\
    \ | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8_hw77f_.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a result\n    local -a max_arr\n    local max_num\n    local i\n \
    \   local j\n    local len=${#arr[@]}\n    for ((i=0; i<k; i++)); do\n       \
    \ max_num=${arr[0]}\n        for ((j=1; j<len; j++)); do\n            if [[ ${arr[j]}\
    \ -gt $max_num ]]; then\n                max_num=${arr[j]}\n            fi\n \
    \       done\n        result[i]=$max_num\n        arr=(${arr[@]/$max_num})\n \
    \       len=${#arr[@]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq_gowsj4.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ i j\n    local -a max\n    local -a max_index\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n        max_index[i]=$i\n    done\n    for ((i=k; i<${#arr[@]};\
    \ i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt\
    \ ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                max_index[j]=$i\n\
    \                break\n            fi\n        done\n    done\n    for ((i=0;\
    \ i<k; i++)); do\n        echo ${max[i]}\n    done\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps1zhmbiq.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local max=0\n    local max_index=0\n\
    \    local tmp=0\n    local result=()\n    for ((i=0; i<k; i++)); do\n       \
    \ max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_index]=$tmp\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ i j\n    local -a max\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_u8porr6.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local max=()\n    local i=0\n    local j=0\n    local tmp=0\n\
    \    local max_len=0\n    local max_i=0\n    local max_j=0\n    local max_tmp=0\n\
    \    local max_arr=()\n    local max_k=0\n    local max_len=0\n    local max_i=0\n\
    \    local max_j=0\n    local max_tmp=0\n    local max_arr=()\n    local max_k=0\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<len; i++)); do\n   \
    \     for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n           \
    \ if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n    \
    \            arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n \
    \       done\n    done\n    for ((i=0\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy4grra0t.sh: line 70: unexpected EOF while looking for matching
    `)''

    /tmp/tmpy4grra0t.sh: line 93: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local res=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ i\n    local j\n    local max\n    local max_idx\n    local tmp\n    local len=${#arr[@]}\n\
    \    local res=()\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n    \
    \    max_idx=0\n        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]}\
    \ -gt $max ]]; then\n                max=${arr[j]}\n                max_idx=$j\n\
    \            fi\n        done\n        res+=($max)\n        tmp=${arr[len-i-1]}\n\
    \        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n    done\n    echo \"${res[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkch_5fea.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    /tmp/tmpkch_5fea.sh: line 34: arr: bad array subscript

    /tmp/tmpkch_5fea.sh: line 35: arr[len-i-1]: bad array subscript

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local -i k\n    local -i\
    \ i\n    local -i j\n    local -i max\n    local -i max_idx\n    local -i tmp\n\
    \    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++)); do\n        max=${arr[i]}\n\
    \        max_idx=$i\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n          \
    \  if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n        \
    \        max_idx=$j\n            fi\n        done\n        tmp=${arr[i]}\n   \
    \     arr[i]=${arr[max_idx]}\n        arr[max_idx]=$tmp\n    done\n    echo ${arr[@]:0:k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local result=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a res=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local\
    \ max=0\n    local max_index=0\n    while [ $i -lt $k ]; do\n        max=${arr[0]}\n\
    \        max_index=0\n        for ((j=1; j<len; j++)); do\n            if [ ${arr[j]}\
    \ -gt $max ]; then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        res[$i]=$max\n        arr[$max_index]=0\n\
    \        ((i++))\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [ ${arr[$i]} -lt ${arr[$j]} ]\n            then\n                temp=${arr[$i]}\n\
    \                arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n         \
    \   fi\n        done\n    done\n    for ((i=0; i<k; i++))\n    do\n        echo\
    \ -n \"${arr[$i]} \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local res=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_index=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n\
    \        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_index]=$tmp\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=()\n    local -i k=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i t=0\n    local -i n=0\n    local -i m=0\n\
    \    local -i l=0\n    local -i r=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i s=0\n    local -i e=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i max=0\n    local -i min=0\n    local -i mid=0\n    local -i tmp=0\n\
    \    local -i len=0\n    local -i res=0\n    local -i cnt=0\n    local -i sum=0\n\
    \    local -i idx=0\n    local -i idy=0\n    local -i idz=0\n    local -i idt=0\n\
    \    local -i idm=0\n    local -i idn=0\n    local -i idp=0\n    local -i idq=0\n\
    \    local -i ids=0\n    local -i ide=0\n    local -i idx=0\n    local -i idy=0\n\
    \    local -i idz=0\n    local -i idt=0\n    local -i idm=0\n    local -i idn=0\n\
    \    local -i idp=0\n    local -i idq=0\n    local -i ids=0\n    local -i ide=0\n\
    \    local -i idx=0\n    local -i idy=0\n    local -i idz=0\n    local -i idt=0\n\
    \    local -i idm=0\n    local -i idn=0\n    local -i idp=0\n    local -i idq=0\n\
    \    local -i ids=0\n    local -i ide=0\n    local -i idx=0\n    local -i idy=0\n\
    \    local -i idz=0\n    local -i idt=0\n    local -i idm=0\n    local -i idn\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i\n    local j\n    local temp\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local max=()\n    local i=0\n    local j=0\n    local tmp=0\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                tmp=${max[j]}\n                max[j]=${arr[i]}\n\
    \                arr[i]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n\
    \                local t=${max[j]}\n                max[j]=${arr[i]}\n       \
    \         arr[i]=$t\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl88s5r0k.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=$1\n    local k=$2\n    local max=()\n\
    \    local i=0\n    local j=0\n    local len=${#arr[@]}\n    while [ $i -lt $k\
    \ ] && [ $i -lt $len ]; do\n        max[$i]=${arr[$i]}\n        let i++\n    done\n\
    \    while [ $i -lt $len ]; do\n        j=0\n        while [ $j -lt $k ]; do\n\
    \            if [ ${arr[$i]} -gt ${max[$j]} ]; then\n                max[$j]=${arr[$i]}\n\
    \                break\n            fi\n            let j++\n        done\n  \
    \      let i++\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i=0\n    local j=0\n    local n=${#arr[@]}\n    local tmp=0\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<n; i++)); do\n        tmp=${arr[i]}\n        for ((j=0; j<k; j++)); do\n \
    \           if [[ $tmp -gt ${max[j]} ]]; then\n                tmp=${max[j]}\n\
    \                max[j]=${arr[i]}\n                break\n            fi\n   \
    \     done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0djlz2eg.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i j\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr9yb4fng.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a res=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local\
    \ max=0\n    local max_i=0\n    local tmp=0\n    for ((i=0; i<k; i++)); do\n \
    \       max=${arr[0]}\n        max_i=0\n        for ((j=1; j<len-i; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_i=$j\n            fi\n        done\n        res[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_i]=$tmp\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local k\n    local -a res\n\
    \    local i\n    local j\n    local n\n    local tmp\n    arr=($1)\n    k=$2\n\
    \    res=()\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n    done\n\
    \    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n \
    \           if [[ ${arr[i]} -gt ${res[j]} ]]; then\n                tmp=${res[j]}\n\
    \                res[j]=${arr[i]}\n                for ((n=j+1; n<k; n++)); do\n\
    \                    tmp2=${res[n]}\n                    res[n]=${tmp}\n     \
    \               tmp=${tmp2}\n                done\n                break\n   \
    \         fi\n        done\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a result\n    local -a max\n    local -a max_idx\n    local -a max_idx_sorted\n\
    \    local -a max_sorted\n    local i\n    local j\n    local idx\n    local max_idx_len\n\
    \    local max_len\n    local max_idx_sorted_len\n    local max_sorted_len\n \
    \   local result_len\n    local result_idx\n    local result_idx_len\n    local\
    \ result_idx_sorted\n    local result_idx_sorted_len\n    local result_sorted\n\
    \    local result_sorted_len\n    local result_sorted_idx\n    local result_sorted_idx_len\n\
    \    local result_sorted_idx_sorted\n    local result_sorted_idx_sorted_len\n\
    \    local result_sorted_idx_sorted_idx\n    local result_sorted_idx_sorted_idx_len\n\
    \    local result_sorted_idx_sorted_idx_sorted\n    local result_sorted_idx_sorted_idx_sorted_len\n\
    \    local result_sorted_idx_sorted_idx_sorted_idx\n    local result_sorted_idx_sorted_idx_sorted_idx_len\n\
    \    local result_sorted_idx_sorted_idx_sorted_idx_sorted\n    local result_sorted_idx_sorted_idx_sorted_idx_sorted_len\n\
    \    local result_sorted_idx_sorted_idx_sorted_idx_sorted_idx\n    local result_sorted_idx_sorted_idx_sorted_idx_sorted_idx_len\n\
    \    local result_sorted_idx_sorted_idx_sorted_idx_sorted_idx_sorted\n    local\
    \ result_sorted_idx_sorted_idx_sorted_idx_sorted_idx_sorted\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpstwmax5i.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local i\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${result[j]} ]]; then\n\
    \                local tmp=${result[j]}\n                result[j]=${arr[i]}\n\
    \                arr[i]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local max=()\n    local i=0\n    local j=0\n    local max_i=0\n\
    \    local max_j=0\n    local tmp=0\n    local tmp_i=0\n    local tmp_j=0\n  \
    \  local tmp_max=0\n    local tmp_max_i=0\n    local tmp_max_j=0\n    local tmp_arr=()\n\
    \    local tmp_max_arr=()\n    local tmp_arr_i=0\n    local tmp_max_arr_i=0\n\
    \    local tmp_arr_j=0\n    local tmp_max_arr_j=0\n    local tmp_arr_len=0\n \
    \   local tmp_max_arr_len=0\n    local tmp_arr_max=0\n    local tmp_max_arr_max=0\n\
    \    local tmp_arr_max_i=0\n    local tmp_max_arr_max_i=0\n    local tmp_arr_max_j=0\n\
    \    local tmp_max_arr_max_j=0\n    local tmp_arr_max_len=0\n    local tmp_max_arr_max_len=0\n\
    \    local tmp_arr_max_arr=()\n    local tmp_max_arr_max_arr=()\n    local tmp_arr_max_arr_i=0\n\
    \    local tmp_max_arr_max_arr_i=0\n    local tmp_arr_max_arr_j=0\n    local tmp_max_arr_max_arr_j=0\n\
    \    local tmp_arr_max_arr_len=0\n    local tmp_max_arr_max_arr_len=0\n    local\
    \ tmp_arr_max_arr_max=0\n    local tmp_max_arr_max_arr_max=0\n    local tmp_arr_max_arr_max_i=0\n\
    \    local tmp_max_arr_max_arr_max_i=0\n    local tmp_arr_max_arr_max_j=0\n  \
    \  local tmp_max_arr_max_arr_max_j=0\n    local tmp_\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    for i in ${arr[@]}; do\n        if [[ ${#max[@]} -lt $k ]]; then\n\
    \            max+=($i)\n        else\n            local min=${max[0]}\n      \
    \      local min_idx=0\n            for j in ${!max[@]}; do\n                if\
    \ [[ ${max[$j]} -lt $min ]]; then\n                    min=${max[$j]}\n      \
    \              min_idx=$j\n                fi\n            done\n            if\
    \ [[ $i -gt $min ]]; then\n                max[$min_idx]=$i\n            fi\n\
    \        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkpaebk2f.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a res=()\n    local -a tmp=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        tmp[i]=${arr[i]}\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        for ((j=0; j<len-i-1; j++)); do\n           \
    \ if [[ ${tmp[j]} -lt ${tmp[j+1]} ]]; then\n                tmp[j]=${tmp[j+1]}\n\
    \                tmp[j+1]=${arr[j]}\n            fi\n        done\n        res[i]=${tmp[len-i-1]}\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    # sort the array\n    local -a arr=($(echo\
    \ $1 | tr ' ' '\\n' | sort -nr))\n    # print the first k elements\n    for ((i=0;\
    \ i<$2; i++)); do\n        echo -n \"${arr[$i]} \"\n    done\n    echo\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result=()\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n\
    \    local temp=0\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n    \
    \    max_index=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n            if [[\
    \ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n               \
    \ max_index=$j\n            fi\n        done\n        result[i]=$max\n       \
    \ arr[max_index]=$((0-max))\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    # sort the array\n    local -a arr=($(echo\
    \ $1 | tr ' ' '\\n' | sort -nr))\n    # return the first k elements\n    echo\
    \ ${arr[@]:0:$2}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local max=()\n    local i=0\n    local j=0\n    local max_i=0\n\
    \    local max_j=0\n    local max_val=0\n    local tmp=0\n    if [ $len -le $k\
    \ ]; then\n        echo \"${arr[@]}\"\n        return\n    fi\n    for ((i=0;\
    \ i<k; i++)); do\n        max[$i]=${arr[$i]}\n    done\n    for ((i=k; i<len;\
    \ i++)); do\n        max_val=${max[0]}\n        max_i=0\n        for ((j=1; j<k;\
    \ j++)); do\n            if [ ${max[$j]} -gt $max_val ]; then\n              \
    \  max_val=${max[$j]}\n                max_i=$j\n            fi\n        done\n\
    \        if [ ${arr[$i]} -lt $max_val ]; then\n            max[$max_i]=${arr[$i]}\n\
    \        fi\n    done\n    for ((i=0; i<k; i++)); do\n        max_val=${max[$i]}\n\
    \        max_i=$i\n        for ((j=i+1; j<k; j++)); do\n            if [ ${max[$j]}\
    \ -gt $max_val ]; then\n                max_val=${max[$j]}\n                max_i=$j\n\
    \            fi\n        done\n        tmp=${max[$i]}\n        max[$i]=$max_val\n\
    \        max[$max_i]=$tmp\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local -i k\n    local -i\
    \ i\n    local -i j\n    local -i max\n    local -i max_i\n    local -i tmp\n\
    \    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++)); do\n        max=${arr[i]}\n\
    \        max_i=$i\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if\
    \ [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n            \
    \    max_i=$j\n            fi\n        done\n        tmp=${arr[i]}\n        arr[i]=${arr[max_i]}\n\
    \        arr[max_i]=$tmp\n    done\n    echo \"${arr[@]:0:k}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a res\n    local -a max\n    local -a min\n    local i\n    local j\n    local\
    \ n\n    local m\n    local tmp\n    local idx\n\n    n=${#arr[@]}\n    if [[\
    \ $n -le $k ]]; then\n        echo \"${arr[@]}\"\n        return\n    fi\n\n \
    \   for ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n    done\n    for ((i=k;\
    \ i<n; i++)); do\n        min[$i]=${arr[$i]}\n    done\n\n    for ((i=k; i<n;\
    \ i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${min[$i]} -gt\
    \ ${max[$j]} ]]; then\n                tmp=${max[$j]}\n                max[$j]=${min[$i]}\n\
    \                min[$i]=$tmp\n            fi\n        done\n    done\n\n    echo\
    \ \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqwhr39su.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a max\n    local i=0\n    local j=0\n    local n=${#arr[@]}\n    local tmp=0\n\
    \    local max_i=0\n    local max_j=0\n    for ((i=0; i<n; i++)); do\n       \
    \ for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[$i]} -lt ${arr[$j]} ]];\
    \ then\n                tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n \
    \               arr[$j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local -i i=0 j=0\n    local -i len=${#arr[@]}\n    local -i max=0\n\
    \    local -i max_index=0\n    local -i tmp=0\n    local -i tmp_index=0\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            tmp=${arr[j]}\n            tmp_index=j\n\
    \            if [[ $tmp -gt $max ]]; then\n                max=$tmp\n        \
    \        max_index=$tmp_index\n            fi\n        done\n        result[i]=$max\n\
    \        arr[max_index]=${arr[len-i-1]}\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local k\n    local -a max\n\
    \    local i\n    local j\n    local max_index\n    local max_value\n    local\
    \ tmp\n\n    arr=($1)\n    k=$2\n\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n\n    for ((i=k; i<${#arr[@]}; i++)); do\n        max_index=0\n   \
    \     max_value=${max[0]}\n        for ((j=1; j<k; j++)); do\n            if [[\
    \ ${max[j]} -gt $max_value ]]; then\n                max_index=$j\n          \
    \      max_value=${max[j]}\n            fi\n        done\n        if [[ ${arr[i]}\
    \ -lt $max_value ]]; then\n            max[$max_index]=${arr[i]}\n        fi\n\
    \    done\n\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1; j<k; j++)); do\n\
    \            if [[ ${max[j]} -gt ${max[i]} ]]; then\n                tmp=${max[i]}\n\
    \                max[i]=${max[j]}\n                max[j]=$tmp\n            fi\n\
    \        done\n    done\n\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=\"$1\"\n    local k=\"$2\"\n\
    \    local -a res\n    local -i i j\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${res[j]} ]]; then\n                res[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${res[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq6wcdikq.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [[ ${arr[i]} -lt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++))\n    do\n        echo -n \"\
    ${arr[i]} \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ max=()\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((${#max[@]} < k));\
    \ then\n            max+=(${arr[i]})\n        else\n            for ((j=0; j<${#max[@]};\
    \ j++)); do\n                if ((arr[i] > max[j])); then\n                  \
    \  max[j]=${arr[i]}\n                    break\n                fi\n         \
    \   done\n        fi\n    done\n    echo \"${max[@]}\" | tr ' ' '\\n' | sort -nr\
    \ | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpndxtvf2b.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local i j\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${result[j]} ]]; then\n                result[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    if [[ $k -gt $len ]]; then\n        echo \"Error: k is greater\
    \ than the length of the array\"\n        exit 1\n    fi\n    local i j\n    for\
    \ ((i=0; i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if\
    \ [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n \
    \               arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a result\n    local i j\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${result[j]} ]]; then\n                result[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvdjnlm06.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=(\"$@\")\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    if [[ $len -lt $k ]]; then\n        echo \"Error: k is greater\
    \ than the length of the array\"\n        return 1\n    fi\n    for ((i=0; i<$k;\
    \ i++)); do\n        for ((j=$i; j<$len; j++)); do\n            if [[ ${arr[$i]}\
    \ -lt ${arr[$j]} ]]; then\n                local tmp=${arr[$i]}\n            \
    \    arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n            fi\n      \
    \  done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    # TODO: implement this function\n    echo\
    \ \"not implemented\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a result\n    local -a max_heap\n    local -i i=0\n    local -i j=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_heap_len=0\n    local -i max_heap_size=0\n\
    \    local -i max_heap_index=0\n    local -i max_heap_left_index=0\n    local\
    \ -i max_heap_right_index=0\n    local -i max_heap_left_value=0\n    local -i\
    \ max_heap_right_value=0\n    local -i max_heap_value=0\n    local -i max_heap_parent_index=0\n\
    \    local -i max_heap_parent_value=0\n    local -i tmp=0\n\n    if [[ $k -gt\
    \ $len ]]; then\n        k=$len\n    fi\n\n    # build max heap\n    for ((i=0;\
    \ i<k; i++)); do\n        max_heap[$i]=${arr[$i]}\n        max_heap_len=${#max_heap[@]}\n\
    \        max_heap_size=$((max_heap_len-1))\n        max_heap_index=$((max_heap_size))\n\
    \        max_heap_parent_index=$(((max_heap_index-1)/2))\n        max_heap_value=${max_heap[$max_heap_index]}\n\
    \        max_heap_parent_value=${max_heap[$max_heap_parent_index]}\n        while\
    \ [[ $max_heap_value -gt $max_heap_parent_value ]]; do\n            max_heap[$max_heap_index]=$max_heap_parent_value\n\
    \            max_heap[$max_heap_parent_index]=$max_heap_value\n            max_heap_index=$max_heap_parent_index\n\
    \            max_heap_parent_index=$(((max_heap_index-1)/\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2ye8zgbu.sh: line 51: unexpected EOF while looking for matching
    `)''

    /tmp/tmp2ye8zgbu.sh: line 74: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_index=0\n    local result=()\n\n    if [ $len -le $k ]; then\n\
    \        echo ${arr[@]}\n        return\n    fi\n\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<len;\
    \ j++)); do\n            if [ ${arr[j]} -gt $max ]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        tmp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$tmp\n        result[i]=$max\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a result\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n\
    \    local tmp=0\n    while [ $i -lt $k ]; do\n        max=${arr[0]}\n       \
    \ max_index=0\n        j=0\n        while [ $j -lt ${#arr[@]} ]; do\n        \
    \    if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n      \
    \          max_index=$j\n            fi\n            j=$((j+1))\n        done\n\
    \        result[$i]=$max\n        arr[$max_index]=$((-1000000))\n        i=$((i+1))\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local tmp=0\n    local max=0\n\
    \    local res=()\n    for ((i=0; i<len; i++)); do\n        max=0\n        for\
    \ ((j=0; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n   \
    \             max=${arr[j]}\n                tmp=$j\n            fi\n        done\n\
    \        res[i]=$max\n        arr[tmp]=0\n    done\n    echo ${res[@]:0:$k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a res\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<len; i++)); do\n        for\
    \ ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n\
    \                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n     \
    \           arr[j]=$tmp\n            fi\n        done\n    done\n    for ((i=0;\
    \ i<k; i++)); do\n        echo ${arr[i]}\n    done\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local ret=()\n\
    \    if [ $len -le $k ]; then\n        echo ${arr[@]}\n        return\n    fi\n\
    \    for ((i=0; i<$k; i++)); do\n        for ((j=$i; j<$len; j++)); do\n     \
    \       if [ ${arr[$i]} -lt ${arr[$j]} ]; then\n                tmp=${arr[$i]}\n\
    \                arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n          \
    \  fi\n        done\n        ret[$i]=${arr[$i]}\n    done\n    echo ${ret[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ result=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0;\
    \ i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n              \
    \  arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n        done\n\
    \        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local -i k\n    local -i\
    \ i\n    local -i j\n    local -i max\n    local -i max_index\n    local -i tmp\n\
    \    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++)); do\n        max=${arr[i]}\n\
    \        max_index=$i\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n        \
    \    if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n      \
    \          max_index=$j\n            fi\n        done\n        tmp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$tmp\n    done\n   \
    \ echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp87ncesaf.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a res\n    local -i i j\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${res[j]} ]]; then\n                res[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppj3_ibcn.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=()\n    local -i k=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_index=0\n   \
    \ local -i len=0\n    local -i tmp=0\n    local -i tmp_index=0\n    local -i tmp_len=0\n\
    \    local -i tmp_max=0\n    local -i tmp_max_index=0\n    local -i tmp_max_len=0\n\
    \    local -i tmp_max_count=0\n    local -i tmp_max_count_index=0\n    local -i\
    \ tmp_max_count_len=0\n    local -i tmp_max_count_max=0\n    local -i tmp_max_count_max_index=0\n\
    \    local -i tmp_max_count_max_len=0\n    local -i tmp_max_count_max_count=0\n\
    \    local -i tmp_max_count_max_count_index=0\n    local -i tmp_max_count_max_count_len=0\n\
    \    local -i tmp_max_count_max_count_max=0\n    local -i tmp_max_count_max_count_max_index=0\n\
    \    local -i tmp_max_count_max_count_max_len=0\n    local -i tmp_max_count_max_count_max_count=0\n\
    \    local -i tmp_max_count_max_count_max_count_index=0\n    local -i tmp_max_count_max_count_max_count_len=0\n\
    \    local -i tmp_max_count_max_count_max_count_max=0\n    local -i tmp_max_count_max_count_max_count_max_index=0\n\
    \    local -i tmp_max_count_max_count_max_count_max_len=0\n    local -i tmp_max_count_max_count_max_count_max_count=0\n\
    \    local -i tmp_max_count_max_count_max_count_max_count_index=0\n    local -i\
    \ tmp_max_count_max\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j max\n    for ((i=0; i<len; i++)); do\n       \
    \ max=${arr[i]}\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]}\
    \ -gt $max ]]; then\n                max=${arr[j]}\n                arr[j]=${arr[i]}\n\
    \                arr[i]=$max\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpncn5hgg3.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n\
    \    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n \
    \           if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                for ((l=k-1;\
    \ l>j; l--)); do\n                    max[l]=${max[l-1]}\n                done\n\
    \                max[j]=${arr[i]}\n                break\n            fi\n   \
    \     done\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpanqdv8pt.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local result=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"$@\")\n    local k=$2\n \
    \   local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n\
    \                local t=${max[$j]}\n                max[$j]=${arr[$i]}\n    \
    \            arr[$i]=$t\n            fi\n        done\n    done\n    echo \"${max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local -i k\n    local -i\
    \ i\n    local -i j\n    local -i max\n    local -i max_index\n    local -i tmp\n\
    \    local -i len\n\n    arr=($1)\n    k=$2\n    len=${#arr[@]}\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n          \
    \      max=${arr[j]}\n                max_index=$j\n            fi\n        done\n\
    \        tmp=${arr[i]}\n        arr[i]=${arr[max_index]}\n        arr[max_index]=$tmp\n\
    \    done\n    echo \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if ((arr[i] < arr[j])); then\n               \
    \ arr[i]=${arr[j]}\n                arr[j]=${arr[i]}\n            fi\n       \
    \ done\n    done\n    echo ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2pnlmpcq.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local result=()\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_index=0\n    local tmp=0\n    for ((i=0; i<k; i++)); do\n\
    \        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_index]=$tmp\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=()\n    local -i k=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i n=0\n    local -i max=0\n    local -i\
    \ max_i=0\n    local -i tmp=0\n    local -i len=0\n    local -i len_k=0\n    local\
    \ -i len_arr=0\n    local -i len_arr_k=0\n    local -i len_arr_k_1=0\n    local\
    \ -i len_arr_k_2=0\n    local -i len_arr_k_3=0\n    local -i len_arr_k_4=0\n \
    \   local -i len_arr_k_5=0\n    local -i len_arr_k_6=0\n    local -i len_arr_k_7=0\n\
    \    local -i len_arr_k_8=0\n    local -i len_arr_k_9=0\n    local -i len_arr_k_10=0\n\
    \    local -i len_arr_k_11=0\n    local -i len_arr_k_12=0\n    local -i len_arr_k_13=0\n\
    \    local -i len_arr_k_14=0\n    local -i len_arr_k_15=0\n    local -i len_arr_k_16=0\n\
    \    local -i len_arr_k_17=0\n    local -i len_arr_k_18=0\n    local -i len_arr_k_19=0\n\
    \    local -i len_arr_k_20=0\n    local -i len_arr_k_21=0\n    local -i len_arr_k_22=0\n\
    \    local -i len_arr_k_23=0\n    local -i len_arr_k_24=0\n    local -i len_arr_k_25=0\n\
    \    local -i len_arr_k_26=0\n    local -i len_arr_k_27=0\n    local -i len_arr_k_28=0\n\
    \    local -i len_arr_k_29=0\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=()\n    local -i k=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i len=0\n    local -i tmp=0\n    local\
    \ -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_len=0\n\
    \    local -i max_tmp=0\n    local -i max_max=0\n    local -i max_max_i=0\n  \
    \  local -i max_max_j=0\n    local -i max_max_len=0\n    local -i max_max_tmp=0\n\
    \    local -i max_max_max=0\n    local -i max_max_max_i=0\n    local -i max_max_max_j=0\n\
    \    local -i max_max_max_len=0\n    local -i max_max_max_tmp=0\n    local -i\
    \ max_max_max_max=0\n    local -i max_max_max_max_i=0\n    local -i max_max_max_max_j=0\n\
    \    local -i max_max_max_max_len=0\n    local -i max_max_max_max_tmp=0\n    local\
    \ -i max_max_max_max_max=0\n    local -i max_max_max_max_max_i=0\n    local -i\
    \ max_max_max_max_max_j=0\n    local -i max_max_max_max_max_len=0\n    local -i\
    \ max_max_max_max_max_tmp=0\n    local -i max_max_max_max_max_max=0\n    local\
    \ -i max_max_max_max_max_max_i=0\n    local -i max_max_max_max_max_max_j=0\n \
    \   local -i max_max_max_max_max_max_len=0\n    local -i max_max_max_max_max_max_tmp=0\n\
    \    local -i max_max_max_max_max_max_max=0\n    local -i max\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local result=()\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 0
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    # 1. Sort the array\n    # 2. Get the last\
    \ k elements\n    # 3. Join the elements with a space\n    # 4. Remove the trailing\
    \ space\n    echo \"$1\" | tr ' ' '\\n' | sort -n | tail -n $2 | tr '\\n' ' '\
    \ | sed 's/ $//'\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003437
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n\
    \                local t=${max[j]}\n                max[j]=${arr[i]}\n       \
    \         arr[i]=$t\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl88s5r0k.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    # sort the array\n    local arr=($(echo \"\
    $1\" | tr ' ' '\\n' | sort -n))\n    # return the last $2 elements\n    echo \"\
    ${arr[@]: -$2}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003437
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo ${arr[i]}\n    done\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i\n    local j\n    local temp\n    local result=()\n\
    \    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n    done\n    for\
    \ ((i=k; i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[\
    \ ${arr[i]} -gt ${result[j]} ]]; then\n                temp=${result[j]}\n   \
    \             result[j]=${arr[i]}\n                arr[i]=$temp\n            fi\n\
    \        done\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a res\n    local -a max\n    local -a min\n    local -a max_res\n\
    \    local -a min_res\n    local -a max_min_res\n    local -a max_max_res\n  \
    \  local -a max_max_min_res\n    local -a max_max_max_res\n    local -a max_max_max_min_res\n\
    \    local -a max_max_max_max_res\n    local -a max_max_max_max_min_res\n    local\
    \ -a max_max_max_max_max_res\n    local -a max_max_max_max_max_min_res\n    local\
    \ -a max_max_max_max_max_max_res\n    local -a max_max_max_max_max_max_min_res\n\
    \    local -a max_max_max_max_max_max_max_res\n    local -a max_max_max_max_max_max_max_min_res\n\
    \    local -a max_max_max_max_max_max_max_max_res\n    local -a max_max_max_max_max_max_max_max_min_res\n\
    \    local -a max_max_max_max_max_max_max_max_max_res\n    local -a max_max_max_max_max_max_max_max_max_min_res\n\
    \    local -a max_max_max_max_max_max_max_max_max_max_res\n    local -a max_max_max_max_max_max_max_max_max_max_min_res\n\
    \    local -a max_max_max_max_max_max_max_max_max_max_max_res\n    local -a max_max_max_max_max_max_max_max_max_max_max_min_res\n\
    \    local -a max_max_max_max_max_max_max_max_max_max_max_max_res\n    local -a\
    \ max_max_max_max_max_max_max_\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpastcj4jq.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=(\"$@\")\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq4676gw7.sh: line 23: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a res\n    local i\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${res[j]} ]]; then\n                res[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${res[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1cppc6oo.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local result=()\n\
    \    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n\
    \        do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for (( i=0; i<k;\
    \ i++ ))\n    do\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo ${arr[i]}\n    done\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a ans\n    local -i i j\n    for ((i=0; i<k; i++)); do\n        ans[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${ans[j]} ]]; then\n                ans[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${ans[@]}\"\
    \ | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd75w7twb.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local result=()\n\
    \    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n    done\n    for\
    \ ((i=k; i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[\
    \ ${arr[i]} -gt ${result[j]} ]]; then\n                tmp=${result[j]}\n    \
    \            result[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local res=()\n\
    \    if [ $len -le $k ]; then\n        echo ${arr[@]}\n        return\n    fi\n\
    \    for ((i=0; i<$k; i++)); do\n        res[$i]=${arr[$i]}\n    done\n    for\
    \ ((i=$k; i<$len; i++)); do\n        for ((j=0; j<$k; j++)); do\n            if\
    \ [ ${arr[$i]} -gt ${res[$j]} ]; then\n                tmp=${res[$j]}\n      \
    \          res[$j]=${arr[$i]}\n                arr[$i]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003437
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a res\n    local i j\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${res[j]} ]]; then\n                res[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        local j\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n\
    \                local tmp=${max[j]}\n                max[j]=${arr[i]}\n     \
    \           arr[i]=$tmp\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcj1o3rqe.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [[ ${arr[i]} -lt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++))\n    do\n        echo -n \"\
    ${arr[i]} \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a result=()\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local max=0\n    local max_index=0\n    local temp=0\n    for ((i=0; i<k;\
    \ i++)); do\n        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        temp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_index]=$temp\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxock0byx.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a max\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    if [[ $len\
    \ -lt $k ]]; then\n        echo \"Error: k is greater than the length of the array\"\
    \n        return 1\n    fi\n    while [[ $i -lt $k ]]; do\n        max[$i]=${arr[$i]}\n\
    \        i=$((i+1))\n    done\n    while [[ $i -lt $len ]]; do\n        j=0\n\
    \        while [[ $j -lt $k ]]; do\n            if [[ ${arr[$i]} -gt ${max[$j]}\
    \ ]]; then\n                max[$j]=${arr[$i]}\n                break\n      \
    \      fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n\
    \    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuotjs1lu.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003437
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a result=()\n    local i=0\n    local j=0\n    local max=0\n    local\
    \ max_index=0\n    local len=${#arr[@]}\n    if [[ $len -lt $k ]]; then\n    \
    \    echo \"Invalid input\"\n        return\n    fi\n    while [[ $i -lt $k ]];\
    \ do\n        max=${arr[0]}\n        max_index=0\n        j=0\n        while [[\
    \ $j -lt $len ]]; do\n            if [[ ${arr[$j]} -gt $max ]]; then\n       \
    \         max=${arr[$j]}\n                max_index=$j\n            fi\n     \
    \       j=$((j+1))\n        done\n        result[$i]=$max\n        arr[$max_index]=0\n\
    \        i=$((i+1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa_l53q61.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr\n    local k\n    local -a max\n\
    \    local i\n    local j\n    local max_index\n    local max_value\n    local\
    \ len\n\n    arr=($1)\n    k=$2\n    len=${#arr[@]}\n    for ((i=0; i<k; i++));\
    \ do\n        max_index=$i\n        max_value=${arr[$i]}\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[$j]} -gt $max_value ]]; then\n   \
    \             max_index=$j\n                max_value=${arr[$j]}\n           \
    \ fi\n        done\n        arr[$i]=$max_value\n        arr[$max_index]=${arr[$i]}\n\
    \    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local max=0\n\
    \    local max_index=0\n    local result=()\n\n    for ((i=0; i<k; i++)); do\n\
    \        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<n-i; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        temp=${arr[n-i-1]}\n        arr[n-i-1]=$max\n        arr[max_index]=$temp\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003437
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n\
    \    local -a res=()\n    local -a tmp=()\n    local i=0\n    local j=0\n    local\
    \ len=${#arr[@]}\n    local max=0\n    local index=0\n    for ((i=0; i<k; i++));\
    \ do\n        res[i]=${arr[i]}\n    done\n    for ((i=k; i<len; i++)); do\n  \
    \      max=${res[0]}\n        index=0\n        for ((j=1; j<k; j++)); do\n   \
    \         if [[ ${res[j]} -gt $max ]]; then\n                max=${res[j]}\n \
    \               index=$j\n            fi\n        done\n        if [[ ${arr[i]}\
    \ -lt $max ]]; then\n            res[index]=${arr[i]}\n        fi\n    done\n\
    \    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb_ga0pl9.sh: line 15: -3 -4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660003437
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -a arr=($1)\n    local k=$2\n    local\
    \ -a res\n    local i j\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${res[j]} ]]; then\n                res[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003436
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    if [ $k -gt $len ]; then\n  \
    \      k=$len\n    fi\n\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n\
    \        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n            if [ ${arr[j]}\
    \ -gt $max ]; then\n                max=${arr[j]}\n                max_idx=$j\n\
    \            fi\n        done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n\
    \        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n    done\n\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003437
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local max=0\n\
    \    local max_idx=0\n    local result=()\n\n    if [ $k -gt $len ]; then\n  \
    \      k=$len\n    fi\n\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n\
    \        max_idx=0\n        for ((j=1; j<len-i; j++)); do\n            if [ ${arr[j]}\
    \ -gt $max ]; then\n                max=${arr[j]}\n                max_idx=$j\n\
    \            fi\n        done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n\
    \        arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n    done\n\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003437
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Example 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be\
    \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n\
    # $2 is an integer\nmaximum() {\n    local -n arr=$1\n    local k=$2\n    local\
    \ -a result\n    local i\n    local j\n    local max\n    local max_index\n  \
    \  for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n   \
    \     for ((j=1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt $max\
    \ ]]; then\n                max=${arr[j]}\n                max_index=$j\n    \
    \        fi\n        done\n        result[i]=$max\n        unset arr[$max_index]\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxycvjaf9.sh: line 15: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660003437
