language: sh
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo \"$((sum * prod))\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpfp66d2e8.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpfp66d2e8.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpfp66d2e8.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local res=1\n  local sum=0\n  for i in $arr; do\n \
    \   if [ $i -lt 0 ]; then\n      res=$((res * -1))\n    elif [ $i -gt 0 ]; then\n\
    \      res=$((res * 1))\n    else\n      res=0\n      break\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((res * sum))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwr89gv_.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    ((prod *= -1))\n    fi\n    ((sum += i < 0 ? -i : i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      continue\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfgqjxg_n.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpfgqjxg_n.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpfgqjxg_n.sh: line 19: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ]; then\n\
    \      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    sum=$((sum\
    \ + i))\n    prod=$((prod * (i < 0 ? -1 : 1)))\n  done\n  echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph8_zjy8t.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmph8_zjy8t.sh: line 18: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + (i * prod)))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      continue\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfgqjxg_n.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpfgqjxg_n.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpfgqjxg_n.sh: line 19: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [ \"$i\" -gt 0 ]; then\n      prod=$((prod * 1))\n    elif [ \"$i\"\
    \ -lt 0 ]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo \"$((sum * prod))\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeny3u8fi.sh: line 14: [: 1 2 2 -4: integer expression expected

    /tmp/tmpeny3u8fi.sh: line 16: [: 1 2 2 -4: integer expression expected

    /tmp/tmpeny3u8fi.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      (( prod *= -1 ))\n    fi\n    (( sum += i ))\n  done\n  echo\
    \ \"$(( sum * prod ))\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpar9bc77f.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpar9bc77f.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpar9bc77f.sh: line 20: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    (( prod *= -1 ))\n    fi\n    (( sum += abs($i) ))\n  done\n  echo $(( prod\
    \ * sum ))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu6z623ed.sh: line 19: ((: sum += abs(1) : syntax error in expression
    (error token is "(1) ")

    /tmp/tmpu6z623ed.sh: line 19: ((: sum += abs(2) : syntax error in expression (error
    token is "(2) ")

    /tmp/tmpu6z623ed.sh: line 19: ((: sum += abs(2) : syntax error in expression (error
    token is "(2) ")

    /tmp/tmpu6z623ed.sh: line 19: ((: sum += abs(-4) : syntax error in expression
    (error token is "(-4) ")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      (( prod *= -1 ))\n    fi\n    (( sum += i ))\n  done\n  echo\
    \ \"$(( prod * sum ))\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp6h7b0jav.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp6h7b0jav.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp6h7b0jav.sh: line 20: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -eq 0 ]; then\n      prod=0\n    elif [ $i -lt 0 ]; then\n      prod=$((prod\
    \ * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local -a arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6v9ye18e.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp6v9ye18e.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp6v9ye18e.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local -a arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvhonpz16.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpvhonpz16.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpvhonpz16.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      (( prod *= -1 ))\n    fi\n    (( sum += i ))\n  done\n  ((\
    \ sum *= prod ))\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzjkype98.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpzjkype98.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpzjkype98.sh: line 20: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt\
    \ 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n  \
    \  fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcswupbr4.sh: line 14: [: too many arguments

    /tmp/tmpcswupbr4.sh: line 16: [: too many arguments

    /tmp/tmpcswupbr4.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    if [[\
    \ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n\
    \  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp0si5gbzl.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp0si5gbzl.sh: line 18: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp0si5gbzl.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ]; then\n\
    \      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ]; then\n\
    \      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      (( prod *= -1 ))\n    fi\n    (( sum += i ))\n  done\n  echo\
    \ \"$(( sum * prod ))\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpar9bc77f.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpar9bc77f.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpar9bc77f.sh: line 20: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local prod=1\n  local sum=0\n  for i in $arr; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    elif [ $i -lt 0 ]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphj399zob.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmphj399zob.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmphj399zob.sh: line 19: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local -a arr\n  local prod_signs\n  local prod_magnitudes\n  local sum_magnitudes\n\
    \  local i\n  local sign\n  local magnitude\n  local result\n\n  arr=($1)\n  prod_signs=1\n\
    \  prod_magnitudes=1\n  sum_magnitudes=0\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    sign=${arr[$i]#-}\n    sign=${sign:+1}\n    sign=${sign:-1}\n    prod_signs=$((prod_signs\
    \ * sign))\n\n    magnitude=${arr[$i]#-}\n    prod_magnitudes=$((prod_magnitudes\
    \ * magnitude))\n    sum_magnitudes=$((sum_magnitudes + magnitude))\n  done\n\n\
    \  result=$((prod_signs * sum_magnitudes))\n  echo $result\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  for i in ${arr[@]}; do\n    if [[ $i\
    \ -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    prod=$((prod * (i / abs(i))))\n\
    \  done\n  echo $prod\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmptcrt5bw0.sh: line 17: prod * (i / abs(i)): division by 0 (error
    token is "abs(i))")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    if [[\
    \ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n\
    \  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp0si5gbzl.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp0si5gbzl.sh: line 18: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp0si5gbzl.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local prod=1\n  local sum=0\n  local sign\n  for num\
    \ in $arr; do\n    if [ $num -gt 0 ]; then\n      sign=1\n    elif [ $num -lt\
    \ 0 ]; then\n      sign=-1\n    else\n      sign=0\n    fi\n    prod=$((prod *\
    \ sign))\n    sum=$((sum + num))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpatrlnizx.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpatrlnizx.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpatrlnizx.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwe8w5u2j.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwe8w5u2j.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpwe8w5u2j.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    sum=$((sum + i))\n    prod=$((prod * i))\n  done\n  echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ];\
    \ then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local len=${#arr[@]}\n  local prod=1\n  local sum=0\n\
    \  for ((i=0; i<len; i++)); do\n    if [[ ${arr[$i]} -gt 0 ]]; then\n      prod=$((prod\
    \ * 1))\n    elif [[ ${arr[$i]} -lt 0 ]]; then\n      prod=$((prod * -1))\n  \
    \  else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum + ${arr[$i]}))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  for i in ${arr[@]}; do\n    if [[ $i\
    \ -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    if [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    sum=$((sum\
    \ + i))\n    prod=$((prod * i / abs(i)))\n  done\n  echo $((sum * prod))\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu9vm18xn.sh: line 19: prod * i / abs(i): division by 0 (error token
    is "abs(i)")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    (( prod *= -1 ))\n    fi\n    (( sum += i ))\n  done\n  echo $(( sum * prod\
    \ ))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  local num\n  for num in\
    \ $arr; do\n    if [ $num -eq 0 ]; then\n      prod=0\n      break\n    fi\n \
    \   if [ $num -lt 0 ]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum\
    \ + num))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    case $i in\n      0)\n        ;;\n      *)\n        prod=$((prod * ${i:0:1}))\n\
    \        sum=$((sum + ${i:0:1} * ${i:1}))\n        ;;\n    esac\n  done\n  echo\
    \ $((prod * sum))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1wubg9m1.sh: line 19: sum + 1 * : syntax error: operand expected
    (error token is "* ")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local prod=1\n  local sum=0\n  for i in $arr; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n      prod=$((prod\
    \ * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpatrlnizx.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpatrlnizx.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpatrlnizx.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwr89gv_.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwr89gv_.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    elif [ $i -lt 0 ]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ];\
    \ then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local prod=1\n  local sum=0\n  for i in $arr; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local prod=1\n  local sum=0\n  for i in $arr; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    if [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * -1))\n  \
    \  fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ];\
    \ then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwr89gv_.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    if [[ $i -lt 0\
    \ ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      continue\n    fi\n    prod=$((prod\
    \ * (i / abs(i))))\n    sum=$((sum + abs(i)))\n  done\n  echo $((prod * sum))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwar3p2vi.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwar3p2vi.sh: line 18: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + ${i#-}))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local -a arr=(\"$@\")\n  local -i prod=1\n  local -i sum=0\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n \
    \   elif [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod\
    \ * 0))\n    fi\n    sum=$((sum + i))\n  done\n  echo \"$((sum * prod))\"\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7up77hak.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp7up77hak.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp7up77hak.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod * 1))\n   \
    \ elif [[ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod *\
    \ -1))\n    else\n      prod=$((prod * 0))\n    fi\n  done\n  echo $((sum * prod))\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n      prod=$((prod\
    \ * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  local sign=0\n  for\
    \ i in $arr; do\n    if [[ $i -gt 0 ]]; then\n      sign=1\n    elif [[ $i -lt\
    \ 0 ]]; then\n      sign=-1\n    else\n      sign=0\n    fi\n    sum=$((sum +\
    \ i))\n    prod=$((prod * sign))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ]; then\n\
    \      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  for i in \"${arr[@]}\"; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps0ep9uul.sh: line 13: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmps0ep9uul.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0\
    \ ]]; then\n      ((prod *= -1))\n    fi\n    ((sum += i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local prod=1\n  local sum=0\n  for i in $arr; do\n\
    \    if [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    elif [ $i -lt 0 ]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ];\
    \ then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -gt 0 ]]; then\n      sum=$((sum + i))\n      prod=$((prod * 1))\n   \
    \ elif [[ $i -lt 0 ]]; then\n      sum=$((sum + i * -1))\n      prod=$((prod *\
    \ -1))\n    fi\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n\
    \      ((prod *= -1))\n    fi\n    ((sum += i))\n  done\n  ((sum *= prod))\n \
    \ echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpedxvtvif.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpedxvtvif.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpedxvtvif.sh: line 19: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0\
    \ ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwr89gv_.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod*-1))\n    elif [ $i -gt 0 ]; then\n\
    \      prod=$((prod*1))\n    else\n      prod=$((prod*0))\n    fi\n    sum=$((sum+i))\n\
    \  done\n  echo $((sum*prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0\
    \ ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      ((sum += i))\n      ((prod *= 1))\n \
    \   elif [[ $i -lt 0 ]]; then\n      ((sum += i * -1))\n      ((prod *= -1))\n\
    \    fi\n  done\n  echo \"$sum * $prod\" | bc\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpahnf_v5x.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpahnf_v5x.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local -a arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvhonpz16.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpvhonpz16.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpvhonpz16.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ];\
    \ then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ];\
    \ then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  for i in ${arr[@]}; do\n    if [[ $i\
    \ -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0 ]]; then\n \
    \     prod=$((prod * -1))\n    fi\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * -1))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy9odjxui.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpy9odjxui.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpy9odjxui.sh: line 22: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local prod=1\n  local sum=0\n  for i in $arr; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  local sign=0\n  local num=0\n\
    \  for i in $arr; do\n    num=$(echo $i | sed 's/^-//')\n    sign=$(echo $i |\
    \ sed 's/^-//' | sed 's/^0//')\n    if [ -z \"$sign\" ]; then\n      sign=0\n\
    \    elif [ \"$num\" -eq \"$num\" ]; then\n      sign=1\n    else\n      sign=-1\n\
    \    fi\n    sum=$((sum + num))\n    prod=$((prod * sign))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [ $i -gt 0 ]; then\n      sum=$((sum + i))\n      prod=$((prod * 1))\n\
    \    elif [ $i -lt 0 ]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    else\n      prod=$((prod * 0))\n    fi\n  done\n  echo $((sum *\
    \ prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpatrlnizx.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpatrlnizx.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpatrlnizx.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphj399zob.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmphj399zob.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmphj399zob.sh: line 19: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * -1))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy9odjxui.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpy9odjxui.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpy9odjxui.sh: line 22: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$(( prod * -1 ))\n    fi\n    sum=$(( sum + i ))\n  done\n\
    \  echo $(( sum * prod ))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp6hmb_sh1.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp6hmb_sh1.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp6hmb_sh1.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local -a arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * -1))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0tpgwcq6.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp0tpgwcq6.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp0tpgwcq6.sh: line 22: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10pbyjsv.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp10pbyjsv.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    elif [ $i -lt 0 ]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    elif [ $i -lt 0 ]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  for i in ${arr[@]}; do\n    if [[ $i\
    \ -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0 ]]; then\n \
    \     prod=$((prod * -1))\n    fi\n  done\n  echo $prod\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$(echo $1 | tr ' ' '\\n' | sort -n)\n  local prod=1\n  local\
    \ sum=0\n  local num\n  for num in $arr; do\n    if [[ $num -gt 0 ]]; then\n \
    \     sum=$((sum + num))\n    elif [[ $num -lt 0 ]]; then\n      prod=$((prod\
    \ * -1))\n      sum=$((sum - num))\n    fi\n  done\n  echo $((sum * prod))\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local prod=1\n  local sum=0\n  for i in $1; do\n    if [ $i -lt 0 ]; then\n\
    \      prod=$((prod * -1))\n    elif [ $i -gt 0 ]; then\n      prod=$((prod *\
    \ 1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt\
    \ 0 ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n \
    \   fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tfny8bg.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp5tfny8bg.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwr89gv_.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0\
    \ ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ];\
    \ then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local sum=0\n  local prod=1\n  for i in $arr; do\n\
    \    if [ $i -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ $i -gt 0 ];\
    \ then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  for i in \"${arr[@]}\"; do\n    if\
    \ [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0 ]]; then\n\
    \      prod=$((prod * 1))\n    else\n      prod=0\n      break\n    fi\n  done\n\
    \  echo $prod\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyxwoy9ad.sh: line 13: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpyxwoy9ad.sh: line 15: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      ((prod *= -1))\n    fi\n    ((sum += i))\n  done\n  echo \"\
    $((sum * prod))\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcqf_q2bw.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpcqf_q2bw.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpcqf_q2bw.sh: line 20: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0\
    \ ]]; then\n      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n   \
    \ fi\n    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [ \"$i\" -gt 0 ]; then\n      prod=$((prod * 1))\n    elif [ \"$i\"\
    \ -lt 0 ]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo \"$((sum * prod))\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeny3u8fi.sh: line 14: [: 1 2 2 -4: integer expression expected

    /tmp/tmpeny3u8fi.sh: line 16: [: 1 2 2 -4: integer expression expected

    /tmp/tmpeny3u8fi.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local sum=0\n  local prod=1\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    if [[\
    \ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n\
    \  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp0si5gbzl.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp0si5gbzl.sh: line 18: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp0si5gbzl.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt 0 ]];\
    \ then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local sum=0\n  local prod=1\n  for i in $arr; do\n    if\
    \ [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt 0 ]]; then\n\
    \      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [ \"$i\" -gt 0 ]; then\n      sum=$((sum + i))\n      prod=$((prod\
    \ * 1))\n    elif [ \"$i\" -lt 0 ]; then\n      sum=$((sum + i * -1))\n      prod=$((prod\
    \ * -1))\n    else\n      prod=$((prod * 0))\n    fi\n  done\n  echo \"$((sum\
    \ * prod))\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi9jijkjx.sh: line 14: [: 1 2 2 -4: integer expression expected

    /tmp/tmpi9jijkjx.sh: line 17: [: 1 2 2 -4: integer expression expected

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=($1)\n  local prod=1\n  local sum=0\n  for i in ${arr[@]}; do\n\
    \    if [[ $i -eq 0 ]]; then\n      prod=0\n    elif [[ $i -lt 0 ]]; then\n  \
    \    prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n  echo $((sum\
    \ * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -gt 0 ]]; then\n      prod=$((prod * 1))\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n\
    \    fi\n    sum=$((sum + i))\n  done\n  echo \"$((sum * prod))\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp954xm5qq.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp954xm5qq.sh: line 16: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmp954xm5qq.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    elif [[ $i -lt\
    \ 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwr89gv_.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 17: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpmwr89gv_.sh: line 20: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999749
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=$1\n  local prod=1\n  local sum=0\n  for i in $arr; do\n    if\
    \ [[ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    elif [[ $i -gt 0 ]]; then\n\
    \      prod=$((prod * 1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local prod=1\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    if [ \"$i\" -lt 0 ]; then\n      prod=$((prod * -1))\n    elif [ \"\
    $i\" -gt 0 ]; then\n      prod=$((prod * 1))\n    else\n      prod=0\n    fi\n\
    \    sum=$((sum + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjenu06ka.sh: line 14: [: 1 2 2 -4: integer expression expected

    /tmp/tmpjenu06ka.sh: line 16: [: 1 2 2 -4: integer expression expected

    /tmp/tmpjenu06ka.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=\"$1\"\n  local prod=1\n  local sum=0\n  for i in $arr; do\n\
    \    if [ $i -gt 0 ]; then\n      prod=$((prod * 1))\n    elif [ $i -lt 0 ]; then\n\
    \      prod=$((prod * -1))\n    else\n      prod=$((prod * 0))\n    fi\n    sum=$((sum\
    \ + i))\n  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999750
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n#\n# $1 is a space-separated list\nprod_signs()\
    \ {\n  local arr=(\"$@\")\n  local sum=0\n  local prod=1\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -eq 0 ]]; then\n      prod=0\n      break\n    fi\n    if [[\
    \ $i -lt 0 ]]; then\n      prod=$((prod * -1))\n    fi\n    sum=$((sum + i))\n\
    \  done\n  echo $((sum * prod))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpwmeqdn15.sh: line 14: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwmeqdn15.sh: line 18: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpwmeqdn15.sh: line 21: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1659999750
