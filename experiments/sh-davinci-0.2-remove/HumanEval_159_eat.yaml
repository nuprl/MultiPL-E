name: HumanEval_159_eat
language: sh
prompt: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
  \ meals.\n# you should return an array of [ total number of eaten carrots after\
  \ your meals,\n# the number of carrots left after your meals ]\n# if there are not\
  \ enough remaining carrots, you will eat all remaining carrots, but will still be\
  \ hungry.\n# Example:\n# Variables:\n# @number : integer\n# the number of carrots\
  \ that you have eaten.\n# @need : integer\n# the number of carrots that you need\
  \ to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist\
  \ in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0\
  \ <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n\
  # $3 is an integer\neat() {\n"
tests: "}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
  12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
  \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9\
  \ 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
completions: ["  if [ $2 -gt $3 ]; then\n    echo \"[$(($1 + $3)), 0]\"\n  else\n\
    \    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  fi", "  if [ $2 -le $3 ]; then\n\
    \    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n  else\n    echo \"[$(( $1 + $3\
    \ )), 0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $2 -le $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n\
    \    else\n      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[0,\
    \ 0]\"\n  fi", "  if [ $1 -ge $2 ]; then\n    echo \"[$2, $3]\"\n  elif [ $3 -ge\
    \ $2 ]; then\n    echo \"[$2, $(( $3 - $2 ))]\"\n  else\n    echo \"[$3, 0]\"\n\
    \  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n    \
    \  echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", " \
    \ if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ];\
    \ then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1\
    \ + $3)), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\n  fi", "  if [ $3\
    \ -ge $2 ]; then\n    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n  else\n    echo\
    \ \"[$(( $1 + $3 )), 0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge\
    \ 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error:\
    \ invalid input\"\n  fi", "  local eaten=$1\n  local need=$2\n  local remaining=$3\n\
    \  local total=$((eaten + need))\n  if [[ $total -gt $remaining ]]; then\n   \
    \ echo \"[$remaining, 0]\"\n  else\n    echo \"[$total, $((remaining - total))]\"\
    \n  fi", "    if [[ $1 -ge 0 && $1 -le 1000 && $2 -ge 0 && $2 -le 1000 && $3 -ge\
    \ 0 && $3 -le 1000 ]]; then\n        if [[ $1 -eq 0 ]]; then\n            echo\
    \ \"[0, $3]\"\n        elif [[ $1 -eq $2 ]]; then\n            echo \"[$1, 0]\"\
    \n        elif [[ $1 -lt $2 ]]; then\n            if [[ $3 -gt 0 ]]; then\n  \
    \              if [[ $3 -ge $2 ]]; then\n                    echo \"[$2, $(( $3\
    \ - $2 ))]\"\n                else\n                    echo \"[$3, 0]\"\n   \
    \             fi\n            else\n                echo \"[0, 0]\"\n        \
    \    fi\n        else\n            echo \"[$1, 0]\"\n        fi\n    else\n  \
    \      echo \"[0, 0]\"\n    fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge\
    \ 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n\
    \      if [ $2 -le $3 ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n\
    \      else\n        echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo\
    \ \"Constrain: * 0 <= number <= 1000 * 0 <= need <= 1000 * 0 <= remaining <= 1000\"\
    \n    fi\n  else\n    echo \"Constrain: * 0 <= number <= 1000 * 0 <= need <= 1000\
    \ * 0 <= remaining <= 1000\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3\
    \ -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3\
    \ - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo\
    \ \"Error: invalid input\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3\
    \ -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ];\
    \ then\n      if [ $2 -le $3 ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n      else\n        echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo\
    \ \"Constrain: 0 <= number <= 1000\"\n    fi\n  else\n    echo \"Constrain: 0\
    \ <= number <= 1000\"\n  fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local total=0\n  local left=0\n  if [ $remaining -ge $need ]; then\n    total=$((number\
    \ + need))\n    left=$((remaining - need))\n  else\n    total=$((number + remaining))\n\
    \    left=0\n  fi\n  echo \"[$total, $left]\"", "  if [ $1 -ge $2 ]; then\n  \
    \  echo \"[$2, $3]\"\n  elif [ $3 -ge $2 ]; then\n    echo \"[$2, $(( $3 - $2\
    \ ))]\"\n  else\n    echo \"[$3, 0]\"\n  fi", "    if [ $1 -ge $2 ]; then\n  \
    \      echo \"[$2, $3]\"\n    elif [ $3 -ge $2 ]; then\n        echo \"[$2, $((\
    \ $3 - $2 ))]\"\n    else\n        echo \"[$3, 0]\"\n    fi", "  if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le\
    \ 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo\
    \ \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n      else\n        echo \"[$(( $1 + $3\
    \ )), 0]\"\n      fi\n    else\n      echo \"[0, 0]\"\n    fi\n  else\n    echo\
    \ \"[0, 0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n   \
    \ else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n\
    \  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n    \
    \  echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\n  fi",
  "  local number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number\
    \ + need))\n  local left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n \
    \   left=0\n  fi\n  echo \"[$total, $left]\"", "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  local total=$((number + need))\n  local left=$((remaining\
    \ - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n  echo \"[$total,\
    \ $left]\"", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if\
    \ [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le\
    \ $3 ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n    \
    \    echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"[0, 0]\"\n \
    \   fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [[ $1 -ge 0 && $1 -le 1000 &&\
    \ $2 -ge 0 && $2 -le 1000 && $3 -ge 0 && $3 -le 1000 ]]; then\n    if [[ $1 -eq\
    \ 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n      echo \"[0,0]\"\n    elif [[ $1 -eq\
    \ 0 && $2 -eq 0 && $3 -ne 0 ]]; then\n      echo \"[0,$3]\"\n    elif [[ $1 -eq\
    \ 0 && $2 -ne 0 && $3 -eq 0 ]]; then\n      echo \"[0,0]\"\n    elif [[ $1 -eq\
    \ 0 && $2 -ne 0 && $3 -ne 0 ]]; then\n      if [[ $2 -gt $3 ]]; then\n       \
    \ echo \"[$3,0]\"\n      else\n        echo \"[$2,$(($3-$2))]\"\n      fi\n  \
    \  elif [[ $1 -ne 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n      echo \"[$1,0]\"\n\
    \    elif [[ $1 -ne 0 && $2 -eq 0 && $3 -ne 0 ]]; then\n      echo \"[$1,$3]\"\
    \n    elif [[ $1 -ne 0 && $2 -ne 0 && $3 -eq 0 ]]; then\n      echo \"[$(($1+$2)),0]\"\
    \n    elif [[ $1 -ne 0 && $2 -ne 0 && $3 -ne 0 ]]; then\n      if [[ $1 -gt $3\
    \ ]]; then\n        echo \"[$(($1+$2)),0]\"\n      elif [[ $1 -eq $3 ]]; then\n\
    \        echo \"[$(($1+$2)),0]\"\n      elif [[ $1 -lt $3 ]]; then\n        if\
    \ [[ $2 -gt $3 ]]; then\n          echo \"[$(($1+$3)),0]\"\n        elif [[ $2\
    \ -eq $3 ]]; then\n          echo \"[$(($1+$2)),0]\"\n        elif [[ $2 -lt $3\
    \ ]]; then\n          echo \"[$(($1+$2)),$(($3-$1-$2))]\"\n        fi\n      fi\n\
    \    fi\n", "  if [[ $1 -ge 0 && $1 -le 1000 && $2 -ge 0 && $2 -le 1000 && $3\
    \ -ge 0 && $3 -le 1000 ]]; then\n    if [[ $1 -eq 0 && $2 -eq 0 && $3 -eq 0 ]];\
    \ then\n      echo \"[0,0]\"\n    elif [[ $1 -eq 0 && $2 -eq 0 && $3 -ne 0 ]];\
    \ then\n      echo \"[0,$3]\"\n    elif [[ $1 -eq 0 && $2 -ne 0 && $3 -eq 0 ]];\
    \ then\n      echo \"[0,0]\"\n    elif [[ $1 -eq 0 && $2 -ne 0 && $3 -ne 0 ]];\
    \ then\n      if [[ $2 -le $3 ]]; then\n        echo \"[$2,$(( $3 - $2 ))]\"\n\
    \      else\n        echo \"[$3,0]\"\n      fi\n    elif [[ $1 -ne 0 && $2 -eq\
    \ 0 && $3 -eq 0 ]]; then\n      echo \"[$1,0]\"\n    elif [[ $1 -ne 0 && $2 -eq\
    \ 0 && $3 -ne 0 ]]; then\n      echo \"[$1,$3]\"\n    elif [[ $1 -ne 0 && $2 -ne\
    \ 0 && $3 -eq 0 ]]; then\n      echo \"[$(( $1 + $2 )),0]\"\n    elif [[ $1 -ne\
    \ 0 && $2 -ne 0 && $3 -ne 0 ]]; then\n      if [[ $2 -le $3 ]]; then\n       \
    \ echo \"[$(( $1 + $2 )),$(( $3 - $2 ))]\"\n      else\n        echo \"[$(( $1\
    \ + $3 )),0]\"\n      fi\n    fi\n  else\n    echo \"Error: invalid input\"\n\
    \  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1\
    \ -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -gt $3\
    \ ]; then\n        echo \"[$(($1 + $3)), 0]\"\n      else\n        echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n      fi\n    else\n      echo \"Error: Constrain:\
    \ * 0 <= number <= 1000 * 0 <= need <= 1000 * 0 <= remaining <= 1000\"\n    fi\n\
    \  else\n    echo \"Error: Variables: @number : integer the number of carrots\
    \ that you have eaten. @need : integer the number of carrots that you need to\
    \ eat. @remaining : integer the number of remaining carrots thet exist in stock\"\
    \n  fi", "  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo \"\
    Error: the number of carrots must be positive\"\n    exit 1\n  fi\n  if [ $1 -gt\
    \ 1000 ] || [ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n    echo \"Error: the number\
    \ of carrots must be less than 1000\"\n    exit 1\n  fi\n  if [ $2 -gt $3 ]; then\n\
    \    echo \"Error: the number of carrots that you need to eat must be less than\
    \ the number of remaining carrots\"\n    exit 1\n  fi\n  if [ $1 -gt $3 ]; then\n\
    \    echo \"Error: the number of carrots that you have eaten must be less than\
    \ the number of remaining carrots\"\n    exit 1\n  fi\n  if [ $1 -gt $2 ]; then\n\
    \    echo \"Error: the number of carrots that you have eaten must be less than\
    \ the number of carrots that you need to eat\"\n    exit 1\n  fi\n  if [ $1 -eq\
    \ $2 ]; then\n    echo \"Error: the number of carrots that you have eaten must\
    \ be less than the number of carrots that you need to eat\"\n    exit 1\n  fi\n\
    \  if [ $2 -eq $3 ]; then\n    echo \"Error: the number of carrots that you need\
    \ to eat must be less than the number of remaining carrots\"\n    exit 1\n  fi\n\
    \  if [ $1 -eq $3 ]; then\n    echo \"Error: the number of carrots that you have\
    \ eaten must be less than the number of remaining carrots\"\n    exit 1\n  fi\n\
    \  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: the\
    \ number of carrots must be positive\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] &&\
    \ [ $2 -eq 0 ]; then\n    echo \"Error: the number of carrots that you have eaten\
    \ must be less than the number of carrots that you need to eat\"\n    exit 1\n\
    \  fi\n  if [ $1 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: the number of\
    \ carrots that you have eaten must be less than the number of remaining carrots\"\
    \n", "  local number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number\
    \ + remaining))\n  local left=$((total - need))\n  if [[ $left -lt 0 ]]; then\n\
    \    echo \"[$total, 0]\"\n  else\n    echo \"[$total, $left]\"\n  fi", "  if\
    \ [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] &&\
    \ [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n   \
    \     echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo \"[$(($1\
    \ + $3)), 0]\"\n      fi\n    else\n      echo \"[0, 0]\"\n    fi\n  else\n  \
    \  echo \"[0, 0]\"\n  fi", "  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ];\
    \ then\n    echo \"Error: all arguments must be positive integers\"\n    exit\
    \ 1\n  fi\n  if [ $1 -gt 1000 ] || [ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n\
    \    echo \"Error: all arguments must be less than or equal to 1000\"\n    exit\
    \ 1\n  fi\n  if [ $2 -gt $3 ]; then\n    echo \"Error: need must be less than\
    \ or equal to remaining\"\n    exit 1\n  fi\n  if [ $1 -gt $3 ]; then\n    echo\
    \ \"Error: number must be less than or equal to remaining\"\n    exit 1\n  fi\n\
    \  if [ $1 -gt $2 ]; then\n    echo \"Error: number must be less than or equal\
    \ to need\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Error: number\
    \ must be less than need\"\n    exit 1\n  fi\n  if [ $1 -eq $3 ]; then\n    echo\
    \ \"Error: number must be less than remaining\"\n    exit 1\n  fi\n  if [ $2 -eq\
    \ $3 ]; then\n    echo \"Error: need must be less than remaining\"\n    exit 1\n\
    \  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error:\
    \ at least one argument must be greater than 0\"\n    exit 1\n  fi\n  if [ $1\
    \ -eq 0 ] && [ $2 -eq 0 ]; then\n    echo \"Error: at least one argument must\
    \ be greater than 0\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $3 -eq 0 ]; then\n\
    \    echo \"Error: at least one argument must be greater than 0\"\n    exit 1\n\
    \  fi\n  if [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: at least one\
    \ argument must be greater than 0\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ]; then\n\
    \    echo \"Error: at least one argument must be greater than 0\"\n    exit 1\n\
    \  fi\n  if", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if\
    \ [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n\
    \      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi",
  "  local number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number\
    \ + remaining))\n  local eaten=$((total - need))\n  echo \"[$eaten, $need]\"",
  "  # Write your code here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if\
    \ [ $1 -ge $2 ]; then\n        echo \"[$2, 0]\"\n      else\n        if [ $3 -ge\
    \ $2 ]; then\n          echo \"[$2, $((3 - 2))]\"\n        else\n          echo\
    \ \"[$3, 0]\"\n        fi\n      fi\n    fi\n  fi", "  if [ $1 -ge 0 ] && [ $2\
    \ -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n\
    \  else\n    echo \"error\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3\
    \ -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ];\
    \ then\n      if [ $2 -le $3 ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n      else\n        echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo\
    \ \"Error: Constrain failed\"\n    fi\n  else\n    echo \"Error: Constrain failed\"\
    \n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1\
    \ -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3\
    \ ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n       \
    \ echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"error\"\n    fi\n\
    \  else\n    echo \"error\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3\
    \ -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3\
    \ - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo\
    \ \"Error: Invalid input\"\n  fi", "  if [ $1 -ge $2 ]; then\n    echo \"[$2,\
    \ 0]\"\n  elif [ $3 -ge $2 ]; then\n    echo \"[$1, $(( $2 - $1 ))]\"\n  else\n\
    \    echo \"[$3, 0]\"\n  fi", "  if [ $1 -ge $2 ]; then\n    echo \"[$2, $3]\"\
    \n  elif [ $3 -ge $2 ]; then\n    echo \"[$2, $((3-2))]\"\n  else\n    echo \"\
    [$3, 0]\"\n  fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local result=()\n  if [ $remaining -lt $need ]; then\n    result[0]=$((number\
    \ + remaining))\n    result[1]=0\n  else\n    result[0]=$((number + need))\n \
    \   result[1]=$((remaining - need))\n  fi\n  echo ${result[@]}", "  if [ $1 -ge\
    \ 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n    \
    \  echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 +\
    \ $3 )), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi", "  local\
    \ number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number +\
    \ need))\n  local left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n \
    \   left=0\n  fi\n  echo \"[$total, $left]\"", "  # your code here\n  if [ $1\
    \ -ge $2 ]\n  then\n    echo \"[$2, 0]\"\n  elif [ $3 -ge $2 ]\n  then\n    echo\
    \ \"[$2, $((3 - 2))]\"\n  else\n    echo \"[$3, 0]\"\n  fi", "  if [ $1 -ge 0\
    \ ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le\
    \ 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo\
    \ \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n      else\n        echo \"[$(( $1 + $3\
    \ )), 0]\"\n      fi\n    else\n      echo \"Invalid input\"\n    fi\n  else\n\
    \    echo \"Invalid input\"\n  fi", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  local total=$((number + remaining))\n  local eaten=$((total\
    \ - remaining))\n  if [ $total -lt $need ]; then\n    echo \"[$eaten, $remaining]\"\
    \n  else\n    echo \"[$need, $((total - need))]\"\n  fi", "  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0\
    \ ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[ $(( $1 + $2 )), $(( $3 -\
    \ $2 )) ]\"\n    else\n      echo \"[ $(( $1 + $3 )), 0 ]\"\n    fi\n  else\n\
    \    echo \"Invalid input\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3\
    \ -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3\
    \ - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo\
    \ \"[0, 0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $2 -le $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n\
    \    else\n      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[0,\
    \ 0]\"\n  fi", "  if [ $1 -ge $2 ]; then\n    echo \"[$2,0]\"\n  elif [ $3 -ge\
    \ $2 ]; then\n    echo \"[$1,$(($2-$1))]\"\n  else\n    echo \"[$3,0]\"\n  fi",
  "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ]\
    \ && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $1 -ge $2 ]; then\n\
    \        echo \"[$1,0]\"\n      else\n        if [ $3 -ge $2 ]; then\n       \
    \   echo \"[$2,$(( $3 - $2 ))]\"\n        else\n          echo \"[$3,0]\"\n  \
    \      fi\n      fi\n    else\n      echo \"[0,0]\"\n    fi\n  else\n    echo\
    \ \"[0,0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if\
    \ [ $2 -le $3 ]; then\n        echo \"[ $1 + $2, $3 - $2 ]\"\n      else\n   \
    \     echo \"[ $1 + $3, 0 ]\"\n      fi\n    else\n      echo \"Error: Constrain\"\
    \n    fi\n  else\n    echo \"Error: Constrain\"\n  fi", "  if [ $1 -ge 0 ] &&\
    \ [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"\
    [$1, $2]\"\n    else\n      echo \"[$1, $3]\"\n    fi\n  else\n    echo \"[0,\
    \ 0]\"\n  fi", "  if [ $2 -le $3 ]; then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge\
    \ 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3\
    \ -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo \"[$(( $1 + $2\
    \ )), $(( $3 - $2 ))]\"\n      else\n        echo \"[$(( $1 + $3 )), 0]\"\n  \
    \    fi\n    else\n      echo \"Error: Constrain: * 0 <= number <= 1000 * 0 <=\
    \ need <= 1000 * 0 <= remaining <= 1000\"\n    fi\n  else\n    echo \"Error: Variables:\
    \ @number : integer the number of carrots that you have eaten. @need : integer\
    \ the number of carrots that you need to eat. @remaining : integer the number\
    \ of remaining carrots thet exist in stock\"\n  fi", "  if [ $1 -ge 0 ] && [ $2\
    \ -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n\
    \  else\n    echo \"error\"\n  fi", "  if [[ $1 -lt 0 || $2 -lt 0 || $3 -lt 0\
    \ ]]; then\n    echo \"0 0\"\n  elif [[ $1 -gt $3 ]]; then\n    echo \"$3 0\"\n\
    \  elif [[ $1 -eq $3 ]]; then\n    echo \"$3 0\"\n  elif [[ $1 -lt $3 ]]; then\n\
    \    if [[ $1 -eq 0 ]]; then\n      if [[ $2 -eq 0 ]]; then\n        echo \"$3\
    \ $3\"\n      elif [[ $2 -lt $3 ]]; then\n        echo \"$2 $(( $3 - $2 ))\"\n\
    \      elif [[ $2 -eq $3 ]]; then\n        echo \"$2 0\"\n      elif [[ $2 -gt\
    \ $3 ]]; then\n        echo \"$3 0\"\n      fi\n    elif [[ $1 -lt $3 ]]; then\n\
    \      if [[ $2 -eq 0 ]]; then\n        echo \"$1 $(( $3 - $1 ))\"\n      elif\
    \ [[ $2 -lt $3 ]]; then\n        echo \"$(( $1 + $2 )) $(( $3 - $1 - $2 ))\"\n\
    \      elif [[ $2 -eq $3 ]]; then\n        echo \"$(( $1 + $2 )) 0\"\n      elif\
    \ [[ $2 -gt $3 ]]; then\n        echo \"$(( $1 + $3 )) 0\"\n      fi\n    fi\n\
    \  fi", "  if [ $2 -gt $3 ]; then\n    echo \"[$(($1 + $3)), 0]\"\n  else\n  \
    \  echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge\
    \ 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3\
    \ -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n      else\n        echo \"[$(($1 + $3)), 0]\"\n      fi\n\
    \    else\n      echo \"Constrain failed\"\n    fi\n  else\n    echo \"Constrain\
    \ failed\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if\
    \ [ $2 -le $3 ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n\
    \        echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain\
    \ failed\"\n    fi\n  else\n    echo \"Error: Constrain failed\"\n  fi", "  if\
    \ [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] &&\
    \ [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -gt $3 ]; then\n   \
    \     echo \"[$(($1 + $3)), 0]\"\n      else\n        echo \"[$(($1 + $2)), $(($3\
    \ - $2))]\"\n      fi\n    else\n      echo \"Error: The number of carrots that\
    \ you have eaten, the number of carrots that you need to eat, the number of remaining\
    \ carrots thet exist in stock must be less than or equal to 1000.\"\n    fi\n\
    \  else\n    echo \"Error: The number of carrots that you have eaten, the number\
    \ of carrots that you need to eat, the number of remaining carrots thet exist\
    \ in stock must be greater than or equal to 0.\"\n  fi", "  if [ $1 -gt $3 ];\
    \ then\n    echo \"[$3, 0]\"\n  elif [ $1 -eq $3 ]; then\n    echo \"[$3, 0]\"\
    \n  elif [ $1 -lt $3 ]; then\n    if [ $2 -gt $3 ]; then\n      echo \"[$3, 0]\"\
    \n    elif [ $2 -eq $3 ]; then\n      echo \"[$3, 0]\"\n    elif [ $2 -lt $3 ];\
    \ then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    fi\n  fi", "  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=0\n  local left=0\n  if\
    \ [ $remaining -ge $need ]; then\n    total=$((number + need))\n    left=$((remaining\
    \ - need))\n  else\n    total=$((number + remaining))\n    left=0\n  fi\n  echo\
    \ \"[$total, $left]\"", "  # your code here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ]\
    \ && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n\
    \    echo \"[0, 0]\"\n  fi", "  if [[ $1 -ge 0 && $1 -le 1000 && $2 -ge 0 && $2\
    \ -le 1000 && $3 -ge 0 && $3 -le 1000 ]]; then\n    if [[ $1 -ge $2 ]]; then\n\
    \      echo \"[$1, 0]\"\n    elif [[ $1 -lt $2 && $3 -eq 0 ]]; then\n      echo\
    \ \"[$1, 0]\"\n    elif [[ $1 -lt $2 && $3 -gt 0 ]]; then\n      if [[ $3 -ge\
    \ $2 ]]; then\n        echo \"[$2, $(( $3 - $2 ))]\"\n      elif [[ $3 -lt $2\
    \ ]]; then\n        echo \"[$3, 0]\"\n      fi\n    fi\n  fi", "  if [ $1 -ge\
    \ 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n    \
    \  echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)),\
    \ 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi", "  if [ $1 -ge\
    \ $2 ]; then\n    echo \"[$2, $3]\"\n  elif [ $3 -ge $2 ]; then\n    echo \"[$2,\
    \ $(( $3 - $2 ))]\"\n  else\n    echo \"[$3, 0]\"\n  fi", "  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local eaten=$((total - need))\n  local left=$((need - total))\n  local result=()\n\
    \  if [ $left -lt 0 ]; then\n    result=($total 0)\n  else\n    result=($eaten\
    \ $left)\n  fi\n  echo ${result[@]}", "  if [ $1 -ge $2 ]; then\n    echo \"[$2,\
    \ $3]\"\n  elif [ $3 -ge $2 ]; then\n    echo \"[$2, $(( $3 - $2 ))]\"\n  else\n\
    \    echo \"[$3, 0]\"\n  fi", "  if [ $3 -ge $2 ]; then\n    echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi", "  # your code\
    \ here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le\
    \ $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n    \
    \  echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", " \
    \ if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000\
    \ ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n\
    \        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo \"[$(($1\
    \ + $3)), 0]\"\n      fi\n    else\n      echo \"Constrain: 0 <= number <= 1000,\
    \ 0 <= need <= 1000, 0 <= remaining <= 1000\"\n    fi\n  else\n    echo \"Constrain:\
    \ 0 <= number <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n  fi", " \
    \ if [ $2 -gt $3 ]; then\n    echo \"[$(($1 + $3)), 0]\"\n  else\n    echo \"\
    [$(($1 + $2)), $(($3 - $2))]\"\n  fi", "  if [ $1 -le $3 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n\
    \      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[$(( $1 + $3 )),\
    \ 0]\"\n  fi", "  if [ $2 -gt $3 ]; then\n    echo \"You will eat all remaining\
    \ carrots, but will still be hungry.\"\n    echo \"[$(($1 + $3)), 0]\"\n  else\n\
    \    echo \"You will eat all remaining carrots, and will be full.\"\n    echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n  fi", "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  local total=$((number + need))\n  local left=$((remaining\
    \ - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n  echo \"[$total,\
    \ $left]\"", "  if [ $1 -ge $2 ]; then\n    echo \"[$2, 0]\"\n  elif [ $3 -ge\
    \ $2 ]; then\n    echo \"[$1, $(( $2 - $1 ))]\"\n  else\n    echo \"[$3, 0]\"\n\
    \  fi", "  if [ $2 -gt $3 ]; then\n    echo \"[$(($1 + $3)), 0]\"\n  else\n  \
    \  echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  fi", "  if [[ $1 -ge 0 && $1 -le 1000\
    \ && $2 -ge 0 && $2 -le 1000 && $3 -ge 0 && $3 -le 1000 ]]; then\n    if [[ $1\
    \ -eq 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n      echo \"[0,0]\"\n    elif [[ $1\
    \ -eq 0 && $2 -eq 0 && $3 -ne 0 ]]; then\n      echo \"[0,$3]\"\n    elif [[ $1\
    \ -eq 0 && $2 -ne 0 && $3 -eq 0 ]]; then\n      echo \"[0,0]\"\n    elif [[ $1\
    \ -eq 0 && $2 -ne 0 && $3 -ne 0 ]]; then\n      if [[ $2 -le $3 ]]; then\n   \
    \     echo \"[$2,$(( $3 - $2 ))]\"\n      else\n        echo \"[$3,0]\"\n    \
    \  fi\n    elif [[ $1 -ne 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n      echo \"[$1,0]\"\
    \n    elif [[ $1 -ne 0 && $2 -eq 0 && $3 -ne 0 ]]; then\n      echo \"[$1,$3]\"\
    \n    elif [[ $1 -ne 0 && $2 -ne 0 && $3 -eq 0 ]]; then\n      echo \"[$(( $1\
    \ + $2 )),0]\"\n    elif [[ $1 -ne 0 && $2 -ne 0 && $3 -ne 0 ]]; then\n      if\
    \ [[ $2 -le $3 ]]; then\n        echo \"[$(( $1 + $2 )),$(( $3 - $2 ))]\"\n  \
    \    else\n        echo \"[$(( $1 + $3 )),0]\"\n      fi\n    fi\n  else\n   \
    \ echo \"[0,0]\"\n  fi", "  if [ $2 -le $3 ]; then\n    echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi", "  if [ $2 -le\
    \ $3 ]; then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  else\n    echo \"[$(($1\
    \ + $3)), 0]\"\n  fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local total=$((number + need))\n  local left=$((remaining - need))\n  if [[\
    \ $left -lt 0 ]]; then\n    left=0\n  fi\n  echo \"[$total, $left]\"", "  if [\
    \ $3 -eq 0 ]; then\n    echo \"[$1, $2]\"\n  elif [ $2 -eq 0 ]; then\n    echo\
    \ \"[$1, $3]\"\n  elif [ $2 -gt $3 ]; then\n    echo \"[$(( $1 + $3 )), $(( $2\
    \ - $3 ))]\"\n  else\n    echo \"[$(( $1 + $2 )), 0]\"\n  fi", "  # your code\
    \ here\n  if [ $1 -ge $2 ]\n  then\n    echo \"[$2, $3]\"\n  elif [ $3 -ge $2\
    \ ]\n  then\n    echo \"[$2, $(( $3 - $2 ))]\"\n  else\n    echo \"[$3, 0]\"\n\
    \  fi", "  # your code here\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ];\
    \ then\n    echo \"0,0\"\n  elif [ $1 -gt 1000 ] || [ $2 -gt 1000 ] || [ $3 -gt\
    \ 1000 ]; then\n    echo \"0,0\"\n  elif [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3\
    \ -eq 0 ]; then\n    echo \"0,0\"\n  elif [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3\
    \ -gt 0 ]; then\n    echo \"0,$3\"\n  elif [ $1 -eq 0 ] && [ $2 -gt 0 ] && [ $3\
    \ -eq 0 ]; then\n    echo \"0,0\"\n  elif [ $1 -eq 0 ] && [ $2 -gt 0 ] && [ $3\
    \ -gt 0 ]; then\n    echo \"0,$3\"\n  elif [ $1 -gt 0 ] && [ $2 -eq 0 ] && [ $3\
    \ -eq 0 ]; then\n    echo \"$1,0\"\n  elif [ $1 -gt 0 ] && [ $2 -eq 0 ] && [ $3\
    \ -gt 0 ]; then\n    echo \"$1,$3\"\n  elif [ $1 -gt 0 ] && [ $2 -gt 0 ] && [\
    \ $3 -eq 0 ]; then\n    echo \"$1,0\"\n  elif [ $1 -gt 0 ] && [ $2 -gt 0 ] &&\
    \ [ $3 -gt 0 ]; then\n    if [ $2 -gt $3 ]; then\n      echo \"$1,0\"\n    elif\
    \ [ $2 -lt $3 ]; then\n      echo \"$1,$(($3-$2))\"\n    else\n      echo \"$1,0\"\
    \n    fi\n  fi", "  # Write your code here\n  # You can access the variables $1,\
    \ $2 and $3 as the first, second and third argument\n  # You can print to standard\
    \ output\n\n  # Example\n  # echo $1 $2 $3\n  # echo $(( $1 + $2 + $3 ))\n  if\
    \ [ $2 -gt $3 ]; then\n    echo $(( $1 + $3 )) $(( $2 - $3 ))\n  else\n    echo\
    \ $(( $1 + $2 )) 0\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ];\
    \ then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n \
    \     if [ $2 -le $3 ]; then\n        echo \"[$(($1 + $2)), $(( $3 - $2 ))]\"\n\
    \      else\n        echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo\
    \ \"Error: Constrain is not satisfied\"\n    fi\n  else\n    echo \"Error: Constrain\
    \ is not satisfied\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0\
    \ ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\
    \n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n    \
    \  echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", " \
    \ if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000\
    \ ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n\
    \        echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n      else\n        echo \"\
    [$(( $1 + $3 )), 0]\"\n      fi\n    else\n      echo \"[0, 0]\"\n    fi\n  else\n\
    \    echo \"[0, 0]\"\n  fi", "  if [ $1 -ge $2 ]; then\n    echo \"[$2,$3]\"\n\
    \  elif [ $3 -ge $2 ]; then\n    echo \"[$2,$(($3-$2))]\"\n  else\n    echo \"\
    [$3,0]\"\n  fi", "  if [[ $1 -ge 0 && $1 -le 1000 && $2 -ge 0 && $2 -le 1000 &&\
    \ $3 -ge 0 && $3 -le 1000 ]]; then\n    if [[ $1 -lt $2 ]]; then\n      if [[\
    \ $3 -ge $2 ]]; then\n        echo \"[$2, $(( $3 - $2 ))]\"\n      else\n    \
    \    echo \"[$3, 0]\"\n      fi\n    else\n      echo \"[$1, $3]\"\n    fi\n \
    \ else\n    echo \"Error: invalid input\"\n  fi", "  local number=$1\n  local\
    \ need=$2\n  local remaining=$3\n  local result=()\n  if [ $remaining -ge $need\
    \ ]; then\n    result[0]=$((number + need))\n    result[1]=$((remaining - need))\n\
    \  else\n    result[0]=$((number + remaining))\n    result[1]=0\n  fi\n  echo\
    \ ${result[@]}", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n  \
    \  if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n\
    \      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\n\
    \  fi", "    if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if\
    \ [ $2 -le $3 ]; then\n            echo \"[$(($1 + $2)), $(($3 - $2))]\"\n   \
    \     else\n            echo \"[$(($1 + $3)), 0]\"\n        fi\n    else\n   \
    \     echo \"Error: the number of carrots that you have eaten, the number of carrots\
    \ that you need to eat and the number of remaining carrots thet exist in stock\
    \ should be positive integers\"\n    fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] &&\
    \ [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n\
    \    echo \"error\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ];\
    \ then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\
    \n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n\
    \      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi",
  "    if [[ $1 -ge 0 && $1 -le 1000 && $2 -ge 0 && $2 -le 1000 && $3 -ge 0 && $3\
    \ -le 1000 ]]; then\n        if [[ $1 -eq 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n\
    \            echo \"[0,0]\"\n        elif [[ $1 -eq 0 && $2 -eq 0 && $3 -ne 0\
    \ ]]; then\n            echo \"[0,$3]\"\n        elif [[ $1 -eq 0 && $2 -ne 0\
    \ && $3 -eq 0 ]]; then\n            echo \"[0,0]\"\n        elif [[ $1 -eq 0 &&\
    \ $2 -ne 0 && $3 -ne 0 ]]; then\n            if [[ $2 -ge $3 ]]; then\n      \
    \          echo \"[$3,0]\"\n            else\n                echo \"[$2,$(( $3\
    \ - $2 ))]\"\n            fi\n        elif [[ $1 -ne 0 && $2 -eq 0 && $3 -eq 0\
    \ ]]; then\n            echo \"[$1,0]\"\n        elif [[ $1 -ne 0 && $2 -eq 0\
    \ && $3 -ne 0 ]]; then\n            echo \"[$1,$3]\"\n        elif [[ $1 -ne 0\
    \ && $2 -ne 0 && $3 -eq 0 ]]; then\n            echo \"[$1,0]\"\n        elif\
    \ [[ $1 -ne 0 && $2 -ne 0 && $3 -ne 0 ]]; then\n            if [[ $2 -ge $3 ]];\
    \ then\n                echo \"[$(( $1 + $3 )),0]\"\n            else\n      \
    \          echo \"[$(( $1 + $2 )),$(( $3 - $2 ))]\"\n            fi\n        fi\n\
    \    else\n        echo \"[0,0]\"\n    fi", "  if [ $2 -le $3 ]; then\n    echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n  else\n    echo \"[$(($1 + $3)), 0]\"\n \
    \ fi", "  # your code here\n  if [ $1 -ge $2 ]\n  then\n    echo \"[$2, $3]\"\n\
    \  elif [ $3 -ge $2 ]\n  then\n    echo \"[$2, $((3-2))]\"\n  else\n    echo \"\
    [$3, 0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n \
    \   if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n\
    \      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\
    \n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n    \
    \  echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: Invalid input\"\
    \n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1\
    \ -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3\
    \ ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n       \
    \ echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Constrain: 0 <=\
    \ number <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n    fi\n  else\n\
    \    echo \"Constrain: 0 <= number <= 1000, 0 <= need <= 1000, 0 <= remaining\
    \ <= 1000\"\n  fi", "  # your code here\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] ||\
    \ [ $3 -lt 0 ]; then\n    echo \"Error: negative number\"\n    exit 1\n  fi\n\
    \  if [ $1 -gt 1000 ] || [ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n    echo \"\
    Error: number too big\"\n    exit 1\n  fi\n  if [ $2 -gt $3 ]; then\n    echo\
    \ \"Error: not enough carrots\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ]; then\n\
    \    echo \"Error: you already ate enough carrots\"\n    exit 1\n  fi\n  if [\
    \ $1 -gt $2 ]; then\n    echo \"Error: you ate too many carrots\"\n    exit 1\n\
    \  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ]; then\n    echo \"Error: you ate nothing\"\
    \n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -gt 0 ]; then\n    echo \"Error:\
    \ you ate nothing\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [\
    \ $3 -eq 0 ]; then\n    echo \"Error: you ate nothing\"\n    exit 1\n  fi\n  if\
    \ [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -gt 0 ]; then\n    echo \"Error: you ate\
    \ nothing\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -gt 0 ] && [ $3 -eq 0\
    \ ]; then\n    echo \"Error: you ate nothing\"\n    exit 1\n  fi\n  if [ $1 -eq\
    \ 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n    echo \"Error: you ate nothing\"\
    \n    exit 1\n  fi\n  if [ $1 -gt 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n\
    \    echo \"Error: you ate too many carrots\"\n    exit 1\n  fi\n  if [ $1 -gt\
    \ 0 ] && [ $2 -eq 0 ] && [ $3 -gt 0 ]; then\n    echo \"Error: you", "  if [ $1\
    \ -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2\
    \ -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo \"[$(($1 + $3)),\
    \ 0]\"\n      fi\n    else\n      echo \"Constrain: 0 <= number <= 1000, 0 <=\
    \ need <= 1000, 0 <= remaining <= 1000\"\n    fi\n  else\n    echo \"Constrain:\
    \ 0 <= number <= 1000, 0 <= need <= 1000, 0 <= remaining <= 1000\"\n  fi", " \
    \ if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ];\
    \ then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1\
    \ + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [ $1 -ge $2\
    \ ]; then\n    echo \"[$2, $3]\"\n  elif [ $3 -ge $2 ]; then\n    echo \"[$2,\
    \ $(( $3 - $2 ))]\"\n  else\n    echo \"[$3, 0]\"\n  fi", "  if [[ $1 -ge 0 &&\
    \ $1 -le 1000 && $2 -ge 0 && $2 -le 1000 && $3 -ge 0 && $3 -le 1000 ]]; then\n\
    \    if [[ $1 -eq 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n      echo \"[0,0]\"\n \
    \   elif [[ $1 -eq 0 && $2 -eq 0 && $3 -gt 0 ]]; then\n      echo \"[0,$3]\"\n\
    \    elif [[ $1 -eq 0 && $2 -gt 0 && $3 -eq 0 ]]; then\n      echo \"[0,0]\"\n\
    \    elif [[ $1 -eq 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n      echo \"[$2,0]\"\n\
    \    elif [[ $1 -gt 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n      echo \"[$1,0]\"\n\
    \    elif [[ $1 -gt 0 && $2 -eq 0 && $3 -gt 0 ]]; then\n      echo \"[$1,$3]\"\
    \n    elif [[ $1 -gt 0 && $2 -gt 0 && $3 -eq 0 ]]; then\n      echo \"[$1,0]\"\
    \n    elif [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n      if [[ $1 -eq $2\
    \ ]]; then\n        echo \"[$1,$3]\"\n      elif [[ $1 -gt $2 ]]; then\n     \
    \   echo \"[$2,$3]\"\n      elif [[ $1 -lt $2 ]]; then\n        if [[ $1 -eq $3\
    \ ]]; then\n          echo \"[$1,0]\"\n        elif [[ $1 -gt $3 ]]; then\n  \
    \        echo \"[$3,0]\"\n        elif [[ $1 -lt $3 ]]; then\n          echo \"\
    [$1,$(( $3 - $1 ))]\"\n        fi\n      fi\n    fi\n  fi", "  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"[-1, -1]\"\n  fi", "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  local total=$((number + need))\n  local left=$((remaining\
    \ - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n  echo \"[$total, $left]\"",
  "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ];\
    \ then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1\
    \ + $3)), 0]\"\n    fi\n  else\n    echo \"error\"\n  fi", "  if [ $1 -ge 0 ]\
    \ && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo\
    \ \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\
    \n    fi\n  else\n    echo \"Error: invalid input\"\n  fi", "  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local\
    \ left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n\
    \  echo \"[$total, $left]\"", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0\
    \ ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\
    \n  fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number\
    \ + need))\n  local left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n\
    \    left=0\n  fi\n  echo \"[$total, $left]\"", "  if [ $1 -ge 0 ] && [ $2 -ge\
    \ 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 +\
    \ $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n\
    \  else\n    echo \"Error: invalid input\"\n  fi", "  if [ $1 -ge 0 ] && [ $2\
    \ -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] &&\
    \ [ $3 -le 1000 ]; then\n      if [ $2 -gt $3 ]; then\n        echo \"[$3, 0]\"\
    \n      else\n        echo \"[$2, $(( $3 - $2 ))]\"\n      fi\n    else\n    \
    \  echo \"[0, 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [ $1 -ge\
    \ 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n    \
    \  echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)),\
    \ 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi", "  if [ $1 -ge\
    \ 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n    \
    \  echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)),\
    \ 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi", "  if [ $1 -ge\
    \ 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le\
    \ 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -gt $3 ]; then\n        echo\
    \ \"[$(($1 + $3)), 0]\"\n      else\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n      fi\n    else\n      echo \"Error: Constrain: 0 <= number <= 1000\"\n \
    \   fi\n  else\n    echo \"Error: Variables: @number : integer the number of carrots\
    \ that you have eaten.\"\n  fi", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  local total=$((number + need))\n  local left=$((remaining -\
    \ need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n  echo \"[$total, $left]\"",
  "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ];\
    \ then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo\
    \ \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [\
    \ $1 -ge $2 ]; then\n    echo \"[$2, $3]\"\n  elif [ $3 -ge $2 ]; then\n    echo\
    \ \"[$2, $((3-2))]\"\n  else\n    echo \"[$3, 0]\"\n  fi", "  if [ $2 -le $3 ];\
    \ then\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  else\n    echo \"[$(($1 +\
    \ $3)), 0]\"\n  fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local carrots_left=0\n  local carrots_eaten=0\n  local total_carrots_eaten=0\n\
    \  local total_carrots_left=0\n\n  if [ $remaining -eq 0 ]; then\n    carrots_eaten=0\n\
    \    carrots_left=0\n  elif [ $remaining -lt $need ]; then\n    carrots_eaten=$remaining\n\
    \    carrots_left=0\n  else\n    carrots_eaten=$need\n    carrots_left=$((remaining\
    \ - need))\n  fi\n\n  total_carrots_eaten=$((number + carrots_eaten))\n  total_carrots_left=$((total_carrots_left\
    \ + carrots_left))\n\n  echo \"[$total_carrots_eaten, $total_carrots_left]\"",
  "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ];\
    \ then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1\
    \ + $3)), 0]\"\n    fi\n  else\n    echo \"Error: input must be positive integers\"\
    \n  fi", "  # your code here\n  if [ $1 -ge $2 ]\n  then\n    echo \"[$2, $3]\"\
    \n  elif [ $3 -ge $2 ]\n  then\n    echo \"[$2, $((3 - 2))]\"\n  else\n    echo\
    \ \"[$3, 0]\"\n  fi", "  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n\
    \    echo \"All arguments must be positive integers\"\n    exit 1\n  fi\n  if\
    \ [ $1 -gt 1000 ] || [ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n    echo \"All\
    \ arguments must be less than 1000\"\n    exit 1\n  fi\n  if [ $2 -gt $3 ]; then\n\
    \    echo \"You need to eat more carrots than there are in stock\"\n    exit 1\n\
    \  fi\n  if [ $1 -gt $3 ]; then\n    echo \"You have eaten more carrots than there\
    \ are in stock\"\n    exit 1\n  fi\n  if [ $1 -gt $2 ]; then\n    echo \"You have\
    \ eaten more carrots than you need to eat\"\n    exit 1\n  fi\n  if [ $1 -eq $2\
    \ ]; then\n    echo \"You have eaten enough carrots\"\n    exit 1\n  fi\n  if\
    \ [ $1 -eq $3 ]; then\n    echo \"You have eaten all the carrots\"\n    exit 1\n\
    \  fi\n  if [ $2 -eq $3 ]; then\n    echo \"You need to eat all the carrots\"\n\
    \    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n \
    \   echo \"You have eaten no carrots and there are no carrots in stock\"\n   \
    \ exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ]; then\n    echo \"You have eaten\
    \ no carrots and you need to eat no carrots\"\n    exit 1\n  fi\n  if [ $1 -eq\
    \ 0 ] && [ $3 -eq 0 ]; then\n    echo \"You have eaten no carrots and there are\
    \ no carrots in stock\"\n    exit 1\n  fi\n  if [ $2 -eq 0 ] && [ $3 -eq 0 ];\
    \ then\n    echo \"You need to eat no carrots and there are no carrots in stock\"\
    \n    exit 1\n  fi\n  if [ $1 -eq 0 ]; then\n    echo \"You have eaten no carrots\"\
    \n    exit 1\n  fi\n  if [ $2 -eq 0 ]; then\n    echo \"You need to eat", "  if\
    \ [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n\
    \      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 +\
    \ $3)), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi", "  if\
    \ [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n\
    \      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$((\
    \ $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [ $3 -ge\
    \ $2 ]; then\n    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n  else\n    echo\
    \ \"[$(( $1 + $3 )), 0]\"\n  fi", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  local result=()\n  if [ $remaining -lt $need ]; then\n    result=($(($number\
    \ + $remaining)) 0)\n  else\n    result=($(($number + $need)) $(($remaining -\
    \ $need)))\n  fi\n  echo ${result[@]}", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] &&\
    \ [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n\
    \    echo \"[0, 0]\"\n  fi", "  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0\
    \ ]; then\n    echo \"Error: negative number\"\n    exit 1\n  fi\n  if [ $1 -gt\
    \ 1000 ] || [ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n    echo \"Error: number\
    \ too big\"\n    exit 1\n  fi\n  if [ $2 -gt $3 ]; then\n    echo \"Error: not\
    \ enough carrots\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Error:\
    \ you already ate enough carrots\"\n    exit 1\n  fi\n  if [ $1 -gt $2 ]; then\n\
    \    echo \"Error: you ate too many carrots\"\n    exit 1\n  fi\n  if [ $1 -eq\
    \ 0 ] && [ $2 -eq 0 ]; then\n    echo \"Error: you ate nothing\"\n    exit 1\n\
    \  fi\n  if [ $1 -eq 0 ] && [ $2 -gt 0 ]; then\n    echo \"Error: you ate nothing\"\
    \n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n\
    \    echo \"Error: you ate nothing\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [\
    \ $2 -eq 0 ] && [ $3 -gt 0 ]; then\n    echo \"Error: you ate nothing\"\n    exit\
    \ 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -gt 0 ] && [ $3 -eq 0 ]; then\n    echo \"\
    Error: you ate nothing\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -gt 0 ]\
    \ && [ $3 -gt 0 ]; then\n    echo \"Error: you ate nothing\"\n    exit 1\n  fi\n\
    \  if [ $1 -gt 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: you\
    \ ate nothing\"\n    exit 1\n  fi\n  if [ $1 -gt 0 ] && [ $2 -eq 0 ] && [ $3 -gt\
    \ 0 ]; then\n    echo \"Error: you ate nothing\"\n    exit 1\n", "  # Write your\
    \ code here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [\
    \ $2 -le $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n\
    \      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi",
  "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ]\
    \ && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n\
    \        echo \"[ $1 + $2, $3 - $2 ]\"\n      else\n        echo \"[ $1 + $3,\
    \ 0 ]\"\n      fi\n    else\n      echo \"Error: Constrain\"\n    fi\n  else\n\
    \    echo \"Error: Constrain\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [\
    \ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(( $1 + $2 )),\
    \ $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n\
    \    echo \"[0, 0]\"\n  fi", "  if [ $1 -ge $2 ]; then\n    echo \"[$2, $3]\"\n\
    \  elif [ $3 -ge $2 ]; then\n    echo \"[$2, $(( $3 - $2 ))]\"\n  else\n    echo\
    \ \"[$3, 0]\"\n  fi", "  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n\
    \    echo \"Error: all parameters must be positive integers\"\n    exit 1\n  fi\n\
    \  if [ $1 -gt 1000 ] || [ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n    echo \"\
    Error: all parameters must be less than 1000\"\n    exit 1\n  fi\n  if [ $2 -gt\
    \ $3 ]; then\n    echo \"Error: need must be less than or equal to remaining\"\
    \n    exit 1\n  fi\n  if [ $1 -gt $3 ]; then\n    echo \"Error: number must be\
    \ less than or equal to remaining\"\n    exit 1\n  fi\n  if [ $1 -eq $3 ]; then\n\
    \    echo \"Error: number must be less than remaining\"\n    exit 1\n  fi\n  if\
    \ [ $2 -eq 0 ]; then\n    echo \"Error: need must be greater than 0\"\n    exit\
    \ 1\n  fi\n  if [ $3 -eq 0 ]; then\n    echo \"Error: remaining must be greater\
    \ than 0\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ]; then\n    echo \"Error: number\
    \ must be greater than 0\"\n    exit 1\n  fi\n  if [ $2 -eq $3 ]; then\n    echo\
    \ \"[$2, 0]\"\n    exit 0\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"[$2, $((\
    \ $3 - $2 ))]\"\n    exit 0\n  fi\n  if [ $1 -eq $(( $2 - 1 )) ]; then\n    echo\
    \ \"[$2, $(( $3 - $2 ))]\"\n    exit 0\n  fi\n  if [ $1 -eq $(( $2 - 2 )) ]; then\n\
    \    echo \"[$2, $(( $3 - $2 ))]\"\n    exit 0\n  fi\n  if [ $1 -eq $(( $2 - 3\
    \ )) ]; then\n    echo \"[$2, $(( $3 - $2 ))]\"\n    exit 0\n  fi\n  if [ $1 -eq\
    \ $(( $2 - 4 )) ]; then\n    echo \"[$2, $(( $3 - $2 ))]\"\n    exit 0\n ", " \
    \ if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ];\
    \ then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1\
    \ + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", "    if [ $3 -lt $2\
    \ ]; then\n        echo \"[$(($1 + $3)), 0]\"\n    else\n        echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n    fi", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  local total=$((number + remaining))\n  local left=$((total -\
    \ need))\n  if [ $left -lt 0 ]; then\n    echo \"[$total, 0]\"\n  else\n    echo\
    \ \"[$total, $left]\"\n  fi", "    if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge\
    \ 0 ]; then\n        if [ $2 -le $3 ]; then\n            echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n        else\n            echo \"[$(($1 + $3)), 0]\"\n    \
    \    fi\n    else\n        echo \"[0, 0]\"\n    fi", "  if [ $2 -gt $3 ]; then\n\
    \    echo \"[ $1, 0 ]\"\n  else\n    echo \"[ $(( $1 + $2 )), $(( $3 - $2 )) ]\"\
    \n  fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number\
    \ + need))\n  local left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n \
    \   left=0\n  fi\n  echo \"[$total, $left]\"", "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  local total=$((number + need))\n  local left=$((remaining\
    \ - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n  echo \"[$total,\
    \ $left]\"", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if\
    \ [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n\
    \      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi",
  "  if [ $1 -ge $2 ]; then\n    echo \"[$2, $3]\"\n  elif [ $3 -ge $2 ]; then\n \
    \   echo \"[$2, $(( $3 - $2 ))]\"\n  else\n    echo \"[$3, 0]\"\n  fi", "  if\
    \ [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n\
    \      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 +\
    \ $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", "  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local left=$((total - need))\n  if [ $left -lt 0 ]; then\n    echo \"[$total,\
    \ 0]\"\n  else\n    echo \"[$total, $left]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2\
    \ -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1\
    \ + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n\
    \  else\n    echo \"Error: Invalid input\"\n  fi", "    if [ $1 -ge 0 ] && [ $2\
    \ -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $2 -le $3 ]; then\n            echo\
    \ \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n        else\n            echo \"[$((\
    \ $1 + $3 )), 0]\"\n        fi\n    else\n        echo \"[0, 0]\"\n    fi", " \
    \ if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000\
    \ ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le $3 ]; then\n\
    \        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n        echo \"[$(($1\
    \ + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Variables must be less\
    \ than or equal to 1000.\"\n    fi\n  else\n    echo \"Error: Variables must be\
    \ greater than or equal to 0.\"\n  fi", "  if [ $1 -ge $2 ]; then\n    echo \"\
    [$2, $3]\"\n  elif [ $3 -ge $2 ]; then\n    echo \"[$2, $(( $3 - $2 ))]\"\n  else\n\
    \    echo \"[$3, 0]\"\n  fi", "  if [ $3 -ge $2 ]; then\n    echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n  else\n    echo \"[$(($1 + $3)), 0]\"\n  fi", "  if [[ $1\
    \ -ge 0 && $1 -le 1000 && $2 -ge 0 && $2 -le 1000 && $3 -ge 0 && $3 -le 1000 ]];\
    \ then\n    if [[ $1 -eq 0 ]]; then\n      if [[ $2 -eq 0 ]]; then\n        echo\
    \ \"[0, $3]\"\n      elif [[ $2 -gt 0 ]]; then\n        if [[ $2 -le $3 ]]; then\n\
    \          echo \"[$2, $(( $3 - $2 ))]\"\n        else\n          echo \"[$3,\
    \ 0]\"\n        fi\n      fi\n    elif [[ $1 -gt 0 ]]; then\n      if [[ $2 -eq\
    \ 0 ]]; then\n        echo \"[$1, $3]\"\n      elif [[ $2 -gt 0 ]]; then\n   \
    \     if [[ $(( $1 + $2 )) -le $3 ]]; then\n          echo \"[$(( $1 + $2 )),\
    \ $(( $3 - $1 - $2 ))]\"\n        else\n          echo \"[$(( $1 + $3 )), 0]\"\
    \n        fi\n      fi\n    fi\n  fi", "  local number=$1\n  local need=$2\n \
    \ local remaining=$3\n  local total=$((number + need))\n  local left=$((remaining\
    \ - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n  echo \"[$total,\
    \ $left]\"", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if\
    \ [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [ $2 -le\
    \ $3 ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n    \
    \    echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"[0, 0]\"\n \
    \   fi\n  else\n    echo \"[0, 0]\"\n  fi", "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  local total=$((number + need))\n  local left=$((remaining\
    \ - need))\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n  echo \"[$total, $left]\"",
  "  # your code here\n  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n \
    \   if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if [\
    \ $2 -le $3 ]; then\n        echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n     \
    \ else\n        echo \"[$(( $1 + $3 )), 0]\"\n      fi\n    else\n      echo \"\
    [0, 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [ $1 -ge 0 ] && [\
    \ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"\
    [$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n \
    \   fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ]\
    \ && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n\
    \    echo \"Error: invalid input\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ]\
    \ && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$1, $2]\"\n\
    \    else\n      echo \"[$1, $3]\"\n    fi\n  else\n    echo \"[]\"\n  fi", " \
    \ if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ];\
    \ then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1\
    \ + $3)), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi", "  if\
    \ [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n\
    \      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 +\
    \ $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [ $1 -ge 0 ] &&\
    \ [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"\
    [$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n \
    \   fi\n  else\n    echo \"[0, 0]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ]\
    \ && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n    else\n      echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n\
    \    echo \"[0, 0]\"\n  fi", "  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0\
    \ ]; then\n    echo \"Error: All arguments must be positive integers.\"\n    exit\
    \ 1\n  fi\n  if [ $1 -gt 1000 ] || [ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n\
    \    echo \"Error: All arguments must be less than or equal to 1000.\"\n    exit\
    \ 1\n  fi\n  if [ $2 -gt $3 ]; then\n    echo \"Error: There are not enough carrots\
    \ to complete your meals.\"\n    exit 1\n  fi\n  if [ $2 -eq $3 ]; then\n    echo\
    \ \"Error: There are not enough carrots to complete your meals.\"\n    exit 1\n\
    \  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Error: You have already eaten enough\
    \ carrots.\"\n    exit 1\n  fi\n  if [ $1 -gt $2 ]; then\n    echo \"Error: You\
    \ have already eaten enough carrots.\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] &&\
    \ [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: You have already eaten\
    \ enough carrots.\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [\
    \ $3 -gt 0 ]; then\n    echo \"Error: You have already eaten enough carrots.\"\
    \n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -gt 0 ] && [ $3 -eq 0 ]; then\n\
    \    echo \"Error: There are not enough carrots to complete your meals.\"\n  \
    \  exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n   \
    \ echo \"Error: There are not enough carrots to complete your meals.\"\n    exit\
    \ 1\n  fi\n  if [ $1 -gt 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"\
    Error: You have already eaten enough carrots.\"\n    exit 1\n  fi\n  if [ $1 -gt\
    \ 0 ] && [ $2 -eq 0 ] && [ $3 -gt 0 ]; then\n    echo \"Error: You have already\
    \ eaten enough carrots", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if\
    \ [ $2 -le $3 ]; then\n        echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n   \
    \   else\n        echo \"[$(( $1 + $3 )), 0]\"\n      fi\n    else\n      echo\
    \ \"Error: Constrain: 0 <= number <= 1000\"\n    fi\n  else\n    echo \"Error:\
    \ Constrain: 0 <= number <= 1000\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ]\
    \ && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le\
    \ 1000 ]; then\n      if [ $2 -le $3 ]; then\n        echo \"[$(($1 + $2)), $(($3\
    \ - $2))]\"\n      else\n        echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n\
    \      echo \"Constrain error\"\n    fi\n  else\n    echo \"Constrain error\"\n\
    \  fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number\
    \ + need))\n  local left=$((remaining - need))\n  if [[ $left -lt 0 ]]; then\n\
    \    left=0\n  fi\n  echo \"[$total, $left]\"", "  if [ $1 -ge 0 ] && [ $2 -ge\
    \ 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(( $1\
    \ + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )), 0]\"\n \
    \   fi\n  else\n    echo \"Error: Invalid input\"\n  fi", "  if [ $1 -ge 0 ] &&\
    \ [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"\
    [$(( $1 + $2 )), $(( $3 - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )), 0]\"\
    \n    fi\n  else\n    echo \"[0, 0]\"\n  fi", '  echo "[$1, $3]"', "    if [ $1\
    \ -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n        if [ $1 -le 1000 ] &&\
    \ [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n            if [ $2 -le $3 ]; then\n\
    \                echo \"[$(($1 + $2)), $(($3 - $2))]\"\n            else\n   \
    \             echo \"[$(($1 + $3)), 0]\"\n            fi\n        else\n     \
    \       echo \"Error: Constrain\"\n        fi\n    else\n        echo \"Error:\
    \ Constrain\"\n    fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $2 -le $3 ]; then\n      echo \"[ $(( $1 + $2 )), $(( $3 - $2 )) ]\"\
    \n    else\n      echo \"[ $(( $1 + $3 )), 0 ]\"\n    fi\n  else\n    echo \"\
    [ 0, 0 ]\"\n  fi", "  # your code here\n  if [ $1 -ge $2 ]\n  then\n    echo \"\
    [$2, $3]\"\n  elif [ $3 -ge $2 ]\n  then\n    echo \"[$(($1+$2)), $(( $3 - $2\
    \ ))]\"\n  else\n    echo \"[$(($1+$3)), 0]\"\n  fi", "  local number=$1\n  local\
    \ need=$2\n  local remaining=$3\n  local total=$((number + need))\n  local left=$((remaining\
    \ - need))\n  if [[ $left -lt 0 ]]; then\n    left=0\n  fi\n  echo \"[$total,\
    \ $left]\"", "  if [ $2 -gt $3 ]; then\n    echo \"[$(($1 + $3)), 0]\"\n  else\n\
    \    echo \"[$(($1 + $2)), $(($3 - $2))]\"\n  fi", "  if [ $1 -lt 0 ] || [ $2\
    \ -lt 0 ] || [ $3 -lt 0 ]; then\n    echo \"Error: all arguments must be positive\
    \ integers\"\n    exit 1\n  fi\n  if [ $1 -gt 1000 ] || [ $2 -gt 1000 ] || [ $3\
    \ -gt 1000 ]; then\n    echo \"Error: all arguments must be less than 1000\"\n\
    \    exit 1\n  fi\n  if [ $2 -gt $3 ]; then\n    echo \"Error: need must be less\
    \ than or equal to remaining\"\n    exit 1\n  fi\n  if [ $1 -gt $3 ]; then\n \
    \   echo \"Error: number must be less than or equal to remaining\"\n    exit 1\n\
    \  fi\n  if [ $1 -gt $2 ]; then\n    echo \"Error: number must be less than or\
    \ equal to need\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Error:\
    \ number must be less than need\"\n    exit 1\n  fi\n  if [ $1 -eq $3 ]; then\n\
    \    echo \"Error: number must be less than remaining\"\n    exit 1\n  fi\n  if\
    \ [ $2 -eq $3 ]; then\n    echo \"Error: need must be less than remaining\"\n\
    \    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n \
    \   echo \"Error: all arguments must be greater than 0\"\n    exit 1\n  fi\n \
    \ if [ $1 -eq 0 ] && [ $2 -eq 0 ]; then\n    echo \"Error: all arguments must\
    \ be greater than 0\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $3 -eq 0 ]; then\n\
    \    echo \"Error: all arguments must be greater than 0\"\n    exit 1\n  fi\n\
    \  if [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: all arguments must\
    \ be greater than 0\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ]; then\n    echo \"\
    Error: all arguments must be greater than 0\"\n    exit 1\n  fi\n  if [ $2 -eq\
    \ 0 ]; then\n    echo \"Error", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge\
    \ 0 ]; then\n    if [ $2 -le $3 ]; then\n      echo \"[$(( $1 + $2 )), $(( $3\
    \ - $2 ))]\"\n    else\n      echo \"[$(( $1 + $3 )), 0]\"\n    fi\n  else\n \
    \   echo \"[0, 0]\"\n  fi", "    if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0\
    \ ]; then\n        if [ $2 -le $3 ]; then\n            echo \"[$(( $1 + $2 )),\
    \ $(( $3 - $2 ))]\"\n        else\n            echo \"[$(( $1 + $3 )), 0]\"\n\
    \        fi\n    else\n        echo \"Error: invalid input\"\n    fi", "  if [\
    \ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n\
    \      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 +\
    \ $3)), 0]\"\n    fi\n  else\n    echo \"Error: Invalid input\"\n  fi", "  if\
    \ [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n\
    \      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 +\
    \ $3)), 0]\"\n    fi\n  else\n    echo \"Invalid input\"\n  fi", "  if [ $2 -gt\
    \ $3 ]; then\n    echo \"[$(($1 + $3)), 0]\"\n  else\n    echo \"[$(($1 + $2)),\
    \ $(($3 - $2))]\"\n  fi", "  if [ $2 -gt $3 ]; then\n    echo \"[$(( $1 + $3 )),\
    \ 0]\"\n  else\n    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n  fi", "  local\
    \ number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number +\
    \ need))\n  local left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n   \
    \ left=0\n  fi\n  echo \"[$total, $left]\"", "  # your code here\n  if [ $1 -ge\
    \ $2 ]\n  then\n    echo \"[$2, 0]\"\n  elif [ $3 -ge $2 ]\n  then\n    echo \"\
    [$2, $((3-2))]\"\n  else\n    echo \"[$3, 0]\"\n  fi", "  if [ $2 -gt $3 ]; then\n\
    \    echo \"[$(($1 + $3)), 0]\"\n  else\n    echo \"[$(($1 + $2)), $(($3 - $2))]\"\
    \n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2\
    \ -le $3 ]; then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n    \
    \  echo \"[$(($1 + $3)), 0]\"\n    fi\n  else\n    echo \"Error: Invalid input\"\
    \n  fi", "    if [ $1 -ge $2 ]; then\n        echo \"[$2, $3]\"\n    elif [ $3\
    \ -ge $2 ]; then\n        echo \"[$2, $(( $3 - $2 ))]\"\n    else\n        echo\
    \ \"[$3, 0]\"\n    fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local eaten=$((number + need))\n  local left=$((remaining - need))\n  if [\
    \ $left -lt 0 ]; then\n    left=0\n  fi\n  echo \"[$eaten, $left]\"", "  if [\
    \ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ]; then\n\
    \      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1 +\
    \ $3)), 0]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n  fi", "  # Write\
    \ your code here\n  # You can access the variables $1, $2 and $3\n  # You must\
    \ return an array, example:\n  # return=(42 21)\n  # return=(0 0)\n  # return=($1\
    \ $2)\n  # return=($2 $1)\n  # return=($3 $2)\n  # return=($1 $3)\n  # return=($3\
    \ $1)\n  # return=($2 $3)\n  # return=($3 $2)\n  # return=($1 $1)\n  # return=($2\
    \ $2)\n  # return=($3 $3)\n  # return=($1 $2 $3)\n  # return=($1 $3 $2)\n  # return=($2\
    \ $1 $3)\n  # return=($2 $3 $1)\n  # return=($3 $1 $2)\n  # return=($3 $2 $1)\n\
    \  # return=($1 $1 $1)\n  # return=($2 $2 $2)\n  # return=($3 $3 $3)\n  # return=($1\
    \ $1 $2)\n  # return=($1 $1 $3)\n  # return=($1 $2 $1)\n  # return=($1 $2 $2)\n\
    \  # return=($1 $2 $3)\n  # return=($1 $3 $1)\n  # return=($1 $3 $2)\n  # return=($1\
    \ $3 $3)\n  # return=($2 $1 $1)\n  # return=($2 $1 $2)\n  # return=($2 $1 $3)\n\
    \  # return=($2 $2 $1)\n  # return=($2 $2 $3)\n  # return=($2 $3 $1)\n  # return=($2\
    \ $3 $2)\n  # return=($2 $3 $3)\n  # return=($3 $1 $1)\n  # return=($3 $1 $2)\n\
    \  # return=($3 $1 $3)\n  # return=($3 $2 $1)\n  # return=($3 $2 $2)\n ", "  if\
    \ [ $2 -le $3 ]; then\n    echo \"[$(( $1 + $2 )), $(( $3 - $2 ))]\"\n  else\n\
    \    echo \"[$(( $1 + $3 )), 0]\"\n  fi", "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  local eaten=$((number + need))\n  if [ $eaten -gt $remaining\
    \ ]; then\n    echo \"[ $remaining, 0 ]\"\n  else\n    echo \"[ $eaten, $((remaining\
    \ - eaten)) ]\"\n  fi", "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n\
    \    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le 1000 ]; then\n      if\
    \ [ $2 -le $3 ]; then\n        echo \"[$(($1 + $2)), $(($3 - $2))]\"\n      else\n\
    \        echo \"[$(($1 + $3)), 0]\"\n      fi\n    else\n      echo \"Error: Constrain\"\
    \n    fi\n  else\n    echo \"Error: Constrain\"\n  fi", "  local number=$1\n \
    \ local need=$2\n  local remaining=$3\n  local total=$((number + remaining))\n\
    \  local eaten=$((total - remaining))\n  if [ $total -ge $need ]; then\n    echo\
    \ \"[$eaten, $remaining]\"\n  else\n    echo \"[$total, 0]\"\n  fi", "  # Write\
    \ your code here\n  # You can access the variables $1, $2 and $3 as the first,\
    \ second and third argument\n  # You can print to standard output\n\n  # Example:\n\
    \  # echo $1 $2 $3\n  # echo \"Hello World!\"\n  if [ $1 -ge 0 ] && [ $2 -ge 0\
    \ ] && [ $3 -ge 0 ]; then\n    if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le\
    \ 1000 ]; then\n      if [ $3 -ge $2 ]; then\n        echo $(( $1 + $2 )) $((\
    \ $3 - $2 ))\n      else\n        echo $(( $1 + $3 )) 0\n      fi\n    fi\n  fi",
  "  if [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $2 -le $3 ];\
    \ then\n      echo \"[$(($1 + $2)), $(($3 - $2))]\"\n    else\n      echo \"[$(($1\
    \ + $3)), 0]\"\n    fi\n  else\n    echo \"[0, 0]\"\n  fi"]
stop_tokens:
- "\n}"
