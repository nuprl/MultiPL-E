name: HumanEval_99_closest_integer
language: sh
prompt: "#!/bin/bash\n# Create a function that takes a value (string) representing\
  \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
  # from two integers, round it away from zero.\n# Examples\n# Note:\n# Rounding away\
  \ from zero means that if the given number is equidistant\n# from two integers,\
  \ the one you should return is the one that is the\n# farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should\
  \ return -15.\n#\n# $1 is a string\nclosest_integer() {\n"
tests: "}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
  \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\"\
  \ ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
completions: ["  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'",
  "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "  # Write your code here\n\
    \  echo \"Not implemented\"", "  # Write your code here\n  # echo \"closest_integer\
    \ $1\"\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc -l\n\
    \  # echo \"scale=0; $1/1\" | bc -l | sed 's/\\..*//'\n  # echo \"scale=0; $1/1\"\
    \ | bc -l | sed 's/\\..*//' | sed 's/-//'\n  # echo \"scale=0; $1/1\" | bc -l\
    \ | sed 's/\\..*//' | sed 's/-//' | sed 's/^0*//'\n  # echo \"scale=0; $1/1\"\
    \ | bc -l | sed 's/\\..*//' | sed 's/-//' | sed 's/^0*//' | sed 's/^$/0/'\n  #\
    \ echo \"scale=0; $1/1\" | bc -l | sed 's/\\..*//' | sed 's/-//' | sed 's/^0*//'\
    \ | sed 's/^$/0/' | sed 's/^-//'\n  # echo \"scale=0; $1/1\" | bc -l | sed 's/\\\
    ..*//' | sed 's/-//' | sed 's/^0*//' | sed 's/^$/0/' | sed 's/^-//' | sed 's/^/-/'\n\
    \  # echo \"scale=0; $1/1\" | bc -l | sed 's/\\..*//' | sed 's/-//' | sed 's/^0*//'\
    \ | sed 's/^$/0/' | sed 's/^-//' | sed 's/^/-/' | sed 's/^0/-0/'\n  # echo \"\
    scale=0; $1/1\" | bc -l | sed 's/\\..*//' | sed 's/-//' | sed 's/^0*//' | sed\
    \ 's/^$/0/' | sed 's/^-//' | sed 's/", "  local num=$1\n  local int=${num%.*}\n\
    \  local dec=${num#*.}\n  if (( dec >= 5 )); then\n    (( int++ ))\n  fi\n  echo\
    \ $int", "  # Write your code here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n\
    \  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo\
    \ ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n\
    \  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo\
    \ ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n\
    \  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo\
    \ ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n\
    \  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo\
    \ ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n\
    \  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo\
    \ ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n\
    \  # echo ${1#-}\n  # echo ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo\
    \ ${1%.*}\n  # echo ${1#-}\n  # echo ${1#-}\n  # echo ${1%.*}\n  # echo", "  #\
    \ Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1 + 0.5 * sign($1)}'",
  "  # Write your code here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  #\
    \ echo $((10#${1#*.}))\n  # echo $((10#${1#*.} > 5))\n  # echo $((10#${1#*.} <\
    \ 5))\n  # echo $((10#${1#*.} == 5))\n  # echo $((10#${1#*.} > 5))\n  # echo $((10#${1#*.}\
    \ < 5))\n  # echo $((10#${1#*.} == 5))\n  # echo $((10#${1#*.} >= 5))\n  # echo\
    \ $((10#${1#*.} <= 5))\n  # echo $((10#${1#*.} != 5))\n  # echo $((10#${1#*.}\
    \ > 5))\n  # echo $((10#${1#*.} < 5))\n  # echo $((10#${1#*.} == 5))\n  # echo\
    \ $((10#${1#*.} >= 5))\n  # echo $((10#${1#*.} <= 5))\n  # echo $((10#${1#*.}\
    \ != 5))\n  # echo $((10#${1#*.} > 5))\n  # echo $((10#${1#*.} < 5))\n  # echo\
    \ $((10#${1#*.} == 5))\n  # echo $((10#${1#*.} >= 5))\n  # echo $((10#${1#*.}\
    \ <= 5))\n  # echo $((10#${1#*.} != 5))\n  # echo $((10#${1#*.} > 5))\n  # echo\
    \ $((10#${1#*.} < 5))\n  # echo $((10#${1#*.} == 5))\n  # echo $((10#${1#*.} >=\
    \ 5))\n  # echo $((10#${1#*.} <= 5))\n  # echo $((10#${1#*.} != 5))\n  # echo\
    \ $((10#${1#*.} > 5))\n  # echo $((10#${1#*.} < 5))\n  #", "  # Write your code\
    \ here\n  printf \"%.0f\\n\" \"$1\"", "  # Write your code here\n  # echo $1\n\
    \  # echo $1 | awk '{printf(\"%d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"%d\\\
    n\", $1 + 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n  # echo\
    \ $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\\
    n\", $1 - 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n  # echo\
    \ $1 | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\\
    n\", $1 + 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n  # echo\
    \ $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\\
    n\", $1 - 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n  # echo\
    \ $1 | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\\
    n\", $1 + 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n  # echo\
    \ $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\\
    n\", $1 - 0.5)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n  # echo\
    \ $1 | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n  # echo $1 | awk", "  local num=${1}\n\
    \  local int=$(printf \"%.0f\" \"${num}\")\n  local decimal=$(echo \"${num} -\
    \ ${int}\" | bc)\n  if (( $(echo \"${decimal} > 0.5\" | bc -l) )); then\n    ((\
    \ int++ ))\n  elif (( $(echo \"${decimal} < -0.5\" | bc -l) )); then\n    (( int--\
    \ ))\n  fi\n  echo \"${int}\"", "  # Write your code here\n  echo \"Not implemented\"",
  "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code\
    \ here\n  # Use echo to print to stdout\n  # Use $1 to get the first argument\
    \ passed to the function\n  echo $1", "    # Write your code here\n    echo \"\
    $1\" | awk '{printf \"%d\\n\", $1}'", "  # your code here\n  echo $1 | awk '{printf\
    \ \"%.0f\\n\", $1}'", "  echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5 * sign($1))}'",
  "  # Write your code here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  #\
    \ echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo\
    \ ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n\
    \  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo\
    \ ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n\
    \  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo\
    \ ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n\
    \  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo\
    \ ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n\
    \  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo\
    \ ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n\
    \  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo\
    \ ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo", " \
    \ # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n\
    \  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo\
    \ ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n\
    \  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo\
    \ ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n\
    \  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo\
    \ ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n\
    \  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo\
    \ ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n\
    \  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo\
    \ ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n\
    \  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo\
    \ ${1#*.}\n  # echo ${1#*.}\n  # echo ${1#*.}\n  # echo", "  echo \"$1\" | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Write your code here\n  # echo $1\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\"\
    , $1}'", "  # Write your code here\n  if [[ $1 =~ ^-?[0-9]+\\.[0-9]+$ ]]; then\n\
    \    if [[ $1 =~ ^-?[0-9]+\\.5$ ]]; then\n      if [[ $1 =~ ^- ]]; then\n    \
    \    echo $(( $1 - 1 ))\n      else\n        echo $(( $1 + 1 ))\n      fi\n  \
    \  else\n      echo $(( $1 + 0.5 )) | cut -d. -f1\n    fi\n  else\n    echo $1\n\
    \  fi", "  # Write your code here\n  echo $1 | awk '{printf \"%.0f\\n\", $1}'",
  "  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  local number=$1\n  local decimal=${number##*.}\n\
    \  local integer=${number%.*}\n  if [[ $decimal -ge 5 ]]; then\n    ((integer++))\n\
    \  fi\n  echo $integer", "  # Write your code here\n  echo $1 | awk '{printf \"\
    %d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf \"%.0f\\n\"\
    , $1}'", "  # Write your code here\n  # Use echo to print to stdout\n  echo \"\
    0\"", "  # Write your code here\n  echo -n \"$1\" | awk '{printf \"%d\\n\", $1}'",
  "  # Write your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write\
    \ your code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your\
    \ code here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}${1#*.}\n\
    \  # echo ${1%.*}${1#*.} | bc\n  # echo ${1%.*}${1#*.} | bc | cut -c1\n  # echo\
    \ ${1%.*}${1#*.} | bc | cut -c1-1\n  # echo ${1%.*}${1#*.} | bc | cut -c1-1 |\
    \ sed 's/^0*//'\n  # echo ${1%.*}${1#*.} | bc | cut -c1-1 | sed 's/^0*//' | sed\
    \ 's/^-0*//'\n  # echo ${1%.*}${1#*.} | bc | cut -c1-1 | sed 's/^0*//' | sed 's/^-0*//'\
    \ | sed 's/^$/0/'\n  # echo ${1%.*}${1#*.} | bc | cut -c1-1 | sed 's/^0*//' |\
    \ sed 's/^-0*//' | sed 's/^$/0/' | sed 's/^-//'\n  # echo ${1%.*}${1#*.} | bc\
    \ | cut -c1-1 | sed 's/^0*//' | sed 's/^-0*//' | sed 's/^$/0/' | sed 's/^-//'\
    \ | sed 's/^/0/'\n  # echo ${1%.*}${1#*.} | bc | cut -c1-1 | sed 's/^0*//' | sed\
    \ 's/^-0*//' | sed 's/^$/0/' | sed 's/^-//' | sed 's/^/0/' | sed 's/^-/1/'\n \
    \ # echo ${1%.*}${1#*.} | bc | cut -c1-1 | sed 's/^0*//' | sed 's/^-0*//' | sed\
    \ 's/^$/", "  # Write your code here\n  echo \"$1\" | awk '{printf \"%.0f\\n\"\
    , $1}'", "  # Write your code here\n  # Use echo to print to stdout\n  # Use $1\
    \ to access the first argument to the function\n  # Use return to return a value\n\
    \  echo \"Not implemented\"", "  echo $1 | awk '{printf \"%d\\n\", $1}'", "  #\
    \ Write your code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  # echo $1\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}'\n \
    \ # echo $1 | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\n\
    \  # echo $1 | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' |\
    \ awk '{printf(\"%d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}' |\
    \ awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\
    \ | awk '{printf(\"%d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}'\
    \ | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\n\
    \  # echo $1 | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' |\
    \ awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\n\
    \  # echo $1 | awk", "  local number=$1\n  local decimal=$(echo $number | cut\
    \ -d. -f2)\n  local integer=$(echo $number | cut -d. -f1)\n  if [ \"$decimal\"\
    \ -gt \"5\" ]; then\n    echo $((integer + 1))\n  elif [ \"$decimal\" -lt \"5\"\
    \ ]; then\n    echo $integer\n  else\n    if [ \"$integer\" -gt \"0\" ]; then\n\
    \      echo $((integer + 1))\n    else\n      echo $((integer - 1))\n    fi\n\
    \  fi", "  # Write your code here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n\
    \  # echo ${1%.*}${1#*.}\n  # echo ${1%.*}${1#*.} | sed 's/^0*//'\n  # echo ${1%.*}${1#*.}\
    \ | sed 's/^0*//' | wc -c\n  # echo ${1%.*}${1#*.} | sed 's/^0*//' | wc -c | sed\
    \ 's/ //g'\n  # echo ${1%.*}${1#*.} | sed 's/^0*//' | wc -c | sed 's/ //g' | sed\
    \ 's/^0*//'\n  # echo ${1%.*}${1#*.} | sed 's/^0*//' | wc -c | sed 's/ //g' |\
    \ sed 's/^0*//' | sed 's/^0*//'\n  # echo ${1%.*}${1#*.} | sed 's/^0*//' | wc\
    \ -c | sed 's/ //g' | sed 's/^0*//' | sed 's/^0*//' | sed 's/^0*//'\n  # echo\
    \ ${1%.*}${1#*.} | sed 's/^0*//' | wc -c | sed 's/ //g' | sed 's/^0*//' | sed\
    \ 's/^0*//' | sed 's/^0*//' | sed 's/^0*//'\n  # echo ${1%.*}${1#*.} | sed 's/^0*//'\
    \ | wc -c | sed 's/ //g' | sed 's/^0*//' | sed 's/^0*//' | sed 's/^0*//' | sed\
    \ 's/^0*//' | sed 's/^0*//'\n  # echo ${1%.*}${1#*.} | sed 's/^0*//' | wc -c |\
    \ sed 's/ //g' | sed 's/", "  # Write your code here\n  # echo $1\n  # echo \"\
    scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\"\
    \ | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #\
    \ echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n\
    \  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"\
    scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\"\
    \ | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #\
    \ echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n\
    \  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"\
    scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\"\
    \ | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #\
    \ echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #", "  # your\
    \ code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your code\
    \ here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n\
    \  echo $1 | awk '{printf \"%d\\n\", $1}'", "  echo \"$1\" | awk '{printf \"%.0f\\\
    n\", $1}'", "  local number=$1\n  local integer=$(printf \"%.0f\" $number)\n \
    \ local decimal=$(echo $number | cut -d'.' -f2)\n  if [ -z $decimal ]; then\n\
    \    echo $integer\n  elif [ $decimal -gt 0 ]; then\n    echo $((integer + 1))\n\
    \  else\n    echo $((integer - 1))\n  fi", "  # Write your code here\n  echo $1\
    \ | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\"\
    , $1}'", "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "  # Write your code\
    \ here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  #\
    \ echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo\
    \ ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n\
    \  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo\
    \ ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n\
    \  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo\
    \ ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n\
    \  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo\
    \ ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n\
    \  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo\
    \ ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n\
    \  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo\
    \ ${1%.*}\n  # echo ${1#*.}\n  # echo ${1%.*}\n  # echo", "  # Write your code\
    \ here\n  # You can access the input string as $1\n  # You can print to standard\
    \ output using echo\n  # To debug: echo \"Debug messages...\" >&2\n  #\n  # echo\
    \ \"14.5\" | awk '{printf(\"%d\\n\",$1)}'\n  # echo \"-14.5\" | awk '{printf(\"\
    %d\\n\",$1)}'\n  # echo \"14.5\" | awk '{printf(\"%d\\n\",$1+0.5)}'\n  # echo\
    \ \"-14.5\" | awk '{printf(\"%d\\n\",$1-0.5)}'\n  # echo \"14.5\" | awk '{printf(\"\
    %d\\n\",$1+0.5); printf(\"%d\\n\",$1-0.5)}'\n  # echo \"-14.5\" | awk '{printf(\"\
    %d\\n\",$1+0.5); printf(\"%d\\n\",$1-0.5)}'\n  # echo \"14.5\" | awk '{printf(\"\
    %d\\n\",$1+0.5); printf(\"%d\\n\",$1-0.5); printf(\"%d\\n\",$1)}'\n  # echo \"\
    -14.5\" | awk '{printf(\"%d\\n\",$1+0.5); printf(\"%d\\n\",$1-0.5); printf(\"\
    %d\\n\",$1)}'\n  # echo \"14.5\" | awk '{printf(\"%d\\n\",$1+0.5); printf(\"%d\\\
    n\",$1-0.5); printf(\"%d\\n\",$1); printf(\"%d\\n\",$1-1)}'\n  # echo \"-14.5\"\
    \ | awk '{printf(\"%d\\n\",$1+0.5); printf(\"%d\\n\",$1-0.5); printf(\"%d\\n\"\
    ,$1); printf(\"%d\\n\",$1-1)}'\n  # echo \"14.5\" | awk '{printf(\"%d\\n\",$1+0.5);\
    \ printf(\"%d\\n\",", "  # Write your code here\n  echo $1 | awk '{printf \"%.0f\\\
    n\", $1}'", "  # Write your code here\n  #echo \"closest_integer($1)\"\n  #echo\
    \ \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\"\
    \ | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo\
    \ \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\"\
    \ | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo\
    \ \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\"\
    \ | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo\
    \ \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\"\
    \ | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo\
    \ \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\"\
    \ | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo\
    \ \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\"\
    \ | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo\
    \ \"scale=0; $1/", "  # Write your code here\n  echo \"$1\" | awk '{printf \"\
    %d\\n\", $1}'", "  # Write your code here\n  # Use echo to print to stdout\n \
    \ echo -n \"Your answer is: \"\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", " \
    \ echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "    # Write your code here\n \
    \   echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # your code here\n  echo $1\
    \ | awk '{printf \"%.0f\\n\", $1}'", "  # Write your code here\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "  # Write your code here\n  # Use echo to print to stdout\n\
    \  # Use $1 to get the first argument\n  # Use $2 to get the second argument\n\
    \  # Use $# to get the number of arguments\n  # Use $@ to get all the arguments\n\
    \  # Use $? to get the exit status of the last command\n  # Use $$ to get the\
    \ process ID of the current shell\n  # Use $USER to get the username of the current\
    \ user\n  # Use $HOSTNAME to get the hostname of the machine\n  # Use $SECONDS\
    \ to get the number of seconds since the shell was started\n  # Use $RANDOM to\
    \ get a random number\n  # Use $LINENO to get the current line number in the Bash\
    \ script\n  # Use $0 to get the name of the Bash script\n  # Use $FUNCNAME to\
    \ get the name of the current function\n  # Use $DIRSTACK to get an array of the\
    \ current contents of the directory stack\n  # Use $PIPESTATUS to get an array\
    \ of exit statuses from the processes in the most recently executed foreground\
    \ pipeline\n  # Use $BASH_VERSION to get the version of Bash running\n  # Use\
    \ $BASH_VERSINFO to get an array variable whose members hold version information\
    \ for this instance of Bash\n  # Use $BASH_SOURCE to get an array variable whose\
    \ members are the source filenames where the corresponding shell function names\
    \ in the FUNCNAME array variable are defined\n  # Use $BASH_LINENO to get an array\
    \ variable whose members are the line numbers in source filenames where the corresponding\
    \ shell function names in the FUNCNAME array variable are defined\n  # Use $BASH_EXECUTION_STRING\
    \ to get the original command argument string\n  # Use $BASH_REMATCH to get an\
    \ array variable whose members are assigned by the =~ binary operator to the [[\
    \ conditional command\n  # Use $BASH_SUBSHELL to get the subshell level\n  # Use\
    \ $BASH_SUBSHELL to get the subshell level\n  # Use $BASH_SUBSHELL to get the\
    \ subshell level\n  # Use $BASH_SUBSHELL to get the subshell level\n  # Use $BASH_SUBSHELL\
    \ to get the subshell level\n ", "  local num=$1\n  local int=${num%.*}\n  local\
    \ dec=${num#*.}\n  if (( dec >= 5 )); then\n    (( int++ ))\n  fi\n  echo $int",
  "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  #echo \"closest_integer\"\n  #echo $1\n  #echo \"scale=0;\
    \ $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n\
    \  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0;\
    \ $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n\
    \  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0;\
    \ $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n\
    \  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0;\
    \ $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n\
    \  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0;\
    \ $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n\
    \  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0;\
    \ $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n\
    \  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0; $1/1\" | bc\n  #echo \"scale=0",
  "  # Write your code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "    #\
    \ Write your code here\n    # Use echo to print to stdout\n    echo \"Not implemented\"",
  "  # Write your code here\n  # echo $1\n  # echo $1 | awk '{print int($1+0.5)}'\n\
    \  # echo $1 | awk '{print int($1+0.5)}' | bc\n  echo $1 | awk '{print int($1+0.5)}'\
    \ | bc", "  # Write your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  # echo $1\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc | awk '{printf \"%d\\n\", $0}'\n  # echo \"scale=0; $1/1\" | bc\
    \ | awk '{printf \"%d\\n\", $0}' | sed 's/^-//'\n  # echo \"scale=0; $1/1\" |\
    \ bc | awk '{printf \"%d\\n\", $0}' | sed 's/^-//' | sed 's/^0//'\n  # echo \"\
    scale=0; $1/1\" | bc | awk '{printf \"%d\\n\", $0}' | sed 's/^-//' | sed 's/^0//'\
    \ | sed 's/^/0/'\n  # echo \"scale=0; $1/1\" | bc | awk '{printf \"%d\\n\", $0}'\
    \ | sed 's/^-//' | sed 's/^0//' | sed 's/^/0/' | sed 's/^/-/'\n  echo \"scale=0;\
    \ $1/1\" | bc | awk '{printf \"%d\\n\", $0}' | sed 's/^-//' | sed 's/^0//' | sed\
    \ 's/^/0/' | sed 's/^/-/'", "  # Write your code here\n  local number=$1\n  local\
    \ int_number=$(echo $number | cut -d. -f1)\n  local decimal_number=$(echo $number\
    \ | cut -d. -f2)\n  if [ $decimal_number -ge 5 ]; then\n    echo $((int_number\
    \ + 1))\n  else\n    echo $int_number\n  fi", "  # Write your code here\n  echo\
    \ $1 | awk '{printf(\"%d\\n\", $1 + 0.5 * sign($1))}'", "  # Write your code here\n\
    \  #\n  # Hint:\n  #   Use the bash built-in command `bc` to do floating point\
    \ arithmetic\n  #   and the bash built-in command `echo` to print the result.\n\
    \  #   For example, `echo \"1.2 + 2.3\" | bc` prints 3.5.\n  #   See the man page\
    \ of `bc` for more information.\n  #\n  #   You may also want to use the bash\
    \ built-in command `printf` to\n  #   format the output.\n  #   For example, `printf\
    \ \"%0.2f\" 3.5` prints 3.50.\n  #   See the man page of `printf` for more information.\n\
    \  #\n  #   You may also want to use the bash built-in command `test` to\n  #\
    \   check if a number is positive or negative.\n  #   For example, `test 3 -gt\
    \ 0` returns true (0) and `test 3 -lt 0`\n  #   returns false (1).\n  #   See\
    \ the man page of `test` for more information.\n  #\n  #   You may also want to\
    \ use the bash built-in command `expr` to\n  #   do arithmetic.\n  #   For example,\
    \ `expr 3 + 4` prints 7.\n  #   See the man page of `expr` for more information.\n\
    \  #\n  #   You may also want to use the bash built-in command `seq` to\n  # \
    \  generate a sequence of numbers.\n  #   For example, `seq 1 3` prints 1 2 3.\n\
    \  #   See the man page of `seq` for more information.\n  #\n  #   You may also\
    \ want to use the bash built-in command `sort` to\n  #   sort a list of numbers.\n\
    \  #   For example, `echo \"3 2 1\" | sort -n` prints 1 2 3.\n  #   See the man\
    \ page of `sort` for more information.\n  #\n  #   You may also want to use the\
    \ bash built-in command `head` to\n  #   get the first element of a list.\n  #\
    \   For example, `echo \"1 2 3\" | head -n 1` prints", "  # Write your code here\n\
    \  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # echo\
    \ \"$1\" | awk '{printf(\"%d\\n\", $1)}'\n  # echo \"$1\" | awk '{printf(\"%d\\\
    n\", $1+0.5)}'\n  # echo \"$1\" | awk '{printf(\"%d\\n\", $1-0.5)}'\n  # echo\
    \ \"$1\" | awk '{printf(\"%d\\n\", $1+0.5)}'\n  # echo \"$1\" | awk '{printf(\"\
    %d\\n\", $1-0.5)}'\n  # echo \"$1\" | awk '{printf(\"%d\\n\", $1+0.5)}'\n  # echo\
    \ \"$1\" | awk '{printf(\"%d\\n\", $1-0.5)}'\n  # echo \"$1\" | awk '{printf(\"\
    %d\\n\", $1+0.5)}'\n  # echo \"$1\" | awk '{printf(\"%d\\n\", $1-0.5)}'\n  # echo\
    \ \"$1\" | awk '{printf(\"%d\\n\", $1+0.5)}'\n  # echo \"$1\" | awk '{printf(\"\
    %d\\n\", $1-0.5)}'\n  # echo \"$1\" | awk '{printf(\"%d\\n\", $1+0.5)}'\n  # echo\
    \ \"$1\" | awk '{printf(\"%d\\n\", $1-0.5)}'\n  # echo \"$1\" | awk '{printf(\"\
    %d\\n\", $1+0.5)}'\n  # echo \"$1\" | awk '{printf(\"%d\\n\", $1-0.5)}'\n  # echo\
    \ \"$1\" | awk '{printf(\"%d\\n\", $1+0.5)}'\n  # echo \"$1\" | awk '{printf(\"\
    %d\\n\", $1-0.5)}'\n  # echo \"$1\" | awk '{printf(\"%d\\n\", $1+0.5)}'\n  # echo\
    \ \"$1\" | awk '{printf(\"%d\\n\", $1-0", "  # Write your code here\n  # Use echo\
    \ to print to stdout\n  echo \"Not implemented\"", "  # Write your code here\n\
    \  # $1 is a string\n  # return the closest integer to it\n  # If the number is\
    \ equidistant from two integers, round it away from zero.\n  # Examples\n  # Note:\n\
    \  # Rounding away from zero means that if the given number is equidistant\n \
    \ # from two integers, the one you should return is the one that is the\n  # farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n  # return 15 and closest_integer(\"\
    -14.5\") should return -15.\n  #\n  # $1 is a string\n  # return the closest integer\
    \ to it\n  # If the number is equidistant from two integers, round it away from\
    \ zero.\n  # Examples\n  # Note:\n  # Rounding away from zero means that if the\
    \ given number is equidistant\n  # from two integers, the one you should return\
    \ is the one that is the\n  # farthest from zero. For example closest_integer(\"\
    14.5\") should\n  # return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \  #\n  # $1 is a string\n  # return the closest integer to it\n  # If the number\
    \ is equidistant from two integers, round it away from zero.\n  # Examples\n \
    \ # Note:\n  # Rounding away from zero means that if the given number is equidistant\n\
    \  # from two integers, the one you should return is the one that is the\n  #\
    \ farthest from zero. For example closest_integer(\"14.5\") should\n  # return\
    \ 15 and closest_integer(\"-14.5\") should return -15.\n  #\n  # $1 is a string\n\
    \  # return the closest integer to it\n  # If the number is equidistant from two\
    \ integers, round it away from zero.\n  # Examples\n  # Note:\n  # Rounding away\
    \ from zero means that if the given number is equidistant\n  # from two integers,\
    \ the one you should return is the one that is the\n  # farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n  # return 15 and closest_integer(\"\
    -14.5\") should return -15.\n  #\n  # $1 is a string\n", "  # Write your code\
    \ here\n  # echo $1\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\"\
    \ | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #\
    \ echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n\
    \  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"\
    scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\"\
    \ | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #\
    \ echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n\
    \  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"\
    scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\"\
    \ | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #\
    \ echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc\n  #", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\\
    n\", $1}'", "  # Write your code here\n  # echo $1\n  # echo ${1%.*}\n  # echo\
    \ ${1#*.}\n  # echo ${1%.*}${1#*.}\n  # echo ${1%.*}${1#*.} | sed 's/^-//'\n \
    \ # echo ${1%.*}${1#*.} | sed 's/^-//' | wc -c\n  # echo ${1%.*}${1#*.} | sed\
    \ 's/^-//' | wc -c | sed 's/^1//'\n  # echo ${1%.*}${1#*.} | sed 's/^-//' | wc\
    \ -c | sed 's/^1//' | wc -c\n  # echo ${1%.*}${1#*.} | sed 's/^-//' | wc -c |\
    \ sed 's/^1//' | wc -c | sed 's/^1//'\n  # echo ${1%.*}${1#*.} | sed 's/^-//'\
    \ | wc -c | sed 's/^1//' | wc -c | sed 's/^1//' | sed 's/^1//'\n  # echo ${1%.*}${1#*.}\
    \ | sed 's/^-//' | wc -c | sed 's/^1//' | wc -c | sed 's/^1//' | sed 's/^1//'\
    \ | sed 's/^1//'\n  # echo ${1%.*}${1#*.} | sed 's/^-//' | wc -c | sed 's/^1//'\
    \ | wc -c | sed 's/^1//' | sed 's/^1//' | sed 's/^1//' | sed 's/^1//'\n  # echo\
    \ ${1%.*}${1#*.} | sed 's/^-//' | wc -c | sed 's/^1//' | wc -c | sed 's/^1//'\
    \ | sed 's/^1//' | sed 's/^1//' | sed 's/^1//' |", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  # Use $1 to get the first argument passed\n\
    \  # Use $# to get the number of arguments passed\n  # Use $@ to get all arguments\
    \ passed\n  # Use $? to get the exit status of the last command\n  # Use $$ to\
    \ get the process ID of the current shell\n  # Use $0 to get the name of the shell\
    \ or shell script\n  # Use $USER to get the username of the user running the script\n\
    \  # Use $HOSTNAME to get the hostname of the machine the script is running on\n\
    \  # Use $SECONDS to get the number of seconds since the shell was started\n \
    \ # Use $RANDOM to get a random number\n  # Use $LINENO to get the current line\
    \ number in the Bash script\n  # Use $DIRSTACK to get an array of directory names\
    \ that the shell has visited\n  # Use $BASH_VERSION to get the version of the\
    \ current instance of Bash\n  # Use $BASH_VERSINFO to get an array of version\
    \ information for the current instance of Bash\n  # Use $EUID to get the numeric\
    \ effective user ID of the current user\n  # Use $UID to get the numeric real\
    \ user ID of the current user\n  # Use $FUNCNAME to get the name of the current\
    \ function or dot script\n  # Use $GROUPS to get an array of group IDs that the\
    \ current user is a member of\n  # Use $HISTFILE to get the name of the file in\
    \ which the command history is saved\n  # Use $HISTFILESIZE to get the maximum\
    \ number of lines contained in the history file\n  # Use $HISTSIZE to get the\
    \ maximum number of commands to remember on the history list\n  # Use $HOSTTYPE\
    \ to get the type of machine Bash is running on\n  # Use $MACHTYPE to get a string\
    \ that fully describes the system type on which Bash is running\n  # Use $OSTYPE\
    \ to get a string describing the operating system Bash is running on\n  # Use\
    \ $PIPESTATUS to get an array of exit status values from the processes in the\
    \ most-recently-executed foreground pipeline\n  # Use $SHELLOPTS to get a list\
    \ of enabled shell options\n  # Use $SHLVL to get the", "  # Write your code here\n\
    \  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo \"Not\
    \ implemented\"", "  local number=$1\n  local int_part=${number%.*}\n  local dec_part=${number#*.}\n\
    \  if (( dec_part >= 5 )); then\n    (( int_part++ ))\n  fi\n  echo $int_part",
  "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  # echo $1 | awk '{printf \"%.0f\\n\", $1}'\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  echo \"Not implemented yet\"", "  # Write your code here\n  echo\
    \ \"$1\" | awk '{printf \"%d\\n\", $1}'", "  echo $1 | awk '{printf \"%d\\n\"\
    , $1}'", "  # Write your code here\n  # echo \"closest_integer($1)\"\n  # echo\
    \ \"closest_integer(14.5)\"\n  # echo \"closest_integer(-14.5)\"\n  # echo \"\
    closest_integer(14.4)\"\n  # echo \"closest_integer(-14.4)\"\n  # echo \"closest_integer(14.6)\"\
    \n  # echo \"closest_integer(-14.6)\"\n  # echo \"closest_integer(14.0)\"\n  #\
    \ echo \"closest_integer(-14.0)\"\n  # echo \"closest_integer(0.0)\"\n  # echo\
    \ \"closest_integer(-0.0)\"\n  # echo \"closest_integer(0.1)\"\n  # echo \"closest_integer(-0.1)\"\
    \n  # echo \"closest_integer(0.5)\"\n  # echo \"closest_integer(-0.5)\"\n  # echo\
    \ \"closest_integer(0.6)\"\n  # echo \"closest_integer(-0.6)\"\n  # echo \"closest_integer(0.9)\"\
    \n  # echo \"closest_integer(-0.9)\"\n  # echo \"closest_integer(0.99)\"\n  #\
    \ echo \"closest_integer(-0.99)\"\n  # echo \"closest_integer(1.0)\"\n  # echo\
    \ \"closest_integer(-1.0)\"\n  # echo \"closest_integer(1.1)\"\n  # echo \"closest_integer(-1.1)\"\
    \n  # echo \"closest_integer(1.5)\"\n  # echo \"closest_integer(-1.5)\"\n  # echo\
    \ \"closest_integer(1.6)\"\n  # echo \"closest_integer(-1.6)\"\n  # echo \"closest_integer(1.9)\"\
    \n  # echo \"closest_integer(-1.9)\"\n  # echo \"closest_integer(1.99)\"\n  #\
    \ echo \"closest_integer(-1.99)\"\n  # echo \"closest_integer(2", "    # Write\
    \ your code here\n    echo \"$1\" | awk '{printf \"%.0f\\n\", $1}'", "  # Write\
    \ your code here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1#*.}\
    \ | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1#*.} | cut -c 1\n  # echo\
    \ ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n\
    \  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} |\
    \ cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo\
    \ ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n\
    \  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} |\
    \ cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo\
    \ ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n\
    \  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} |\
    \ cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo\
    \ ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n\
    \  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${1%.*} |\
    \ cut -c 1\n  # echo ${1%.*} | cut -c 1\n  # echo ${", "  # Write your code here\n\
    \  echo \"$1\" | awk '{printf \"%d\\n\", $1 + 0.5 * sign($1)}'", "  echo \"$1\"\
    \ | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo \"$1\" |\
    \ awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\\
    n\", $1}'", '  echo "scale=0; $1/1" | bc', "  # Write your code here\n  printf\
    \ \"%.0f\\n\" \"$1\"", "  # Write your code here\n  echo $1 | awk '{printf \"\
    %.0f\\n\", $1}'", "  # Write your code here\n  # Use echo to print to stdout\n\
    \  echo \"Not implemented yet\"", "    # Write your code here\n    echo $1 | awk\
    \ '{printf \"%.0f\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1 + 0.5 * sign($1)}'", "  # Write your code here\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'", "    # Write your code here\n    echo \"$1\" | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  echo \"Not implemented\"", "  # Write your code here\n  echo \"\
    $1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  # Use $1 to get the first argument\n  # Use $2 to get the second\
    \ argument\n  # Use $# to get the number of arguments\n  # Use $@ to get all arguments\n\
    \  # Use $? to get the exit code of the last command\n  # Use $$ to get the process\
    \ ID of the current shell\n  # Use $USER to get the username of the current user\n\
    \  # Use $HOSTNAME to get the hostname of the machine\n  # Use $SECONDS to get\
    \ the number of seconds since the shell was started\n  # Use $RANDOM to get a\
    \ random number\n  # Use $LINENO to get the current line number in the Bash script\n\
    \  # Use $0 to get the name of the Bash script\n  # Use $FUNCNAME to get the name\
    \ of the current function\n  # Use $BASH_VERSION to get the version of Bash running\n\
    \  # Use $DIRSTACK to get the list of directories in the directory stack\n  #\
    \ Use $PIPESTATUS to get the exit code of the last command in a pipe\n  # Use\
    \ $MACHTYPE to get the system type of the machine Bash is running on\n  # Use\
    \ $BASH_LINENO to get the current line number in the Bash script\n  # Use $BASH_SOURCE\
    \ to get the name of the Bash script\n  # Use $BASH_SUBSHELL to get the subshell\
    \ level of the current process\n  # Use $BASHPID to get the process ID of the\
    \ current Bash process\n  # Use $BASH_EXECUTION_STRING to get the string argument\
    \ passed to the -c option\n  # Use $BASH_REMATCH to get the array of matched substrings\
    \ from the last regex match\n  # Use $BASH_VERSINFO to get the version information\
    \ for this instance of Bash\n  # Use $BASH_ARGC to get the number of arguments\
    \ supplied to a function\n  # Use $BASH_ARGV to get the array of arguments supplied\
    \ to a function\n  # Use $BASH_COMMAND to get the command currently being executed\n\
    \  # Use $BASH_ENV to get the name of the startup file\n  # Use $BASH_SUBSHELL",
  "  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo\
    \ $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  # echo $1\n\
    \  # echo $1 | awk '{print int($1+0.5)}'\n  # echo $1 | awk '{print int($1+0.5)}'\
    \ | bc\n  # echo $1 | awk '{print int($1+0.5)}' | bc | sed 's/-//g'\n  # echo\
    \ $1 | awk '{print int($1+0.5)}' | bc | sed 's/-//g' | sed 's/^0*//'\n  # echo\
    \ $1 | awk '{print int($1+0.5)}' | bc | sed 's/-//g' | sed 's/^0*//' | sed 's/^-0*//'\n\
    \  # echo $1 | awk '{print int($1+0.5)}' | bc | sed 's/-//g' | sed 's/^0*//' |\
    \ sed 's/^-0*//' | sed 's/^-//'\n  # echo $1 | awk '{print int($1+0.5)}' | bc\
    \ | sed 's/-//g' | sed 's/^0*//' | sed 's/^-0*//' | sed 's/^-//' | sed 's/^0*//'\n\
    \  # echo $1 | awk '{print int($1+0.5)}' | bc | sed 's/-//g' | sed 's/^0*//' |\
    \ sed 's/^-0*//' | sed 's/^-//' | sed 's/^0*//' | sed 's/^-0*//'\n  # echo $1\
    \ | awk '{print int($1+0.5)}' | bc | sed 's/-//g' | sed 's/^0*//' | sed 's/^-0*//'\
    \ | sed 's/^-//' | sed 's/^0*//' | sed 's/^-0*//' | sed 's/^-//'\n  # echo $1\
    \ | awk '{print int($1+0.5)}' | bc | sed '", "  # Write your code here\n  echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk\
    \ '{printf \"%.0f\\n\", $1}'", "  # Write your code here\n  echo \"$1\" | awk\
    \ '{printf \"%d\\n\", $1}'", "    # Write your code here\n    # Use echo to print\
    \ to stdout\n    echo $1", "  # Write your code here\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "  # Write your code here\n  # Use echo to print to stdout\n\
    \  # Use printf to print to stderr\n  printf \"Not yet implemented\" 1>&2", " \
    \ # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code\
    \ here\n  echo $1 | awk '{print int($1+0.5)}'", "  local number=$1\n  local floor=$(echo\
    \ \"$number\" | awk '{print int($1)}')\n  local ceil=$(echo \"$number\" | awk\
    \ '{print int($1)+1}')\n  local diff_floor=$(echo \"$number - $floor\" | bc -l)\n\
    \  local diff_ceil=$(echo \"$ceil - $number\" | bc -l)\n  if [[ \"$diff_floor\"\
    \ == \"$diff_ceil\" ]]; then\n    if [[ \"$number\" -lt 0 ]]; then\n      echo\
    \ \"$ceil\"\n    else\n      echo \"$floor\"\n    fi\n  elif [[ \"$diff_floor\"\
    \ -lt \"$diff_ceil\" ]]; then\n    echo \"$floor\"\n  else\n    echo \"$ceil\"\
    \n  fi", "  # Write your code here\n  # echo $1\n  # echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"\
    %d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\
    \ | awk '{printf(\"%d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}'\
    \ | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"\
    %d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\
    \ | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}'\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}'\
    \ | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"%d\\n\", $1)}' | awk '{printf(\"\
    %d\\n\", $1)}'\n  # echo $1 | awk", "  # Write your code here\n  echo \"$1\" |\
    \ awk '{printf \"%d\\n\", $1}'", '  printf "%.0f\n" "$1"', "  # Write your code\
    \ here\n  echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}'", "  # Write your code\
    \ here\n  # Use echo to print to stdout\n  echo $1", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  #echo \"Not implemented yet\"\n  #echo $1\n\
    \  #echo $1 | awk '{printf(\"%d\\n\", $1)}'\n  #echo $1 | awk '{printf(\"%d\\\
    n\", $1 + 0.5)}'\n  #echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}' | awk '{printf(\"\
    %d\\n\", $1)}'\n  #echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}' | awk '{printf(\"\
    %d\\n\", $1 + 0.5)}'\n  #echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}' | awk '{printf(\"\
    %d\\n\", $1 + 0.5)}' | awk '{printf(\"%d\\n\", $1)}'\n  #echo $1 | awk '{printf(\"\
    %d\\n\", $1 + 0.5)}' | awk '{printf(\"%d\\n\", $1 + 0.5)}' | awk '{printf(\"%d\\\
    n\", $1 + 0.5)}' | awk '{printf(\"%d\\n\", $1)}'\n  #echo $1 | awk '{printf(\"\
    %d\\n\", $1 + 0.5)}' | awk '{printf(\"%d\\n\", $1 + 0.5)}' | awk '{printf(\"%d\\\
    n\", $1 + 0.5)}' | awk '{printf(\"%d\\n\", $1 + 0.5)}' | awk '{printf(\"%d\\n\"\
    , $1)}'\n  #echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5)}' | awk '{printf(\"%d\\\
    n\", $1 + 0.5)}' | awk '{printf(\"%d\\n\", $1 + 0.5)}' | awk '{printf(\"%d\\n\"\
    , $1 + 0.5)}' | awk '{printf(\"%d\\n\",", "  # Write your code here\n  echo \"\
    $1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo \"$1\"\
    \ | awk '{printf \"%d\\n\", $1+0.5}'", "  # Write your code here\n  echo $1 |\
    \ awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  if [[ $1 == *.*\
    \ ]]; then\n    if [[ $1 == *.*5 ]]; then\n      if [[ $1 == -* ]]; then\n   \
    \     echo $(( ${1%.*} - 1 ))\n      else\n        echo $(( ${1%.*} + 1 ))\n \
    \     fi\n    else\n      echo ${1%.*}\n    fi\n  else\n    echo $1\n  fi", " \
    \ # Write your code here\n  printf \"%.0f\\n\" \"$1\"", "  # Write your code here\n\
    \  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # echo\
    \ $1\n  # echo $2\n  # echo $3\n  # echo $4\n  # echo $5\n  # echo $6\n  # echo\
    \ $7\n  # echo $8\n  # echo $9\n  # echo ${10}\n  # echo ${11}\n  # echo ${12}\n\
    \  # echo ${13}\n  # echo ${14}\n  # echo ${15}\n  # echo ${16}\n  # echo ${17}\n\
    \  # echo ${18}\n  # echo ${19}\n  # echo ${20}\n  # echo ${21}\n  # echo ${22}\n\
    \  # echo ${23}\n  # echo ${24}\n  # echo ${25}\n  # echo ${26}\n  # echo ${27}\n\
    \  # echo ${28}\n  # echo ${29}\n  # echo ${30}\n  # echo ${31}\n  # echo ${32}\n\
    \  # echo ${33}\n  # echo ${34}\n  # echo ${35}\n  # echo ${36}\n  # echo ${37}\n\
    \  # echo ${38}\n  # echo ${39}\n  # echo ${40}\n  # echo ${41}\n  # echo ${42}\n\
    \  # echo ${43}\n  # echo ${44}\n  # echo ${45}\n  # echo ${46}\n  # echo ${47}\n\
    \  # echo ${48}\n  # echo ${49}\n  # echo ${50}\n  # echo ${51}\n  # echo ${52}\n\
    \  # echo ${53}\n  # echo ${54}\n  # echo ${55}\n  # echo ${56}\n  # echo ${57}\n\
    \  # echo ${58}\n  # echo ${59}\n  # echo ${60}\n  # echo ${61}\n  # echo ${62}\n\
    \  # echo ${63}\n  # echo ${64}\n  # echo ${65}\n  # echo ${66}\n  # echo ${67}\n\
    \  # echo ${68}\n  # echo ${69}\n  # echo ${70}\n  # echo ${71}\n  # echo ${72}\n\
    \  # echo ${73}\n  #", "  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n    echo $1\n  elif [[ $1 =~\
    \ ^[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 | cut -d. -f1\n  elif [[ $1 =~ ^\\-[0-9]+\\\
    .[0-9]+$ ]]; then\n    echo $1 | cut -d. -f1\n  elif [[ $1 =~ ^\\-[0-9]+$ ]];\
    \ then\n    echo $1\n  elif [[ $1 =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1\
    \ | cut -d. -f1\n  elif [[ $1 =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 |\
    \ cut -d. -f1\n  elif [[ $1 =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 | cut\
    \ -d. -f1\n  elif [[ $1 =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 | cut -d.\
    \ -f1\n  elif [[ $1 =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 | cut -d. -f1\n\
    \  elif [[ $1 =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 | cut -d. -f1\n  elif\
    \ [[ $1 =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 | cut -d. -f1\n  elif [[\
    \ $1 =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 | cut -d. -f1\n  elif [[ $1\
    \ =~ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo $1 | cut -d. -f1\n  elif [[ $1 =~\
    \ ^\\-[0-9]+\\.[0-9]+$ ]]; then\n    echo", "  # Write your code here\n  # Round\
    \ the number to the nearest integer\n  # and print it to standard output (stdout)\n\
    \  # Example:\n  #   echo \"15\"\n  #   echo \"-15\"\n  #   echo \"0\"\n  #  \
    \ echo \"1\"\n  #   echo \"-1\"\n  #   echo \"14.5\"\n  #   echo \"-14.5\"\n \
    \ #   echo \"14.4\"\n  #   echo \"-14.4\"\n  #   echo \"14.6\"\n  #   echo \"\
    -14.6\"\n  #   echo \"14.49\"\n  #   echo \"-14.49\"\n  #   echo \"14.51\"\n \
    \ #   echo \"-14.51\"\n  #   echo \"14.500000000000001\"\n  #   echo \"-14.500000000000001\"\
    \n  #   echo \"14.500000000000002\"\n  #   echo \"-14.500000000000002\"\n  # \
    \  echo \"14.500000000000003\"\n  #   echo \"-14.500000000000003\"\n  #   echo\
    \ \"14.500000000000004\"\n  #   echo \"-14.500000000000004\"\n  #   echo \"14.500000000000005\"\
    \n  #   echo \"-14.500000000000005\"\n  #   echo \"14.500000000000006\"\n  # \
    \  echo \"-14.500000000000006\"\n  #   echo \"14.500000000000007\"\n  #   echo\
    \ \"-14.500000000000007\"\n  #   echo \"14.500000000000008\"\n  #   echo \"-14.500000000000008\"\
    \n  #   echo \"14.500000000000009\"\n  #   echo \"-14.500000000000009\"\n  # \
    \  echo \"14.500000000000010\"\n  #   echo \"-14.500000000000010\"\n  #   echo\
    \ \"14.500000000000011\"\n  #   echo \"-14.500000000000011\"\n  #   echo \"14.500000000000012\"\
    \n  #   echo \"-14.500000000000012\"\n  #   echo \"14.500000000000013\"\n  # \
    \  echo \"-14.500000000000013", "  # Write your code here\n  # echo $1\n  # echo\
    \ \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n\
    \  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"\
    scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\"\
    \ | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #\
    \ echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n\
    \  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"\
    scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\"\
    \ | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #\
    \ echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0;\
    \ $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n\
    \  # echo \"scale=0; $1/1\" | bc\n  # echo \"scale=0; $1/1\" | bc\n  #", "  #\
    \ Write your code here\n  #\n  # Hint:\n  #   Use the command `bc` to perform\
    \ floating point arithmetic.\n  #   For example, `bc <<< \"1.0 + 1.0\"` will return\
    \ 2.0.\n  #   See the man page for more information.\n  #\n  #   You can use the\
    \ command `awk` to round a number.\n  #   For example, `awk '{print int($1+0.5)}'\
    \ <<< \"14.5\"` will return 15.\n  #   See the man page for more information.\n\
    \  #\n  #   You can use the command `paste` to concatenate strings.\n  #   For\
    \ example, `paste <(echo \"Hello\") <(echo \"World\")` will return \"HelloWorld\"\
    .\n  #   See the man page for more information.\n  #\n  #   You can use the command\
    \ `bc` to perform floating point arithmetic.\n  #   For example, `bc <<< \"1.0\
    \ + 1.0\"` will return 2.0.\n  #   See the man page for more information.\n  #\n\
    \  #   You can use the command `bc` to perform floating point arithmetic.\n  #\
    \   For example, `bc <<< \"1.0 + 1.0\"` will return 2.0.\n  #   See the man page\
    \ for more information.\n  #\n  #   You can use the command `bc` to perform floating\
    \ point arithmetic.\n  #   For example, `bc <<< \"1.0 + 1.0\"` will return 2.0.\n\
    \  #   See the man page for more information.\n  #\n  #   You can use the command\
    \ `bc` to perform floating point arithmetic.\n  #   For example, `bc <<< \"1.0\
    \ + 1.0\"` will return 2.0.\n  #   See the man page for more information.\n  #\n\
    \  #   You can use the command `bc` to perform floating point arithmetic.\n  #\
    \   For example, `bc <<< \"1.0 + 1.0\"` will return 2.0.\n  #   See the man page\
    \ for more information.\n  #\n  #   You can use the command `bc`", "  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code\
    \ here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n\
    \  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1#*.} | cut -c 1\n\
    \  # echo ${1#*.} | cut -c 1 | grep -q [^0]\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo \"false\"\n  # echo ${1#*.} | cut -c 1 | grep\
    \ -q [^0] && echo \"true\" || echo", "  # Write your code here\n  echo $1 | awk\
    \ '{printf(\"%d\\n\", $1)}'", "  echo \"$1\" | awk '{printf \"%d\\n\", $1}'",
  "  # Write your code here\n  echo $1 | awk '{printf(\"%d\\n\",$1)}'", "  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%d\\n\", $1+0.5}'", "  local num=$1\n\
    \  local int=$(printf \"%.0f\" $num)\n  local dec=$(echo $num | cut -d. -f2)\n\
    \  if [[ $dec -ge 5 ]]; then\n    echo $((int + 1))\n  else\n    echo $int\n \
    \ fi", "  local number=$1\n  local integer=$(printf \"%.0f\" \"$number\")\n  local\
    \ decimal=$(printf \"%.1f\" \"$number\")\n  local decimal_part=$(echo \"$decimal\
    \ - $integer\" | bc)\n  if (( $(echo \"$decimal_part > 0.5\" | bc -l) )); then\n\
    \    echo \"$((integer + 1))\"\n  elif (( $(echo \"$decimal_part < -0.5\" | bc\
    \ -l) )); then\n    echo \"$((integer - 1))\"\n  else\n    echo \"$integer\"\n\
    \  fi", "  # Write your code here\n  # Use echo to print to stdout\n  # Use $1\
    \ to get the first argument passed to the function\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "  # your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'",
  "  # Write your code here\n  #echo $1\n  if [[ $1 =~ ^-?[0-9]+\\.[0-9]+$ ]]; then\n\
    \    #echo \"is float\"\n    #echo $1 | awk '{printf(\"%d\\n\",$1)}'\n    #echo\
    \ $1 | awk '{printf(\"%d\\n\",$1+0.5)}'\n    #echo $1 | awk '{printf(\"%d\\n\"\
    ,$1-0.5)}'\n    #echo $1 | awk '{printf(\"%d\\n\",$1+0.5)}'\n    #echo $1 | awk\
    \ '{printf(\"%d\\n\",$1-0.5)}'\n    #echo $1 | awk '{printf(\"%d\\n\",$1+0.5)}'\n\
    \    #echo $1 | awk '{printf(\"%d\\n\",$1-0.5)}'\n    #echo $1 | awk '{printf(\"\
    %d\\n\",$1+0.5)}'\n    #echo $1 | awk '{printf(\"%d\\n\",$1-0.5)}'\n    #echo\
    \ $1 | awk '{printf(\"%d\\n\",$1+0.5)}'\n    #echo $1 | awk '{printf(\"%d\\n\"\
    ,$1-0.5)}'\n    #echo $1 | awk '{printf(\"%d\\n\",$1+0.5)}'\n    #echo $1 | awk\
    \ '{printf(\"%d\\n\",$1-0.5)}'\n    #echo $1 | awk '{printf(\"%d\\n\",$1+0.5)}'\n\
    \    #echo $1 | awk '{printf(\"%d\\n\",$1-0.5)}'\n    #echo $1 | awk '{printf(\"\
    %d\\n\",$1+0.5)}'\n    #echo $1 | awk '{printf(\"%d\\n\",$1-0.5)}'\n    #echo\
    \ $1 | awk '{printf(\"%d\\n\",$1+0.5)}'\n", "  # Write your code here\n  # echo\
    \ $1\n  # echo $1 | awk '{printf \"%d\\n\", $1}'\n  # echo $1 | awk '{printf \"\
    %d\\n\", $1+0.5}'\n  # echo $1 | awk '{printf \"%d\\n\", $1-0.5}'\n  # echo $1\
    \ | awk '{printf \"%d\\n\", $1+0.5}'\n  # echo $1 | awk '{printf \"%d\\n\", $1-0.5}'\n\
    \  # echo $1 | awk '{printf \"%d\\n\", $1+0.5}'\n  # echo $1 | awk '{printf \"\
    %d\\n\", $1-0.5}'\n  # echo $1 | awk '{printf \"%d\\n\", $1+0.5}'\n  # echo $1\
    \ | awk '{printf \"%d\\n\", $1-0.5}'\n  # echo $1 | awk '{printf \"%d\\n\", $1+0.5}'\n\
    \  # echo $1 | awk '{printf \"%d\\n\", $1-0.5}'\n  # echo $1 | awk '{printf \"\
    %d\\n\", $1+0.5}'\n  # echo $1 | awk '{printf \"%d\\n\", $1-0.5}'\n  # echo $1\
    \ | awk '{printf \"%d\\n\", $1+0.5}'\n  # echo $1 | awk '{printf \"%d\\n\", $1-0.5}'\n\
    \  # echo $1 | awk '{printf \"%d\\n\", $1+0.5}'\n  # echo $1 | awk '{printf \"\
    %d\\n\", $1-0.5}'\n  # echo $1 | awk '{printf \"%d\\n\", $1+0.5}'\n  # echo $1\
    \ | awk '{printf \"%d\\n\", $1-0.5}'\n  # echo $1 | awk '{printf \"%d\\n\", $1+0.5}'\n\
    \  #", '  printf "%.0f\n" "$1"', "  local num=$1\n  local int=$(printf '%.0f'\
    \ \"$num\")\n  local dec=$(printf '%.1f' \"$num\")\n  local diff=$(echo \"$dec\
    \ - $int\" | bc)\n  if (( $(echo \"$diff > 0.5\" | bc -l) )); then\n    echo \"\
    $((int + 1))\"\n  elif (( $(echo \"$diff < -0.5\" | bc -l) )); then\n    echo\
    \ \"$((int - 1))\"\n  else\n    echo \"$int\"\n  fi", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  # Use printf to print to stderr\n  printf\
    \ \"Not yet implemented\" 1>&2", "  # Write your code here\n  # echo $1\n  if\
    \ [[ $1 =~ ^[0-9]+$ ]]; then\n    echo $1\n  elif [[ $1 =~ ^[0-9]+\\.[0-9]+$ ]];\
    \ then\n    echo $1 | cut -d '.' -f 1\n  elif [[ $1 =~ ^-[0-9]+\\.[0-9]+$ ]];\
    \ then\n    echo $1 | cut -d '.' -f 1\n  elif [[ $1 =~ ^-[0-9]+$ ]]; then\n  \
    \  echo $1\n  elif [[ $1 =~ ^[0-9]+\\.[0-9]+e[0-9]+$ ]]; then\n    echo $1 | cut\
    \ -d '.' -f 1\n  elif [[ $1 =~ ^-[0-9]+\\.[0-9]+e[0-9]+$ ]]; then\n    echo $1\
    \ | cut -d '.' -f 1\n  elif [[ $1 =~ ^[0-9]+e[0-9]+$ ]]; then\n    echo $1 | cut\
    \ -d '.' -f 1\n  elif [[ $1 =~ ^-[0-9]+e[0-9]+$ ]]; then\n    echo $1 | cut -d\
    \ '.' -f 1\n  else\n    echo \"error\"\n  fi", "    # Write your code here\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "  # Write your code here\n  echo \"$1\" | awk '{printf\
    \ \"%d\\n\", $1}'", "  # Write your code here\n  echo \"$1\" | awk '{printf \"\
    %.0f\\n\", $1}'", "  # Write your code here\n  echo $1", "  echo \"$1\" | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  # Use printf to print to stderr\n  printf \"Not yet implemented\"\
    \ 1>&2", "  # Write your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1+0.5*sign($1))}'",
  "  # Write your code here\n  echo $1 | awk '{printf \"%.0f\\n\", $1}'", "  # Write\
    \ your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5 * sign($1))}'",
  "  # Write your code here\n  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  if\
    \ [ ${1#*.} -gt 0 ]; then\n    echo $(( ${1%.*} + 1 ))\n  else\n    echo ${1%.*}\n\
    \  fi", "  # Write your code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1\
    \ + 0.5}'", "  # Your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", " \
    \ # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  echo \"\
    $1\" | awk '{printf \"%d\\n\", $1+0.5}'", "  local number=$1\n  local int_number=$(printf\
    \ \"%.0f\" \"$number\")\n  local decimal_number=$(printf \"%.1f\" \"$number\"\
    )\n  local decimal_number_int=$(printf \"%.0f\" \"$decimal_number\")\n  local\
    \ decimal_number_dec=$(printf \"%.1f\" \"$decimal_number\")\n  local decimal_number_dec_int=$(printf\
    \ \"%.0f\" \"$decimal_number_dec\")\n  local decimal_number_dec_dec=$(printf \"\
    %.1f\" \"$decimal_number_dec\")\n  local decimal_number_dec_dec_int=$(printf \"\
    %.0f\" \"$decimal_number_dec_dec\")\n  local decimal_number_dec_dec_dec=$(printf\
    \ \"%.1f\" \"$decimal_number_dec_dec\")\n  local decimal_number_dec_dec_dec_int=$(printf\
    \ \"%.0f\" \"$decimal_number_dec_dec_dec\")\n  local decimal_number_dec_dec_dec_dec=$(printf\
    \ \"%.1f\" \"$decimal_number_dec_dec_dec\")\n  local decimal_number_dec_dec_dec_dec_int=$(printf\
    \ \"%.0f\" \"$decimal_number_dec_dec_dec_dec\")\n  local decimal_number_dec_dec_dec_dec_dec=$(printf\
    \ \"%.1f\" \"$decimal_number_dec_dec_dec_dec\")\n  local decimal_number_dec_dec_dec_dec_dec_int=$(printf\
    \ \"%.0f\" \"$decimal_number_dec_dec_dec_dec_dec\")\n  local decimal_number_dec_dec_dec_dec_dec_dec=$(printf\
    \ \"%.1f\" \"$decimal_number_dec_dec_dec_dec_dec\")\n  local decimal_number_dec_dec_dec_dec_dec_dec_int=$(printf\
    \ \"%.0f\" \"$decimal_number_dec_dec_dec_dec_dec_dec\")\n  local decimal_number_dec_dec_dec_dec_dec_dec_dec=$(printf\
    \ \"%.1f\" \"$decimal_number_dec_dec_dec_dec_", "  # Write your code here\n  #\
    \ echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1#*.} | cut -c 1\n \
    \ # echo ${1#*.} | cut -c 1 | bc\n  # echo ${1#*.} | cut -c 1 | bc | grep -q 1\n\
    \  # echo ${1#*.} | cut -c 1 | bc | grep -q 1 && echo \"true\" || echo \"false\"\
    \n  # echo ${1#*.} | cut -c 1 | bc | grep -q 1 && echo \"${1%.*} + 1\" || echo\
    \ \"${1%.*}\"\n  # echo ${1#*.} | cut -c 1 | bc | grep -q 1 && echo \"${1%.*}\
    \ + 1\" || echo \"${1%.*}\" | bc\n  # echo ${1#*.} | cut -c 1 | bc | grep -q 1\
    \ && echo \"${1%.*} + 1\" || echo \"${1%.*}\" | bc\n  # echo ${1#*.} | cut -c\
    \ 1 | bc | grep -q 1 && echo \"${1%.*} + 1\" || echo \"${1%.*}\" | bc\n  # echo\
    \ ${1#*.} | cut -c 1 | bc | grep -q 1 && echo \"${1%.*} + 1\" || echo \"${1%.*}\"\
    \ | bc\n  # echo ${1#*.} | cut -c 1 | bc | grep -q 1 && echo \"${1%.*} + 1\" ||\
    \ echo \"${1%.*}\" | bc\n  # echo ${1#*.} | cut -c 1 | bc | grep -q 1 && echo\
    \ \"${1%.*} + 1\" || echo \"${1%.*}\" | bc\n  # echo ${1#*.} | cut -c 1 | bc |\
    \ grep -q 1 && echo \"${1%.*} + 1\" || echo \"${1%.*}\" | bc\n  # echo ${1#*.}\
    \ | cut -c 1 | bc | grep -q 1 && echo \"${1%.*} + 1\" || echo \"${1%.*}\" | bc\n\
    \  # echo ${1#*.} | cut -c 1 | bc | grep -q 1 && echo", "  # your code here\n\
    \  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # echo\
    \ \"closest_integer($1)\"\n  if [[ $1 == *.* ]]; then\n    # echo \"float\"\n\
    \    if [[ $1 == *.*5 ]]; then\n      # echo \"5\"\n      if [[ $1 == -* ]]; then\n\
    \        # echo \"negative\"\n        echo $((${1%.*} - 1))\n      else\n    \
    \    # echo \"positive\"\n        echo $((${1%.*} + 1))\n      fi\n    else\n\
    \      # echo \"not 5\"\n      echo ${1%.*}\n    fi\n  else\n    # echo \"integer\"\
    \n    echo $1\n  fi", "  if [[ $1 == *.* ]]; then\n    echo $1 | cut -d. -f1\n\
    \  else\n    echo $1\n  fi", "  # Write your code here\n  # Use echo to print\
    \ to stdout\n  echo \"Not implemented yet\"", "  # Write your code here\n  # Use\
    \ echo to print to stdout\n  # Use $1 to access the first argument to the function\n\
    \  echo \"Not implemented\"", "  # Write your code here\n  echo \"$1\" | awk '{printf\
    \ \"%d\\n\", $1}'", "  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write\
    \ your code here\n  # echo $1\n  # echo $1 | awk '{printf(\"%d\\n\", $1)}'\n \
    \ echo $1 | awk '{printf(\"%d\\n\", $1 + 0.5 * ($1 < 0 ? -1 : 1))}'", "  local\
    \ num=$1\n  local int=$(printf \"%.0f\" $num)\n  local dec=$(echo $num | cut -d.\
    \ -f2)\n  if [ $dec -gt 0 ]; then\n    if [ $dec -lt 5 ]; then\n      echo $int\n\
    \    else\n      echo $((int + 1))\n    fi\n  else\n    if [ $dec -gt -5 ]; then\n\
    \      echo $int\n    else\n      echo $((int - 1))\n    fi\n  fi", "  # Write\
    \ your code here\n  echo $1 | awk '{print int($1+0.5)}'", "  # Write your code\
    \ here\n  # Use echo to print to stdout\n  echo $1", "  # Write your code here\n\
    \  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  echo\
    \ $1 | awk '{printf(\"%d\\n\", $1 + 0.5 * sign($1))}'", "  # Write your code here\n\
    \  # echo $1\n  # echo ${1%.*}\n  # echo ${1#*.}\n  # echo ${1#*.} | cut -c 1\n\
    \  # echo ${1#*.} | cut -c 1 | grep -E '^[0-9]+$'\n  # echo ${1#*.} | cut -c 1\
    \ | grep -E '^[0-9]+$' | wc -l\n  # echo ${1#*.} | cut -c 1 | grep -E '^[0-9]+$'\
    \ | wc -l | grep -E '^[0-9]+$'\n  # echo ${1#*.} | cut -c 1 | grep -E '^[0-9]+$'\
    \ | wc -l | grep -E '^[0-9]+$' | wc -l\n  # echo ${1#*.} | cut -c 1 | grep -E\
    \ '^[0-9]+$' | wc -l | grep -E '^[0-9]+$' | wc -l | grep -E '^[0-9]+$'\n  # echo\
    \ ${1#*.} | cut -c 1 | grep -E '^[0-9]+$' | wc -l | grep -E '^[0-9]+$' | wc -l\
    \ | grep -E '^[0-9]+$' | wc -l\n  # echo ${1#*.} | cut -c 1 | grep -E '^[0-9]+$'\
    \ | wc -l | grep -E '^[0-9]+$' | wc -l | grep -E '^[0-9]+$' | wc -l | grep -E\
    \ '^[0-9]+$'\n  # echo ${1#*.} | cut -c 1 | grep -E '^[0-9]+$' | wc -l | grep\
    \ -E '^[0-9]+$' | wc -l | grep -E '^[0-9]+$' | wc -l | grep -E '^[0-9]+$' | wc\
    \ -l\n  # echo ${1#*.} | cut -c 1 |", "  # Write your code here\n  local number=$1\n\
    \  local int_number=${number%.*}\n  local decimal_number=${number#*.}\n  local\
    \ closest_int_number=0\n  if [ $decimal_number -lt 5 ]; then\n    closest_int_number=$int_number\n\
    \  elif [ $decimal_number -gt 5 ]; then\n    closest_int_number=$((int_number\
    \ + 1))\n  else\n    if [ $((int_number % 2)) -eq 0 ]; then\n      closest_int_number=$int_number\n\
    \    else\n      closest_int_number=$((int_number + 1))\n    fi\n  fi\n  echo\
    \ $closest_int_number", "  # Write your code here\n  echo $1 | awk '{printf \"\
    %d\\n\", $1}'", "  # Write your code here\n  # echo $1\n  # echo ${1%.*}\n  #\
    \ echo ${1#*.}\n  # echo $((10#${1#*.}))\n  # echo $((10#${1#*.}>=5))\n  # echo\
    \ $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n\
    \  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n\
    \  # echo $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n\
    \  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n\
    \  # echo $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n\
    \  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n\
    \  # echo $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n\
    \  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n\
    \  # echo $((10#${1#*.}<5))\n  # echo $((10#${1#*.}>=5))\n  # echo $((10#${1#*.}<5))\n\
    \  # echo $", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'",
  "  # your code here\n  echo \"$1\" | awk '{printf \"%.0f\\n\", $1}'", "  # Write\
    \ your code here\n  # Use echo to print to stdout\n  # Use $1 to get the first\
    \ argument passed to the function\n  echo $1", "  # Write your code here\n  echo\
    \ $1 | awk '{printf(\"%d\\n\", $1)}'"]
stop_tokens:
- "\n}"
