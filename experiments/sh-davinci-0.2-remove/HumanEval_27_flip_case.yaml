name: HumanEval_27_flip_case
language: sh
prompt: "#!/bin/bash\n# For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n#\n# $1 is a string\nflip_case() {\n"
tests: "}\n\ncandidate() {\n    flip_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hello\\!\") = \"hELLO\\!\" ]]\n\
  \    [[ $(candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT\
  \ DELIGHTS HAVE VIOLENT ENDS\" ]]\n}\n\nrun_test"
completions: ["    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  local str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n\
    \    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n     \
    \ new_str+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=\"\
    ${char,,}\"\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local new_str=\"\
    \"\n  local char=\"\"\n  local lower_char=\"\"\n  local upper_char=\"\"\n\n  for\
    \ (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    lower_char=\"$(echo\
    \ \"$char\" | tr '[:upper:]' '[:lower:]')\"\n    upper_char=\"$(echo \"$char\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n\n    if [[ \"$char\" == \"$lower_char\" ]];\
    \ then\n      new_str+=\"$upper_char\"\n    else\n      new_str+=\"$lower_char\"\
    \n    fi\n  done\n\n  echo \"$new_str\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local new_str=\"\"\n \
    \ local char=\"\"\n  local ascii_code=\"\"\n  local ascii_code_flipped=\"\"\n\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    ascii_code=\"\
    $(printf \"%d\" \"'$char\")\"\n    if [[ $ascii_code -ge 65 && $ascii_code -le\
    \ 90 ]]; then\n      ascii_code_flipped=$(( $ascii_code + 32 ))\n    elif [[ $ascii_code\
    \ -ge 97 && $ascii_code -le 122 ]]; then\n      ascii_code_flipped=$(( $ascii_code\
    \ - 32 ))\n    else\n      ascii_code_flipped=$ascii_code\n    fi\n    new_str+=\"\
    $(printf \\\\$(printf '%03o' \"$ascii_code_flipped\"))\"\n  done\n\n  echo \"\
    $new_str\"", "  if [[ -z \"$1\" ]]; then\n    echo \"Usage: flip_case <string>\"\
    \n    return 1\n  fi\n\n  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    local str=\"$1\"\n    local flipped=\"\"\n    for (( i=0;\
    \ i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"\
    $char\" =~ [a-z] ]]; then\n            flipped+=\"${char^^}\"\n        elif [[\
    \ \"$char\" =~ [A-Z] ]]; then\n            flipped+=\"${char,,}\"\n        else\n\
    \            flipped+=\"$char\"\n        fi\n    done\n    echo \"$flipped\"",
  "    local str=\"$1\"\n    local new_str=\"\"\n    local char=\"\"\n    local i=0\n\
    \    local len=${#str}\n    for (( i=0; i<len; i++ )); do\n        char=\"${str:$i:1}\"\
    \n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_str+=\"${char^^}\"\
    \n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"${char,,}\"\
    \n        else\n            new_str+=\"$char\"\n        fi\n    done\n    echo\
    \ \"$new_str\"", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  local str=\"$1\"\n  local new_str=\"\"\n  local char=\"\"\n  local ascii_code=\"\
    \"\n  local new_ascii_code=\"\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"\
    ${str:$i:1}\"\n    ascii_code=$(printf \"%d\" \"'$char\")\n    if [[ $ascii_code\
    \ -ge 65 && $ascii_code -le 90 ]]; then\n      new_ascii_code=$(( ascii_code +\
    \ 32 ))\n    elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n    \
    \  new_ascii_code=$(( ascii_code - 32 ))\n    else\n      new_ascii_code=$ascii_code\n\
    \    fi\n    new_str+=$(printf \\\\$(printf '%03o' $new_ascii_code))\n  done\n\
    \n  echo \"$new_str\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ local result=\"\"\n  local char=\"\"\n  for (( i=0; i<${#1}; i++ )); do\n  \
    \  char=\"${1:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      result+=\"\
    ${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      result+=\"${char,,}\"\
    \n    else\n      result+=\"$char\"\n    fi\n  done\n  echo \"$result\"", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local str=\"\
    $1\"\n    local flipped=\"\"\n    local c=\"\"\n    for (( i=0; i<${#str}; i++\
    \ )); do\n        c=\"${str:$i:1}\"\n        if [[ \"$c\" =~ [a-z] ]]; then\n\
    \            flipped+=\"${c^^}\"\n        elif [[ \"$c\" =~ [A-Z] ]]; then\n \
    \           flipped+=\"${c,,}\"\n        else\n            flipped+=\"$c\"\n \
    \       fi\n    done\n    echo \"$flipped\"", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local flipped=\"\"\n \
    \ for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[\
    \ \"$char\" =~ [a-z] ]]; then\n      flipped+=\"${char^^}\"\n    elif [[ \"$char\"\
    \ =~ [A-Z] ]]; then\n      flipped+=\"${char,,}\"\n    else\n      flipped+=\"\
    $char\"\n    fi\n  done\n  echo \"$flipped\"", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local\
    \ str=\"$1\"\n  local str_len=${#str}\n  local i=0\n  local char\n  local new_str=\"\
    \"\n\n  while [ $i -lt $str_len ]; do\n    char=${str:$i:1}\n    if [[ $char =~\
    \ [a-z] ]]; then\n      new_str+=\"${char^^}\"\n    elif [[ $char =~ [A-Z] ]];\
    \ then\n      new_str+=\"${char,,}\"\n    else\n      new_str+=\"$char\"\n   \
    \ fi\n    i=$((i+1))\n  done\n\n  echo \"$new_str\"", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local flipped=\"\"\n  local\
    \ char=\"\"\n  local ascii_code=\"\"\n  local ascii_code_flipped=\"\"\n\n  for\
    \ (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    ascii_code=\"$(printf\
    \ '%d' \"'$char\")\"\n    if [[ $ascii_code -ge 65 && $ascii_code -le 90 ]]; then\n\
    \      ascii_code_flipped=$(( $ascii_code + 32 ))\n    elif [[ $ascii_code -ge\
    \ 97 && $ascii_code -le 122 ]]; then\n      ascii_code_flipped=$(( $ascii_code\
    \ - 32 ))\n    else\n      ascii_code_flipped=$ascii_code\n    fi\n    flipped+=\"\
    $(printf \\\\$(printf '%03o' \"$ascii_code_flipped\"))\"\n  done\n\n  echo \"\
    $flipped\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ local str=\"$1\"\n  local new_str=\"\"\n  local char=\"\"\n  local ascii_code=\"\
    \"\n  local new_ascii_code=\"\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"\
    ${str:$i:1}\"\n    ascii_code=$(printf \"%d\" \"'$char\")\n    if [[ $ascii_code\
    \ -ge 65 && $ascii_code -le 90 ]]; then\n      new_ascii_code=$(( $ascii_code\
    \ + 32 ))\n    elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n  \
    \    new_ascii_code=$(( $ascii_code - 32 ))\n    else\n      new_ascii_code=$ascii_code\n\
    \    fi\n    new_str+=$(printf \\\\$(printf '%03o' $new_ascii_code))\n  done\n\
    \n  echo \"$new_str\"", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "   \
    \ local str=\"$1\"\n    local flipped_str=\"\"\n    for (( i=0; i<${#str}; i++\
    \ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z]\
    \ ]]; then\n            flipped_str+=\"${char^^}\"\n        elif [[ \"$char\"\
    \ =~ [A-Z] ]]; then\n            flipped_str+=\"${char,,}\"\n        else\n  \
    \          flipped_str+=\"$char\"\n        fi\n    done\n    echo \"$flipped_str\"",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local\
    \ str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local\
    \ char=\"${str:$i:1}\"\n    local lower_char=\"$(echo \"$char\" | tr '[:upper:]'\
    \ '[:lower:]')\"\n    local upper_char=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\
    \n    if [[ \"$char\" == \"$lower_char\" ]]; then\n      new_str+=\"$upper_char\"\
    \n    else\n      new_str+=\"$lower_char\"\n    fi\n  done\n  echo \"$new_str\"",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    # Convert\
    \ to lowercase\n    local lowercase=\"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\"\
    \n    # Convert to uppercase\n    local uppercase=\"$(echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]')\"\n    # Flip case\n    echo \"${lowercase//[a-z]/$uppercase}\"",
  "    local string=\"$1\"\n    local flipped_string=\"\"\n    local char=\"\"\n \
    \   local ascii_code=\"\"\n    local ascii_code_flipped=\"\"\n\n    for (( i=0;\
    \ i<${#string}; i++ )); do\n        char=\"${string:$i:1}\"\n        ascii_code=\"\
    $(printf '%d' \"'$char\")\"\n        if [[ $ascii_code -ge 65 && $ascii_code -le\
    \ 90 ]]; then\n            ascii_code_flipped=$(( $ascii_code + 32 ))\n      \
    \  elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n            ascii_code_flipped=$((\
    \ $ascii_code - 32 ))\n        else\n            ascii_code_flipped=$ascii_code\n\
    \        fi\n        flipped_string+=\"$(printf \\\\$(printf '%03o' \"$ascii_code_flipped\"\
    ))\"\n    done\n\n    echo \"$flipped_string\"", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local string=\"$1\"\n  local flipped_string=\"\
    \"\n  local char=\"\"\n  local ascii_code=\"\"\n  local i=0\n\n  while [ $i -lt\
    \ ${#string} ]; do\n    char=\"${string:$i:1}\"\n    ascii_code=$(printf \"%d\"\
    \ \"'$char\")\n\n    if [ $ascii_code -ge 65 ] && [ $ascii_code -le 90 ]; then\n\
    \      flipped_string+=$(printf \\\\$(printf '%03o' $((ascii_code + 32))))\n \
    \   elif [ $ascii_code -ge 97 ] && [ $ascii_code -le 122 ]; then\n      flipped_string+=$(printf\
    \ \\\\$(printf '%03o' $((ascii_code - 32))))\n    else\n      flipped_string+=\"\
    $char\"\n    fi\n\n    i=$((i + 1))\n  done\n\n  echo \"$flipped_string\"", " \
    \ local str=\"$1\"\n  local flipped=\"\"\n  local char=\"\"\n  local lower=\"\"\
    \n  local upper=\"\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\
    \n    lower=\"$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n    upper=\"$(echo\
    \ \"$char\" | tr '[:lower:]' '[:upper:]')\"\n\n    if [[ \"$char\" == \"$lower\"\
    \ ]]; then\n      flipped+=\"$upper\"\n    else\n      flipped+=\"$lower\"\n \
    \   fi\n  done\n\n  echo \"$flipped\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local result=\"\"\n  for\
    \ (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"\
    $char\" =~ [a-z] ]]; then\n      result+=\"${char^^}\"\n    elif [[ \"$char\"\
    \ =~ [A-Z] ]]; then\n      result+=\"${char,,}\"\n    else\n      result+=\"$char\"\
    \n    fi\n  done\n  echo \"$result\"", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local ret=\"\"\n  for (( i=0;\
    \ i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~\
    \ [a-z] ]]; then\n      ret+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]];\
    \ then\n      ret+=\"${char,,}\"\n    else\n      ret+=\"$char\"\n    fi\n  done\n\
    \  echo \"$ret\"", "    local str=\"$1\"\n    local new_str=\"\"\n    for (( i=0;\
    \ i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"\
    $char\" =~ [a-z] ]]; then\n            new_str+=\"${char^^}\"\n        elif [[\
    \ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"${char,,}\"\n        else\n\
    \            new_str+=\"$char\"\n        fi\n    done\n    echo \"$new_str\"",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local flipped=\"\
    \"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if\
    \ [[ \"$char\" =~ [a-z] ]]; then\n      char=\"$(echo \"$char\" | tr '[:lower:]'\
    \ '[:upper:]')\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      char=\"$(echo\
    \ \"$char\" | tr '[:upper:]' '[:lower:]')\"\n    fi\n    flipped=\"$flipped$char\"\
    \n  done\n  echo \"$flipped\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local new_str=\"\"\n  local\
    \ char=\"\"\n  local char_code=\"\"\n  local new_char=\"\"\n  local new_char_code=\"\
    \"\n  local i=0\n  local len=${#str}\n\n  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n\
    \    char_code=$(printf \"%d\" \"'$char\")\n    if [ $char_code -ge 65 ] && [\
    \ $char_code -le 90 ]; then\n      new_char_code=$((char_code + 32))\n    elif\
    \ [ $char_code -ge 97 ] && [ $char_code -le 122 ]; then\n      new_char_code=$((char_code\
    \ - 32))\n    else\n      new_char_code=$char_code\n    fi\n    new_char=$(printf\
    \ \\\\$(printf '%03o' $new_char_code))\n    new_str=$new_str$new_char\n    i=$((i\
    \ + 1))\n  done\n\n  echo \"$new_str\"", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local string=\"\
    $1\"\n    local flipped=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n     \
    \   local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n\
    \            flipped+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n\
    \            flipped+=\"${char,,}\"\n        else\n            flipped+=\"$char\"\
    \n        fi\n    done\n    echo \"$flipped\"", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    local str=$1\n    local new_str=\"\"\n    local\
    \ char=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        char=${str:$i:1}\n\
    \        if [[ $char =~ [a-z] ]]; then\n            new_str+=$(echo $char | tr\
    \ '[:lower:]' '[:upper:]')\n        elif [[ $char =~ [A-Z] ]]; then\n        \
    \    new_str+=$(echo $char | tr '[:upper:]' '[:lower:]')\n        else\n     \
    \       new_str+=$char\n        fi\n    done\n    echo $new_str", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local\
    \ str=\"$1\"\n  local new_str=\"\"\n  local char=\"\"\n  local ascii_code=\"\"\
    \n  local new_ascii_code=\"\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"\
    ${str:$i:1}\"\n    ascii_code=$(printf \"%d\" \"'$char\")\n    if [[ $ascii_code\
    \ -ge 65 && $ascii_code -le 90 ]]; then\n      new_ascii_code=$(( $ascii_code\
    \ + 32 ))\n    elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n  \
    \    new_ascii_code=$(( $ascii_code - 32 ))\n    else\n      new_ascii_code=$ascii_code\n\
    \    fi\n    new_str+=$(printf \\\\$(printf '%03o' $new_ascii_code))\n  done\n\
    \n  echo \"$new_str\"", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"\
    $1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"\
    ${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_str+=\"${char^^}\"\
    \n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=\"${char,,}\"\n    else\n\
    \      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local flipped_str=\"\"\n  local\
    \ char=\"\"\n  local lower_char=\"\"\n  local upper_char=\"\"\n\n  for ((i=0;\
    \ i<${#str}; i++)); do\n    char=\"${str:$i:1}\"\n    lower_char=\"$(echo \"$char\"\
    \ | tr '[:upper:]' '[:lower:]')\"\n    upper_char=\"$(echo \"$char\" | tr '[:lower:]'\
    \ '[:upper:]')\"\n\n    if [[ \"$char\" == \"$lower_char\" ]]; then\n      flipped_str+=\"\
    $upper_char\"\n    else\n      flipped_str+=\"$lower_char\"\n    fi\n  done\n\n\
    \  echo \"$flipped_str\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  local str=\"$1\"\n  local new_str=\"\"\n  local char=\"\"\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    if [[ \"$char\"\
    \ =~ [a-z] ]]; then\n      new_str+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z]\
    \ ]]; then\n      new_str+=\"${char,,}\"\n    else\n      new_str+=\"$char\"\n\
    \    fi\n  done\n  echo \"$new_str\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local flipped=\"\"\n  local\
    \ i=0\n  local len=${#str}\n  while [ $i -lt $len ]; do\n    local char=\"${str:$i:1}\"\
    \n    if [[ \"$char\" =~ [a-z] ]]; then\n      flipped+=\"${char^^}\"\n    elif\
    \ [[ \"$char\" =~ [A-Z] ]]; then\n      flipped+=\"${char,,}\"\n    else\n   \
    \   flipped+=\"$char\"\n    fi\n    i=$((i+1))\n  done\n  echo \"$flipped\"",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local\
    \ str=\"$1\"\n    local str_len=${#str}\n    local i=0\n    local new_str=\"\"\
    \n    local c=\"\"\n    local c_lower=\"\"\n    local c_upper=\"\"\n\n    while\
    \ [ $i -lt $str_len ]; do\n        c=${str:$i:1}\n        c_lower=$(echo \"$c\"\
    \ | tr '[:upper:]' '[:lower:]')\n        c_upper=$(echo \"$c\" | tr '[:lower:]'\
    \ '[:upper:]')\n        if [ \"$c\" == \"$c_lower\" ]; then\n            new_str=\"\
    $new_str$c_upper\"\n        else\n            new_str=\"$new_str$c_lower\"\n \
    \       fi\n        i=$((i+1))\n    done\n\n    echo \"$new_str\"", '  echo "$1"
    | tr "[:lower:]" "[:upper:]" | tr "[:upper:]" "[:lower:]"', "  echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local result=\"\
    \"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if\
    \ [[ \"$char\" =~ [a-z] ]]; then\n      result+=\"${char^^}\"\n    elif [[ \"\
    $char\" =~ [A-Z] ]]; then\n      result+=\"${char,,}\"\n    else\n      result+=\"\
    $char\"\n    fi\n  done\n  echo \"$result\"", '  echo "$1" | tr "[:lower:]" "[:upper:]"
    | tr "[:upper:]" "[:lower:]"', "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  local str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]];\
    \ then\n      new_str+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n\
    \      new_str+=\"${char,,}\"\n    else\n      new_str+=\"$char\"\n    fi\n  done\n\
    \  echo \"$new_str\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'"]
stop_tokens:
- "\n}"
