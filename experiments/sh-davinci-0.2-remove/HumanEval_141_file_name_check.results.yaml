language: sh
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_character=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_character_ascii_code=$(printf \"\
    %d\" \"'$file_name_without_extension_first_character\")\n    local file_name_without_extension_first_character_ascii_code_is_valid=false\n\
    \    local file_name_extension_is_valid=false\n    local file_name_without_extension_contains_more_than_three_digits=false\n\
    \    local file_name_contains_more_than_one_dot=false\n    local file_name_without_extension_is_empty=false\n\
    \    local file_name_without_extension_first_character_is_not_a_letter=false\n\
    \    local file_name_without_extension_contains_more_than_three_digits_count=0\n\
    \    local file_name_contains_more_than_one_dot_count=0\n    local file_name_without_extension_first_character_is_not_a_letter_count=0\n\
    \    local file_name_without_extension_is_empty_count=0\n    local file_name_without_extension_first_character_ascii_code_is_valid_count=0\n\
    \    local file_name_extension_is_valid_count=0\n    local file_name_without_extension_contains_more_than_three_digits_count_is_valid=false\n\
    \    local file_name_contains_more_than_one_dot_count_is_valid=false\n    local\
    \ file_name_without_extension\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_dot_index=0\n    local file_name_dot_count=0\n    local file_name_digit_count=0\n\
    \    local file_name_substr_before_dot=\"\"\n    local file_name_substr_after_dot=\"\
    \"\n    local file_name_substr_after_dot_len=0\n    local file_name_substr_after_dot_txt_len=0\n\
    \    local file_name_substr_after_dot_exe_len=0\n    local file_name_substr_after_dot_dll_len=0\n\
    \    local file_name_substr_after_dot_txt_index=0\n    local file_name_substr_after_dot_exe_index=0\n\
    \    local file_name_substr_after_dot_dll_index=0\n    local file_name_substr_after_dot_txt_index=0\n\
    \    local file_name_substr_after_dot_exe_index=0\n    local file_name_substr_after_dot_dll_index=0\n\
    \    local file_name_substr_after_dot_txt_index=0\n    local file_name_substr_after_dot_exe_index=0\n\
    \    local file_name_substr_after_dot_dll_index=0\n    local file_name_substr_after_dot_txt_index=0\n\
    \    local file_name_substr_after_dot_exe_index=0\n    local file_name_substr_after_dot_dll_index=0\n\
    \    local file_name_substr_after_dot_txt_index=0\n    local file_name_substr_after_dot_exe_index=0\n\
    \    local file_name_substr_after_dot_dll_index=0\n    local file_name_substr_after_dot_txt_index=0\n\
    \    local file_name_substr_after_dot_exe_index=0\n    local file_name_substr_after_dot_dll_index=0\n\
    \    local file_name_substr\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper=$(printf \"\
    %d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_lower_range=$((file_name_no_ext_first_char_ascii_lower\
    \ + 25))\n    local file_name_no_ext_first_char_ascii_upper_range=$((file_name_no_ext_first_char_ascii_upper\
    \ + 25))\n    local file_name_no_ext_digits_count=$(echo $file_name_no_ext | grep\
    \ -o '[0-9]' | wc -l)\n    local file_name_no_ext_dots_count=$(echo $file_name_no_ext\
    \ | grep -o '\\.' | wc -l)\n    local file_name_ext_valid=0\n    local file_name_ext_valid_list=('txt'\
    \ 'exe' 'dll')\n    local file_name_ext_valid_list_len=${#file_name_ext_valid_list[@]}\n\
    \    local file_name_ext_valid_list_index=0\n    local file_name_ext_valid_list_item=''\n\
    \    local file_name_ext_valid_list_item_len=0\n    local file_name_ext\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal file_name_length=${#file_name}\n\
    \tlocal file_name_without_extension=${file_name%.*}\n\tlocal file_name_extension=${file_name##*.}\n\
    \tlocal file_name_without_extension_length=${#file_name_without_extension}\n\t\
    local file_name_extension_length=${#file_name_extension}\n\tlocal file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \tlocal file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n\tlocal file_name_without_extension_first_char_ascii_lower_case_a=$(printf\
    \ \"%d\" \"'a\")\n\tlocal file_name_without_extension_first_char_ascii_upper_case_a=$(printf\
    \ \"%d\" \"'A\")\n\tlocal file_name_without_extension_first_char_ascii_lower_case_z=$(printf\
    \ \"%d\" \"'z\")\n\tlocal file_name_without_extension_first_char_ascii_upper_case_z=$(printf\
    \ \"%d\" \"'Z\")\n\tlocal file_name_without_extension_first_char_ascii_zero=$(printf\
    \ \"%d\" \"'0\")\n\tlocal file_name_without_extension_first_char_ascii_nine=$(printf\
    \ \"%d\" \"'9\")\n\tlocal file_name_without_extension_first_char_ascii_dot=$(printf\
    \ \"%d\" \"'.\")\n\tlocal file_name_without_extension_first_char_ascii_underscore=$(printf\
    \ \"%d\" \"'_\")\n\tlocal file_name_without_extension_first_char_ascii_hyphen=$(printf\
    \ \"%d\" \"'-\")\n\tlocal file_name_without_extension_first_char_ascii_space=$(printf\
    \ \"%d\" \"' \")\n\tlocal file_name_without_extension_first_char_ascii_\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_index=0\n    local dot_count=0\n    local digit_count=0\n    local\
    \ ext_len=0\n    local ext=\"\"\n    local ext_valid=0\n    local i=0\n    local\
    \ c=\"\"\n\n    # Check if the file name is empty\n    if [ -z \"$file_name\"\
    \ ]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check if the file\
    \ name contains more than three digits\n    for ((i=0; i<file_name_len; i++));\
    \ do\n        c=${file_name:i:1}\n        if [[ \"$c\" =~ ^[0-9]$ ]]; then\n \
    \           ((digit_count++))\n        fi\n    done\n    if [ $digit_count -gt\
    \ 3 ]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check if the\
    \ file name contains exactly one dot\n    for ((i=0; i<file_name_len; i++)); do\n\
    \        c=${file_name:i:1}\n        if [ \"$c\" == \".\" ]; then\n          \
    \  ((dot_count++))\n            dot_index=$i\n        fi\n    done\n    if [ $dot_count\
    \ -ne 1 ]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check if\
    \ the substring before the dot is valid\n    if [ $dot_index -eq 0 ]; then\n \
    \       echo \"No\"\n        return\n    fi\n    c=${file_name:0:1}\n    if [[\
    \ ! \"$c\" =~ ^[a-zA-Z]$ ]]; then\n        echo \"No\"\n        return\n    fi\n\
    \n    # Check if the substring after the dot is valid\n    ext_len=$((file_name_len\
    \ - dot_index - 1))\n    ext=${file_name:dot_index+1:ext_len}\n    if [ \"$ext\"\
    \ == \"txt\" ] || [ \"$ext\" == \"exe\" ] || [ \"$ext\" == \"dll\" ]; then\n \
    \       echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local num_digits=$(echo\
    \ $file_name | grep -o '[0-9]' | wc -l)\n    local num_dots=$(echo $file_name\
    \ | grep -o '\\.' | wc -l)\n    local extension=$(echo $file_name | cut -d '.'\
    \ -f 2)\n    local first_char=$(echo $file_name | cut -c 1)\n    local first_char_ascii=$(printf\
    \ \"%d\" \"'$first_char\")\n    local first_char_is_letter=0\n    if [[ $first_char_ascii\
    \ -ge 65 && $first_char_ascii -le 90 ]] || [[ $first_char_ascii -ge 97 && $first_char_ascii\
    \ -le 122 ]]; then\n        first_char_is_letter=1\n    fi\n    if [[ $num_digits\
    \ -gt 3 ]] || [[ $num_dots -ne 1 ]] || [[ -z $extension ]] || [[ $first_char_is_letter\
    \ -eq 0 ]] || [[ $extension != \"txt\" ]] && [[ $extension != \"exe\" ]] && [[\
    \ $extension != \"dll\" ]]; then\n        echo \"No\"\n    else\n        echo\
    \ \"Yes\"\n    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case_plus_26=$((file_name_without_extension_first_char_ascii_lower_bound_upper_case\
    \ + 26))\n    local file_name_without_extension_first_char_ascii_lower_bound_plus_26=$((file_name_without_extension_first_char_ascii_lower_bound\
    \ + 26))\n    local file_name_without_extension_first_char_ascii_upper_bound_plus_26=$((file_name_without_extension_first_char_ascii_upper_bound\
    \ + 26))\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case_plus_26=$((file_name_\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5s3h5pko.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5s3h5pko.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper=$(printf \"\
    %d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_lower_end=$(printf \"\
    %d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_end=$(printf \"\
    %d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_valid=$(($file_name_no_ext_first_char_ascii_lower\
    \ <= $file_name_no_ext_first_char_ascii && $file_name_no_ext_first_char_ascii\
    \ <= $file_name_no_ext_first_char_ascii_lower_end))\n    local file_name_no_ext_first_char_ascii_valid=$(($file_name_no_ext_first_char_ascii_valid\
    \ || ($file_name_no_ext_first_char_ascii_upper <= $file_name_no_ext_first_char_ascii\
    \ && $file_name_no_ext_first_char_ascii <= $file_name_no_ext_first_char_ascii_upper_end)))\n\
    \    local file_name_no_ext_first_char_as\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_without_ext_len=${#file_name_without_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_without_ext_first_char=${file_name_without_ext:0:1}\n   \
    \ local file_name_without_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_without_ext_first_char\"\
    )\n    local file_name_without_ext_first_char_ascii_lower_case=$(printf \"%d\"\
    \ \"'a\")\n    local file_name_without_ext_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_ext_first_char_ascii_lower_case_end=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_ext_first_char_ascii_upper_case_end=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_ext_first_char_is_valid=0\n    local\
    \ file_name_ext_is_valid=0\n    local file_name_without_ext_has_more_than_three_digits=0\n\
    \    local file_name_without_ext_has_more_than_three_digits_count=0\n    local\
    \ file_name_has_exactly_one_dot=0\n    local file_name_has_exactly_one_dot_count=0\n\
    \    local file_name_without_ext_is_empty=0\n    local file_name_without_ext_is_empty_len=0\n\
    \    local file_name_without_ext_is_empty_len_zero=0\n    local file_name_without_ext_is_empty_len_zero_len=0\n\
    \    local file_name_without_ext_is_empty_len_zero_len_zero=0\n\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_index=0\n    local digit_count=0\n    local i=0\n    local valid_extensions=('txt'\
    \ 'exe' 'dll')\n    local extension=''\n    local extension_len=0\n    local extension_index=0\n\
    \    local extension_valid=0\n    local file_name_valid=0\n    local file_name_without_extension=''\n\
    \    local file_name_without_extension_len=0\n    local file_name_without_extension_valid=0\n\
    \    local file_name_without_extension_first_char=''\n    local file_name_without_extension_first_char_ascii=0\n\
    \    local file_name_without_extension_first_char_valid=0\n\n    # Check if the\
    \ file name contains exactly one dot\n    for ((i=0; i<file_name_len; i++)); do\n\
    \        if [[ \"${file_name:$i:1}\" == '.' ]]; then\n            if [[ $dot_index\
    \ -eq 0 ]]; then\n                dot_index=$i\n            else\n           \
    \     echo 'No'\n                return\n            fi\n        fi\n    done\n\
    \n    # Check if the file name contains more than three digits\n    for ((i=0;\
    \ i<file_name_len; i++)); do\n        if [[ \"${file_name:$i:1}\" =~ [0-9] ]];\
    \ then\n            ((digit_count++))\n            if [[ $digit_count -gt 3 ]];\
    \ then\n                echo 'No'\n                return\n            fi\n  \
    \      fi\n    done\n\n    # Check if the file name's extension is valid\n   \
    \ extension=${file_name:$dot_index+1}\n    extension_len=${#extension}\n    for\
    \ ((i=0; i<${#valid_extensions[@]}; i++)); do\n        if [[ \"${valid_extensions[$i]}\"\
    \ == \"$extension\" ]]; then\n            extension_valid=1\n            break\n\
    \        fi\n    done\n\n    # Check if the file name without extension is valid\n\
    \    file\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "Usage: file [-bcCdEhikLlNnprsSvzZ0] [--apple] [--extension] [--mime-encoding]\n\
    \            [--mime-type] [-e <testname>] [-F <separator>]  [-f <namefile>]\n\
    \            [-m <magicfiles>] [-P <parameter=value>] <file> ...\n       file\
    \ -C [-m <magicfiles>]\n       file [--help]\n"
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_index=0\n    local dot_count=0\n    local digit_count=0\n    local\
    \ i=0\n    local extension=\"\"\n    local extension_len=0\n    local valid_extensions=(\"\
    txt\" \"exe\" \"dll\")\n    local valid_extension=0\n    local valid_extension_count=0\n\
    \    local valid_extension_index=0\n    local valid_extension_len=0\n    local\
    \ valid_extension_len_count=0\n    local valid_extension_len_index=0\n    local\
    \ valid_extension_len_len=0\n    local valid_extension_len_len_count=0\n    local\
    \ valid_extension_len_len_index=0\n    local valid_extension_len_len_len=0\n \
    \   local valid_extension_len_len_len_count=0\n    local valid_extension_len_len_len_index=0\n\
    \    local valid_extension_len_len_len_len=0\n    local valid_extension_len_len_len_len_count=0\n\
    \    local valid_extension_len_len_len_len_index=0\n    local valid_extension_len_len_len_len_len=0\n\
    \    local valid_extension_len_len_len_len_len_count=0\n    local valid_extension_len_len_len_len_len_index=0\n\
    \    local valid_extension_len_len_len_len_len_len=0\n    local valid_extension_len_len_len_len_len_len_count=0\n\
    \    local valid_extension_len_len_len_len_len_len_index=0\n    local valid_extension_len_len_len_len_len_len_len=0\n\
    \    local valid_extension_len_len_len_len_len_len_len_count=0\n    local valid_extension_len_len_len_len_len_len_len_index=0\n\
    \    local valid_extension_len_len_len\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_pattern=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n    local file_extension_pattern=\"\
    ^(txt|exe|dll)$\"\n    local file_name_valid=0\n    local file_extension_valid=0\n\
    \n    if [[ $file_name =~ $file_name_pattern ]]; then\n        file_name_valid=1\n\
    \    fi\n\n    if [[ $file_name =~ $file_extension_pattern ]]; then\n        file_extension_valid=1\n\
    \    fi\n\n    if [[ $file_name_valid -eq 1 && $file_extension_valid -eq 1 ]];\
    \ then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_end=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_end=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_case_range=$((file_name_without_extension_first_char_ascii_lower_case_end\
    \ - file_name_without_extension_first_char_ascii_lower_case + 1))\n    local file_name_without_extension_first_char_ascii_upper_case_range=$((file_name_without_extension_first_char_ascii_upper_case_end\
    \ - file_name_without_extension_first_char_ascii_upper_case + 1))\n    local file_name_without_extension_first_char_ascii_lower_case_range_end=$((file_name_without_extension_first_char_ascii_lower_case\
    \ + file_name_without_extension_\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmponota8gu.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmponota8gu.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal file_name_len=${#file_name}\n\
    \tlocal file_name_no_ext=${file_name%.*}\n\tlocal file_name_ext=${file_name##*.}\n\
    \tlocal file_name_no_ext_len=${#file_name_no_ext}\n\tlocal file_name_ext_len=${#file_name_ext}\n\
    \tlocal file_name_no_ext_first_char=${file_name_no_ext:0:1}\n\tlocal file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n\tlocal file_name_no_ext_last_char=${file_name_no_ext:$file_name_no_ext_len-1:1}\n\
    \tlocal file_name_no_ext_last_char_ascii=$(printf \"%d\" \"'$file_name_no_ext_last_char\"\
    )\n\tlocal file_name_no_ext_digit_count=0\n\tlocal file_name_no_ext_dot_count=0\n\
    \tlocal file_name_no_ext_char_ascii\n\tlocal file_name_no_ext_char\n\tlocal file_name_no_ext_char_count=0\n\
    \tlocal file_name_no_ext_valid_char_count=0\n\tlocal file_name_no_ext_valid_char_count_percentage=0\n\
    \tlocal file_name_no_ext_valid_char_count_percentage_int=0\n\tlocal file_name_no_ext_valid_char_count_percentage_int_ascii\n\
    \tlocal file_name_no_ext_valid_char_count_percentage_int_ascii_char\n\tlocal file_name_no_ext_valid_char_count_percentage_int_ascii_char_count=0\n\
    \tlocal file_name_no_ext_valid_char_count_percentage_int_ascii_char_count_percentage=0\n\
    \tlocal file_name_no_ext_valid_char_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\" | tr '[:upper:]' '[:lower:]')\n   \
    \ local file_name_no_ext_first_char_ascii_upper=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local file_name_no_ext_first_char_ascii_lower_valid=$((file_name_no_ext_first_char_ascii_lower\
    \ >= 97 && file_name_no_ext_first_char_ascii_lower <= 122))\n    local file_name_no_ext_first_char_ascii_upper_valid=$((file_name_no_ext_first_char_ascii_upper\
    \ >= 65 && file_name_no_ext_first_char_ascii_upper <= 90))\n    local file_name_no_ext_first_char_ascii_valid=$((file_name_no_ext_first_char_ascii_lower_valid\
    \ || file_name_no_ext_first_char_ascii_upper_valid))\n    local file_name_no_ext_num_digits=$(echo\
    \ \"$file_name_no_ext\" | grep -o '[0-9]' | wc -l)\n    local file_name_no_ext_\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_index=0\n    local dot_count=0\n    local digit_count=0\n    local\
    \ i=0\n    local file_name_extension=\"\"\n    local file_name_extension_len=0\n\
    \    local file_name_extension_valid=0\n    local file_name_valid=0\n    local\
    \ file_name_extension_valid_list=(\"txt\" \"exe\" \"dll\")\n    local file_name_extension_valid_list_len=${#file_name_extension_valid_list[@]}\n\
    \    local file_name_extension_valid_list_i=0\n    local file_name_extension_valid_list_item=\"\
    \"\n    local file_name_extension_valid_list_item_len=0\n    local file_name_extension_valid_list_item_i=0\n\
    \    local file_name_extension_valid_list_item_char=\"\"\n    local file_name_extension_valid_list_item_char_ascii=0\n\
    \    local file_name_extension_valid_list_item_char_ascii_lower=0\n    local file_name_extension_valid_list_item_char_ascii_upper=0\n\
    \    local file_name_extension_valid_list_item_char_ascii_lower_diff=0\n    local\
    \ file_name_extension_valid_list_item_char_ascii_upper_diff=0\n    local file_name_extension_valid_list_item_char_ascii_lower_diff_abs=0\n\
    \    local file_name_extension_valid_list_item_char_ascii_upper_diff_abs=0\n \
    \   local file_name_extension_valid_list_item_char_ascii_lower_diff_abs_max=0\n\
    \    local file_name_extension_valid_list_item_char_ascii_upper_diff_abs_max=0\n\
    \    local file_name_extension_valid_list_item_char_ascii_lower\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=\"$1\"\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_2=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_is_lowercase=$((file_name_no_ext_first_char_ascii\
    \ >= file_name_no_ext_first_char_ascii_lower_bound && file_name_no_ext_first_char_ascii\
    \ <= file_name_no_ext_first_char_ascii_upper_bound))\n    local file_name_no_ext_first_char_is_uppercase=$((file_name_no_ext_first_char_ascii\
    \ >= file_name_no_ext_first_char_ascii_upper_bound && file_name_no_ext_first_char_ascii\
    \ <= file_name_no_ext_first_char_ascii_upper_bound_2))\n    local file_name_no_ext_first_char_is_valid=$((file_name_no_ext_first_char_is_lowercase\
    \ || file_name_no_ext_first_char_is_uppercase))\n    local file_name\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    # You can\
    \ use the following command to get the length of the string:\n    # length=$(echo\
    \ -n $1 | wc -m)\n    # You can use the following command to get the substring\
    \ of the string:\n    # sub_string=$(echo $1 | cut -d'.' -f1)\n    # You can use\
    \ the following command to get the substring of the string:\n    # sub_string=$(echo\
    \ $1 | cut -d'.' -f2)\n    # You can use the following command to check if the\
    \ string is empty:\n    # if [ -z $1 ]; then\n    #     echo \"Empty\"\n    #\
    \ fi\n    # You can use the following command to check if the string starts with\
    \ a letter:\n    # if [[ $1 =~ ^[a-zA-Z] ]]; then\n    #     echo \"Starts with\
    \ a letter\"\n    # fi\n    # You can use the following command to check if the\
    \ string contains a substring:\n    # if [[ $1 =~ .*substring.* ]]; then\n   \
    \ #     echo \"Contains substring\"\n    # fi\n    # You can use the following\
    \ command to check if the string contains a digit:\n    # if [[ $1 =~ .*[0-9].*\
    \ ]]; then\n    #     echo \"Contains a digit\"\n    # fi\n    # You can use the\
    \ following command to check if the string contains a dot:\n    # if [[ $1 =~\
    \ .*\\..* ]]; then\n    #     echo \"Contains a dot\"\n    # fi\n    # You can\
    \ use the following command to check if the string contains a dot:\n    # if [[\
    \ $1 =~ .*\\..* ]]; then\n    #     echo \"Contains a dot\"\n    # fi\n    # You\
    \ can use the following command to check if the string contains a dot:\n    #\
    \ if [[ $1 =~ .*\\..* ]]; then\n    #     echo \"Contains a dot\"\n    # fi\n\
    \    # You can use the following command to check if the string contains a dot:\n\
    \    # if [[ $1 =~ .*\\..* ]]; then\n    #     echo \"Contains\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdtwqpwgn.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpdtwqpwgn.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,3}(\\.[a-zA-Z]{3})?$\"\n    if [[ $file_name =~ $file_name_regex\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_no_extension=${file_name%.*}\n\
    \    local file_name_no_extension_len=${#file_name_no_extension}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n \
    \   local file_name_no_extension_first_char_ascii_code=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_ascii_code_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_extension_first_char_ascii_code_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_extension_first_char_ascii_code_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_extension_first_char_ascii_code_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_extension_first_char_is_valid=0\n   \
    \ local file_name_no_extension_first_char_is_valid_upper_case=0\n    local file_name_no_extension_first_char_is_valid_lower_case=0\n\
    \    local file_name_no_extension_first_char_is_valid_upper_case=0\n    local\
    \ file_name_no_extension_first_char_is_valid_lower_case=0\n    local file_name_no_extension_first_char_is_valid_upper_case=0\n\
    \    local file_name_no_extension_first_char_is_valid_lower_case=0\n    local\
    \ file_name_no_extension_first_char_is_valid_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_len_without_extension=${file_name_len%.*}\n    local file_name_len_without_extension=$((file_name_len_without_extension-1))\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_extension_len=$((file_name_extension_len-1))\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_without_extension_len=$((file_name_without_extension_len-1))\n\
    \    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii=$((file_name_without_extension_first_char_ascii-1))\n\
    \    local file_name_without_extension_first_char_ascii_lower_bound=$(printf \"\
    %d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound=$((file_name_without_extension_first_char_ascii_lower_bound-1))\n\
    \    local file_name_without_extension_first_char_ascii_upper_bound=$((file_name_without_extension_first_char_ascii_upper_bound-1))\n\
    \    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp515at0np.sh: line 66: unexpected EOF while looking for matching
    `"''

    /tmp/tmp515at0np.sh: line 70: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local digits_count=0\n\
    \    local dot_count=0\n    local extension=\"\"\n    local valid_extensions=(\"\
    txt\" \"exe\" \"dll\")\n    local valid_extensions_count=${#valid_extensions[@]}\n\
    \    local valid_extensions_index=0\n    local valid_extension_found=0\n    local\
    \ valid_extension_found_index=0\n    local valid_extension_found_index_count=0\n\
    \    local extension_valid=0\n    local extension_valid_index=0\n    local extension_valid_index_count=0\n\
    \    local extension_valid_index_count_index=0\n    local extension_valid_index_count_index_count=0\n\
    \    local extension_valid_index_count_index_count_index=0\n    local extension_valid_index_count_index_count_index_count=0\n\
    \    local extension_valid_index_count_index_count_index_count_index=0\n    local\
    \ extension_valid_index_count_index_count_index_count_index_count=0\n    local\
    \ extension_valid_index_count_index_count_index_count_index_count_index=0\n  \
    \  local extension_valid_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local extension_valid_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local extension_valid_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local extension_valid_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local extension_valid_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local extension_valid_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local extension_valid_index_count_index_count_index_count_index_count_index_count_index_\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_len_without_extension=${file_name_len%.*}\n    local file_name_len_without_extension=$((file_name_len_without_extension\
    \ - 1))\n    local file_name_extension=${file_name##*.}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_extension_len=$((file_name_extension_len - 1))\n    local\
    \ file_name_without_extension=${file_name%.*}\n    local file_name_without_extension_len=${#file_name_without_extension}\n\
    \    local file_name_without_extension_len=$((file_name_without_extension_len\
    \ - 1))\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii=$((file_name_without_extension_first_char_ascii\
    \ - 1))\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound=$((file_name_without_extension_first_char_ascii_lower_bound\
    \ - 1))\n    local file_name_without_extension_first_char_ascii_upper_bound=$((file_name_without_extension_first_char_ascii_upper_bound\
    \ - 1))\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpztvgdtsn.sh: line 66: unexpected EOF while looking for matching
    `"''

    /tmp/tmpztvgdtsn.sh: line 70: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_letter=0\n\
    \    local file_name_without_extension_first_char_is_letter_upper_case=0\n   \
    \ local file_name_without_extension_first_char_is_letter_lower_case=0\n    local\
    \ file_name_without_extension_first_char_is_letter_upper_case_or_lower_case=0\n\
    \    local file_name_without_extension_first_char_is_letter_upper_case_or_lower_case_or_digit=0\n\
    \    local file_name_without_extension_first_char_is_letter_upper_case_or_lower_case_or_digit_or_underscore=0\n\
    \    local file_name_without_extension_first_char_is_letter_upper_case_\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case_lower_bound=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case_lower_bound_upper_case_lower_bound=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case_lower_bound_upper_case_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case_lower_bound_upper_case_lower_bound_upper_case_lower_bound=$(printf\
    \ \"%d\" \"'\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmrvqtr8q.sh: line 64: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmrvqtr8q.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_is_valid=0\n\
    \    local file_name_without_extension_digit_count=0\n    local file_name_without_extension_digit_count_is_valid=0\n\
    \    local file_name_extension_is_valid=0\n    local file_name_is_valid=0\n\n\
    \    if [ $file_name_without_extension_first_char_ascii -ge $file_name_without_extension_first_char_ascii_lower_bound\
    \ ] && \\\n       [ $file_name_without_extension_first_char_ascii -le $file_name_without_extension_first_char_ascii_upper_bound\
    \ ] || \\\n       [ $file_name_without_extension_first_char_as\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpysyft5gh.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpysyft5gh.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=$(echo\
    \ $file_name | wc -c)\n    local file_name_length=$((file_name_length-1))\n  \
    \  local file_name_extension=${file_name##*.}\n    local file_name_extension_length=$(echo\
    \ $file_name_extension | wc -c)\n    local file_name_extension_length=$((file_name_extension_length-1))\n\
    \    local file_name_extension_length_max=3\n    local file_name_extension_length_min=3\n\
    \    local file_name_extension_valid=0\n    local file_name_extension_valid_list=('txt'\
    \ 'exe' 'dll')\n    local file_name_extension_valid_list_length=${#file_name_extension_valid_list[@]}\n\
    \    local file_name_extension_valid_list_length=$((file_name_extension_valid_list_length-1))\n\
    \    local file_name_extension_valid_list_index=0\n    local file_name_extension_valid_list_index_max=$file_name_extension_valid_list_length\n\
    \    local file_name_extension_valid_list_index_min=0\n    local file_name_extension_valid_list_index_current=$file_name_extension_valid_list_index_min\n\
    \    local file_name_extension_valid_list_item=''\n    local file_name_extension_valid_list_item_length=0\n\
    \    local file_name_extension_valid_list_item_length_max=0\n    local file_name_extension_valid_list_item_length_min=0\n\
    \    local file_name_extension_valid_list_item_length_current=0\n    local file_name_extension_valid_list_item_length_current_max=0\n\
    \    local file_name_extension_valid_list_item_length_current_min=0\n    local\
    \ file_name_extension_valid_list_item_length_current_index=0\n   \n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=\"$1\"\n    local file_name_pattern=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name =~ $file_name_pattern\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_index=0\n    local digits_count=0\n    local file_extension=\"\"\
    \n    local file_name_without_extension=\"\"\n    local file_name_without_extension_len=0\n\
    \    local file_name_without_extension_first_char=\"\"\n    local file_name_without_extension_first_char_ascii_code=0\n\
    \    local file_name_without_extension_first_char_ascii_code_lower_bound=0\n \
    \   local file_name_without_extension_first_char_ascii_code_upper_bound=0\n  \
    \  local file_name_without_extension_first_char_is_valid=false\n    local file_extension_is_valid=false\n\
    \    local file_name_is_valid=false\n\n    # Find the index of the dot in the\
    \ file's name\n    for (( i=0; i<file_name_len; i++ )); do\n        if [[ \"${file_name:$i:1}\"\
    \ == \".\" ]]; then\n            dot_index=$i\n            break\n        fi\n\
    \    done\n\n    # Count the number of digits in the file's name\n    for (( i=0;\
    \ i<file_name_len; i++ )); do\n        if [[ \"${file_name:$i:1}\" =~ [0-9] ]];\
    \ then\n            (( digits_count++ ))\n        fi\n    done\n\n    # Extract\
    \ the file's extension\n    file_extension=${file_name:$dot_index+1}\n\n    #\
    \ Extract the file's name without the extension\n    file_name_without_extension=${file_name:0:$dot_index}\n\
    \    file_name_without_extension_len=${#file_name_without_extension}\n\n    #\
    \ Check if the file's name without the extension starts with a valid character\n\
    \    file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    file_name_without_extension_first_char_ascii_code=$(printf \"%d\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprojvukr2.sh: line 88: unexpected EOF while looking for matching
    `"''

    /tmp/tmprojvukr2.sh: line 92: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper_diff=$((file_name_no_ext_first_char_ascii_lower_bound_upper\
    \ - file_name_no_ext_first_char_ascii_lower_bound))\n    local file_name_no_ext_first_char_ascii_upper_bound_upper_diff=$((file_name_no_ext_first_char_ascii_upper_bound_upper\
    \ - file_name_no_ext_first_char_ascii_upper_bound))\n    local file_name_no_ext_first_char_ascii_lower_bound_upper_diff_abs=$((file_name_no_ext_first_char_ascii_lower_bound_upper_diff\
    \ < 0 ? -file_name_no_ext_first_char_ascii_lower_bound_upper_\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq9xmfhek.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmpq9xmfhek.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_number=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_without_extension_first_char_ascii_upper_bound_number=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_without_extension_first_char_ascii_lower_bound_number_upper_case=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_without_extension_first_char_ascii_upper_bound_number_upper_case=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_without_extension_first_char_ascii_lower_bound_number_upper_case=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_without_extension_first_char_ascii\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_len_without_extension=0\n    local file_name_extension=''\n\
    \    local file_name_without_extension=''\n    local file_name_without_extension_len=0\n\
    \    local file_name_without_extension_first_char=''\n    local file_name_without_extension_first_char_ascii=0\n\
    \    local file_name_without_extension_first_char_ascii_lower=0\n    local file_name_without_extension_first_char_ascii_upper=0\n\
    \    local file_name_without_extension_first_char_is_letter=0\n    local file_name_without_extension_first_char_is_lower_case=0\n\
    \    local file_name_without_extension_first_char_is_upper_case=0\n    local file_name_without_extension_first_char_is_valid=0\n\
    \    local file_name_without_extension_is_valid=0\n    local file_name_extension_is_valid=0\n\
    \    local file_name_is_valid=0\n    local file_name_has_valid_extension=0\n \
    \   local file_name_has_valid_extension_txt=0\n    local file_name_has_valid_extension_exe=0\n\
    \    local file_name_has_valid_extension_dll=0\n    local file_name_has_valid_extension_txt_len=0\n\
    \    local file_name_has_valid_extension_exe_len=0\n    local file_name_has_valid_extension_dll_len=0\n\
    \    local file_name_has_valid_extension_txt_len_without_dot=0\n    local file_name_has_valid_extension_exe_len_without_dot=0\n\
    \    local file_name_has_valid_extension_dll_len_without_dot=0\n    local file_name_has_valid_extension_txt_len_without_dot_is_valid=0\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_dot_index=$(expr index \"$file_name\" \".\")\n    local file_name_dot_index_minus_one=$((file_name_dot_index\
    \ - 1))\n    local file_name_dot_index_plus_one=$((file_name_dot_index + 1))\n\
    \    local file_name_dot_index_plus_two=$((file_name_dot_index + 2))\n    local\
    \ file_name_dot_index_plus_three=$((file_name_dot_index + 3))\n    local file_name_dot_index_plus_four=$((file_name_dot_index\
    \ + 4))\n    local file_name_dot_index_plus_five=$((file_name_dot_index + 5))\n\
    \    local file_name_dot_index_plus_six=$((file_name_dot_index + 6))\n    local\
    \ file_name_dot_index_plus_seven=$((file_name_dot_index + 7))\n    local file_name_dot_index_plus_eight=$((file_name_dot_index\
    \ + 8))\n    local file_name_dot_index_plus_nine=$((file_name_dot_index + 9))\n\
    \    local file_name_dot_index_plus_ten=$((file_name_dot_index + 10))\n    local\
    \ file_name_dot_index_plus_eleven=$((file_name_dot_index + 11))\n    local file_name_dot_index_plus_twelve=$((file_name_dot_index\
    \ + 12))\n    local file_name_dot_index_plus_thirteen=$((file_name_dot_index +\
    \ 13))\n    local file_name_dot_index_plus_fourteen=$((file_name_dot_index + 14))\n\
    \    local file_name_dot_index_plus_fifteen=$((file_name_dot_index + 15))\n  \
    \  local file_name_dot_index_plus_sixteen=$((file_name_dot_index + 16))\n    local\
    \ file_name_dot_index_plus_seventeen=$((file_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc2kc1v5d.sh: line 35: unexpected EOF while looking for matching
    `)''

    /tmp/tmpc2kc1v5d.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_limit=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_limit=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_limit_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_limit_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_is_lower_case=false\n\
    \    local file_name_without_extension_first_char_is_upper_case=false\n    local\
    \ file_name_without_extension_first_char_is_letter=false\n    local file_name_without_extension_first_char_is_digit=false\n\
    \    local file_name_without_extension_first_char_is_letter_or_digit=false\n \
    \   local file_name_without_extension_first_char_is_letter_or_digit_or_underscore=false\n\
    \    local file_name_without_extension_first_char_is_letter_or_digit_or_underscore_or_dot=false\n\
    \    local file_name_without_extension_first_char_is_letter_or_digit_\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=\"$1\"\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper=$(printf \"\
    %d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_lower_limit=$((file_name_no_ext_first_char_ascii_lower\
    \ - 1))\n    local file_name_no_ext_first_char_ascii_upper_limit=$((file_name_no_ext_first_char_ascii_upper\
    \ - 1))\n    local file_name_no_ext_first_char_ascii_lower_limit_char=$(printf\
    \ \\\\$(printf '%03o' $file_name_no_ext_first_char_ascii_lower_limit))\n    local\
    \ file_name_no_ext_first_char_ascii_upper_limit_char=$(printf \\\\$(printf '%03o'\
    \ $file_name_no_ext_first_char_ascii_upper_limit))\n    local file_name_no_ext_first_char_ascii_lower_limit_char_escaped=$(printf\
    \ '%q' \"$file_name_no_ext_first_char_ascii_lower_limit_char\")\n    local file_name_no_ext_first_char_ascii_upper_limit_char_escaped=$\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_no_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_no_extension_length=${#file_name_no_extension}\n    local\
    \ file_name_extension_length=${#file_name_extension}\n    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n\
    \    local file_name_no_extension_first_char_ascii_code=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_ascii_code_is_valid=false\n   \
    \ local file_name_no_extension_first_char_is_valid=false\n    local file_name_no_extension_has_more_than_three_digits=false\n\
    \    local file_name_has_exactly_one_dot=false\n    local file_name_no_extension_is_not_empty=false\n\
    \    local file_name_extension_is_valid=false\n    local file_name_is_valid=false\n\
    \n    if [ $file_name_length -eq 0 ]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    if [ $file_name_no_extension_length -eq 0 ]; then\n        echo\
    \ \"No\"\n        return\n    fi\n\n    if [ $file_name_extension_length -eq 0\
    \ ]; then\n        echo \"No\"\n        return\n    fi\n\n    if [ $file_name_no_extension_first_char_ascii_code\
    \ -ge 65 ] && [ $file_name_no_extension_first_char_ascii_code -le 90 ]; then\n\
    \        file_name_no_extension_first_char_ascii_code_is_valid=true\n    fi\n\n\
    \    if [ $file_name_no_extension_first_char_ascii_code -ge 97 ] && [\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfbi4tw44.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpfbi4tw44.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal file_name_len=${#file_name}\n\
    \tlocal file_name_len_without_extension=0\n\tlocal file_name_len_without_extension_without_digits=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot=0\n\tlocal\
    \ file_name_len_without_extension_without_digits_without_dot_without_first_letter=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot_without_first_letter_without_extension=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot_without_first_letter_without_extension_without_dot=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot_without_first_letter_without_extension_without_dot_without_first_letter=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot_without_first_letter_without_extension_without_dot_without_first_letter_without_extension=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot_without_first_letter_without_extension_without_dot_without_first_letter_without_extension_without_dot=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot_without_first_letter_without_extension_without_dot_without_first_letter_without_extension_without_dot_without_first_letter=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot_without_first_letter_without_extension_without_dot_without_first_letter_without_extension_without_dot_without_first_letter_without_extension=0\n\
    \tlocal file_name_len_without_extension_without_digits_without_dot_without_first_letter_without_extension_without_dot_without_first_letter_without_extension_without_dot\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_dot_index=$(expr index \"$file_name\" \".\")\n    local file_name_dot_index_plus_one=$((file_name_dot_index\
    \ + 1))\n    local file_name_dot_index_minus_one=$((file_name_dot_index - 1))\n\
    \    local file_name_dot_index_plus_two=$((file_name_dot_index + 2))\n    local\
    \ file_name_dot_index_plus_three=$((file_name_dot_index + 3))\n    local file_name_dot_index_plus_four=$((file_name_dot_index\
    \ + 4))\n    local file_name_dot_index_plus_five=$((file_name_dot_index + 5))\n\
    \    local file_name_dot_index_plus_six=$((file_name_dot_index + 6))\n    local\
    \ file_name_dot_index_plus_seven=$((file_name_dot_index + 7))\n    local file_name_dot_index_plus_eight=$((file_name_dot_index\
    \ + 8))\n    local file_name_dot_index_plus_nine=$((file_name_dot_index + 9))\n\
    \    local file_name_dot_index_plus_ten=$((file_name_dot_index + 10))\n    local\
    \ file_name_dot_index_plus_eleven=$((file_name_dot_index + 11))\n    local file_name_dot_index_plus_twelve=$((file_name_dot_index\
    \ + 12))\n    local file_name_dot_index_plus_thirteen=$((file_name_dot_index +\
    \ 13))\n    local file_name_dot_index_plus_fourteen=$((file_name_dot_index + 14))\n\
    \    local file_name_dot_index_plus_fifteen=$((file_name_dot_index + 15))\n  \
    \  local file_name_dot_index_plus_sixteen=$((file_name_dot_index + 16))\n    local\
    \ file_name_dot_index_plus_seventeen=$((file_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5w1h_okz.sh: line 35: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5w1h_okz.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_is_valid=0\n    local\
    \ file_name_no_ext_first_char_is_valid_upper=0\n    local file_name_no_ext_first_char_is_valid_lower=0\n\
    \    local file_name_no_ext_first_char_is_valid_upper=0\n    local file_name_no_ext_first_char_is_valid_lower=0\n\
    \    local file_name_no_ext_first_char_is_valid_upper=0\n    local file_name_no_ext_first_char_is_valid_lower=0\n\
    \    local file_name_no_ext_first_char_is_valid_upper=0\n    local file_name_no_ext_first_char_is_valid_lower=0\n\
    \    local file_name_no_ext_first_char_is_valid_upper=0\n\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_digits_count=$(echo $file_name_no_ext\
    \ | grep -o \"[0-9]\" | wc -l)\n    local file_name_no_ext_dots_count=$(echo $file_name_no_ext\
    \ | grep -o \"\\.\" | wc -l)\n    local file_name_ext_valid=0\n    local file_name_no_ext_first_char_valid=0\n\
    \    local file_name_no_ext_digits_count_valid=0\n    local file_name_no_ext_dots_count_valid=0\n\
    \    local file_name_no_ext_valid=0\n    local file_name_ext_valid=0\n    local\
    \ file_name_valid=0\n\n    if [ $file_name_no_ext_first_char_ascii -ge $file_name_no_ext_first_char_as\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5rlotup4.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmp5rlotup4.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_is_lower=false\n    local\
    \ file_name_no_ext_first_char_is_upper=false\n    local file_name_no_ext_first_char_is_valid=false\n\
    \    local file_name_no_ext_contains_digit=false\n    local file_name_no_ext_contains_digit_count=0\n\
    \    local file_name_no_ext_contains_digit_count_max=3\n    local file_name_no_ext_contains_digit_count_is_valid=false\n\
    \    local file_name_ext_is_valid=false\n    local file_name_ext_is_txt=false\n\
    \    local file_name_ext_is_exe=false\n    local file_name_ext_is_dll=false\n\
    \    local file_name_ext_is_valid_list=('txt' 'exe' 'dll\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgb51vaue.sh: line 38: unexpected EOF while looking for matching
    `''''

    /tmp/tmpgb51vaue.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_prefix=${file_name%.*}\n\
    \    local file_name_prefix_len=${#file_name_prefix}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_extension_valid=0\n    local file_name_prefix_valid=0\n \
    \   local file_name_valid=0\n    local file_name_prefix_digit_count=0\n    local\
    \ file_name_prefix_letter_count=0\n    local file_name_prefix_dot_count=0\n  \
    \  local file_name_prefix_other_count=0\n    local file_name_prefix_index=0\n\
    \    local file_name_prefix_char=''\n    local file_name_prefix_char_code=0\n\
    \    local file_name_prefix_char_code_lower=0\n    local file_name_prefix_char_code_upper=0\n\
    \    local file_name_prefix_char_code_digit=0\n    local file_name_prefix_char_code_dot=0\n\
    \    local file_name_prefix_char_code_other=0\n    local file_name_prefix_char_code_lower_min=97\n\
    \    local file_name_prefix_char_code_lower_max=122\n    local file_name_prefix_char_code_upper_min=65\n\
    \    local file_name_prefix_char_code_upper_max=90\n    local file_name_prefix_char_code_digit_min=48\n\
    \    local file_name_prefix_char_code_digit_max=57\n    local file_name_prefix_char_code_dot=46\n\
    \    local file_name_prefix_char_code_other_min=0\n    local file_name_prefix_char_code_other_max=47\n\
    \    local file_name_prefix_char_code_other_min=58\n    local file_name_prefix_char_code_other_max=64\n\
    \    local file_name_prefix_char_\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_digit_count=$(echo \"$file_name_no_ext\"\
    \ | grep -o '[0-9]' | wc -l)\n    local file_name_no_ext_dot_count=$(echo \"$file_name_no_ext\"\
    \ | grep -o '\\.' | wc -l)\n    local file_name_ext_count=$(echo \"$file_name_ext\"\
    \ | grep -o '\\.' | wc -l)\n    local file_name_ext_valid=false\n    local file_name_ext_valid_list=('txt'\
    \ 'exe' 'dll')\n    local file_name_ext_valid_list_len=${#file_name_ext_valid_list[@]}\n\
    \    local file_name_ext_valid_list_index=0\n    local file_name_ext_valid_list_item=''\n\
    \    local file_name_ext_valid_\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_substring_before_dot=\"\"\n    local file_name_substring_after_dot=\"\
    \"\n    local file_name_substring_before_dot_length=0\n    local file_name_substring_after_dot_length=0\n\
    \    local file_name_substring_before_dot_first_char=\"\"\n    local file_name_substring_after_dot_first_char=\"\
    \"\n    local file_name_substring_after_dot_second_char=\"\"\n    local file_name_substring_after_dot_third_char=\"\
    \"\n    local file_name_substring_after_dot_fourth_char=\"\"\n    local file_name_substring_after_dot_fifth_char=\"\
    \"\n    local file_name_substring_after_dot_sixth_char=\"\"\n    local file_name_substring_after_dot_seventh_char=\"\
    \"\n    local file_name_substring_after_dot_eighth_char=\"\"\n    local file_name_substring_after_dot_ninth_char=\"\
    \"\n    local file_name_substring_after_dot_tenth_char=\"\"\n    local file_name_substring_after_dot_eleventh_char=\"\
    \"\n    local file_name_substring_after_dot_twelfth_char=\"\"\n    local file_name_substring_after_dot_thirteenth_char=\"\
    \"\n    local file_name_substring_after_dot_fourteenth_char=\"\"\n    local file_name_substring_after_dot_fifteenth_char=\"\
    \"\n    local file_name_substring_after_dot_sixteenth_char=\"\"\n    local file_name_substring_after_dot_seventeenth_char=\"\
    \"\n    local file_name_substring_after_dot_eighteenth_char=\"\"\n    local file_name_substring_after_dot_nineteenth_char=\"\
    \"\n    local file_name_substring_after_dot_twentieth_char=\"\"\n    local file_name_substring_after_dot_twenty_first_char=\"\
    \"\n    local file_name_substring_\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower=$(printf \"%d\"\
    \ \"'a\")\n    local file_name_without_extension_first_char_ascii_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_limit=$((file_name_without_extension_first_char_ascii_lower\
    \ - 1))\n    local file_name_without_extension_first_char_ascii_upper_limit=$((file_name_without_extension_first_char_ascii_upper\
    \ - 1))\n    local file_name_without_extension_first_char_ascii_lower_limit_char=$(printf\
    \ \\\\$(printf '%03o' $file_name_without_extension_first_char_ascii_lower_limit))\n\
    \    local file_name_without_extension_first_char_ascii_upper_limit_char=$(printf\
    \ \\\\$(printf '%03o' $file_name_without_extension_first_char_ascii_upper_limit))\n\
    \    local file_name_without_extension_first_char_ascii_lower_limit_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_without_extension_first_char_ascii_lower_limit_char\")\n\
    \    local file_name_\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\" | tr '[:upper:]' '[:lower:]')\n   \
    \ local file_name_no_ext_first_char_ascii_upper=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local file_name_no_ext_first_char_ascii_lower_min=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_lower_max=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_min=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_max=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_digit_count=$(echo \"$file_name_no_ext\"\
    \ | grep -o '[0-9]' | wc -l)\n    local file_name_dot_count=$(echo \"$file_name\"\
    \ | grep -o '\\.' | wc -l)\n    local file_name_ext_valid=0\n    local file_name_valid=0\n\
    \n    if [[ $file_name_no_ext_digit_count -le 3 ]]; then\n        if\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx2_krd7d.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpx2_krd7d.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_substr_len=0\n    local file_name_substr=\"\"\n    local\
    \ file_name_substr_after_dot=\"\"\n    local file_name_substr_before_dot=\"\"\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n  if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_last=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_last=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_valid=0\n\
    \    local file_name_without_extension_first_char_ascii_valid_lower_case=0\n \
    \   local file_name_without_extension_first_char_ascii_valid_upper_case=0\n  \
    \  local file_name_without_extension_first_char_ascii_valid_lower_case_last=0\n\
    \    local file_name_without_extension_first_char_ascii_valid_upper_case_last=0\n\
    \    local file_name_without_extension_first_char_ascii_valid_lower_case_first=0\n\
    \    local file_name_without_extension_first_char_ascii_valid_upper_case_first=0\n\
    \    local file_name_without_extension_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_dot_index=0\n    local file_name_dot_count=0\n    local file_name_digit_count=0\n\
    \    local file_name_substr_before_dot=\"\"\n    local file_name_substr_after_dot=\"\
    \"\n    local file_name_substr_after_dot_len=0\n    local file_name_substr_after_dot_valid=0\n\
    \    local file_name_substr_after_dot_valid_list=(\"txt\" \"exe\" \"dll\")\n \
    \   local file_name_substr_after_dot_valid_list_len=${#file_name_substr_after_dot_valid_list[@]}\n\
    \    local file_name_substr_after_dot_valid_list_index=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_before_dot_first_char=\"\"\n    local file_name_substr_before_dot_first_char_ascii_code=0\n\
    \    local file_name_substr_before_dot_first_char_ascii_code_lower_bound=0\n \
    \   local file_name_substr_before_dot_first_char_ascii_code_upper_bound=0\n  \
    \  local file_name_substr_before_dot_first_char_valid=0\n    local file_name_substr_before_dot_first_char_valid_list=(\"\
    a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"\
    n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" \"\
    A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"\
    N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq9u5zq1d.sh: line 67: unexpected EOF while looking for matching
    `"''

    /tmp/tmpq9u5zq1d.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper=$(printf \"\
    %d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_lower_diff=$((file_name_no_ext_first_char_ascii\
    \ - file_name_no_ext_first_char_ascii_lower))\n    local file_name_no_ext_first_char_ascii_upper_diff=$((file_name_no_ext_first_char_ascii\
    \ - file_name_no_ext_first_char_ascii_upper))\n    local file_name_no_ext_first_char_ascii_lower_upper_diff=$((file_name_no_ext_first_char_ascii_lower_diff\
    \ + file_name_no_ext_first_char_ascii_upper_diff))\n    local file_name_no_ext_first_char_ascii_lower_upper_diff_abs=$((file_name_no_ext_first_char_ascii_lower_upper_diff\
    \ < 0 ? -file_name_no_ext_first_char_ascii_lower_upper_diff : file_name_no_ext_first_char_ascii_lower_upper_diff))\n\
    \    local file_name_no_ext\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_digit_count=$(echo $file_name_no_ext\
    \ | grep -o '[0-9]' | wc -l)\n    local file_name_dot_count=$(echo $file_name\
    \ | grep -o '\\.' | wc -l)\n    local file_name_ext_valid=0\n    local file_name_ext_valid_list=('txt'\
    \ 'exe' 'dll')\n    for file_name_ext_valid_item in ${file_name_ext_valid_list[@]};\
    \ do\n        if [ \"$file_name_ext_valid_item\" == \"$file_name_ext\" ]; then\n\
    \            file_name_ext_valid=1\n            break\n        fi\n    done\n\
    \    if [ $file_name_len -eq 0 ]; then\n        echo 'No'\n    elif [ $file_name_no_ext_len\
    \ -eq 0 ]; then\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1texni_z.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmp1texni_z.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_limit=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_limit=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_limit_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_limit_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_limit_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_limit_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_limit_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_limit_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_limit_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_limit_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_ext=${file_name##*.}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_no_ext_len=${#file_name_no_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_digit_count=$(echo $file_name_no_ext\
    \ | grep -o '[0-9]' | wc -l)\n    local file_name_no_ext_dot_count=$(echo $file_name_no_ext\
    \ | grep -o '\\.' | wc -l)\n    local file_name_ext_valid=0\n    local file_name_valid=0\n\
    \n    if [ $file_name_no_ext_digit_count -le 3 ] && \\\n       [ $file_name_no_ext_dot_count\
    \ -eq 0 ] && \\\n       [ $file_name_no_ext_len -gt 0 ] && \\\n       [ $file_name_ext_len\
    \ -gt 0 ] && \\\n       [ $file_name_ext_len -le 3 ] && \\\n       [ $file_name_no_ext_first_char_ascii\
    \ -ge $file\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7peupn6u.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmp7peupn6u.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n  local file_name=\"$1\"\n  local file_name_pattern=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n  if [[ $file_name =~ $file_name_pattern\
    \ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_prefix=${file_name%.*}\n\
    \    local file_name_prefix_length=${#file_name_prefix}\n    local file_name_extension_length=${#file_name_extension}\n\
    \    local file_name_prefix_first_char=${file_name_prefix:0:1}\n    local file_name_prefix_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_prefix_first_char\")\n    local file_name_prefix_first_char_ascii_lower_limit=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_prefix_first_char_ascii_upper_limit=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_prefix_first_char_ascii_upper_limit_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_prefix_first_char_ascii_upper_limit_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_prefix_first_char_ascii_upper_limit_lower_plus_one=$((file_name_prefix_first_char_ascii_upper_limit_lower\
    \ + 1))\n    local file_name_prefix_first_char_ascii_upper_limit_upper_plus_one=$((file_name_prefix_first_char_ascii_upper_limit_upper\
    \ + 1))\n    local file_name_prefix_first_char_ascii_upper_limit_upper_plus_two=$((file_name_prefix_first_char_ascii_upper_limit_upper\
    \ + 2))\n    local file_name_prefix_first_char_ascii_upper_limit_upper_plus_three=$((file_name_prefix_first_char_ascii_upper_limit_upper\
    \ + 3))\n    local file_name_prefix_first_char_ascii_upper_limit_upper_plus_four=$((file_name_prefix_first_char_\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpci9bwxb0.sh: line 31: unexpected EOF while looking for matching
    `)''

    /tmp/tmpci9bwxb0.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii_value=$(printf '%d' \"\
    '$file_name_without_extension_first_char\")\n    local file_name_without_extension_first_char_ascii_value_lower_bound=$(printf\
    \ '%d' \"'a\")\n    local file_name_without_extension_first_char_ascii_value_upper_bound=$(printf\
    \ '%d' \"'z\")\n    local file_name_without_extension_first_char_ascii_value_lower_bound_upper_case=$(printf\
    \ '%d' \"'A\")\n    local file_name_without_extension_first_char_ascii_value_upper_bound_upper_case=$(printf\
    \ '%d' \"'Z\")\n    local file_name_without_extension_first_char_is_lower_case=$(($file_name_without_extension_first_char_ascii_value\
    \ >= $file_name_without_extension_first_char_ascii_value_lower_bound && $file_name_without_extension_first_char_ascii_value\
    \ <= $file_name_without_extension_first_char_ascii_value_upper_bound))\n    local\
    \ file_name_without_extension_first_char_is_upper_case=$(($file_name_without_extension_first_char_ascii_value\
    \ >= $file_name_without_extension_first_char_ascii_value_lower_bound_upper_case\
    \ && $file_name\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph8uoeov3.sh: line 28: unexpected EOF while looking for matching
    `)''

    /tmp/tmph8uoeov3.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_letter=0\n\
    \    local file_name_without_extension_has_digits=0\n    local file_name_has_more_than_one_dot=0\n\
    \    local file_name_extension_is_valid=0\n    local file_name_is_valid=0\n\n\
    \    # Check if the first character of the file's name is a letter\n    if [[\
    \ $file_name_without_extension_first_char_ascii -ge $file_name_without_extension_first_char_ascii_lower_bound\
    \ && $file_name_without_extension_first_char_ascii -le $file_name_without_extension_first_char_ascii_upper_bound\
    \ ]] || [[ $file_name_without_extension_first_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9wyzkxbi.sh: line 34: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp9wyzkxbi.sh: line 34: syntax error near `$file_name_without_extension_first_''

    /tmp/tmp9wyzkxbi.sh: line 34: `    if [[ $file_name_without_extension_first_char_ascii
    -ge $file_name_without_extension_first_char_ascii_lower_bound && $file_name_without_extension_first_char_ascii
    -le $file_name_without_extension_first_char_ascii_upper_bound ]] || [[ $file_name_without_extension_first_''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_last=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_last=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_letter=0\n\
    \    local file_name_without_extension_first_char_is_digit=0\n    local file_name_without_extension_first_char_is_letter_or_digit=0\n\
    \    local file_name_without_extension_first_char_is_digit_ascii=$(printf \"%d\"\
    \ \"'0\")\n    local file_name_without_extension_first_char_is_digit_ascii_last=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_without_extension_first_char_is_digit_ascii_last_plus_one=$((file_name_without_extension_first_char_is_digit_ascii_last\
    \ + 1))\n    local file_name_without_extension_first_char_\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    # You can\
    \ use the following command to get the substring before the dot:\n    # sub_before_dot=${1%.*}\n\
    \    # You can use the following command to get the substring after the dot:\n\
    \    # sub_after_dot=${1#*.}\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{3}$\
    \ ]]; then\n        sub_after_dot=${1#*.}\n        if [[ $sub_after_dot == \"\
    txt\" || $sub_after_dot == \"exe\" || $sub_after_dot == \"dll\" ]]; then\n   \
    \         sub_before_dot=${1%.*}\n            if [[ $sub_before_dot =~ ^[a-zA-Z][a-zA-Z0-9]*$\
    \ ]]; then\n                echo \"Yes\"\n            else\n                echo\
    \ \"No\"\n            fi\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name =~ $file_name_regex\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_bound_2=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid_2=false\n    local\
    \ file_name_without_extension_first_char_is_valid_3=false\n    local file_name_without_extension_first_char_is_valid_4=false\n\
    \    local file_name_without_extension_first_char_is_valid_5=false\n    local\
    \ file_name_without_extension_first_char_is_valid_6=false\n    local file_name_without_extension_first_char_is_valid_7=false\n\
    \    local file_name_without_extension_first_char_is_valid_8=false\n    local\
    \ file_name_without_extension_first_char_is_valid_9=false\n    local file_name_without_extension_first_char_is_valid_10=false\n\
    \    local file_name_without_extension\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_count=0\n    local digit_count=0\n    local i\n    local sub_str\n\
    \    local sub_str_len\n    local sub_str_len_1\n    local sub_str_len_2\n   \
    \ local sub_str_1\n    local sub_str_2\n    local sub_str_3\n    local sub_str_1_len\n\
    \    local sub_str_2_len\n    local sub_str_3_len\n    local sub_str_1_len_1\n\
    \    local sub_str_1_len_2\n    local sub_str_1_len_3\n    local sub_str_2_len_1\n\
    \    local sub_str_2_len_2\n    local sub_str_2_len_3\n    local sub_str_3_len_1\n\
    \    local sub_str_3_len_2\n    local sub_str_3_len_3\n    local sub_str_1_1\n\
    \    local sub_str_1_2\n    local sub_str_1_3\n    local sub_str_2_1\n    local\
    \ sub_str_2_2\n    local sub_str_2_3\n    local sub_str_3_1\n    local sub_str_3_2\n\
    \    local sub_str_3_3\n    local sub_str_1_1_len\n    local sub_str_1_2_len\n\
    \    local sub_str_1_3_len\n    local sub_str_2_1_len\n    local sub_str_2_2_len\n\
    \    local sub_str_2_3_len\n    local sub_str_3_1_len\n    local sub_str_3_2_len\n\
    \    local sub_str_3_3_len\n    local sub_str_1_1_1\n    local sub_str_1_1_2\n\
    \    local sub_str_1_1_3\n    local sub_str_1_2_1\n    local sub_str_1_2_2\n \
    \   local sub_str_1_2_3\n    local\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_is_valid=0\n    local\
    \ file_name_ext_is_valid=0\n    local file_name_no_ext_has_digits=0\n    local\
    \ file_name_no_ext_has_more_than_three_digits=0\n    local file_name_no_ext_has_more_than_one_dot=0\n\
    \    local file_name_no_ext_has_dot=0\n    local file_name_no_ext_has_empty_substring_before_dot=0\n\
    \    local file_name_no_ext_has_empty_substring_after_dot=0\n    local file_name_no_ext_has_empty_substring_before_or_after_dot=0\n\
    \    local file_name_no_ext_has_empty_substring_before_and_after_dot=0\n    local\
    \ file_name_\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_without_extension=${file_name%.*}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_limit=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_limit=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_limit_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_limit_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_digits_count=$(echo $file_name_without_extension\
    \ | grep -o '[0-9]' | wc -l)\n    local file_name_without_extension_dots_count=$(echo\
    \ $file_name_without_extension | grep -o '\\.' | wc -l)\n    local file_name_extension_dots_count=$(echo\
    \ $file_name_extension | grep -o '\\.' | wc -l)\n    local file_name_extension_valid=0\n\
    \    local file_name_extension_valid_list=('txt' 'exe' 'dll')\n    local file_name_extension_valid_list_len=${#file_name_extension_valid_list[@]}\n\
    \    local file_name_extension_valid_list\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_substr_len=0\n    local file_name_substr=\"\"\n    local\
    \ file_name_substr_after_dot=\"\"\n    local file_name_substr_before_dot=\"\"\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot_len=0\n\
    \    local file_name_substr_after_dot_len=0\n    local file_name_substr_before_dot\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name =~ $file_name_regex\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_is_valid=false\n   \
    \ local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_\n}\n\ncandidate() {\n  \
    \  file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_last=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_last=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_case_range=$((file_name_without_extension_first_char_ascii_lower_case_last\
    \ - file_name_without_extension_first_char_ascii_lower_case + 1))\n    local file_name_without_extension_first_char_ascii_upper_case_range=$((file_name_without_extension_first_char_ascii_upper_case_last\
    \ - file_name_without_extension_first_char_ascii_upper_case + 1))\n    local file_name_without_extension_first_char_ascii_lower_case_range_last=$((file_name_without_extension_first_char_ascii_lower_case_last\
    \ - file_name_without_ext\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgn_k6_b6.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmpgn_k6_b6.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    # You can\
    \ use the following command to get the substring before the dot:\n    # ${1%.*}\n\
    \    # You can use the following command to get the substring after the dot:\n\
    \    # ${1#*.}\n    # You can use the following command to check if a string is\
    \ empty:\n    # [ -z \"$1\" ]\n    # You can use the following command to check\
    \ if a string contains a substring:\n    # [[ $1 == *\"$2\"* ]]\n    # You can\
    \ use the following command to check if a string starts with a substring:\n  \
    \  # [[ $1 == \"$2\"* ]]\n    # You can use the following command to check if\
    \ a string ends with a substring:\n    # [[ $1 == *\"$2\" ]]\n    # You can use\
    \ the following command to check if a string contains only digits:\n    # [[ $1\
    \ =~ ^[0-9]+$ ]]\n    # You can use the following command to check if a string\
    \ contains only letters:\n    # [[ $1 =~ ^[a-zA-Z]+$ ]]\n    # You can use the\
    \ following command to check if a string contains only letters and digits:\n \
    \   # [[ $1 =~ ^[a-zA-Z0-9]+$ ]]\n    # You can use the following command to check\
    \ if a string contains only letters, digits, and underscores:\n    # [[ $1 =~\
    \ ^[a-zA-Z0-9_]+$ ]]\n    # You can use the following command to check if a string\
    \ contains only letters, digits, underscores, and dashes:\n    # [[ $1 =~ ^[a-zA-Z0-9_-]+$\
    \ ]]\n    # You can use the following command to check if a string contains only\
    \ letters, digits, underscores, dashes, and dots:\n    # [[ $1 =~ ^[a-zA-Z0-9_.-]+$\
    \ ]]\n    # You can use the following command to check if a string contains only\
    \ letters, digits, underscores, dashes, dots, and spaces:\n    # [[ $1 =~ ^[a-zA-Z0-9_.-\
    \ ]+$ ]]\n    #\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmwzbhu89.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpmwzbhu89.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    # You can\
    \ use the following command to get the substring before the dot:\n    # sub_before_dot=${1%.*}\n\
    \    # You can use the following command to get the substring after the dot:\n\
    \    # sub_after_dot=${1#*.}\n    # You can use the following command to get the\
    \ number of digits in the file's name:\n    # num_digits=$(echo $1 | grep -o [0-9]\
    \ | wc -l)\n    # You can use the following command to get the number of dots\
    \ in the file's name:\n    # num_dots=$(echo $1 | grep -o \\. | wc -l)\n    #\
    \ You can use the following command to get the first character of the file's name:\n\
    \    # first_char=$(echo $1 | head -c 1)\n    # You can use the following command\
    \ to get the last character of the file's name:\n    # last_char=$(echo $1 | tail\
    \ -c 1)\n    # You can use the following command to get the file's name without\
    \ the first and last characters:\n    # middle_chars=$(echo $1 | cut -c 2-$((${#1}-1)))\n\
    \    # You can use the following command to check if the file's name contains\
    \ only letters:\n    # if [[ $1 =~ ^[a-zA-Z]+$ ]]; then\n    #     echo \"Yes\"\
    \n    # else\n    #     echo \"No\"\n    # fi\n    # You can use the following\
    \ command to check if the file's name contains only digits:\n    # if [[ $1 =~\
    \ ^[0-9]+$ ]]; then\n    #     echo \"Yes\"\n    # else\n    #     echo \"No\"\
    \n    # fi\n    # You can use the following command to check if the file's name\
    \ contains only letters and digits:\n    # if [[ $1 =~ ^[a-zA-Z0-9]+$ ]]; then\n\
    \    #     echo \"Yes\"\n    # else\n    #     echo \"No\"\n    # fi\n    # You\
    \ can use the following command to check if the file's name contains only letters,\
    \ digits and dots:\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1pakp44s.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmp1pakp44s.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local name=$1\n    local name_len=${#name}\n\
    \    local dot_pos=0\n    local digit_count=0\n    local i=0\n    local valid_extensions=('txt'\
    \ 'exe' 'dll')\n    local extension=''\n    local extension_len=0\n    local extension_pos=0\n\
    \    local extension_valid=0\n    local valid_name=0\n\n    if [[ $name_len -eq\
    \ 0 ]]; then\n        echo 'No'\n        return\n    fi\n\n    for ((i=0; i<name_len;\
    \ i++)); do\n        if [[ ${name:$i:1} == '.' ]]; then\n            if [[ $dot_pos\
    \ -ne 0 ]]; then\n                echo 'No'\n                return\n        \
    \    fi\n            dot_pos=$i\n        elif [[ ${name:$i:1} =~ [0-9] ]]; then\n\
    \            digit_count=$((digit_count+1))\n        fi\n    done\n\n    if [[\
    \ $digit_count -gt 3 ]]; then\n        echo 'No'\n        return\n    fi\n\n \
    \   if [[ $dot_pos -eq 0 ]]; then\n        echo 'No'\n        return\n    fi\n\
    \n    if [[ $dot_pos -eq 1 ]]; then\n        echo 'No'\n        return\n    fi\n\
    \n    if [[ $dot_pos -eq $((name_len-1)) ]]; then\n        echo 'No'\n       \
    \ return\n    fi\n\n    if [[ ! ${name:0:1} =~ [a-zA-Z] ]]; then\n        echo\
    \ 'No'\n        return\n    fi\n\n    extension_pos=$((dot_pos+1))\n    extension_len=$((name_len-extension_pos))\n\
    \    extension=${name:$extension_pos:$extension_len}\n    extension_valid=0\n\
    \    for valid_extension in ${valid_extensions[@]}; do\n        if [[ $extension\
    \ == $valid_extension ]]; then\n            extension_valid=1\n            break\n\
    \        fi\n    done\n\n    if [[ $extension_valid -eq 0 ]]; then\n        echo\
    \ 'No'\n        return\n    fi\n\n\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n  local name=$1\n  if [[ $name =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n    if [[ $name =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n      echo \"Yes\"\n    else\n      echo \"No\"\n    fi\n  else\n\
    \    echo \"No\"\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ txt$ ]] || [[ $1 =~ exe$ ]] || [[\
    \ $1 =~ dll$ ]]; then\n            echo \"Yes\"\n        else\n            echo\
    \ \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_no_extension_len=${#file_name_no_extension}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n \
    \   local file_name_no_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_ascii_lower_case=$(printf \"%d\"\
    \ \"'a\")\n    local file_name_no_extension_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_extension_first_char_is_lower_case=$((file_name_no_extension_first_char_ascii\
    \ >= file_name_no_extension_first_char_ascii_lower_case))\n    local file_name_no_extension_first_char_is_upper_case=$((file_name_no_extension_first_char_ascii\
    \ <= file_name_no_extension_first_char_ascii_upper_case))\n    local file_name_no_extension_first_char_is_valid=$((file_name_no_extension_first_char_is_lower_case\
    \ && file_name_no_extension_first_char_is_upper_case))\n    local file_name_no_extension_has_no_digits=$(echo\
    \ \"$file_name_no_extension\" | grep -v '[0-9]')\n    local file_name_no_extension_has_no_digits_len=${#file_name_no_extension_has_no_digits}\n\
    \    local file_name_no_extension_\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_no_extension_len=${#file_name_no_extension}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n \
    \   local file_name_no_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_ascii_lower_bound=$(printf \"%d\"\
    \ \"'a\")\n    local file_name_no_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_extension_first_char_ascii_upper_bound_2=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_extension_first_char_is_letter=0\n  \
    \  local file_name_no_extension_first_char_is_letter_2=0\n    local file_name_no_extension_first_char_is_letter_3=0\n\
    \    local file_name_no_extension_first_char_is_letter_4=0\n    local file_name_no_extension_first_char_is_letter_5=0\n\
    \    local file_name_no_extension_first_char_is_letter_6=0\n    local file_name_no_extension_first_char_is_letter_7=0\n\
    \    local file_name_no_extension_first_char_is_letter_8=0\n    local file_name_no_extension_first_char_is_letter_9=0\n\
    \    local file_name_no_extension_first_char_is_letter_10=0\n    local file_name_no_extension\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_len_without_extension=${file_name_len%%.*}\n    local file_name_len_without_extension_len=${#file_name_len_without_extension}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_extension_len_without_dot=${file_name_extension_len-1}\n\
    \    local file_name_extension_len_without_dot_len=${#file_name_extension_len_without_dot}\n\
    \    local file_name_extension_len_without_dot_len_without_extension=${file_name_extension_len_without_dot%%.*}\n\
    \    local file_name_extension_len_without_dot_len_without_extension_len=${#file_name_extension_len_without_dot_len_without_extension}\n\
    \    local file_name_extension_len_without_dot_len_without_extension_len_without_extension=${file_name_extension_len_without_dot_len_without_extension##*.}\n\
    \    local file_name_extension_len_without_dot_len_without_extension_len_without_extension_len=${#file_name_extension_len_without_dot_len_without_extension_len_without_extension}\n\
    \    local file_name_extension_len_without_dot_len_without_extension_len_without_extension_len_without_extension=${file_name_extension_len_without_dot_len_without_extension_len_without_extension%%.*}\n\
    \    local file_name_extension_len_without_dot_len_without_extension_len_without_extension_len_without_extension_len=${#file_name_extension_len_without_dot_len_without_extension_len_without_extension_\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp360e6viz.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ # Hint: You can use the following command to check if a string is a number:\n\
    \    #\n    # [[ $1 =~ ^[0-9]+$ ]]\n    #\n    # It returns 0 if the string is\
    \ a number, and 1 otherwise.\n    #\n    # Hint: You can use the following command\
    \ to check if a string is a letter:\n    #\n    # [[ $1 =~ ^[a-zA-Z]+$ ]]\n  \
    \  #\n    # It returns 0 if the string is a letter, and 1 otherwise.\n    #\n\
    \    # Hint: You can use the following command to check if a string is a letter\
    \ or a number:\n    #\n    # [[ $1 =~ ^[a-zA-Z0-9]+$ ]]\n    #\n    # It returns\
    \ 0 if the string is a letter or a number, and 1 otherwise.\n    #\n    # Hint:\
    \ You can use the following command to check if a string is a letter or a number\
    \ or a dot:\n    #\n    # [[ $1 =~ ^[a-zA-Z0-9.]+$ ]]\n    #\n    # It returns\
    \ 0 if the string is a letter or a number or a dot, and 1 otherwise.\n    #\n\
    \    # Hint: You can use the following command to check if a string is a letter\
    \ or a number or a dot or an underscore:\n    #\n    # [[ $1 =~ ^[a-zA-Z0-9._]+$\
    \ ]]\n    #\n    # It returns 0 if the string is a letter or a number or a dot\
    \ or an underscore, and 1 otherwise.\n    #\n    # Hint: You can use the following\
    \ command to check if a string is a letter or a number or a dot or an underscore\
    \ or a dash:\n    #\n    # [[ $1 =~ ^[a-zA-Z0-9._-]+$ ]]\n    #\n    # It returns\
    \ 0 if the string is a letter or a number or a dot or an underscore or a dash,\
    \ and 1 otherwise.\n    #\n    # Hint: You can use the following command to check\
    \ if a string is a letter or a number or a dot or\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxpw6n93_.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpxpw6n93_.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_bound_2=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_letter=0\n\
    \    local file_name_without_extension_first_char_is_letter_2=0\n    local file_name_without_extension_first_char_is_letter_3=0\n\
    \    local file_name_without_extension_first_char_is_letter_4=0\n    local file_name_without_extension_first_char_is_letter_5=0\n\
    \    local file_name_without_extension_first_char_is_letter_6=0\n    local file_name_without_extension_first_char_is_letter_7=0\n\
    \    local file_name_without_extension_first_char_is_letter_8=0\n    local file_name_without_extension_first_char_is_letter_9=0\n\
    \    local file_name_without_extension_first_char_is_letter_10=0\n    local file_name_without_extension\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper=$(printf \"\
    %d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_lower_end=$(printf \"\
    %d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_end=$(printf \"\
    %d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_range=$((file_name_no_ext_first_char_ascii_lower_end\
    \ - file_name_no_ext_first_char_ascii_lower + 1))\n    local file_name_no_ext_first_char_ascii_upper_range=$((file_name_no_ext_first_char_ascii_upper_end\
    \ - file_name_no_ext_first_char_ascii_upper + 1))\n    local file_name_no_ext_first_char_ascii_lower_range_start=$((file_name_no_ext_first_char_ascii_lower\
    \ - file_name_no_ext_first_char_ascii))\n    local file_name_no_ext_first_char_ascii_upper_range_start=$((file_name_no_ext_first_char_as\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmazm9_3s.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpmazm9_3s.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_without_extension_len=${#file_name_without_extension}\n\
    \    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without_extension_first_char_is_valid=false\n    local file_name_without_extension_first_char_is_valid=false\n\
    \    local file_name_without\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_is_digit=0\n    local\
    \ file_name_without_extension_first_char_is_digit=0\n    local file_name_without_extension_first_char_is_letter=0\n\
    \    local file_name_without_extension_first_char_is_upper_case=0\n    local file_name_without_extension_first_char_is_lower_case=0\n\
    \    local file_name_without_extension_first_char_is_valid=0\n    local file_name_without_extension_first_char_is_valid_digit=0\n\
    \    local file_name_without_extension_first_char_is_valid_letter=0\n    local\
    \ file_name_without_extension_first_char_is_valid_upper_case=0\n    local file_name_without_extension_first_char_is_valid_lower_case=0\n\
    \    local file_name_without_extension_first_char_is_valid_digit_or_letter=0\n\
    \    local file_name_without_extension_first_char_is_valid_digit_or_letter_or_upper_case=0\n\
    \    local file_name_without_extension_first_char_is_valid_digit_or_letter_or_lower_case=0\n\
    \    local file_name_without_extension_first_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_len_without_extension=${file_name%.*}\n    local file_name_len_without_extension=${#file_name_len_without_extension}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_extension_len_without_dot=${file_name_extension_len}-1\n\
    \    local file_name_extension_without_dot=${file_name_extension:0:$file_name_extension_len_without_dot}\n\
    \    local file_name_extension_without_dot_len=${#file_name_extension_without_dot}\n\
    \    local file_name_extension_without_dot_len_without_dot=${file_name_extension_without_dot_len}-1\n\
    \    local file_name_extension_without_dot_without_dot=${file_name_extension_without_dot:0:$file_name_extension_without_dot_len_without_dot}\n\
    \    local file_name_extension_without_dot_without_dot_len=${#file_name_extension_without_dot_without_dot}\n\
    \    local file_name_extension_without_dot_without_dot_len_without_dot=${file_name_extension_without_dot_without_dot_len}-1\n\
    \    local file_name_extension_without_dot_without_dot_without_dot=${file_name_extension_without_dot_without_dot:0:$file_name_extension_without_dot_without_dot_len_without_dot}\n\
    \    local file_name_extension_without_dot_without_dot_without_dot_len=${#file_name_extension_without_dot_without_dot_without_dot}\n\
    \    local file_name_extension_without_dot_without_dot_without_dot_len_without_dot=${file_name_ext\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv53807na.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local name=$1\n    local name_len=${#name}\n\
    \    local dot_count=0\n    local digit_count=0\n    local i=0\n    local dot_index=0\n\
    \    local ext_len=0\n    local ext=\"\"\n    local ext_valid=0\n    local ext_valid_list=(\"\
    txt\" \"exe\" \"dll\")\n    local ext_valid_list_len=${#ext_valid_list[@]}\n \
    \   local ext_valid_list_index=0\n    local ext_valid_list_item=\"\"\n    local\
    \ ext_valid_list_item_len=0\n    local ext_valid_list_item_index=0\n    local\
    \ ext_valid_list_item_char=\"\"\n    local ext_valid_list_item_char_code=0\n \
    \   local ext_valid_list_item_char_code_lower=0\n    local ext_valid_list_item_char_code_upper=0\n\
    \    local ext_valid_list_item_char_code_lower_diff=0\n    local ext_valid_list_item_char_code_upper_diff=0\n\
    \    local ext_valid_list_item_char_code_lower_diff_abs=0\n    local ext_valid_list_item_char_code_upper_diff_abs=0\n\
    \    local ext_valid_list_item_char_code_lower_diff_abs_min=0\n    local ext_valid_list_item_char_code_upper_diff_abs_min=0\n\
    \    local ext_valid_list_item_char_code_lower_diff_abs_min_index=0\n    local\
    \ ext_valid_list_item_char_code_upper_diff_abs_min_index=0\n    local ext_valid_list_item_char_code_lower_diff_abs_min_index_valid=0\n\
    \    local ext_valid_list_item_char_code_upper_diff_abs_min_index_valid=0\n  \
    \  local ext_valid_list_item_char_code_lower_diff_abs_min_index_valid_count=0\n\
    \    local ext_valid_list_item_char_code_upper_diff_\n}\n\ncandidate() {\n   \
    \ file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\" | tr '[:upper:]' '[:lower:]')\n   \
    \ local file_name_no_ext_first_char_ascii_upper=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local file_name_no_ext_first_char_ascii_lower_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_lower_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_lower_bound=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_upper_bound=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_in_range=$(echo\
    \ \"$file_name_no_ext_first_char_ascii_lower >= $file_name_no_ext_first_char_ascii_lower_lower_bound\
    \ && $file_name_no_ext_first_char_ascii_lower <= $file_name_no_ext_first_char_ascii_lower_upper_bound\"\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1ag3_ech.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1ag3_ech.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_extension=${file_name##*.}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_without_extension_first_letter=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_letter_ascii_code=$(printf \"%d\"\
    \ \"'$file_name_without_extension_first_letter\")\n    local file_name_without_extension_first_letter_ascii_code_is_between_a_and_z=false\n\
    \    local file_name_without_extension_first_letter_ascii_code_is_between_A_and_Z=false\n\
    \    local file_name_without_extension_first_letter_is_valid=false\n    local\
    \ file_name_without_extension_contains_more_than_three_digits=false\n    local\
    \ file_name_contains_more_than_one_dot=false\n    local file_name_contains_no_dot=false\n\
    \    local file_name_contains_dot=false\n    local file_extension_is_valid=false\n\
    \    local file_name_is_valid=false\n\n    if [ \"$file_name_without_extension\"\
    \ == \"\" ]; then\n        file_name_is_valid=false\n    else\n        if [ \"\
    $file_name_without_extension_first_letter_ascii_code\" -ge 97 ] && [ \"$file_name_without_extension_first_letter_ascii_code\"\
    \ -le 122 ]; then\n            file_name_without_extension_first_letter_ascii_code_is_between_a_and_z=true\n\
    \        fi\n        if [ \"$file_name_without_extension_first_letter_ascii_code\"\
    \ -ge 65 ] && [ \"$file_name_without_extension_first_letter_ascii_code\" -le 90\
    \ ]; then\n            file_name_without_extension_first_letter_ascii_code_is_between_A_and_Z=true\n\
    \        fi\n       \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpiuinyztv.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpiuinyztv.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_limit=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_limit=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_limit_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_limit_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_valid=$(echo\
    \ \"$file_name_without_extension_first_char_ascii >= $file_name_without_extension_first_char_ascii_lower_limit\
    \ && $file_name_without_extension_first_char_ascii <= $file_name_without_extension_first_char_ascii_upper_limit\
    \ || $file_name_without_extension_first_char_ascii >= $file_name_without_extension_first_char_ascii_lower_limit_upper_case\
    \ && $file_name_without_extension_first_char_ascii <= $file_name_without_extension_first_char_ascii_upper_limit_upper_case\"\
    \ | bc -l)\n    local file\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_len_without_extension=0\n    local file_name_extension=''\n\
    \    local file_name_without_extension=''\n    local file_name_without_extension_len=0\n\
    \    local file_name_without_extension_first_char=''\n    local file_name_without_extension_first_char_ascii=0\n\
    \    local file_name_without_extension_first_char_ascii_lower=0\n    local file_name_without_extension_first_char_ascii_upper=0\n\
    \    local file_name_without_extension_first_char_is_letter=0\n    local file_name_without_extension_first_char_is_letter_lower=0\n\
    \    local file_name_without_extension_first_char_is_letter_upper=0\n    local\
    \ file_name_without_extension_first_char_is_letter_valid=0\n    local file_name_without_extension_first_char_is_letter_valid_lower=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_upper=0\n  \
    \  local file_name_without_extension_first_char_is_letter_valid_lower_or_upper=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_lower_or_upper_or_digit=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_lower_or_upper_or_digit_or_dot=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_lower_or_upper_or_digit_or_dot_or_underscore=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_lower_or_upper_or_digit_or_dot_or_underscore_or_dash=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_lower_\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ [a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_index=$(echo $file_name | grep -b -o \"\\.\" | cut -d: -f1)\n \
    \   local dot_index_plus_one=$((dot_index + 1))\n    local dot_index_minus_one=$((dot_index\
    \ - 1))\n    local extension=${file_name:$dot_index_plus_one:$file_name_len}\n\
    \    local extension_len=${#extension}\n    local extension_len_minus_one=$((extension_len\
    \ - 1))\n    local extension_len_minus_two=$((extension_len - 2))\n    local extension_len_minus_three=$((extension_len\
    \ - 3))\n    local extension_len_minus_four=$((extension_len - 4))\n    local\
    \ extension_len_minus_five=$((extension_len - 5))\n    local extension_len_minus_six=$((extension_len\
    \ - 6))\n    local extension_len_minus_seven=$((extension_len - 7))\n    local\
    \ extension_len_minus_eight=$((extension_len - 8))\n    local extension_len_minus_nine=$((extension_len\
    \ - 9))\n    local extension_len_minus_ten=$((extension_len - 10))\n    local\
    \ extension_len_minus_eleven=$((extension_len - 11))\n    local extension_len_minus_twelve=$((extension_len\
    \ - 12))\n    local extension_len_minus_thirteen=$((extension_len - 13))\n   \
    \ local extension_len_minus_fourteen=$((extension_len - 14))\n    local extension_len_minus_fifteen=$((extension_len\
    \ - 15))\n    local extension_len_minus_sixteen=$((extension_len - 16))\n    local\
    \ extension_len_minus_seventeen=$((extension_len - 17))\n    local extension_len_minus_eighteen=$((extension_len\
    \ - 18))\n    local extension_len_minus_nineteen=$((extension_len - 19))\n   \
    \ local extension_len_minus_twenty=$((ext\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp82h0goxq.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmp82h0goxq.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]; then\n\t\tif [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.dll$\
    \ ]]; then\n\t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\t\
    \techo \"No\"\n\tfi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_pattern=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n    local file_extension_pattern=\"\
    ^(txt|exe|dll)$\"\n    if [[ $file_name =~ $file_name_pattern ]]; then\n     \
    \   local file_extension=${file_name##*.}\n        if [[ $file_extension =~ $file_extension_pattern\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n  if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_dot_index=0\n    local file_name_dot_count=0\n    local file_name_digit_count=0\n\
    \    local file_name_extension=\"\"\n    local file_name_extension_len=0\n   \
    \ local file_name_extension_index=0\n    local file_name_extension_valid=0\n \
    \   local file_name_valid=0\n    local file_name_extension_list=(\"txt\" \"exe\"\
    \ \"dll\")\n    local file_name_extension_list_len=${#file_name_extension_list[@]}\n\
    \    local file_name_extension_list_index=0\n    local file_name_extension_list_element=\"\
    \"\n    local file_name_extension_list_element_len=0\n    local file_name_extension_list_element_index=0\n\
    \    local file_name_extension_list_element_valid=0\n    local file_name_extension_list_element_valid_count=0\n\
    \    local file_name_extension_list_element_valid_index=0\n    local file_name_extension_list_element_valid_element=\"\
    \"\n    local file_name_extension_list_element_valid_element_len=0\n    local\
    \ file_name_extension_list_element_valid_element_index=0\n    local file_name_extension_list_element_valid_element_valid=0\n\
    \    local file_name_extension_list_element_valid_element_valid_count=0\n    local\
    \ file_name_extension_list_element_valid_element_valid_index=0\n    local file_name_extension_list_element_valid_element_valid_element=\"\
    \"\n    local file_name_extension_list_element_valid_element_valid_element_len=0\n\
    \    local file_name_extension_list_element_valid_element_valid_element_index=0\n\
    \    local file_name_extension_list_element_valid_element_valid_element_valid=0\n\
    \    local file\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_ext=${file_name##*.}\n    local file_name_no_ext=${file_name%.*}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n\
    \    local file_name_no_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    )\n    local file_name_no_ext_first_char_ascii_lower=$(printf \"%d\" \"'a\")\n\
    \    local file_name_no_ext_first_char_ascii_upper=$(printf \"%d\" \"'A\")\n \
    \   local file_name_no_ext_first_char_ascii_lower_limit=$((file_name_no_ext_first_char_ascii_lower\
    \ - 1))\n    local file_name_no_ext_first_char_ascii_upper_limit=$((file_name_no_ext_first_char_ascii_upper\
    \ - 1))\n    local file_name_no_ext_first_char_ascii_lower_limit_char=$(printf\
    \ \\\\$(printf '%03o' $file_name_no_ext_first_char_ascii_lower_limit))\n    local\
    \ file_name_no_ext_first_char_ascii_upper_limit_char=$(printf \\\\$(printf '%03o'\
    \ $file_name_no_ext_first_char_ascii_upper_limit))\n    local file_name_no_ext_first_char_ascii_lower_limit_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char_ascii_lower_limit_char\")\n    local\
    \ file_name_no_ext_first_char_ascii_upper_limit_char_ascii=$(printf \"%d\" \"\
    '$file_name_no_ext_first_char_\n}\n\ncandidate() {\n    file_name_check \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp19cm9kv.sh: line 63: unexpected EOF while looking for matching
    `"''

    /tmp/tmpp19cm9kv.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lowercase=$(printf \"\
    %d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_uppercase=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lowercase_last=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_uppercase_last=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_digits_count=$(echo $file_name_without_extension\
    \ | grep -o -E '[0-9]' | wc -l)\n    local file_name_without_extension_dots_count=$(echo\
    \ $file_name_without_extension | grep -o -E '[.]' | wc -l)\n    local file_name_extension_dots_count=$(echo\
    \ $file_name_extension | grep -o -E '[.]' | wc -l)\n    local file_name_extension_valid=false\n\
    \    local file_name_extension_valid_array=('txt' 'exe' 'dll')\n    local file_name_extension_valid_array_len=${#file_name_extension_valid_array[@]}\n\
    \    local file_name_extension_valid_array\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_pattern=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z]{3})$\"\n    if [[ $file_name =~ $file_name_pattern\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$((file_name_no_ext_first_char_ascii\
    \ + 32))\n    local file_name_no_ext_first_char_lower=$(printf \\\\$(printf '%03o'\
    \ $file_name_no_ext_first_char_ascii_lower))\n    local file_name_no_ext_first_char_ascii_upper=$((file_name_no_ext_first_char_ascii\
    \ - 32))\n    local file_name_no_ext_first_char_upper=$(printf \\\\$(printf '%03o'\
    \ $file_name_no_ext_first_char_ascii_upper))\n    local file_name_no_ext_first_char_ascii_lower_range=$((file_name_no_ext_first_char_ascii_lower\
    \ - 97))\n    local file_name_no_ext_first_char_ascii_upper_range=$((file_name_no_ext_first_char_ascii_upper\
    \ - 65))\n    local file_name_no_ext_first_char_ascii_range=$((file_name_no_ext_first_char_ascii_lower_range\
    \ + file_name_no_ext_first_char_ascii_upper_range))\n    local file_name_no_ext_first_char_ascii_range_check=$\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 0
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local num_digits=$(echo\
    \ $file_name | grep -o [0-9] | wc -l)\n    local num_dots=$(echo $file_name |\
    \ grep -o '\\.' | wc -l)\n    local first_char=$(echo $file_name | head -c 1)\n\
    \    local extension=$(echo $file_name | cut -d '.' -f 2)\n    if [[ $num_digits\
    \ -gt 3 ]]; then\n        echo 'No'\n    elif [[ $num_dots -ne 1 ]]; then\n  \
    \      echo 'No'\n    elif [[ ! $first_char =~ [a-zA-Z] ]]; then\n        echo\
    \ 'No'\n    elif [[ $extension != 'txt' && $extension != 'exe' && $extension !=\
    \ 'dll' ]]; then\n        echo 'No'\n    else\n        echo 'Yes'\n    fi\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case_a=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case_a=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_z=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_z=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_zero=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_without_extension_first_char_ascii_nine=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_without_extension_first_char_ascii_dot=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_without_extension_first_char_ascii_underscore=$(printf\
    \ \"%d\" \"'_\")\n    local file_name_without_extension_first_char_ascii_minus=$(printf\
    \ \"%d\" \"'-\")\n    local file_name_without_extension_first_char_ascii_plus=$(printf\
    \ \"%d\" \"'+\")\n    local file_name_without_extension_first_char_ascii_space\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n  # Write your code here\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps50sjxe_.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmps50sjxe_.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name =~ $file_name_regex\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_is_lower_case=$(($file_name_without_extension_first_char_ascii\
    \ >= $file_name_without_extension_first_char_ascii_lower_bound && $file_name_without_extension_first_char_ascii\
    \ <= $file_name_without_extension_first_char_ascii_upper_bound))\n    local file_name_without_extension_first_char_ascii_is_upper_case=$(($file_name_without_extension_first_char_ascii\
    \ >= $file_name_without_extension_first_char_ascii_lower_bound_upper_case && $file_name_without_extension_first_char_ascii\
    \ <= $file_name_\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvh4qk_wb.sh: line 28: unexpected EOF while looking for matching
    `)''

    /tmp/tmpvh4qk_wb.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=\"$1\"\n    local file_name_pattern=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ \"$file_name\" =~ $file_name_pattern\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    # You can\
    \ use the following command to get the substring before the dot:\n    # sub_before_dot=${1%%.*}\n\
    \    # You can use the following command to get the substring after the dot:\n\
    \    # sub_after_dot=${1#*.}\n    # You can use the following command to get the\
    \ number of digits in a string:\n    # num_digits=$(echo $1 | grep -o [0-9] |\
    \ wc -l)\n    # You can use the following command to get the number of letters\
    \ in a string:\n    # num_letters=$(echo $1 | grep -o [a-zA-Z] | wc -l)\n    #\
    \ You can use the following command to get the number of dots in a string:\n \
    \   # num_dots=$(echo $1 | grep -o \\. | wc -l)\n    # You can use the following\
    \ command to check if a string is empty:\n    # [ -z \"$1\" ] && echo \"Yes\"\
    \ || echo \"No\"\n    # You can use the following command to check if a string\
    \ starts with a letter:\n    # [[ $1 =~ ^[a-zA-Z] ]] && echo \"Yes\" || echo \"\
    No\"\n    # You can use the following command to check if a string is one of the\
    \ following:\n    # [[ $1 =~ ^(txt|exe|dll)$ ]] && echo \"Yes\" || echo \"No\"\
    \n    # You can use the following command to check if a string is a valid file\
    \ name:\n    # [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$ ]] && echo \"Yes\"\
    \ || echo \"No\"\n    # You can use the following command to check if a string\
    \ contains exactly one dot:\n    # [[ $1 =~ ^[^.]+\\.[^.]+$ ]] && echo \"Yes\"\
    \ || echo \"No\"\n    # You can use the following command to check if a string\
    \ contains more than three digits:\n    # [[ $1 =~ ^[^0-9]*[0-9][^0-9]*[0-\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl82l61sm.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmpl82l61sm.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_count=0\n    local digit_count=0\n    local i=0\n    local dot_index=0\n\
    \    local extension=\"\"\n    local valid_extensions=('txt' 'exe' 'dll')\n  \
    \  local valid_extensions_len=${#valid_extensions[@]}\n    local extension_is_valid=0\n\
    \    local extension_index=0\n    local valid_extension=\"\"\n    local valid_extension_len=0\n\
    \    local extension_len=0\n    local valid_extension_index=0\n    local valid_extension_char=\"\
    \"\n    local extension_char=\"\"\n    local extension_is_valid=0\n    local extension_is_valid_index=0\n\
    \    local extension_is_valid_char=\"\"\n    local extension_is_valid_len=0\n\
    \    local extension_is_valid_index=0\n    local extension_is_valid_char=\"\"\n\
    \    local extension_is_valid_len=0\n    local extension_is_valid_index=0\n  \
    \  local extension_is_valid_char=\"\"\n    local extension_is_valid_len=0\n  \
    \  local extension_is_valid_index=0\n    local extension_is_valid_char=\"\"\n\
    \    local extension_is_valid_len=0\n    local extension_is_valid_index=0\n  \
    \  local extension_is_valid_char=\"\"\n    local extension_is_valid_len=0\n  \
    \  local extension_is_valid_index=0\n    local extension_is_valid_char=\"\"\n\
    \    local extension_is_valid_len=0\n    local extension_is_valid_index=0\n  \
    \  local extension_is_valid_char=\"\"\n    local extension_is_valid_len=0\n  \
    \  local extension_is_valid_index=0\n    local extension_is_valid_char=\"\"\n\
    \    local extension_is_valid_len=0\n    local extension_is_valid_index=0\n  \
    \  local extension_is_valid_char=\"\"\n    local extension_is_valid_len=0\n  \
    \  local extension_is_valid_index=0\n    local extension_is_valid\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_is_lower_case=false\n\
    \    local file_name_no_ext_first_char_is_upper_case=false\n    local file_name_no_ext_first_char_is_letter=false\n\
    \    local file_name_no_ext_first_char_is_digit=false\n    local file_name_no_ext_first_char_is_valid=false\n\
    \    local file_name_no_ext_first_char_is_valid_lower_case=false\n    local file_name_no_ext_first_char_is_valid_upper_case=false\n\
    \    local file_name_no_ext_first_char_is_valid_letter=false\n    local file_name_no_ext_first_char_is_valid_digit=false\n\
    \    local file_name_no_ext_first_char_is_valid_lower_case_\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_index=$(expr index \"$file_name\" '.')\n    local dot_index_plus_one=$((dot_index\
    \ + 1))\n    local file_name_extension=${file_name:$dot_index_plus_one:$file_name_len}\n\
    \    local file_name_extension_len=${#file_name_extension}\n    local file_name_extension_len_minus_one=$((file_name_extension_len\
    \ - 1))\n    local file_name_extension_minus_one=${file_name_extension:0:$file_name_extension_len_minus_one}\n\
    \    local file_name_extension_minus_one_len=${#file_name_extension_minus_one}\n\
    \    local file_name_extension_minus_one_len_minus_one=$((file_name_extension_minus_one_len\
    \ - 1))\n    local file_name_extension_minus_one_minus_one=${file_name_extension_minus_one:0:$file_name_extension_minus_one_len_minus_one}\n\
    \    local file_name_extension_minus_one_minus_one_len=${#file_name_extension_minus_one_minus_one}\n\
    \    local file_name_extension_minus_one_minus_one_len_minus_one=$((file_name_extension_minus_one_minus_one_len\
    \ - 1))\n    local file_name_extension_minus_one_minus_one_minus_one=${file_name_extension_minus_one_minus_one:0:$file_name_extension_minus_one_minus_one_len_minus_one}\n\
    \    local file_name_extension_minus_one_minus_one_minus_one_len=${#file_name_extension_minus_one_minus_one_minus_one}\n\
    \    local file_name_extension_minus_one_minus_one_minus_one_len_minus_one=$((file_name\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn83o50_v.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpn83o50_v.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_valid=0\n    local\
    \ file_name_no_ext_valid=0\n    local file_name_ext_valid=0\n    local file_name_valid=0\n\
    \n    if [ $file_name_len -eq 0 ]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    if [ $file_name_no_ext_len -eq 0 ]; then\n        echo \"No\"\n\
    \        return\n    fi\n\n    if [ $file_name_ext_len -eq 0 ]; then\n       \
    \ echo \"No\"\n        return\n    fi\n\n    if [ $file_name_no_ext_first_char_ascii\
    \ -ge $file_name_no_ext_first_char_ascii_lower_bound ] && \\\n       [ $file_name_no_ext_first_char_ascii\
    \ -le $file_name_no_ext\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl8fevlyr.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpl8fevlyr.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n  local file_name=$1\n  local file_name_len=${#file_name}\n\
    \  local dot_index=$(expr index \"$file_name\" '.')\n  local file_extension=${file_name:$dot_index}\n\
    \  local file_extension_len=${#file_extension}\n  local file_name_without_extension=${file_name:0:$dot_index}\n\
    \  local file_name_without_extension_len=${#file_name_without_extension}\n  local\
    \ file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \  local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n  local file_name_without_extension_first_char_ascii_lower_case=$(printf \"\
    %d\" \"'a\")\n  local file_name_without_extension_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n  local file_name_without_extension_last_char=${file_name_without_extension:$file_name_without_extension_len-1:1}\n\
    \  local file_name_without_extension_last_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_last_char\"\
    )\n  local file_name_without_extension_last_char_ascii_lower_case=$(printf \"\
    %d\" \"'z\")\n  local file_name_without_extension_last_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n  local file_name_without_extension_digits_count=0\n  local\
    \ file_name_without_extension_digits_count_max=3\n  local file_name_without_extension_digits_count_max_ascii=$(printf\
    \ \"%d\" \"'9\")\n  local file_name_without_extension_digits_count_min_ascii=$(printf\
    \ \"%d\" \"'0\")\n  local file_name_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_ext=${file_name##*.}\n    local file_name_base=${file_name%.*}\n\
    \    local file_name_base_len=${#file_name_base}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_base_first_char=${file_name_base:0:1}\n    local file_name_base_last_char=${file_name_base:$file_name_base_len-1:1}\n\
    \    local file_name_base_first_char_ascii=$(printf \"%d\" \"'$file_name_base_first_char\"\
    )\n    local file_name_base_last_char_ascii=$(printf \"%d\" \"'$file_name_base_last_char\"\
    )\n    local file_name_base_num_count=$(echo $file_name_base | grep -o [0-9] |\
    \ wc -l)\n    local file_name_dot_count=$(echo $file_name | grep -o \\. | wc -l)\n\
    \    local file_name_ext_valid=0\n    local file_name_base_valid=0\n    local\
    \ file_name_valid=0\n\n    if [[ $file_name_base_num_count -le 3 ]]; then\n  \
    \      if [[ $file_name_dot_count -eq 1 ]]; then\n            if [[ $file_name_base_len\
    \ -gt 0 ]]; then\n                if [[ $file_name_base_first_char_ascii -ge 65\
    \ && $file_name_base_first_char_ascii -le 90 ]]; then\n                    file_name_base_valid=1\n\
    \                elif [[ $file_name_base_first_char_ascii -ge 97 && $file_name_base_first_char_ascii\
    \ -le 122 ]]; then\n                    file_name_base_valid=1\n             \
    \   fi\n            fi\n        fi\n    fi\n\n    if [[ $file_name_ext == \"txt\"\
    \ || $file_name_\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8q9ikha_.sh: line 43: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp8q9ikha_.sh: line 43: syntax error near `$file_name_''

    /tmp/tmp8q9ikha_.sh: line 43: `    if [[ $file_name_ext == "txt" || $file_name_''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_extension_len_minus_one=$((file_name_extension_len - 1))\n\
    \    local file_name_extension_minus_one=${file_name_extension:0:file_name_extension_len_minus_one}\n\
    \    local file_name_extension_minus_one_len=${#file_name_extension_minus_one}\n\
    \    local file_name_extension_minus_one_len_minus_one=$((file_name_extension_minus_one_len\
    \ - 1))\n    local file_name_extension_minus_one_minus_one=${file_name_extension_minus_one:0:file_name_extension_minus_one_len_minus_one}\n\
    \    local file_name_extension_minus_one_minus_one_len=${#file_name_extension_minus_one_minus_one}\n\
    \    local file_name_extension_minus_one_minus_one_len_minus_one=$((file_name_extension_minus_one_minus_one_len\
    \ - 1))\n    local file_name_extension_minus_one_minus_one_minus_one=${file_name_extension_minus_one_minus_one:0:file_name_extension_minus_one_minus_one_len_minus_one}\n\
    \    local file_name_extension_minus_one_minus_one_minus_one_len=${#file_name_extension_minus_one_minus_one_minus_one}\n\
    \    local file_name_extension_minus_one_minus_one_minus_one_len_minus_one=$((file_name_extension_minus_one_minus_one_minus_one_len\
    \ - 1))\n    local file_name_extension_minus_one_minus_one_minus_one_minus_one=${file_name_extension\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_9cf7ti6.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_valid=0\n\
    \    local file_name_without_extension_first_char_valid=0\n    local file_name_without_extension_valid=0\n\
    \    local file_name_extension_valid=0\n    local file_name_valid=0\n    local\
    \ file_name_without_extension_first_char_ascii_valid=0\n    local file_name_without_extension_first_char_valid=0\n\
    \    local file_name_without_extension_valid=0\n    local file_name_extension_valid=0\n\
    \    local file_name_valid=0\n    local file_name_without_extension_first_char_ascii_valid=0\n\
    \    local file_name_without_extension_first_char_valid=\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_len_without_extension=0\n    local file_name_extension=''\n\
    \    local file_name_without_extension=''\n    local file_name_without_extension_len=0\n\
    \    local file_name_without_extension_first_char=''\n    local file_name_without_extension_first_char_ascii=0\n\
    \    local file_name_without_extension_first_char_ascii_lower=0\n    local file_name_without_extension_first_char_ascii_upper=0\n\
    \    local file_name_without_extension_first_char_is_letter=0\n    local file_name_without_extension_first_char_is_letter_lower=0\n\
    \    local file_name_without_extension_first_char_is_letter_upper=0\n    local\
    \ file_name_without_extension_first_char_is_letter_valid=0\n    local file_name_without_extension_first_char_is_letter_valid_lower=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_upper=0\n  \
    \  local file_name_without_extension_first_char_is_letter_valid_lower_ascii=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_upper_ascii=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_lower_ascii_lower=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_upper_ascii_upper=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_lower_ascii_lower_valid=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_upper_ascii_upper_valid=0\n\
    \    local file_name_without_extension_first_char_is_letter_valid_lower_as\n}\n\
    \ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    # You can\
    \ use the following command to get the substring before the dot:\n    # ${1%.*}\n\
    \    # You can use the following command to get the substring after the dot:\n\
    \    # ${1#*.}\n    # You can use the following command to get the length of a\
    \ string:\n    # ${#1}\n    # You can use the following command to get the number\
    \ of digits in a string:\n    # echo $1 | grep -o [0-9] | wc -l\n    # You can\
    \ use the following command to get the number of dots in a string:\n    # echo\
    \ $1 | grep -o . | grep -c '\\.'\n    # You can use the following command to check\
    \ if a string starts with a letter:\n    # [[ $1 =~ ^[a-zA-Z] ]]\n    # You can\
    \ use the following command to check if a string is one of the following:\n  \
    \  # [[ $1 =~ ^(txt|exe|dll)$ ]]\n    # You can use the following command to check\
    \ if a string is empty:\n    # [[ -z $1 ]]\n    # You can use the following command\
    \ to check if a string is not empty:\n    # [[ -n $1 ]]\n    # You can use the\
    \ following command to check if a string is a valid file name:\n    # [[ $1 =~\
    \ ^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$ ]]\n    # You can use the following command\
    \ to check if a string is not a valid file name:\n    # [[ ! $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$ ]]\n    # You can use the following command to check if a string\
    \ contains exactly one dot:\n    # [[ $1 =~ ^[^.]+\\.[^.]+$ ]]\n    # You can\
    \ use the following command to check if a string contains more than one dot:\n\
    \    # [[ $1 =~ \\..*\\. ]]\n    # You can use the following command to check\
    \ if a string contains more than three digits:\n    # [[ $1 =\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi0neg4s2.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmpi0neg4s2.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n  # Write your code here\n  # Use echo\
    \ to print the result followed by a newline\n  #echo \"Yes\"\n  #echo \"No\"\n\
    \  if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})?$ ]]; then\n    if [[ $1 =~\
    \ ^[a-zA-Z]+[0-9]{0,3}\\.(txt|exe|dll)$ ]]; then\n      echo \"Yes\"\n    else\n\
    \      echo \"No\"\n    fi\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case_a=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case_a=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_z=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_z=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_lower_case_letter=false\n\
    \    local file_name_without_extension_first_char_is_upper_case_letter=false\n\
    \    local file_name_without_extension_first_char_is_letter=false\n    local file_name_without_extension_contains_digit=false\n\
    \    local file_name_without_extension_contains_more_than_three_digits=false\n\
    \    local file_name_contains_exactly_one_dot=false\n    local file_name_extension_is_valid=false\n\
    \    local file_name_is_valid=false\n\n    if [[ $file_name_without_extension_first_char_ascii\
    \ -ge $file_name_without_extension_first_char_ascii_lower\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph9aya024.sh: line 36: syntax error in conditional expression

    /tmp/tmph9aya024.sh: line 37: syntax error near `}''

    /tmp/tmph9aya024.sh: line 37: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_no_extension_len=${#file_name_no_extension}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n \
    \   local file_name_no_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_ascii_lower_bound=$(printf \"%d\"\
    \ \"'a\")\n    local file_name_no_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_extension_first_char_ascii_upper_bound_2=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_extension_first_char_is_valid=0\n   \
    \ local file_name_no_extension_has_more_than_three_digits=0\n    local file_name_has_exactly_one_dot=0\n\
    \    local file_name_extension_is_valid=0\n    local file_name_is_valid=0\n\n\
    \    if [ $file_name_no_extension_first_char_ascii -ge $file_name_no_extension_first_char_ascii_lower_bound\
    \ ] && [ $file_name_no_extension_first_char_ascii -le $file_name_no_extension_first_char_ascii_upper_bound\
    \ ] || [ $file_name_no_extension_first_char_ascii -le $file_name_no_extension_first_char_ascii_upper_bound_2\
    \ ]; then\n        file_name_no_extension_first_char_is\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9r74_nrp.sh: line 34: syntax error near unexpected token `}''

    /tmp/tmp9r74_nrp.sh: line 34: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_valid=0\n    local\
    \ file_name_no_ext_first_char_ascii_valid_upper=0\n    local file_name_no_ext_first_char_ascii_valid_lower=0\n\
    \    local file_name_no_ext_first_char_ascii_valid_upper_lower=0\n    local file_name_no_ext_first_char_ascii_valid_lower_upper=0\n\
    \    local file_name_no_ext_first_char_ascii_valid_upper_lower_upper=0\n    local\
    \ file_name_no_ext_first_char_ascii_valid_lower_upper_lower=0\n    local file_name_no_ext_first_char_ascii_valid_upper_lower_upper_lower=0\n\
    \    local file_name_no_ext_\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_ext=${file_name##*.}\n    local file_name_no_ext=${file_name%.*}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n\
    \    local file_name_no_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    )\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf \"%d\" \"\
    'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf \"%d\"\
    \ \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower_upper=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower_lower=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower_lower_upper=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower_lower_lower=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower_lower_lower_upper=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower_lower_lower_lower=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_no_ext_first_char_ascii_upper\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_pattern=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}(\\.[a-zA-Z0-9]{1,3})?$\"\n    if [[ $file_name =~ $file_name_pattern\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper=$(printf \"\
    %d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_lower_end=$(printf \"\
    %d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_end=$(printf \"\
    %d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_range=$((file_name_no_ext_first_char_ascii_lower_end\
    \ - file_name_no_ext_first_char_ascii_lower + 1))\n    local file_name_no_ext_first_char_ascii_upper_range=$((file_name_no_ext_first_char_ascii_upper_end\
    \ - file_name_no_ext_first_char_ascii_upper + 1))\n    local file_name_no_ext_first_char_ascii_lower_range_end=$((file_name_no_ext_first_char_ascii_lower\
    \ + file_name_no_ext_first_char_ascii_lower_range - 1))\n    local file_name_no_ext_first_char_ascii_upper_range_end=$((file_name_no_ext\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzhwy1qfx.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmpzhwy1qfx.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\" | tr '[:upper:]' '[:lower:]')\n   \
    \ local file_name_no_ext_first_char_ascii_upper=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    \ | tr '[:lower:]' '[:upper:]')\n    local file_name_no_ext_first_char_ascii_lower_min=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_lower_max=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_min=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_max=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_min=$(printf \"\
    %d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_max=$(printf \"%d\"\
    \ \"'z\")\n    local file_name_no_ext_first_char_ascii_min=$(printf \"%d\" \"\
    'A\")\n    local file_name_no_ext_first_char_ascii_max=$(printf \"%d\" \"'Z\"\
    )\n    local\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfr_u_hp.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfr_u_hp.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name =~ $file_name_regex\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_end=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_end=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_letter=0\n\
    \    local file_name_without_extension_first_char_is_digit=0\n    local file_name_without_extension_first_char_is_digit_counter=0\n\
    \    local file_name_without_extension_first_char_is_digit_counter_max=3\n   \
    \ local file_name_without_extension_first_char_is_digit_counter_max_reached=0\n\
    \    local file_name_without_extension_first_char_is_digit_counter_max_reached_result=0\n\
    \    local file_name_without_extension_first_char_is_digit_counter_max_reached_result_string=\"\
    \"\n    local file_name_without_extension_first_char_is_digit_counter_max_reached\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name =~ $regex ]];\
    \ then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_count=0\n    local digit_count=0\n    local i=0\n    local file_name_ext=''\n\
    \    local file_name_no_ext=''\n    local file_name_ext_len=0\n    local file_name_no_ext_len=0\n\
    \    local file_name_no_ext_first_char=''\n    local file_name_no_ext_first_char_ascii=0\n\
    \    local file_name_no_ext_first_char_ascii_lower=0\n    local file_name_no_ext_first_char_ascii_upper=0\n\
    \    local file_name_no_ext_first_char_is_letter=0\n    local file_name_ext_is_valid=0\n\
    \    local file_name_is_valid=0\n\n    # Check if the file's name contains exactly\
    \ one dot '.'\n    for (( i=0; i<file_name_len; i++ )); do\n        if [[ ${file_name:$i:1}\
    \ == '.' ]]; then\n            (( dot_count++ ))\n        fi\n    done\n    if\
    \ [[ $dot_count -ne 1 ]]; then\n        file_name_is_valid=0\n        echo 'No'\n\
    \        return\n    fi\n\n    # Check if the file's name contains more than three\
    \ digits ('0'-'9')\n    for (( i=0; i<file_name_len; i++ )); do\n        if [[\
    \ ${file_name:$i:1} =~ [0-9] ]]; then\n            (( digit_count++ ))\n     \
    \   fi\n    done\n    if [[ $digit_count -gt 3 ]]; then\n        file_name_is_valid=0\n\
    \        echo 'No'\n        return\n    fi\n\n    # Check if the substring before\
    \ the dot is empty, and it starts with a letter from \n    # the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n    file_name_no_ext=${file_name%%.*}\n    file_name_no_ext\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4unokzoc.sh: line 59: file_name_no_ext: command not found

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_lower_case_last=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_case_last=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_valid=0\n    local\
    \ file_name_no_ext_digit_count=0\n    local file_name_no_ext_digit_count_max=3\n\
    \    local file_name_ext_valid=0\n    local file_name_ext_valid_list=('txt' 'exe'\
    \ 'dll')\n    local file_name_ext_valid_list_len=${#file_name_ext_valid_list[@]}\n\
    \    local file_name_ext_valid_list_index=0\n    local file_name_ext_valid_list_item=''\n\
    \    local file_name_ext_valid_list_item_len=0\n    local file_name_valid=0\n\n\
    \    if [ $file_name_len -eq 0 ]; then\n        file_name_valid=0\n    elif [\
    \ $file_name_no_ext_len -\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps6zrhh3_.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmps6zrhh3_.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n\tlocal file_name=$1\n\tlocal file_name_length=${#file_name}\n\
    \tlocal file_name_without_extension=${file_name%.*}\n\tlocal file_name_extension=${file_name##*.}\n\
    \tlocal file_name_without_extension_length=${#file_name_without_extension}\n\t\
    local file_name_extension_length=${#file_name_extension}\n\tlocal file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \tlocal file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n\tlocal file_name_without_extension_first_char_ascii_lower_case_limit=$(printf\
    \ \"%d\" \"'a\")\n\tlocal file_name_without_extension_first_char_ascii_upper_case_limit=$(printf\
    \ \"%d\" \"'Z\")\n\tlocal file_name_without_extension_first_char_ascii_lower_case_limit_plus_26=$((file_name_without_extension_first_char_ascii_lower_case_limit\
    \ + 26))\n\tlocal file_name_without_extension_first_char_ascii_upper_case_limit_plus_26=$((file_name_without_extension_first_char_ascii_upper_case_limit\
    \ + 26))\n\tlocal file_name_without_extension_first_char_ascii_lower_case_limit_minus_26=$((file_name_without_extension_first_char_ascii_lower_case_limit\
    \ - 26))\n\tlocal file_name_without_extension_first_char_ascii_upper_case_limit_minus_26=$((file_name_without_extension_first_char_ascii_upper_case_limit\
    \ - 26))\n\tlocal file_name_without_extension_first_char_ascii_lower_case_limit_plus_52=$((file_name_without_extension_first_char_as\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsrnf1nu0.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmpsrnf1nu0.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_no_extension_len=${#file_name_no_extension}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n \
    \   local file_name_no_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_ascii_lower_bound=$(printf \"%d\"\
    \ \"'a\")\n    local file_name_no_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_extension_first_char_is_valid=0\n   \
    \ local file_name_extension_is_valid=0\n    local file_name_no_extension_has_more_than_three_digits=0\n\
    \    local file_name_has_more_than_one_dot=0\n    local file_name_no_extension_first_char_is_valid=0\n\
    \    local file_name_no_extension_first_char_is_valid=0\n    local file_name_no_extension_first_char_is_valid=0\n\
    \    local file_name_no_extension_first_char_is_valid=0\n    local file_name_no_extension_first_char_is_valid=0\n\
    \    local file_name_no_extension_first_char_is_\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_digit_count=$(echo $file_name_no_ext\
    \ | grep -o '[0-9]' | wc -l)\n    local file_name_dot_count=$(echo $file_name\
    \ | grep -o '\\.' | wc -l)\n    local file_name_ext_valid=0\n    local file_name_valid=0\n\
    \n    if [ $file_name_no_ext_digit_count -le 3 ] && [ $file_name_dot_count -eq\
    \ 1 ] && \\\n        [ $file_name_no_ext_len -gt 0 ] && \\\n        [ $file_name_no_ext_first_char_ascii\
    \ -ge $file_name_no_ext_first_char_ascii_lower_bound ] && \\\n        [ $file_name_no_ext_first_char_ascii\
    \ -le $file_name_no_\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n\
    \    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n  \
    \  [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsju9fzhc.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpsju9fzhc.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n\t# Write your code here\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\n}\n\ncandidate() {\n  \
    \  file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcfjbprk1.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpcfjbprk1.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_ext=${file_name##*.}\n    local file_name_no_ext=${file_name%.*}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n\
    \    local file_name_no_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    )\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf \"%d\" \"\
    'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf \"%d\"\
    \ \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_cap=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_cap_lower_bound=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_cap_upper_bound=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_cap_upper_bound_lower_bound=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_no_ext_first_char_ascii_upper_bound_cap_upper_bound_upper_bound=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_no_ext_first_char_ascii_upper_bound_cap_upper_bound_upper_bound_lower_bound=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_no_ext_first_char_ascii_upper_bound_cap_upper_bound_upper_bound_upper_bound=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_no_ext_first_char_ascii_upper_bound_cap_\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_last_char=${file_name_without_extension:$file_name_without_extension_len-1:1}\n\
    \    local file_name_without_extension_last_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_last_char\"\
    )\n    local file_name_extension_first_char=${file_name_extension:0:1}\n    local\
    \ file_name_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_extension_first_char\"\
    )\n    local file_name_extension_last_char=${file_name_extension:$file_name_extension_len-1:1}\n\
    \    local file_name_extension_last_char_ascii=$(printf \"%d\" \"'$file_name_extension_last_char\"\
    )\n    local file_name_without_extension_digit_count=0\n    local file_name_extension_digit_count=0\n\
    \    local file_name_dot_count=0\n    local file_name_without_extension_char_ascii\n\
    \    local file_name_extension_char_ascii\n    local file_name_char_ascii\n  \
    \  local i\n\n    for ((i=0; i<file_name_len; i++)); do\n        file_name_char_as\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0i5t472e.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmp0i5t472e.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo 'Yes'\n        else\n            echo 'No'\n    \
    \    fi\n    else\n        echo 'No'\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local number_of_digits=$(echo\
    \ $file_name | grep -o \"[0-9]\" | wc -l)\n    local number_of_dots=$(echo $file_name\
    \ | grep -o \"\\.\" | wc -l)\n    local extension=$(echo $file_name | cut -d \"\
    .\" -f 2)\n    local valid_extensions=(\"txt\" \"exe\" \"dll\")\n    local valid_extension=0\n\
    \    local valid_name=0\n    local valid_number_of_digits=0\n    local valid_number_of_dots=0\n\
    \n    if [[ $number_of_digits -le 3 ]]; then\n        valid_number_of_digits=1\n\
    \    fi\n\n    if [[ $number_of_dots -eq 1 ]]; then\n        valid_number_of_dots=1\n\
    \    fi\n\n    for ext in ${valid_extensions[@]}; do\n        if [[ $ext == $extension\
    \ ]]; then\n            valid_extension=1\n        fi\n    done\n\n    if [[ $valid_number_of_digits\
    \ -eq 1 && $valid_number_of_dots -eq 1 && $valid_extension -eq 1 ]]; then\n  \
    \      valid_name=1\n    fi\n\n    if [[ $valid_name -eq 1 ]]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n    file_name_check\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate\
    \ \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n  \
    \  [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_len=${#file_name_without_extension}\n \
    \   local file_name_extension_len=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_last_char=${file_name_without_extension:$file_name_without_extension_len-1:1}\n\
    \    local file_name_without_extension_last_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_last_char\"\
    )\n    local file_name_without_extension_digit_count=0\n    local file_name_without_extension_dot_count=0\n\
    \    local file_name_without_extension_char_ascii\n    local file_name_without_extension_char\n\
    \    local file_name_extension_char_ascii\n    local file_name_extension_char\n\
    \    local file_name_extension_dot_count=0\n    local file_name_extension_digit_count=0\n\
    \    local file_name_extension_valid=0\n    local file_name_without_extension_valid=0\n\
    \    local file_name_valid=0\n\n    if [[ $file_name_without_extension_len -eq\
    \ 0 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    if [[ $file_name_extension_len\
    \ -eq 0 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    if [[ $file_name_without_extension_first_char_ascii\
    \ -ge 65 && $file_name_without_ext\n}\n\ncandidate() {\n    file_name_check \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\"\
    \ ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"\
    s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"\
    No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuok2uve8.sh: line 47: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpuok2uve8.sh: line 47: syntax error near `$file_name_without_ext''

    /tmp/tmpuok2uve8.sh: line 47: `    if [[ $file_name_without_extension_first_char_ascii
    -ge 65 && $file_name_without_ext''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    # Write your code here\n    #\n   \
    \ # Hint:\n    # Use the following command to get the substring before the dot:\n\
    \    # ${1%%.*}\n    # Use the following command to get the substring after the\
    \ dot:\n    # ${1#*.}\n    #\n    # Hint:\n    # Use the following command to\
    \ check if a string contains only digits:\n    # [[ $1 =~ ^[0-9]+$ ]]\n    #\n\
    \    # Hint:\n    # Use the following command to check if a string contains only\
    \ letters:\n    # [[ $1 =~ ^[a-zA-Z]+$ ]]\n    #\n    # Hint:\n    # Use the following\
    \ command to check if a string contains only letters and digits:\n    # [[ $1\
    \ =~ ^[a-zA-Z0-9]+$ ]]\n    #\n    # Hint:\n    # Use the following command to\
    \ check if a string contains only letters and digits,\n    # and starts with a\
    \ letter:\n    # [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]\n    #\n    # Hint:\n    #\
    \ Use the following command to check if a string contains only letters and digits,\n\
    \    # and starts with a letter, and contains exactly one dot:\n    # [[ $1 =~\
    \ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]+$ ]]\n    #\n    # Hint:\n    # Use the\
    \ following command to check if a string contains only letters and digits,\n \
    \   # and starts with a letter, and contains exactly one dot, and the substring\
    \ after\n    # the dot is one of these: ['txt', 'exe', 'dll']:\n    # [[ $1 =~\
    \ ^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$ ]]\n    #\n    # Hint:\n    # Use the\
    \ following command to check if a string contains only letters and digits,\n \
    \   # and starts with a letter, and contains exactly one dot, and the substring\
    \ after\n    # the dot\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl0a276gj.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpl0a276gj.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004080
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_extension=${file_name##*.}\n    local file_name_no_extension=${file_name%.*}\n\
    \    local file_name_no_extension_len=${#file_name_no_extension}\n    local file_name_extension_len=${#file_name_extension}\n\
    \    local file_name_no_extension_first_char=${file_name_no_extension:0:1}\n \
    \   local file_name_no_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_no_extension_first_char\"\
    )\n    local file_name_no_extension_first_char_ascii_lower_limit=$(printf \"%d\"\
    \ \"'a\")\n    local file_name_no_extension_first_char_ascii_upper_limit=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_extension_first_char_ascii_lower_limit_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_extension_first_char_ascii_upper_limit_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_extension_first_char_ascii_valid=$(echo\
    \ \"$file_name_no_extension_first_char_ascii >= $file_name_no_extension_first_char_ascii_lower_limit\
    \ && $file_name_no_extension_first_char_ascii <= $file_name_no_extension_first_char_ascii_upper_limit\
    \ || $file_name_no_extension_first_char_ascii >= $file_name_no_extension_first_char_ascii_lower_limit_upper_case\
    \ && $file_name_no_extension_first_char_ascii <= $file_name_no_extension_first_char_ascii_upper_limit_upper_case\"\
    \ | bc -l)\n    local file\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n   \
    \ [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ $file_name =~ $file_name_regex\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_extension=${file_name##*.}\n\
    \    local file_name_without_extension_length=${#file_name_without_extension}\n\
    \    local file_name_extension_length=${#file_name_extension}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_case_a=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_case_a=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_lower_case_z=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_upper_case_z=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_is_letter=false\n\
    \    local file_name_without_extension_first_char_is_digit=false\n    local file_name_without_extension_first_char_is_digit_count=0\n\
    \    local file_name_without_extension_dot_count=0\n    local file_name_without_extension_char_ascii\n\
    \    local file_name_without_extension_char_is_digit\n    local file_name_without_extension_char_is_dot\n\
    \    local file_name_without_extension_char_is_letter\n    local file_name_without_extension_char_is_letter_count=0\n\
    \    local file_name_without_extension_char_is_digit_count=0\n    local file_name_without_\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=\"$1\"\n    local file_name_regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    if [[ \"$file_name\" =~ $file_name_regex\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}(\\\
    .[a-zA-Z]{3})?$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_bound_lower=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_upper_\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\n\
    # $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ '%d' \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_bound=$(printf\
    \ '%d' \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_bound=$(printf\
    \ '%d' \"'z\")\n    local file_name_no_ext_first_char_ascii_lower_bound_upper=$(printf\
    \ '%d' \"'A\")\n    local file_name_no_ext_first_char_ascii_upper_bound_upper=$(printf\
    \ '%d' \"'Z\")\n    local file_name_no_ext_first_char_ascii_valid=0\n    local\
    \ file_name_ext_valid=0\n    local file_name_no_ext_valid=0\n    local file_name_valid=0\n\
    \    local file_name_no_ext_digit_count=0\n    local file_name_no_ext_digit_count_valid=0\n\
    \    local file_name_dot_count=0\n    local file_name_dot_count_valid=0\n    local\
    \ file_name_no_ext_first_char_valid=0\n    local file_name_no_ext_first_char_valid=0\n\
    \    local file_name_no_ext_first_char_valid=0\n    local file_name_no_ext_first_char_valid=0\n\
    \    local file_name_no_ext_first_char_valid=0\n    local file_name\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004081
