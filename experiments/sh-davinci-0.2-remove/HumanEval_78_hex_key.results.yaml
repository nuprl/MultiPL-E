language: sh
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local digits=\"2 3 5 7 B D\"\n    for digit in\
    \ $digits; do\n        count=$((count + $(echo $key | grep -o $digit | wc -l)))\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i sum=0\n    local -i i=0\n    local -i len=${#1}\n    local -i hex_digit\n\
    \    local -i hex_digit_decimal\n    local -i hex_digit_decimal_mod\n    local\
    \ -i hex_digit_decimal_mod_sum\n    local -i hex_digit_decimal_mod_sum_mod\n \
    \   local -i hex_digit_decimal_mod_sum_mod_sum\n    local -i hex_digit_decimal_mod_sum_mod_sum_mod\n\
    \    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum\n    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod\n\
    \    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum\n    local -i\
    \ hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum_mod\n    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum\n\
    \    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod\n\
    \    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum\n\
    \    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod\n\
    \    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum\n\
    \    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod\n\
    \    local -i hex_digit_decimal_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum_mod_sum\n\
    \    local -i hex_digit_decimal_mod_sum_mod_\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local i=0\n    local len=${#key}\n    local c\n\
    \    for ((i=0; i<len; i++)); do\n        c=${key:$i:1}\n        case $c in\n\
    \            2|3|5|7|B|D)\n                ((count++))\n                ;;\n \
    \       esac\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  echo \"\
    $1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local hex_primes=\"2357BD\"\n    for ((i=0; i<${#key};\
    \ i++)); do\n        if [[ \"$hex_primes\" =~ \"${key:$i:1}\" ]]; then\n     \
    \       ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_prime_count=0\n\
    \    local hex_key_prime_list=\"2357BD\"\n    local hex_key_prime_list_len=${#hex_key_prime_list}\n\
    \    local i=0\n    local j=0\n    local hex_key_prime_list_char=\"\"\n    local\
    \ hex_key_char=\"\"\n    for ((i=0; i<hex_key_len; i++)); do\n        hex_key_char=${hex_key:$i:1}\n\
    \        for ((j=0; j<hex_key_prime_list_len; j++)); do\n            hex_key_prime_list_char=${hex_key_prime_list:$j:1}\n\
    \            if [ \"$hex_key_char\" == \"$hex_key_prime_list_char\" ]; then\n\
    \                ((hex_key_prime_count++))\n            fi\n        done\n   \
    \ done\n    echo $hex_key_prime_count\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for i in {0..9} A B C D E F; do\n        if [[\
    \ $key =~ $i ]]; then\n            ((count++))\n        fi\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i len=${#1}\n    local -i i=0\n    local -i j=0\n   \
    \ local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i\
    \ ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i\
    \ iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n    local -i nnn=0\n    local -i ooo\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex=$1\n    local key=0\n    local digit=0\n    local i=0\n    for ((i=0; i<${#hex};\
    \ i++)); do\n        digit=${hex:$i:1}\n        case $digit in\n            2|3|5|7|B|D)\n\
    \                key=$((key+1))\n                ;;\n        esac\n    done\n\
    \    echo $key\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    echo $1\
    \ | tr -d -c '2357BDF' | wc -c\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_digit\n    local hex_key_digit_dec\n    local hex_key_digit_is_prime\n\
    \    local hex_key_digit_is_prime_i\n    local hex_key_digit_is_prime_i_max\n\
    \    local hex_key_digit_is_prime_i_max_half\n    local hex_key_digit_is_prime_i_max_half_plus_one\n\
    \    local hex_key_digit_is_prime_i_max_half_plus_one_is_even\n    local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod\n\
    \    local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod_result\n   \
    \ local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod_result_is_zero\n\
    \    local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod_result_is_zero_is_true\n\
    \    local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod_result_is_zero_is_true_is_true\n\
    \    local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod_result_is_zero_is_true_is_true_is_true\n\
    \    local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod_result_is_zero_is_true_is_true_is_true_is_true\n\
    \    local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod_result_is_zero_is_true_is_true_is_true_is_true_is_true\n\
    \    local hex_key_digit_is_prime_i_max_half_plus_one_is_even_mod_result\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local digit\n    for ((i=0; i<${#key}; i++));\
    \ do\n        digit=${key:$i:1}\n        case $digit in\n            2|3|5|7|B|D)\n\
    \                count=$((count+1))\n                ;;\n        esac\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i remainder=0\n    local -i sum=0\n    local -i temp=0\n    local -i\
    \ total=0\n    local -i value=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i zz=0\n    local -i zzz=0\n    local -i zzzz=0\n    local\
    \ -i zzzzz=0\n    local -i zzzzzz=0\n    local -i zzzzzzz=0\n    local -i zzzzzzzz=0\n\
    \    local -i zzzzzzzzz=0\n    local -i zzzzzzzzzz=0\n    local -i zzzzzzzzzzz=0\n\
    \    local -i zzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzzz=0\n\
    \    local -i zzzzzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzzzzz=0\n    local -i\
    \ zzzzzzzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzzzzzzzz=0\n\
    \    local -i zzzzzzzzzzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzzzzzzzzzz=0\n \
    \   local -i zzzzzzzzzzzzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzzzzzzzzzzzz=0\n\
    \    local -i zzzzzzzzzzzzzzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzzzzzzzzzzzzzz=0\n\
    \    local -i zzzzzzzzzzzzzzzzzzzzzzzzzz=0\n    local -i zzzzzzzzzzzzzzzzzzzzzzzzzzz=0\n\
    \    local -i zzzzzzzzzzzzzzzzzzzzzzzzzzzz=0\n\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex=$1\n    local key=0\n    local -i i=0\n    local -i len=${#hex}\n    local\
    \ -i num=0\n    local -i sum=0\n    local -i is_prime=0\n    local -i is_hex=0\n\
    \    local -i is_key=0\n    local -i is_num=0\n    local -i is_sum=0\n    local\
    \ -i is_prime=0\n    local -i is_hex=0\n    local -i is_key=0\n    local -i is_num=0\n\
    \    local -i is_sum=0\n    local -i is_prime=0\n    local -i is_hex=0\n    local\
    \ -i is_key=0\n    local -i is_num=0\n    local -i is_sum=0\n    local -i is_prime=0\n\
    \    local -i is_hex=0\n    local -i is_key=0\n    local -i is_num=0\n    local\
    \ -i is_sum=0\n    local -i is_prime=0\n    local -i is_hex=0\n    local -i is_key=0\n\
    \    local -i is_num=0\n    local -i is_sum=0\n    local -i is_prime=0\n    local\
    \ -i is_hex=0\n    local -i is_key=0\n    local -i is_num=0\n    local -i is_sum=0\n\
    \    local -i is_prime=0\n    local -i is_hex=0\n    local -i is_key=0\n    local\
    \ -i is_num=0\n    local -i is_sum=0\n    local -i is_prime=0\n    local -i is_hex=0\n\
    \    local -i is_key=0\n    local -i is_num=0\n    local -i is_sum=0\n    local\
    \ -i is_prime=0\n    local -i is_hex=0\n    local -i is_key=0\n    local -i is_num=0\n\
    \    local -i is_sum=0\n    local -i is_prime=0\n    local -i\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -a arr=(2 3\
    \ 5 7 11 13)\n    local -a hex=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a\
    \ hex_arr\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i\
    \ m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local key_length=${#hex_key}\n    local count=0\n    for ((i=0;\
    \ i<key_length; i++)); do\n        case ${hex_key:i:1} in\n            2|3|5|7|B|D)\n\
    \                count=$((count+1))\n                ;;\n        esac\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -a hex_primes=(2 3 5 7 11 13)\n    for ((i=0; i<${#1};\
    \ i++)); do\n        for ((j=0; j<${#hex_primes[@]}; j++)); do\n            if\
    \ [[ ${1:i:1} == $(printf \"%X\" ${hex_primes[j]}) ]]; then\n                ((count++))\n\
    \            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i digit\n  local -i\
    \ prime\n  local -a primes=(2 3 5 7 11 13)\n  local -a hex=(0 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15)\n  local -a hex_str=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\
    \  local -a hex_str_upper=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n  local -a hex_str_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 a b c d e f)\n  local -a hex_str_all=(0 1 2 3 4 5 6 7 8 9\
    \ A B C D E F a b c d e f)\n  local -a hex_str_all_upper=(0 1 2 3 4 5 6 7 8 9\
    \ A B C D E F)\n  local -a hex_str_all_lower=(0 1 2 3 4 5 6 7 8 9 a b c d e f)\n\
    \  local -a hex_str_all_upper_lower=(0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e\
    \ f)\n  local -a hex_str_all_lower_upper=(0 1 2 3 4 5 6 7 8 9 a b c d e f A B\
    \ C D E F)\n  local -a hex_str_all_lower_upper_lower=(0 1 2 3 4 5 6 7 8 9 a b\
    \ c d e f A B C D E F a b c d e f)\n  local -a hex_str_all_upper_lower_upper=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f A B C D E F)\n  local -a hex_str_all_upper_lower_upper_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f A B C D E F a b c d e f)\n  local\
    \ -a hex_str_all_lower_upper_lower_upper=(0 1 2 3 4 5 6 7 8 9 a b c d e f A\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7_qu3wgp.sh: line 37: syntax error near unexpected token `(''

    /tmp/tmp7_qu3wgp.sh: line 37: `candidate() {''

    /tmp/tmp7_qu3wgp.sh: line 38: hex_key: command not found

    /tmp/tmp7_qu3wgp.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmp7_qu3wgp.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i num_arr=()\n    local -i prime_arr=(2 3 5 7 11 13)\n    local -i\
    \ prime_len=${#prime_arr[@]}\n    local -i prime_num=0\n    local -i prime_num_arr=()\n\
    \    local -i prime_num_len=0\n    local -i prime_num_len_arr=()\n    local -i\
    \ prime_num_len_len=0\n    local -i prime_num_len_len_arr=()\n    local -i prime_num_len_len_len=0\n\
    \    local -i prime_num_len_len_len_arr=()\n    local -i prime_num_len_len_len_len=0\n\
    \    local -i prime_num_len_len_len_len_arr=()\n    local -i prime_num_len_len_len_len_len=0\n\
    \    local -i prime_num_len_len_len_len_len_arr=()\n    local -i prime_num_len_len_len_len_len_len=0\n\
    \    local -i prime_num_len_len_len_len_len_len_arr=()\n    local -i prime_num_len_len_len_len_len_len_len=0\n\
    \    local -i prime_num_len_len_len_len_len_len_len_arr=()\n    local -i prime_num_len_len_len_len_len_len_len_len=0\n\
    \    local -i prime_num_len_len_len_len_len_len_len_len_arr=()\n    local -i prime_num_len_len_len_len_len_len_len_len_len=0\n\
    \    local -i prime_num_len_len_len_len_len_len_len_len_len_arr=()\n    local\
    \ -i prime_num_len_len_len_len_len_len_len_len_len_len=0\n    local -\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i primes=(2 3 5 7 11 13)\n    local -i prime_len=${#primes[@]}\n  \
    \  local -i prime_num=0\n    local -i prime_flag=0\n    local -i hex_num=0\n \
    \   local -i hex_flag=0\n    local -i hex_num_len=0\n    local -i hex_num_flag=0\n\
    \    local -i hex_num_count=0\n    local -i hex_num_prime_count=0\n    local -i\
    \ hex_num_prime_flag=0\n    local -i hex_num_prime_count_flag=0\n    local -i\
    \ hex_num_prime_count_flag_count=0\n    local -i hex_num_prime_count_flag_count_flag=0\n\
    \    local -i hex_num_prime_count_flag_count_flag_count=0\n    local -i hex_num_prime_count_flag_count_flag_count_flag=0\n\
    \    local -i hex_num_prime_count_flag_count_flag_count_flag_count=0\n    local\
    \ -i hex_num_prime_count_flag_count_flag_count_flag_count_flag=0\n    local -i\
    \ hex_num_prime_count_flag_count_flag_count_flag_count_flag_count=0\n    local\
    \ -i hex_num_prime_count_flag_count_flag_count_flag_count_flag_count_flag=0\n\
    \    local -i hex_num_prime_count_flag_count_flag_count_flag_count_flag_count_flag_count=0\n\
    \    local -i hex_num_prime_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag=0\n\
    \    local -i hex_num_prime_count_flag_count_flag_count_flag_count_flag_count_flag_count_flag_count=0\n\
    \    local -i hex_num_prime_count_flag_count_flag\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local prime_numbers=(2 3 5 7 11 13)\n    for\
    \ i in ${prime_numbers[@]}; do\n        local hex_number=$(printf \"%X\" $i)\n\
    \        local number_of_occurrences=$(echo $key | grep -o $hex_number | wc -l)\n\
    \        count=$((count + number_of_occurrences))\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ input=$1\n    local -i count=0\n    local -i i=0\n    local -i len=${#input}\n\
    \    local -i digit=0\n    local -i is_prime=0\n    local -i is_hex=0\n    local\
    \ -i is_dec=0\n    local -i is_oct=0\n    local -i is_bin=0\n    local -i is_num=0\n\
    \    local -i is_alpha=0\n    local -i is_upper=0\n    local -i is_lower=0\n \
    \   local -i is_space=0\n    local -i is_punct=0\n    local -i is_graph=0\n  \
    \  local -i is_print=0\n    local -i is_alnum=0\n    local -i is_cntrl=0\n   \
    \ local -i is_xdigit=0\n    local -i is_blank=0\n    local -i is_digit=0\n   \
    \ local -i is_alpha=0\n    local -i is_alnum=0\n    local -i is_ascii=0\n    local\
    \ -i is_space=0\n    local -i is_cntrl=0\n    local -i is_graph=0\n    local -i\
    \ is_print=0\n    local -i is_punct=0\n    local -i is_alnum=0\n    local -i is_xdigit=0\n\
    \    local -i is_blank=0\n    local -i is_digit=0\n    local -i is_upper=0\n \
    \   local -i is_lower=0\n    local -i is_alpha=0\n    local -i is_digit=0\n  \
    \  local -i is_xdigit=0\n    local -i is_alnum=0\n    local -i is_alpha=0\n  \
    \  local -i is_upper=0\n    local -i is_lower=0\n    local -i is_space=0\n   \
    \ local -i is_punct=0\n    local -i is_graph=0\n    local -i is_print=0\n    local\
    \ -i is_alnum=0\n    local -i is_cntrl=0\n   \n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    # Write\
    \ your code here\n    # Use echo to print the result\n    # Example:\n    # echo\
    \ $result\n    local result=0\n    local hex_key=\"$1\"\n    local hex_key_len=${#hex_key}\n\
    \    local hex_key_arr=($(echo $hex_key | fold -w1))\n    local hex_key_arr_len=${#hex_key_arr[@]}\n\
    \    local i=0\n    local j=0\n    local is_prime=0\n    local is_hex=0\n    local\
    \ hex_key_arr_i=0\n    local hex_key_arr_j=0\n    local hex_key_arr_i_dec=0\n\
    \    local hex_key_arr_j_dec=0\n    local hex_key_arr_i_dec_mod=0\n    local hex_key_arr_j_dec_mod=0\n\
    \    local hex_key_arr_i_dec_mod_rem=0\n    local hex_key_arr_j_dec_mod_rem=0\n\
    \    local hex_key_arr_i_dec_mod_rem_dec=0\n    local hex_key_arr_j_dec_mod_rem_dec=0\n\
    \    local hex_key_arr_i_dec_mod_rem_dec_mod=0\n    local hex_key_arr_j_dec_mod_rem_dec_mod=0\n\
    \    local hex_key_arr_i_dec_mod_rem_dec_mod_rem=0\n    local hex_key_arr_j_dec_mod_rem_dec_mod_rem=0\n\
    \    local hex_key_arr_i_dec_mod_rem_dec_mod_rem_dec=0\n    local hex_key_arr_j_dec_mod_rem_dec_mod_rem_dec=0\n\
    \    local hex_key_arr_i_dec_mod_rem_dec_mod_rem_dec_mod=0\n    local hex_key_arr_j_dec_mod_rem_dec_mod_rem_dec_mod=0\n\
    \    local hex_key_arr_i_dec_mod_rem_dec_mod_rem_\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local -i count=0\n    local -a prime_hex=(2 3 5 7 B D)\n   \
    \ for i in ${prime_hex[@]}; do\n        count=$((count + $(echo $hex_key | grep\
    \ -o $i | wc -l)))\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i is_prime=0\n    local -i is_hex=0\n    local -i is_dec=0\n    local\
    \ -i is_oct=0\n    local -i is_bin=0\n    local -i is_num=0\n    local -i is_hex_prime=0\n\
    \    local -i is_dec_prime=0\n    local -i is_oct_prime=0\n    local -i is_bin_prime=0\n\
    \    local -i is_num_prime=0\n    local -i is_hex_prime_count=0\n    local -i\
    \ is_dec_prime_count=0\n    local -i is_oct_prime_count=0\n    local -i is_bin_prime_count=0\n\
    \    local -i is_num_prime_count=0\n    local -i is_hex_count=0\n    local -i\
    \ is_dec_count=0\n    local -i is_oct_count=0\n    local -i is_bin_count=0\n \
    \   local -i is_num_count=0\n    local -i is_hex_prime_count=0\n    local -i is_dec_prime_count=0\n\
    \    local -i is_oct_prime_count=0\n    local -i is_bin_prime_count=0\n    local\
    \ -i is_num_prime_count=0\n    local -i is_hex_prime_count=0\n    local -i is_dec_prime_count=0\n\
    \    local -i is_oct_prime_count=0\n    local -i is_bin_prime_count=0\n    local\
    \ -i is_num_prime_count=0\n    local -i is_hex_prime_count=0\n    local -i is_dec_prime_count=0\n\
    \    local -i is_oct_prime_count=0\n    local -i is_bin_prime_count=0\n    local\
    \ -i is_num_prime_count=0\n    local -i is_hex_prime_count=0\n    local\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    # Write\
    \ your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpilo14qb7.sh: line 186: syntax error near unexpected token `}''

    /tmp/tmpilo14qb7.sh: line 186: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=\"$1\"\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_digit\n    local hex_key_digit_decimal\n    local hex_key_digit_is_prime\n\
    \n    for (( i=0; i<hex_key_len; i++ )); do\n        hex_key_digit=${hex_key:$i:1}\n\
    \        hex_key_digit_decimal=$(printf \"%d\" \"'$hex_key_digit\")\n        hex_key_digit_is_prime=0\n\
    \        if [[ $hex_key_digit_decimal -eq 2 || $hex_key_digit_decimal -eq 3 ||\
    \ $hex_key_digit_decimal -eq 5 || $hex_key_digit_decimal -eq 7 || $hex_key_digit_decimal\
    \ -eq 11 || $hex_key_digit_decimal -eq 13 ]]; then\n            hex_key_digit_is_prime=1\n\
    \        fi\n        if [[ $hex_key_digit_is_prime -eq 1 ]]; then\n          \
    \  (( hex_key_primes++ ))\n        fi\n    done\n\n    echo $hex_key_primes\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  for ((i=0; i<${#1}; i++)); do\n    case ${1:i:1} in\n      [2357BD])\
    \ ((count++)) ;;\n    esac\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n\
    \  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n\
    \  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i len=${#1}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n\
    \  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n\
    \  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_prime_digits=\"2 3 5 7 B D\"\n    local hex_key_digit=\"\"\n\
    \    local hex_key_digit_is_prime=0\n    local hex_key_digit_is_prime_len=0\n\
    \    local hex_key_digit_is_prime_len_max=0\n    local hex_key_digit_is_prime_len_max_digit=\"\
    \"\n    local hex_key_digit_is_prime_len_max_digit_count=0\n    local hex_key_digit_is_prime_len_max_digit_count_max=0\n\
    \    local hex_key_digit_is_prime_len_max_digit_count_max_digit=\"\"\n    local\
    \ hex_key_digit_is_prime_len_max_digit_count_max_digit_count=0\n    local hex_key_digit_is_prime_len_max_digit_count_max_digit_count_max=0\n\
    \    local hex_key_digit_is_prime_len_max_digit_count_max_digit_count_max_digit=\"\
    \"\n    local hex_key_digit_is_prime_len_max_digit_count_max_digit_count_max_digit_count=0\n\
    \    local hex_key_digit_is_prime_len_max_digit_count_max_digit_count_max_digit_count_max=0\n\
    \    local hex_key_digit_is_prime_len_max_digit_count_max_digit_count_max_digit_count_max_digit=\"\
    \"\n    local hex_key_digit_is_prime_len_max_digit_count_max_digit_count_max_digit_count_max_digit_count=0\n\
    \    local hex_key_digit_is_prime_len_max_digit_count_max_digit_count_max_digit_count_max_digit_count_max=0\n\
    \    local hex_key_digit_is_prime_len_max_digit_count_max_digit_count_max_digit_count_max\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i sum=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n   \
    \ local -i prime=0\n    local -i digit=0\n    local -i hex_digit=0\n    local\
    \ -i hex_prime=0\n    local -i hex_prime_count=0\n    local -i hex_digit_count=0\n\
    \    local -i hex_prime_percent=0\n    local -i hex_digit_percent=0\n    local\
    \ -i hex_prime_percent_count=0\n    local -i hex_digit_percent_count=0\n    local\
    \ -i hex_prime_percent_sum=0\n    local -i hex_digit_percent_sum=0\n    local\
    \ -i hex_prime_percent_avg=0\n    local -i hex_digit_percent_avg=0\n    local\
    \ -i hex_prime_percent_avg_count=0\n    local -i hex_digit_percent_avg_count=0\n\
    \    local -i hex_prime_percent_avg_sum=0\n    local -i hex_digit_percent_avg_sum=0\n\
    \    local -i hex_prime_percent_avg_avg=0\n    local -i hex_digit_percent_avg_avg=0\n\
    \    local -i hex_prime_percent_avg_avg_count=0\n    local -i hex_digit_percent_avg_avg_count=0\n\
    \    local -i hex_prime_percent_avg_avg_sum=0\n    local -i hex_digit_percent_avg_avg_sum=0\n\
    \    local -i hex_prime_percent_avg_avg_avg=0\n    local -i hex_digit_percent_avg_avg_avg=0\n\
    \    local -i hex_prime_percent_avg_avg_avg_count=0\n    local -i hex_digit_percent_avg_avg_avg_count=0\n\
    \    local -i hex_prime_percent_avg_avg_avg_sum=0\n    local -i hex_digit_percent_av\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i i=0\n    local -i count=0\n    local -i len=${#1}\n    local -i hex_num=0\n\
    \    local -i hex_prime=0\n    local -i hex_prime_count=0\n    local -i hex_prime_array=(2\
    \ 3 5 7 11 13)\n    local -i hex_prime_array_len=${#hex_prime_array[@]}\n    local\
    \ -i hex_prime_array_index=0\n    local -i hex_prime_array_value=0\n    local\
    \ -i hex_prime_array_value_len=0\n    local -i hex_prime_array_value_index=0\n\
    \    local -i hex_prime_array_value_digit=0\n    local -i hex_prime_array_value_digit_index=0\n\
    \    local -i hex_prime_array_value_digit_value=0\n    local -i hex_prime_array_value_digit_value_len=0\n\
    \    local -i hex_prime_array_value_digit_value_index=0\n    local -i hex_prime_array_value_digit_value_digit=0\n\
    \    local -i hex_prime_array_value_digit_value_digit_index=0\n    local -i hex_prime_array_value_digit_value_digit_value=0\n\
    \    local -i hex_prime_array_value_digit_value_digit_value_len=0\n    local -i\
    \ hex_prime_array_value_digit_value_digit_value_index=0\n    local -i hex_prime_array_value_digit_value_digit_value_digit=0\n\
    \    local -i hex_prime_array_value_digit_value_digit_value_digit_index=0\n  \
    \  local -i hex_prime_array_value_digit_value_digit_value_digit_value=0\n    local\
    \ -i hex_prime_array_value_digit_value_digit_value_digit_value_len=0\n    local\
    \ -i hex_prime_array_value_digit_value_digit_value_digit_value_index=0\n    local\
    \ -i hex_prime_array_value_digit_value\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local key=$1\n\
    \  local count=0\n  local i=0\n  local len=${#key}\n  local char\n  while [ $i\
    \ -lt $len ]; do\n    char=${key:$i:1}\n    case $char in\n      2|3|5|7|B|D)\n\
    \        (( count++ ))\n        ;;\n    esac\n    (( i++ ))\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -a hex_key=(2\
    \ 3 5 7 11 13)\n    local -a hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n  \
    \  local -a hex_digits_upper=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_digits_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 a b c d e f)\n    local -a hex_digits_mix=(0 1 2 3 4 5 6 7\
    \ 8 9 A a B b C c D d E e F f)\n    local -a hex_digits_mix_upper=(0 1 2 3 4 5\
    \ 6 7 8 9 A B C D E F a b c d e f)\n    local -a hex_digits_mix_lower=(0 1 2 3\
    \ 4 5 6 7 8 9 a b c d e f A B C D E F)\n    local -a hex_digits_mix_upper_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f)\n    local -a hex_digits_mix_lower_upper=(0\
    \ 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F)\n    local -a hex_digits_mix_upper_lower_upper=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f A B C D E F)\n    local -a hex_digits_mix_lower_upper_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F a b c d e f)\n    local -a hex_digits_mix_upper_lower_upper_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f A B C D E F a b c d e f)\n    local\
    \ -a hex_digits_mix_lower_upper_lower_upper=(0 1 2 3 4 5 6 7 8 9 a b c d e f A\
    \ B C D E F a b c d e f\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprwmldtzb.sh: line 34: syntax error near unexpected token `(''

    /tmp/tmprwmldtzb.sh: line 34: `candidate() {''

    /tmp/tmprwmldtzb.sh: line 35: hex_key: command not found

    /tmp/tmprwmldtzb.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmprwmldtzb.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    # Write\
    \ your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpilo14qb7.sh: line 186: syntax error near unexpected token `}''

    /tmp/tmpilo14qb7.sh: line 186: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex=$1\n    local key=0\n    for ((i=0; i<${#hex}; i++)); do\n        local\
    \ char=${hex:$i:1}\n        case $char in\n            2|3|5|7|B|D) key=$((key+1))\
    \ ;;\n        esac\n    done\n    echo $key\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\
    \    local primes=(2 3 5 7 B D)\n    for i in ${digits[@]}; do\n        if [[\
    \ $key == *$i* ]]; then\n            count=$((count+1))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -a hex_key=(2\
    \ 3 5 7 11 13)\n    local -a hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n  \
    \  for ((i=0; i<len; i++)); do\n        for ((j=0; j<${#hex_digits[@]}; j++));\
    \ do\n            if [[ ${1:i:1} == ${hex_digits[j]} ]]; then\n              \
    \  if [[ ${hex_key[*]} =~ ${hex_digits[j]} ]]; then\n                    ((count++))\n\
    \                fi\n            fi\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal hex_key=$1\n\
    \tlocal count=0\n\tlocal hex_digit\n\tfor hex_digit in $(echo $hex_key | grep\
    \ -o .); do\n\t\tcase $hex_digit in\n\t\t\t2|3|5|7|B|D)\n\t\t\t\tcount=$((count+1))\n\
    \t\t\t\t;;\n\t\tesac\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_num=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local\
    \ prime_digits=(2 3 5 7 B D)\n    local count=0\n    for i in ${hex_digits[@]};\
    \ do\n        if [[ $hex_num =~ $i ]]; then\n            for j in ${prime_digits[@]};\
    \ do\n                if [[ $i = $j ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -a hex_array=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a prime_array=(2 3 5 7 11 13)\n \
    \   local -i hex_array_len=${#hex_array[@]}\n    local -i prime_array_len=${#prime_array[@]}\n\
    \    local -i j=0\n    local -i k=0\n    local -i flag=0\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=0; j<hex_array_len; j++)); do\n            if [[\
    \ ${1:i:1} == ${hex_array[j]} ]]; then\n                for ((k=0; k<prime_array_len;\
    \ k++)); do\n                    if [[ $j == ${prime_array[k]} ]]; then\n    \
    \                    count=$((count+1))\n                        flag=1\n    \
    \                    break\n                    fi\n                done\n   \
    \             if [[ $flag == 1 ]]; then\n                    flag=0\n        \
    \            break\n                fi\n            fi\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i\n    local -i len=${#1}\n    local -i val\n    local\
    \ -i prime\n    local -a primes=(2 3 5 7 11 13 17)\n    local -a hex=(0 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_str=('0' '1' '2' '3' '4' '5'\
    \ '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F')\n    for ((i=0; i<len; i++)); do\n\
    \        val=${hex_str[@]/${1:i:1}}\n        prime=${primes[@]/${hex[val]}}\n\
    \        if [[ -z $prime ]]; then\n            ((count++))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwbav5cfi.sh: line 25: 0 1 2 3 4 5 6 7 8 9 B C D E F: syntax error
    in expression (error token is "1 2 3 4 5 6 7 8 9 B C D E F")

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    echo $1\
    \ | sed 's/[^0-9A-F]//g' | tr -d '\\n'\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1} in\n  \
    \          [2357BD]) ((count++)) ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=\"$1\"\n    local -i count=0\n    for ((i=0; i<${#key}; i++)); do\n    \
    \    case ${key:i:1} in\n            2|3|5|7|B|D)\n                ((count++))\n\
    \                ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i len=${#1}\n    local -i i=0\n    local -i j=0\n   \
    \ local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i\
    \ ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i\
    \ iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n    local -i nnn=0\n    local -i ooo\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i digit=0\n  local -i\
    \ digit_dec=0\n  local -i digit_hex=0\n  local -i digit_hex_dec=0\n  local -i\
    \ digit_hex_dec_mod=0\n  local -i digit_hex_dec_mod_div=0\n  local -i digit_hex_dec_mod_div_mod=0\n\
    \  local -i digit_hex_dec_mod_div_mod_div=0\n  local -i digit_hex_dec_mod_div_mod_div_mod=0\n\
    \  local -i digit_hex_dec_mod_div_mod_div_mod_div=0\n  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod=0\n\
    \  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod_div=0\n  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div=0\n  local -i\
    \ digit_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod=0\n  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div=0\n\
    \  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div=0\n\
    \  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \  local -i digit_hex_dec_mod_div_mod_div_mod_div_mod_\n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    # Write\
    \ your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpilo14qb7.sh: line 186: syntax error near unexpected token `}''

    /tmp/tmpilo14qb7.sh: line 186: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n\
    \  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n\
    \  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i prime_count=0\n    local -i prime_num=0\n \
    \   local -i prime_num_count=0\n    local -i prime_num_len=0\n    local -i prime_num_len_count=0\n\
    \    local -i prime_num_len_count_num=0\n    local -i prime_num_len_count_num_prime=0\n\
    \    local -i prime_num_len_count_num_prime_count=0\n    local -i prime_num_len_count_num_prime_count_num=0\n\
    \    local -i prime_num_len_count_num_prime_count_num_prime=0\n    local -i prime_num_len_count_num_prime_count_num_prime_count=0\n\
    \    local -i prime_num_len_count_num_prime_count_num_prime_count_num=0\n    local\
    \ -i prime_num_len_count_num_prime_count_num_prime_count_num_prime=0\n    local\
    \ -i prime_num_len_count_num_prime_count_num_prime_count_num_prime_count=0\n \
    \   local -i prime_num_len_count_num_prime_count_num_prime_count_num_prime_count_num=0\n\
    \    local -i prime_num_len_count_num_prime_count_num_prime_count_num_prime_count_num_prime=0\n\
    \    local -i prime_num_len_count_num_prime_count_num_prime_count_num_prime_count_num_prime_count=0\n\
    \    local -i prime_num_len_count_num_prime_count_num_prime_count_num_prime_count_num_prime_count_num=0\n\
    \    local -i prime_num_len_count_num_prime_count_num_prime_count_num_prime_count_num_prime_count_num_prime=0\n\
    \    local -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i i=0\n    local -i count=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i hex=0\n    local -i dec=0\n    local -i prime=0\n    local -i primes=(2\
    \ 3 5 7 11 13 17)\n    local -i len_primes=${#primes[@]}\n    local -i is_prime=0\n\
    \    local -i is_hex=0\n    local -i is_dec=0\n    local -i is_num=0\n    local\
    \ -i is_zero=0\n    local -i is_one=0\n    local -i is_two=0\n    local -i is_three=0\n\
    \    local -i is_four=0\n    local -i is_five=0\n    local -i is_six=0\n    local\
    \ -i is_seven=0\n    local -i is_eight=0\n    local -i is_nine=0\n    local -i\
    \ is_A=0\n    local -i is_B=0\n    local -i is_C=0\n    local -i is_D=0\n    local\
    \ -i is_E=0\n    local -i is_F=0\n    local -i is_a=0\n    local -i is_b=0\n \
    \   local -i is_c=0\n    local -i is_d=0\n    local -i is_e=0\n    local -i is_f=0\n\
    \    local -i is_x=0\n    local -i is_X=0\n    local -i is_h=0\n    local -i is_H=0\n\
    \    local -i is_0=0\n    local -i is_1=0\n    local -i is_2=0\n    local -i is_3=0\n\
    \    local -i is_4=0\n    local -i is_5=0\n    local -i is_6=0\n    local -i is_7=0\n\
    \    local -i is_8=0\n    local -i is_9=0\n    local -i is_A=0\n    local -i is_B=0\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n \
    \   local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i\
    \ dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i\
    \ hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i\
    \ bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local\
    \ -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local\
    \ -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local hex_digits=\"0123456789ABCDEF\"\n    local\
    \ hex_primes=\"2357BD\"\n    for (( i=0; i<${#key}; i++ )); do\n        if [[\
    \ \"${hex_primes}\" =~ \"${key:$i:1}\" ]]; then\n            (( count++ ))\n \
    \       fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i temp=0\n    local -i temp2=0\n    local -a\
    \ primes=(2 3 5 7 11 13 17)\n    local -a hex=(0 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15)\n    local -a hex_str=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a\
    \ hex_str_upper=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_str_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 a b c d e f)\n    local -a hex_str_prime=(0 1 2 3 4 5 6 7\
    \ 8 9 A B D)\n    local -a hex_str_prime_upper=(0 1 2 3 4 5 6 7 8 9 A B D)\n \
    \   local -a hex_str_prime_lower=(0 1 2 3 4 5 6 7 8 9 a b d)\n    local -a hex_str_prime_upper_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 A B D a b d)\n    local -a hex_str_prime_lower_upper=(0 1\
    \ 2 3 4 5 6 7 8 9 a b d A B D)\n    local -a hex_str_prime_lower_upper_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 a b d A B D a b d)\n    local -a hex_str_prime_upper_lower_upper=(0\
    \ 1 2 3 4 5 6 7 8 9 A B D a b d A B D)\n    local -a hex_str_prime_upper_lower_upper_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 A B D a b d A B D a b d)\n    local -a hex_str_prime_lower_upper_lower_upper=(0\
    \ 1 2 3 4 5 6 7 8 9 a b d A B D a b d A B D)\n    local -a hex_str_prime_lower_upper_lower_upper_lower=(0\
    \ 1 2 3 4 5 6 7\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0n09elo9.sh: line 40: syntax error near unexpected token `(''

    /tmp/tmp0n09elo9.sh: line 40: `candidate() {''

    /tmp/tmp0n09elo9.sh: line 41: hex_key: command not found

    /tmp/tmp0n09elo9.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmp0n09elo9.sh: line 42: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for ((i=0; i<${#key}; i++)); do\n        case\
    \ ${key:$i:1} in\n            2|3|5|7|B|D)\n                ((count++))\n    \
    \            ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex_key=$1\n\
    \  local -i count=0\n  local -i i=0\n  local -i len=${#hex_key}\n  local -i digit=0\n\
    \  local -i is_prime=0\n  local -a primes=(2 3 5 7 11 13 17)\n  for ((i=0; i<len;\
    \ i++)); do\n    digit=${hex_key:i:1}\n    if [[ $digit =~ [0-9] ]]; then\n  \
    \    digit=$((10#$digit))\n    else\n      digit=$((10#${digit^^}-55))\n    fi\n\
    \    is_prime=0\n    for prime in ${primes[@]}; do\n      if [[ $digit -eq $prime\
    \ ]]; then\n        is_prime=1\n        break\n      fi\n    done\n    if [[ $is_prime\
    \ -eq 1 ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo $count\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local digits=\"2 3 5 7 B D\"\n    for digit in\
    \ $digits; do\n        if [[ $key =~ $digit ]]; then\n            count=$((count+1))\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal hex_key=$1\n\
    \tlocal counter=0\n\tlocal i=0\n\tfor (( i=0; i<${#hex_key}; i++ )); do\n\t\t\
    if [[ \"${hex_key:$i:1}\" == \"2\" ]] || [[ \"${hex_key:$i:1}\" == \"3\" ]] ||\
    \ [[ \"${hex_key:$i:1}\" == \"5\" ]] || [[ \"${hex_key:$i:1}\" == \"7\" ]] ||\
    \ [[ \"${hex_key:$i:1}\" == \"B\" ]] || [[ \"${hex_key:$i:1}\" == \"D\" ]]; then\n\
    \t\t\tcounter=$((counter+1))\n\t\tfi\n\tdone\n\techo $counter\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex=$1\n    local -i sum=0\n    local -i i=0\n    local -i len=${#hex}\n   \
    \ local -i digit=0\n    local -i tmp=0\n    local -i j=0\n    local -i is_prime=0\n\
    \    for ((i=0; i<len; i++)); do\n        digit=${hex:i:1}\n        case $digit\
    \ in\n            2) sum=$((sum+1)) ;;\n            3) sum=$((sum+1)) ;;\n   \
    \         5) sum=$((sum+1)) ;;\n            7) sum=$((sum+1)) ;;\n           \
    \ B) sum=$((sum+1)) ;;\n            D) sum=$((sum+1)) ;;\n            *) ;;\n\
    \        esac\n    done\n    echo $sum\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local key=$1\n\
    \  local count=0\n  local i=0\n  local len=${#key}\n  local hex_digits=\"2345BD\"\
    \n  local hex_digit\n  while [ $i -lt $len ]; do\n    hex_digit=${key:$i:1}\n\
    \    if [[ $hex_digits =~ $hex_digit ]]; then\n      count=$((count+1))\n    fi\n\
    \    i=$((i+1))\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i prime_count=0\n    local -i prime_num=0\n \
    \   local -i prime_num_count=0\n    local -i prime_num_len=0\n    local -i prime_num_len_count=0\n\
    \    local -i prime_num_len_count_num=0\n    local -i prime_num_len_count_num_count=0\n\
    \    local -i prime_num_len_count_num_count_num=0\n    local -i prime_num_len_count_num_count_num_count=0\n\
    \    local -i prime_num_len_count_num_count_num_count_num=0\n    local -i prime_num_len_count_num_count_num_count_num_count=0\n\
    \    local -i prime_num_len_count_num_count_num_count_num_count_num=0\n    local\
    \ -i prime_num_len_count_num_count_num_count_num_count_num_count=0\n    local\
    \ -i prime_num_len_count_num_count_num_count_num_count_num_count_num=0\n    local\
    \ -i prime_num_len_count_num_count_num_count_num_count_num_count_num_count=0\n\
    \    local -i prime_num_len_count_num_count_num_count_num_count_num_count_num_count_num=0\n\
    \    local -i prime_num_len_count_num_count_num_count_num_count_num_count_num_count_num_count=0\n\
    \    local -i prime_num_len_count_num_count_num_count_num_count_num_count_num_count_num_count_num=0\n\
    \    local -i prime_num_len_count_num_count_num_count_num_count_num_count_num_count_num_count_num_count=0\n\
    \    local -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_string=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local\
    \ prime_digits=(2 3 5 7 B D)\n    local count=0\n    for digit in ${hex_digits[@]};\
    \ do\n        if [[ $hex_string =~ $digit ]]; then\n            for prime_digit\
    \ in ${prime_digits[@]}; do\n                if [[ $digit == $prime_digit ]];\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -a hex_primes=(2 3 5\
    \ 7 11 13)\n  local -a hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n  local -a\
    \ hex_numbers=()\n  for ((i=0; i<len; i++)); do\n    hex_numbers[i]=$(printf \"\
    %d\" \"'${1:i:1}\")\n  done\n  for ((i=0; i<len; i++)); do\n    for ((j=0; j<${#hex_digits[@]};\
    \ j++)); do\n      if [[ ${hex_numbers[i]} -eq ${hex_digits[j]} ]]; then\n   \
    \     for ((k=0; k<${#hex_primes[@]}; k++)); do\n          if [[ ${hex_numbers[i]}\
    \ -eq ${hex_primes[k]} ]]; then\n            ((count++))\n          fi\n     \
    \   done\n      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local str=$1\n\
    \  local count=0\n  local i=0\n  local len=${#str}\n  while [ $i -lt $len ]; do\n\
    \    local char=${str:$i:1}\n    if [[ $char =~ [2357BD] ]]; then\n      ((count++))\n\
    \    fi\n    ((i++))\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local i=0\n    local count=0\n\
    \    local digit=0\n    local digit_str=''\n    local hex_primes='2357BD'\n\n\
    \    for (( i=0; i<hex_key_len; i++ )); do\n        digit_str=${hex_key:$i:1}\n\
    \        if [[ $hex_primes =~ $digit_str ]]; then\n            (( count++ ))\n\
    \        fi\n    done\n\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local hex=$1\n\
    \  local -i count=0\n  local -i len=${#hex}\n  local -i i=0\n  local -i j=0\n\
    \  local -i num=0\n  local -i prime=0\n  local -i is_prime=0\n  local -a primes=(2\
    \ 3 5 7 11 13 17)\n  for ((i=0; i<len; i++)); do\n    num=${hex:i:1}\n    case\
    \ $num in\n      0|1|8)\n        continue\n        ;;\n      2|3|5|7|B|D)\n  \
    \      count+=1\n        ;;\n      *)\n        is_prime=0\n        for ((j=0;\
    \ j<${#primes[@]}; j++)); do\n          prime=${primes[j]}\n          if ((num\
    \ % prime == 0)); then\n            is_prime=1\n            break\n          fi\n\
    \        done\n        if ((is_prime == 0)); then\n          count+=1\n      \
    \  fi\n        ;;\n    esac\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local i=0\n    local len=${#key}\n    local c\n\
    \    while [ $i -lt $len ]; do\n        c=${key:$i:1}\n        case $c in\n  \
    \          2|3|5|7|B|D)\n                count=$((count+1))\n                ;;\n\
    \        esac\n        i=$((i+1))\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_prime_digits=\"2 3 5 7 B D\"\n    local hex_key_digit\n   \
    \ local hex_key_digit_is_prime\n    local hex_key_digit_is_prime_len\n    local\
    \ hex_key_digit_is_prime_idx\n    local hex_key_digit_is_prime_digit\n    local\
    \ hex_key_digit_is_prime_digit_len\n    local hex_key_digit_is_prime_digit_idx\n\
    \    local hex_key_digit_is_prime_digit_is_prime\n\n    for (( hex_key_idx=0;\
    \ hex_key_idx<hex_key_len; hex_key_idx++ )); do\n        hex_key_digit=${hex_key:$hex_key_idx:1}\n\
    \        hex_key_digit_is_prime=0\n        hex_key_digit_is_prime_len=${#hex_key_prime_digits}\n\
    \        for (( hex_key_digit_is_prime_idx=0; hex_key_digit_is_prime_idx<hex_key_digit_is_prime_len;\
    \ hex_key_digit_is_prime_idx++ )); do\n            hex_key_digit_is_prime_digit=${hex_key_prime_digits:$hex_key_digit_is_prime_idx:1}\n\
    \            hex_key_digit_is_prime_digit_len=${#hex_key_digit_is_prime_digit}\n\
    \            for (( hex_key_digit_is_prime_digit_idx=0; hex_key_digit_is_prime_digit_idx<hex_key_digit_is_prime_digit_len;\
    \ hex_key_digit_is_prime_digit_idx++ )); do\n                hex_key_digit_is_prime_digit_is_prime=${hex_key_digit_is_prime_digit:$hex_key_digit_is_prime_digit_idx:1}\n\
    \                if [\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp24g9ccog.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmp24g9ccog.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local i=0\n    local len=${#key}\n    local char\n\
    \    for ((i=0; i<len; i++)); do\n        char=${key:$i:1}\n        if [[ $char\
    \ == \"2\" || $char == \"3\" || $char == \"5\" || $char == \"7\" || $char == \"\
    B\" || $char == \"D\" ]]; then\n            ((count++))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i digit_dec=0\n    local -i digit_dec_mod=0\n    local -i digit_dec_mod_2=0\n\
    \    local -i digit_dec_mod_3=0\n    local -i digit_dec_mod_5=0\n    local -i\
    \ digit_dec_mod_7=0\n    local -i digit_dec_mod_11=0\n    local -i digit_dec_mod_13=0\n\
    \    local -i digit_dec_mod_17=0\n    local -i digit_dec_mod_19=0\n    local -i\
    \ digit_dec_mod_23=0\n    local -i digit_dec_mod_29=0\n    local -i digit_dec_mod_31=0\n\
    \    local -i digit_dec_mod_37=0\n    local -i digit_dec_mod_41=0\n    local -i\
    \ digit_dec_mod_43=0\n    local -i digit_dec_mod_47=0\n    local -i digit_dec_mod_53=0\n\
    \    local -i digit_dec_mod_59=0\n    local -i digit_dec_mod_61=0\n    local -i\
    \ digit_dec_mod_67=0\n    local -i digit_dec_mod_71=0\n    local -i digit_dec_mod_73=0\n\
    \    local -i digit_dec_mod_79=0\n    local -i digit_dec_mod_83=0\n    local -i\
    \ digit_dec_mod_89=0\n    local -i digit_dec_mod_97=0\n    local -i digit_dec_mod_101=0\n\
    \    local -i digit_dec_mod_103=0\n    local -i digit_dec_mod_107=0\n    local\
    \ -i digit_dec_mod_109=0\n    local -i digit_dec_mod_113=0\n    local -i digit_dec_mod_127=0\n\
    \    local -i digit_dec_mod_131=0\n    local -i digit_\n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ input=$1\n    local counter=0\n    local key=0\n    local hex_key=0\n    local\
    \ hex_key_array=()\n    local hex_key_array_counter=0\n    local hex_key_array_counter_2=0\n\
    \    local hex_key_array_counter_3=0\n    local hex_key_array_counter_4=0\n  \
    \  local hex_key_array_counter_5=0\n    local hex_key_array_counter_6=0\n    local\
    \ hex_key_array_counter_7=0\n    local hex_key_array_counter_8=0\n    local hex_key_array_counter_9=0\n\
    \    local hex_key_array_counter_10=0\n    local hex_key_array_counter_11=0\n\
    \    local hex_key_array_counter_12=0\n    local hex_key_array_counter_13=0\n\
    \    local hex_key_array_counter_14=0\n    local hex_key_array_counter_15=0\n\
    \    local hex_key_array_counter_16=0\n    local hex_key_array_counter_17=0\n\
    \    local hex_key_array_counter_18=0\n    local hex_key_array_counter_19=0\n\
    \    local hex_key_array_counter_20=0\n    local hex_key_array_counter_21=0\n\
    \    local hex_key_array_counter_22=0\n    local hex_key_array_counter_23=0\n\
    \    local hex_key_array_counter_24=0\n    local hex_key_array_counter_25=0\n\
    \    local hex_key_array_counter_26=0\n    local hex_key_array_counter_27=0\n\
    \    local hex_key_array_counter_28=0\n    local hex_key_array_counter_29=0\n\
    \    local hex_key_array_counter_30=0\n    local hex_key_array_counter_31=0\n\
    \    local hex_key_array_counter_32=0\n    local hex_key_array_counter_33=0\n\
    \    local hex_key_array_counter_34=0\n   \n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal key=$1\n\
    \tlocal count=0\n\tfor (( i=0; i<${#key}; i++ )); do\n\t\tcase ${key:$i:1} in\n\
    \t\t\t2|3|5|7|B|D)\n\t\t\t\t(( count++ ))\n\t\t\t\t;;\n\t\tesac\n\tdone\n\techo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i len=${#1}\n    local -i i=0\n    local -i j=0\n   \
    \ local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i\
    \ ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i\
    \ iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n    local -i nnn=0\n    local -i ooo\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=\"$1\"\n    local count=0\n    local i=0\n    local len=${#hex_key}\n\
    \    while [ $i -lt $len ]; do\n        local char=${hex_key:$i:1}\n        if\
    \ [ \"$char\" == \"2\" ] || [ \"$char\" == \"3\" ] || [ \"$char\" == \"5\" ] ||\
    \ [ \"$char\" == \"7\" ] || [ \"$char\" == \"B\" ] || [ \"$char\" == \"D\" ];\
    \ then\n            count=$((count+1))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_len_dec=$((16#$hex_key_len))\n\
    \    local hex_key_len_dec_prime=$(is_prime $hex_key_len_dec)\n    local hex_key_prime_count=0\n\
    \    local hex_key_prime_count_dec=0\n    local hex_key_prime_count_dec_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime=0\n    local hex_key_prime_count_dec_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime=0\n    local hex_key_prime_count_dec_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime=0\n   \
    \ local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_dec_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=0\n\
    \    local hex_key_prime_count_\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1wvmm3af.sh: line 19: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_length=${#hex_key}\n    local hex_key_prime_count=0\n\
    \    local hex_key_prime_list=\"2357BD\"\n    local hex_key_prime_list_length=${#hex_key_prime_list}\n\
    \    local hex_key_prime_list_index=0\n    local hex_key_prime_list_char=\"\"\n\
    \    local hex_key_index=0\n    local hex_key_char=\"\"\n    local hex_key_char_is_prime=0\n\
    \n    for (( hex_key_index=0; hex_key_index<hex_key_length; hex_key_index++ ));\
    \ do\n        hex_key_char=${hex_key:$hex_key_index:1}\n        hex_key_char_is_prime=0\n\
    \        for (( hex_key_prime_list_index=0; hex_key_prime_list_index<hex_key_prime_list_length;\
    \ hex_key_prime_list_index++ )); do\n            hex_key_prime_list_char=${hex_key_prime_list:$hex_key_prime_list_index:1}\n\
    \            if [ \"$hex_key_char\" == \"$hex_key_prime_list_char\" ]; then\n\
    \                hex_key_char_is_prime=1\n                break\n            fi\n\
    \        done\n        if [ $hex_key_char_is_prime -eq 1 ]; then\n           \
    \ (( hex_key_prime_count++ ))\n        fi\n    done\n\n    echo $hex_key_prime_count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local -i counter=0\n    local -i i=0\n    local -i len=${#hex_key}\n\
    \    local -i prime_numbers=(2 3 5 7 11 13)\n    local -i number=0\n    local\
    \ -i remainder=0\n    local -i result=0\n    local -i sum=0\n    local -i sum_of_digits=0\n\
    \    local -i sum_of_digits_of_number=0\n    local -i sum_of_digits_of_remainder=0\n\
    \    local -i sum_of_digits_of_result=0\n    local -i sum_of_digits_of_sum=0\n\
    \    local -i sum_of_digits_of_sum_of_digits=0\n    local -i sum_of_digits_of_sum_of_digits_of_number=0\n\
    \    local -i sum_of_digits_of_sum_of_digits_of_remainder=0\n    local -i sum_of_digits_of_sum_of_digits_of_result=0\n\
    \    local -i sum_of_digits_of_sum_of_digits_of_sum=0\n    local -i sum_of_digits_of_sum_of_digits_of_sum_of_digits=0\n\
    \    local -i sum_of_digits_of_sum_of_digits_of_sum_of_digits_of_number=0\n  \
    \  local -i sum_of_digits_of_sum_of_digits_of_sum_of_digits_of_remainder=0\n \
    \   local -i sum_of_digits_of_sum_of_digits_of_sum_of_digits_of_result=0\n   \
    \ local -i sum_of_digits_of_sum_of_digits_of_sum_of_digits_of_sum=0\n    local\
    \ -i sum_of_digits_of_sum_of_digits_of_sum_of_digits_of_sum_of_digits=0\n   \n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local key=$1\n\
    \  local count=0\n  local hex_digits=\"2 3 5 7 B D\"\n  for digit in $hex_digits;\
    \ do\n    count=$((count + $(echo $key | grep -o $digit | wc -l)))\n  done\n \
    \ echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1} in\n  \
    \          2|3|5|7|B|D) ((count++)) ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1} in\n  \
    \          2|3|5|7|B|D) ((count++)) ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal -i\
    \ count=0\n\tlocal -i i=0\n\tlocal -i len=${#1}\n\tlocal -i temp=0\n\tlocal -i\
    \ temp2=0\n\tlocal -i temp3=0\n\tlocal -i temp4=0\n\tlocal -i temp5=0\n\tlocal\
    \ -i temp6=0\n\tlocal -i temp7=0\n\tlocal -i temp8=0\n\tlocal -i temp9=0\n\tlocal\
    \ -i temp10=0\n\tlocal -i temp11=0\n\tlocal -i temp12=0\n\tlocal -i temp13=0\n\
    \tlocal -i temp14=0\n\tlocal -i temp15=0\n\tlocal -i temp16=0\n\tlocal -i temp17=0\n\
    \tlocal -i temp18=0\n\tlocal -i temp19=0\n\tlocal -i temp20=0\n\tlocal -i temp21=0\n\
    \tlocal -i temp22=0\n\tlocal -i temp23=0\n\tlocal -i temp24=0\n\tlocal -i temp25=0\n\
    \tlocal -i temp26=0\n\tlocal -i temp27=0\n\tlocal -i temp28=0\n\tlocal -i temp29=0\n\
    \tlocal -i temp30=0\n\tlocal -i temp31=0\n\tlocal -i temp32=0\n\tlocal -i temp33=0\n\
    \tlocal -i temp34=0\n\tlocal -i temp35=0\n\tlocal -i temp36=0\n\tlocal -i temp37=0\n\
    \tlocal -i temp38=0\n\tlocal -i temp39=0\n\tlocal -i temp40=0\n\tlocal -i temp41=0\n\
    \tlocal -i temp42=0\n\tlocal -i temp43=0\n\tlocal -i temp44=0\n\tlocal -i temp45=0\n\
    \tlocal -i temp46=0\n\tlocal -i temp47=0\n\tlocal -i temp48=0\n\tlocal -i temp49=0\n\
    \tlocal -i temp50=0\n\tlocal -i temp51=0\n\tlocal -i temp52=0\n\tlocal -i temp53=0\n\
    \tlocal -i temp54=0\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i is_prime=0\n    local -i is_hex=0\n    local -i is_valid=0\n   \
    \ local -i is_valid_hex=0\n    local -i is_valid_prime=0\n    local -i is_valid_hex_prime=0\n\
    \    local -i is_valid_hex_prime_count=0\n    local -i is_valid_hex_prime_count_max=0\n\
    \    local -i is_valid_hex_prime_count_max_index=0\n    local -i is_valid_hex_prime_count_max_index_len=0\n\
    \    local -i is_valid_hex_prime_count_max_index_len_digit=0\n    local -i is_valid_hex_prime_count_max_index_len_digit_is_prime=0\n\
    \    local -i is_valid_hex_prime_count_max_index_len_digit_is_prime_is_hex=0\n\
    \    local -i is_valid_hex_prime_count_max_index_len_digit_is_prime_is_hex_is_valid=0\n\
    \    local -i is_valid_hex_prime_count_max_index_len_digit_is_prime_is_hex_is_valid_hex=0\n\
    \    local -i is_valid_hex_prime_count_max_index_len_digit_is_prime_is_hex_is_valid_prime=0\n\
    \    local -i is_valid_hex_prime_count_max_index_len_digit_is_prime_is_hex_is_valid_hex_prime=0\n\
    \    local -i is_valid_hex_prime_count_max_index_len_digit_is_prime_is_hex_is_valid_hex_prime_count=0\n\
    \    local -i is_valid_hex_prime_count_max_index_len_digit_is_prime_is_hex_is_valid_hex_prime_count_max=0\n\
    \    local -i is_valid_hex_\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i num_arr=()\n    local -i prime_arr=(2 3 5 7 11 13)\n    local -i\
    \ prime_len=${#prime_arr[@]}\n    local -i prime_num=0\n    local -i prime_num_arr=()\n\
    \    local -i prime_num_len=0\n    local -i prime_num_count=0\n    local -i prime_num_count_arr=()\n\
    \    local -i prime_num_count_len=0\n    local -i prime_num_count_max=0\n    local\
    \ -i prime_num_count_max_index=0\n    local -i prime_num_count_max_arr=()\n  \
    \  local -i prime_num_count_max_len=0\n    local -i prime_num_count_max_sum=0\n\
    \    local -i prime_num_count_max_sum_arr=()\n    local -i prime_num_count_max_sum_len=0\n\
    \    local -i prime_num_count_max_sum_max=0\n    local -i prime_num_count_max_sum_max_index=0\n\
    \    local -i prime_num_count_max_sum_max_arr=()\n    local -i prime_num_count_max_sum_max_len=0\n\
    \    local -i prime_num_count_max_sum_max_sum=0\n    local -i prime_num_count_max_sum_max_sum_arr=()\n\
    \    local -i prime_num_count_max_sum_max_sum_len=0\n    local -i prime_num_count_max_sum_max_sum_max=0\n\
    \    local -i prime_num_count_max_sum_max_sum_max_index=0\n    local -i prime_num_count_max_sum_max_sum_max_arr=()\n\
    \    local -i prime_num_count_max_sum_max_sum_max_len=0\n    local -i prime_num_count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C D E F\"\n    local\
    \ prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for digit in $hex_digits;\
    \ do\n        if [[ $hex_key =~ $digit ]]; then\n            if [[ $prime_digits\
    \ =~ $digit ]]; then\n                (( count++ ))\n            fi\n        fi\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for ((i=0; i<${#key}; i++)); do\n        case\
    \ ${key:$i:1} in\n            2|3|5|7|B|D)\n                ((count++))\n    \
    \            ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -a hex_digits=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a prime_digits=(2 3 5 7 B D)\n  \
    \  local -i prime_len=${#prime_digits[@]}\n    local -i hex_len=${#hex_digits[@]}\n\
    \    local -i j=0\n    local -i k=0\n    local -i is_prime=0\n    local -i is_hex=0\n\
    \    for ((i=0; i<len; i++)); do\n        is_prime=0\n        is_hex=0\n     \
    \   for ((j=0; j<prime_len; j++)); do\n            if [[ ${1:i:1} == ${prime_digits[j]}\
    \ ]]; then\n                is_prime=1\n                break\n            fi\n\
    \        done\n        for ((k=0; k<hex_len; k++)); do\n            if [[ ${1:i:1}\
    \ == ${hex_digits[k]} ]]; then\n                is_hex=1\n                break\n\
    \            fi\n        done\n        if [[ $is_prime -eq 1 && $is_hex -eq 1\
    \ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=\"$1\"\n    local hex_key_len=${#hex_key}\n    local prime_count=0\n\
    \    local i=0\n    local digit=0\n    local is_prime=0\n    local j=0\n    local\
    \ divisor=0\n    local is_divisible=0\n    local is_divisible_by_2=0\n    local\
    \ is_divisible_by_3=0\n    local is_divisible_by_5=0\n    local is_divisible_by_7=0\n\
    \    local is_divisible_by_11=0\n    local is_divisible_by_13=0\n    local is_divisible_by_17=0\n\
    \    local is_divisible_by_19=0\n    local is_divisible_by_23=0\n    local is_divisible_by_29=0\n\
    \    local is_divisible_by_31=0\n    local is_divisible_by_37=0\n    local is_divisible_by_41=0\n\
    \    local is_divisible_by_43=0\n    local is_divisible_by_47=0\n    local is_divisible_by_53=0\n\
    \    local is_divisible_by_59=0\n    local is_divisible_by_61=0\n    local is_divisible_by_67=0\n\
    \    local is_divisible_by_71=0\n    local is_divisible_by_73=0\n    local is_divisible_by_79=0\n\
    \    local is_divisible_by_83=0\n    local is_divisible_by_89=0\n    local is_divisible_by_97=0\n\
    \    local is_divisible_by_101=0\n    local is_divisible_by_103=0\n    local is_divisible_by_107=0\n\
    \    local is_divisible_by_109=0\n    local is_divisible_by_113=0\n    local is_divisible_by_127=0\n\
    \    local is_divisible_by_131=0\n    local is_divisible_by_137=0\n    local is_divisible\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i prime=0\n    local -a hex_primes=(2 3 5 7 11 13)\n    local -a hex_digits=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_letters=(0 1 2 3 4 5\
    \ 6 7 8 9 A B C D E F)\n    local -a hex_letters_upper=(0 1 2 3 4 5 6 7 8 9 A\
    \ B C D E F)\n    local -a hex_letters_lower=(0 1 2 3 4 5 6 7 8 9 a b c d e f)\n\
    \    local -a hex_digits_upper=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local\
    \ -a hex_digits_lower=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_primes_upper=(2\
    \ 3 5 7 11 13)\n    local -a hex_primes_lower=(2 3 5 7 11 13)\n    local -a hex_primes_digits=(2\
    \ 3 5 7 11 13)\n    local -a hex_primes_letters=(2 3 5 7 11 13)\n    local -a\
    \ hex_primes_digits_upper=(2 3 5 7 11 13)\n    local -a hex_primes_digits_lower=(2\
    \ 3 5 7 11 13)\n    local -a hex_primes_letters_upper=(2 3 5 7 11 13)\n    local\
    \ -a hex_primes_letters_lower=(2 3 5 7 11 13)\n    local -a hex_digits_letters=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_digits_letters_upper=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_digits_letters_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_primes_digits_letters=(2\
    \ 3 5 7 11 13)\n    local -a hex_primes\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal hex=$1\n\
    \tlocal count=0\n\tlocal digit\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\tdigit=${hex:$i:1}\n\
    \t\tcase $digit in\n\t\t\t2|3|5|7|B|D)\n\t\t\t\t(( count++ ))\n\t\t\t\t;;\n\t\t\
    esac\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ i=0\n  local -i count=0\n  local -i len=${#1}\n  local -i num=0\n  local -i\
    \ prime=0\n  local -i tmp=0\n  local -i tmp2=0\n  local -i tmp3=0\n  local -i\
    \ tmp4=0\n  local -i tmp5=0\n  local -i tmp6=0\n  local -i tmp7=0\n  local -i\
    \ tmp8=0\n  local -i tmp9=0\n  local -i tmp10=0\n  local -i tmp11=0\n  local -i\
    \ tmp12=0\n  local -i tmp13=0\n  local -i tmp14=0\n  local -i tmp15=0\n  local\
    \ -i tmp16=0\n  local -i tmp17=0\n  local -i tmp18=0\n  local -i tmp19=0\n  local\
    \ -i tmp20=0\n  local -i tmp21=0\n  local -i tmp22=0\n  local -i tmp23=0\n  local\
    \ -i tmp24=0\n  local -i tmp25=0\n  local -i tmp26=0\n  local -i tmp27=0\n  local\
    \ -i tmp28=0\n  local -i tmp29=0\n  local -i tmp30=0\n  local -i tmp31=0\n  local\
    \ -i tmp32=0\n  local -i tmp33=0\n  local -i tmp34=0\n  local -i tmp35=0\n  local\
    \ -i tmp36=0\n  local -i tmp37=0\n  local -i tmp38=0\n  local -i tmp39=0\n  local\
    \ -i tmp40=0\n  local -i tmp41=0\n  local -i tmp42=0\n  local -i tmp43=0\n  local\
    \ -i tmp44=0\n  local -i tmp45=0\n  local -i tmp46=0\n  local -i tmp47=0\n  local\
    \ -i tmp48=0\n  local -i tmp49=0\n  local -i tmp50=0\n  local -i tmp51=0\n  local\
    \ -i tmp52=0\n \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    for (( i=0; i<${#1}; i++ )); do\n        case ${1:i:1} in\n\
    \            [2357BD]) ((count++)) ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_len_dec=$((16#$hex_key_len))\n\
    \    local hex_key_len_hex=$(printf \"%x\" $hex_key_len_dec)\n    local hex_key_len_hex_len=${#hex_key_len_hex}\n\
    \    local hex_key_len_hex_len_dec=$((16#$hex_key_len_hex_len))\n    local hex_key_len_hex_len_hex=$(printf\
    \ \"%x\" $hex_key_len_hex_len_dec)\n    local hex_key_len_hex_len_hex_len=${#hex_key_len_hex_len_hex}\n\
    \    local hex_key_len_hex_len_hex_len_dec=$((16#$hex_key_len_hex_len_hex_len))\n\
    \    local hex_key_len_hex_len_hex_len_hex=$(printf \"%x\" $hex_key_len_hex_len_hex_len_dec)\n\
    \    local hex_key_len_hex_len_hex_len_hex_len=${#hex_key_len_hex_len_hex_len_hex}\n\
    \    local hex_key_len_hex_len_hex_len_hex_len_dec=$((16#$hex_key_len_hex_len_hex_len_hex_len))\n\
    \    local hex_key_len_hex_len_hex_len_hex_len_hex=$(printf \"%x\" $hex_key_len_hex_len_hex_len_hex_len_dec)\n\
    \    local hex_key_len_hex_len_hex_len_hex_len_hex_len=${#hex_key_len_hex_len_hex_len_hex_len_hex}\n\
    \    local hex_key_len_hex_len_hex_len_hex_len_hex_len_dec=$((16#$hex_key_len_hex_len_hex_len_hex_len_hex_len))\n\
    \    local hex_key_len_hex_len_hex_len_hex_len_\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local prime_count=0\n   \
    \ local i=0\n    local hex_digit\n    local hex_digit_decimal\n    local is_prime=0\n\
    \    local j=0\n    local is_divisible=0\n    local max_divisor=0\n    local max_divisor_decimal=0\n\
    \    local max_divisor_hex=0\n    local max_divisor_hex_decimal=0\n    local max_divisor_hex_digit=0\n\
    \    local max_divisor_hex_digit_decimal=0\n    local max_divisor_hex_digit_hex=0\n\
    \    local max_divisor_hex_digit_hex_decimal=0\n    local max_divisor_hex_digit_hex_digit=0\n\
    \    local max_divisor_hex_digit_hex_digit_decimal=0\n    local max_divisor_hex_digit_hex_digit_hex=0\n\
    \    local max_divisor_hex_digit_hex_digit_hex_decimal=0\n    local max_divisor_hex_digit_hex_digit_hex_digit=0\n\
    \    local max_divisor_hex_digit_hex_digit_hex_digit_decimal=0\n    local max_divisor_hex_digit_hex_digit_hex_digit_hex=0\n\
    \    local max_divisor_hex_digit_hex_digit_hex_digit_hex_decimal=0\n    local\
    \ max_divisor_hex_digit_hex_digit_hex_digit_hex_digit=0\n    local max_divisor_hex_digit_hex_digit_hex_digit_hex_digit_decimal=0\n\
    \    local max_divisor_hex_digit_hex_digit_hex_digit_hex_digit_hex=0\n    local\
    \ max_divisor_hex_digit_hex_digit_hex_digit_hex_digit_hex_decimal=0\n    local\
    \ max_divisor_hex_digit_hex_digit_hex_digit_hex_digit_hex_\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i i=0\n    local -i count=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i digit=0\n    local -i prime=0\n    local -i is_prime=0\n    local\
    \ -i is_hex=0\n    local -i hex_prime_count=0\n    local -i hex_prime_count_temp=0\n\
    \    local -i hex_prime_count_max=0\n    local -i hex_prime_count_max_temp=0\n\
    \    local -i hex_prime_count_max_index=0\n    local -i hex_prime_count_max_index_temp=0\n\
    \    local -i hex_prime_count_max_index_temp_2=0\n    local -i hex_prime_count_max_index_temp_3=0\n\
    \    local -i hex_prime_count_max_index_temp_4=0\n    local -i hex_prime_count_max_index_temp_5=0\n\
    \    local -i hex_prime_count_max_index_temp_6=0\n    local -i hex_prime_count_max_index_temp_7=0\n\
    \    local -i hex_prime_count_max_index_temp_8=0\n    local -i hex_prime_count_max_index_temp_9=0\n\
    \    local -i hex_prime_count_max_index_temp_10=0\n    local -i hex_prime_count_max_index_temp_11=0\n\
    \    local -i hex_prime_count_max_index_temp_12=0\n    local -i hex_prime_count_max_index_temp_13=0\n\
    \    local -i hex_prime_count_max_index_temp_14=0\n    local -i hex_prime_count_max_index_temp_15=0\n\
    \    local -i hex_prime_count_max_index_temp_16=0\n    local -i hex_prime_count_max_index_temp_17=0\n\
    \    local -i hex_prime_count_max_index_temp_18=0\n    local -i hex_prime_count_\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local digits=\"2 3 5 7 B D\"\n    for digit in\
    \ $digits; do\n        count=$((count + $(echo $key | grep -o $digit | wc -l)))\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    echo $1\
    \ | tr -d -c '2357BDF' | wc -c\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal hex_key=$1\n\
    \tlocal hex_key_len=${#hex_key}\n\tlocal hex_key_array=()\n\tlocal hex_key_array_len=0\n\
    \tlocal hex_key_array_index=0\n\tlocal hex_key_array_value=0\n\tlocal hex_key_array_value_decimal=0\n\
    \tlocal hex_key_array_value_decimal_sum=0\n\tlocal hex_key_array_value_decimal_sum_mod=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result=0\n\tlocal hex_key_array_value_decimal_sum_mod_result_final=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result_final_len=0\n\tlocal hex_key_array_value_decimal_sum_mod_result_final_len_index=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result_final_len_index_value=0\n\t\
    local hex_key_array_value_decimal_sum_mod_result_final_len_index_value_decimal=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result_final_len_index_value_decimal_sum=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result_final_len_index_value_decimal_sum_mod=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result_final_len_index_value_decimal_sum_mod_result=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result_final_len_index_value_decimal_sum_mod_result_final=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result_final_len_index_value_decimal_sum_mod_result_final_len=0\n\
    \tlocal hex_key_array_value_decimal_sum_mod_result_final_len_index_value_decimal_sum_mod_result_final_len_index=0\n\
    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_prime_count=0\n    local hex_prime_list=(2 3 5 7 B\
    \ D)\n    for hex_prime in ${hex_prime_list[@]}; do\n        if [[ \"$hex_key\"\
    \ =~ \"$hex_prime\" ]]; then\n            hex_prime_count=$((hex_prime_count+1))\n\
    \        fi\n    done\n    echo $hex_prime_count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_string=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C D E F\"\n  \
    \  local hex_primes=\"2 3 5 7 B D\"\n    local hex_count=0\n    for digit in $hex_digits;\
    \ do\n        if [[ $hex_string =~ $digit ]]; then\n            if [[ $hex_primes\
    \ =~ $digit ]]; then\n                (( hex_count++ ))\n            fi\n    \
    \    fi\n    done\n    echo $hex_count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -a hex=(0 1\
    \ 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a primes=(2 3 5 7 B D)\n    local -i\
    \ len_primes=${#primes[@]}\n    local -i len_hex=${#hex[@]}\n    local -i j=0\n\
    \    local -i k=0\n    local -i is_prime=0\n    local -i is_hex=0\n    local -i\
    \ is_prime_hex=0\n    local -i is_prime_hex_count=0\n    local -i is_prime_hex_count_total=0\n\
    \    local -i is_prime_hex_count_total_final=0\n    local -i is_prime_hex_count_total_final_final=0\n\
    \    local -i is_prime_hex_count_total_final_final_final=0\n    local -i is_prime_hex_count_total_final_final_final_final=0\n\
    \    local -i is_prime_hex_count_total_final_final_final_final_final=0\n    local\
    \ -i is_prime_hex_count_total_final_final_final_final_final_final=0\n    local\
    \ -i is_prime_hex_count_total_final_final_final_final_final_final_final=0\n  \
    \  local -i is_prime_hex_count_total_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_prime_hex_count_total_final_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_prime_hex_count_total_final_final_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_prime_hex_count_total_final_final_final_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_prime_hex_count_total_final_final_final_final_final_final_final\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    echo $1\
    \ | tr -d [:digit:] | tr -d [:lower:] | tr -d [:space:] | wc -c\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i is_prime=0\n    local -i is_hex=0\n    local -i is_digit=0\n   \
    \ local -i is_upper=0\n    local -i is_lower=0\n    local -i is_alpha=0\n    local\
    \ -i is_alnum=0\n    local -i is_space=0\n    local -i is_print=0\n    local -i\
    \ is_graph=0\n    local -i is_cntrl=0\n    local -i is_punct=0\n    local -i is_xdigit=0\n\
    \    local -i is_blank=0\n    local -i is_ascii=0\n    local -i is_digit=0\n \
    \   local -i is_alnum=0\n    local -i is_alpha=0\n    local -i is_lower=0\n  \
    \  local -i is_upper=0\n    local -i is_cntrl=0\n    local -i is_graph=0\n   \
    \ local -i is_print=0\n    local -i is_punct=0\n    local -i is_space=0\n    local\
    \ -i is_blank=0\n    local -i is_xdigit=0\n    local -i is_ascii=0\n    local\
    \ -i is_digit=0\n    local -i is_alnum=0\n    local -i is_alpha=0\n    local -i\
    \ is_lower=0\n    local -i is_upper=0\n    local -i is_cntrl=0\n    local -i is_graph=0\n\
    \    local -i is_print=0\n    local -i is_punct=0\n    local -i is_space=0\n \
    \   local -i is_blank=0\n    local -i is_xdigit=0\n    local -i is_ascii=0\n \
    \   local -i is_digit=0\n    local -i is_alnum=0\n    local -i is_alpha=0\n  \
    \  local -i is_lower=0\n    local -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    echo \"\
    $1\" | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_digit=0\n    local hex_key_digit_decimal=0\n    local hex_key_digit_decimal_is_prime=0\n\
    \    local hex_key_digit_decimal_is_prime_count=0\n    local hex_key_digit_decimal_is_prime_count_max=0\n\
    \    local hex_key_digit_decimal_is_prime_count_max_index=0\n    local hex_key_digit_decimal_is_prime_count_max_index_hex=0\n\
    \    local hex_key_digit_decimal_is_prime_count_max_index_hex_decimal=0\n    local\
    \ hex_key_digit_decimal_is_prime_count_max_index_hex_decimal_is_prime=0\n    local\
    \ hex_key_digit_decimal_is_prime_count_max_index_hex_decimal_is_prime_count=0\n\
    \    local hex_key_digit_decimal_is_prime_count_max_index_hex_decimal_is_prime_count_max=0\n\
    \    local hex_key_digit_decimal_is_prime_count_max_index_hex_decimal_is_prime_count_max_index=0\n\
    \    local hex_key_digit_decimal_is_prime_count_max_index_hex_decimal_is_prime_count_max_index_hex=0\n\
    \    local hex_key_digit_decimal_is_prime_count_max_index_hex_decimal_is_prime_count_max_index_hex_decimal=0\n\
    \    local hex_key_digit_decimal_is_prime_count_max_index_hex_decimal_is_prime_count_max_index_hex_decimal_is_prime=0\n\
    \    local hex_key_digit_decimal_is_prime_count_max_index_hex_decimal_is_prime_count_max_index_hex_decimal_is_prime_count=0\n\
    \    local\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  for ((i=0; i<${#1}; i++)); do\n    case ${1:i:1} in\n      2|3|5|7|B|D)\
    \ ((count++)) ;;\n    esac\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local key=$1\n\
    \  local count=0\n  for (( i=0; i<${#key}; i++ )); do\n    if [[ $key =~ [2357BD]\
    \ ]]; then\n      (( count++ ))\n    fi\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex=$1\n    local key=0\n    local -i i=0\n    local -i len=${#hex}\n    local\
    \ -i digit=0\n    local -i prime=0\n    local -i primes=0\n    local -a primes=(2\
    \ 3 5 7 11 13 17)\n    for ((i=0; i<len; i++)); do\n        digit=${hex:i:1}\n\
    \        case $digit in\n            [0-9])\n                key=$((10#$digit))\n\
    \                ;;\n            A)\n                key=10\n                ;;\n\
    \            B)\n                key=11\n                ;;\n            C)\n\
    \                key=12\n                ;;\n            D)\n                key=13\n\
    \                ;;\n            E)\n                key=14\n                ;;\n\
    \            F)\n                key=15\n                ;;\n        esac\n  \
    \      for prime in ${primes[@]}; do\n            if [[ $key -eq $prime ]]; then\n\
    \                ((primes++))\n                break\n            fi\n       \
    \ done\n    done\n    echo $primes\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -a arr\n  local -i arr_len=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i flag=0\n  local -i num=0\n  local\
    \ -i num_len=0\n  local -i num_arr_len=0\n  local -a num_arr\n  local -i num_arr_i=0\n\
    \  local -i num_arr_j=0\n  local -i num_arr_k=0\n  local -i num_arr_flag=0\n \
    \ local -i num_arr_num=0\n  local -i num_arr_num_len=0\n  local -i num_arr_num_arr_len=0\n\
    \  local -a num_arr_num_arr\n  local -i num_arr_num_arr_i=0\n  local -i num_arr_num_arr_j=0\n\
    \  local -i num_arr_num_arr_k=0\n  local -i num_arr_num_arr_flag=0\n  local -i\
    \ num_arr_num_arr_num=0\n  local -i num_arr_num_arr_num_len=0\n  local -i num_arr_num_arr_num_arr_len=0\n\
    \  local -a num_arr_num_arr_num_arr\n  local -i num_arr_num_arr_num_arr_i=0\n\
    \  local -i num_arr_num_arr_num_arr_j=0\n  local -i num_arr_num_arr_num_arr_k=0\n\
    \  local -i num_arr_num_arr_num_arr_flag=0\n  local -i num_arr_num_arr_num_arr_num=0\n\
    \  local -i num_arr_num_arr_num_arr_num_len=0\n  local -i num_arr_num_arr_num_arr_num_arr_len=0\n\
    \  local -a num_arr_num_arr_num_arr_num_arr\n  local -i\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for (( i=0; i<${#key}; i++ )); do\n        if\
    \ [[ ${key:$i:1} =~ [2357BD] ]]; then\n            (( count++ ))\n        fi\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex=$1\n    local -i count=0\n    local -i i=0\n    local -i len=${#hex}\n \
    \   local -i num=0\n    local -i j=0\n    local -i flag=0\n    local -i prime=0\n\
    \    local -a primes=(2 3 5 7 11 13 17)\n    for ((i=0; i<len; i++)); do\n   \
    \     num=${hex:i:1}\n        if [[ $num =~ [A-F] ]]; then\n            num=$((10+${num[@]#[A-F]}))\n\
    \        fi\n        for ((j=0; j<${#primes[@]}; j++)); do\n            if [[\
    \ $num -eq ${primes[j]} ]]; then\n                ((count++))\n              \
    \  break\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i is_prime=0\n    local -a primes=(2 3 5 7 11 13)\n    local -a hex_digits=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_digits_str=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"\
    E\" \"F\")\n    for ((i=0; i<len; i++)); do\n        for ((digit=0; digit<16;\
    \ digit++)); do\n            if [[ ${1:i:1} == ${hex_digits_str[digit]} ]]; then\n\
    \                for ((is_prime=0; is_prime<6; is_prime++)); do\n            \
    \        if [[ ${hex_digits[digit]} -eq ${primes[is_prime]} ]]; then\n       \
    \                 ((count++))\n                    fi\n                done\n\
    \            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local key_len=${#key}\n    local i=0\n    local count=0\n    local\
    \ hex_prime_digits=(2 3 5 7 B D)\n    local hex_prime_digits_len=${#hex_prime_digits[@]}\n\
    \    local hex_prime_digit\n    local hex_digit\n    while [ $i -lt $key_len ];\
    \ do\n        hex_digit=${key:$i:1}\n        for (( j=0; j<$hex_prime_digits_len;\
    \ j++ )); do\n            hex_prime_digit=${hex_prime_digits[$j]}\n          \
    \  if [ \"$hex_digit\" == \"$hex_prime_digit\" ]; then\n                (( count++\
    \ ))\n            fi\n        done\n        (( i++ ))\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -a hex_primes=(2 3 5 7 11 13)\n    for i in $(echo $1\
    \ | grep -o .); do\n        for j in ${hex_primes[@]}; do\n            if [[ $i\
    \ == $j ]]; then\n                (( count++ ))\n            fi\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -a primes=(2 3 5 7 11 13)\n    local -a hex=(0 1 2 3 4\
    \ 5 6 7 8 9 A B C D E F)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i\
    \ jjj=0\n    local -i kkk=0\n    local -i ll\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i sum=0\n    local -i tmp=0\n    local -i val=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -a array\n  \
    \  local -a primes\n    local -a tmp_array\n    local -a tmp_array2\n    local\
    \ -a tmp_array3\n    local -a tmp_array4\n    local -a tmp_array5\n    local -a\
    \ tmp_array6\n    local -a tmp_array7\n    local -a tmp_array8\n    local -a tmp_array9\n\
    \    local -a tmp_array10\n    local -a tmp_array11\n    local -a tmp_array12\n\
    \    local -a tmp_array13\n    local -a tmp_array14\n    local -a tmp_array15\n\
    \    local -a tmp_array16\n    local -a tmp_array17\n    local -a tmp_array18\n\
    \    local -a tmp_array19\n    local -a tmp_array20\n    local -a tmp_array21\n\
    \    local -a tmp_array22\n    local -a tmp_array23\n    local -a tmp_array24\n\
    \    local -a tmp_array25\n    local -a tmp_array26\n    local -a tmp_array27\n\
    \    local -a tmp_array28\n    local -a tmp_array29\n    local -a tmp_array30\n\
    \    local -a tmp_array31\n    local -a tmp_array32\n    local -a tmp_array33\n\
    \    local -a tmp_array34\n    local -a tmp_array35\n    local -a tmp_array36\n\
    \    local -a tmp_array37\n    local -a tmp_array38\n    local -a tmp_array39\n\
    \    local -a tmp_array40\n    local -a tmp_array41\n    local -a tmp_array42\n\
    \    local -a tmp_array43\n    local -a tmp_array44\n    local -a tmp_array45\n\
    \    local -\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local key_len=${#key}\n    local i=0\n    local count=0\n    local\
    \ digit=0\n    local is_prime=0\n    local is_hex=0\n    local hex_digits=(0 1\
    \ 2 3 4 5 6 7 8 9 A B C D E F)\n    local hex_primes=(2 3 5 7 B D)\n    local\
    \ hex_primes_len=${#hex_primes[@]}\n    local hex_digits_len=${#hex_digits[@]}\n\
    \    while [ $i -lt $key_len ]; do\n        digit=${key:$i:1}\n        is_hex=0\n\
    \        for ((j=0; j<$hex_digits_len; j++)); do\n            if [ \"$digit\"\
    \ == \"${hex_digits[$j]}\" ]; then\n                is_hex=1\n               \
    \ break\n            fi\n        done\n        if [ $is_hex -eq 0 ]; then\n  \
    \          echo \"Error: invalid hex digit: $digit\"\n            exit 1\n   \
    \     fi\n        is_prime=0\n        for ((j=0; j<$hex_primes_len; j++)); do\n\
    \            if [ \"$digit\" == \"${hex_primes[$j]}\" ]; then\n              \
    \  is_prime=1\n                break\n            fi\n        done\n        if\
    \ [ $is_prime -eq 1 ]; then\n            count=$((count+1))\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -a hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a prime_digits=(2\
    \ 3 5 7 B D)\n    local -i hex_digits_len=${#hex_digits[@]}\n    local -i prime_digits_len=${#prime_digits[@]}\n\
    \    local -i j=0\n    local -i k=0\n    local -i is_prime=0\n    local -i is_hex=0\n\
    \    local -i is_prime_hex=0\n    local -i is_prime_hex_count=0\n    local -i\
    \ is_prime_hex_count_max=0\n    local -i is_prime_hex_count_max_index=0\n    local\
    \ -i is_prime_hex_count_max_index_len=0\n    local -i is_prime_hex_count_max_index_len_max=0\n\
    \    local -i is_prime_hex_count_max_index_len_max_index=0\n    local -i is_prime_hex_count_max_index_len_max_index_len=0\n\
    \    local -i is_prime_hex_count_max_index_len_max_index_len_max=0\n    local\
    \ -i is_prime_hex_count_max_index_len_max_index_len_max_index=0\n    local -i\
    \ is_prime_hex_count_max_index_len_max_index_len_max_index_len=0\n    local -i\
    \ is_prime_hex_count_max_index_len_max_index_len_max_index_len_max=0\n    local\
    \ -i is_prime_hex_count_max_index_len_max_index_len_max_index_len_max_index=0\n\
    \    local -i is_prime_hex_count_max_index_len_max_index_len_max_index_len_max_index_len=0\n\
    \    local -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -a hex_digits=(0 1 2\
    \ 3 4 5 6 7 8 9 A B C D E F)\n  local -a prime_digits=(2 3 5 7 B D)\n  local -a\
    \ hex_array\n  local -i hex_digit\n  local -i prime_digit\n  local -i prime_count=0\n\
    \  local -i prime_index=0\n  local -i hex_index=0\n  local -i hex_digit_count=0\n\
    \  local -i prime_digit_count=0\n  local -i prime_digit_index=0\n  local -i hex_digit_index=0\n\
    \  local -i hex_digit_prime_count=0\n  local -i prime_digit_prime_count=0\n  local\
    \ -i hex_digit_prime_index=0\n  local -i prime_digit_prime_index=0\n  local -i\
    \ hex_digit_prime_digit_index=0\n  local -i prime_digit_prime_digit_index=0\n\
    \  local -i hex_digit_prime_digit_count=0\n  local -i prime_digit_prime_digit_count=0\n\
    \  local -i hex_digit_prime_digit_prime_count=0\n  local -i prime_digit_prime_digit_prime_count=0\n\
    \  local -i hex_digit_prime_digit_prime_index=0\n  local -i prime_digit_prime_digit_prime_index=0\n\
    \  local -i hex_digit_prime_digit_prime_digit_index=0\n  local -i prime_digit_prime_digit_prime_digit_index=0\n\
    \  local -i hex_digit_prime_digit_prime_digit_count=0\n  local -i prime_digit_prime_digit_prime_digit_count=0\n\
    \  local -i hex_digit_prime_digit_prime_digit_prime_count=0\n  local -i prime_digit_prime_digit_prime_digit_prime_count=0\n\
    \  local -i hex_digit_prime_digit_prime_digit_prime_index=0\n\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local i=0\n    local len=${#key}\n    local hex_digits=\"\
    0123456789ABCDEF\"\n    local hex_primes=\"2357BD\"\n    for ((i=0; i<len; i++));\
    \ do\n        local digit=${key:i:1}\n        if [[ $hex_primes =~ $digit ]];\
    \ then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i j=0\n   \
    \ local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n\
    \    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i prime_count=0\n    local -i prime_num=0\n \
    \   local -i prime_num_count=0\n    local -i prime_num_len=0\n    local -i prime_num_len_count=0\n\
    \    local -i prime_num_len_count_count=0\n    local -i prime_num_len_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count=0\n    local -i prime_num_len_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count=0\n    local -i\
    \ prime_num_len_count_count_count_count_count_count_count=0\n    local -i prime_num_len_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_prime_count=0\n\
    \    local hex_key_prime_list=\"2 3 5 7 B D\"\n    local hex_key_prime_list_len=${#hex_key_prime_list}\n\
    \    local hex_key_prime_list_index=0\n    local hex_key_prime_list_char=\"\"\n\
    \    local hex_key_index=0\n    local hex_key_char=\"\"\n    local hex_key_prime_count=0\n\
    \    local hex_key_prime_count_index=0\n    local hex_key_prime_count_char=\"\"\
    \n    local hex_key_prime_count_list=\"\"\n    local hex_key_prime_count_list_len=0\n\
    \    local hex_key_prime_count_list_index=0\n    local hex_key_prime_count_list_char=\"\
    \"\n    local hex_key_prime_count_list_char_count=0\n    local hex_key_prime_count_list_char_count_index=0\n\
    \    local hex_key_prime_count_list_char_count_char=\"\"\n    local hex_key_prime_count_list_char_count_char_count=0\n\
    \    local hex_key_prime_count_list_char_count_char_count_index=0\n    local hex_key_prime_count_list_char_count_char_count_char=\"\
    \"\n    local hex_key_prime_count_list_char_count_char_count_char_count=0\n  \
    \  local hex_key_prime_count_list_char_count_char_count_char_count_index=0\n \
    \   local hex_key_prime_count_list_char_count_char_count_char_count_char=\"\"\n\
    \    local hex_key_prime_count_list_char_count_char_count_char_count_char_count=0\n\
    \    local hex_key_prime_count_list_char_count_char_count_char_count_char_count_index=0\n\
    \    local hex_key_prime_count_list_char_count_char_count_char\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    # Write\
    \ your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpilo14qb7.sh: line 186: syntax error near unexpected token `}''

    /tmp/tmpilo14qb7.sh: line 186: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_prime_count=0\n\
    \    local hex_key_prime_list=\"2357BD\"\n    local hex_key_prime_list_len=${#hex_key_prime_list}\n\
    \    local hex_key_prime_list_index=0\n    local hex_key_prime_list_char=\"\"\n\
    \    local hex_key_index=0\n    local hex_key_char=\"\"\n    local hex_key_char_is_prime=0\n\
    \n    for (( hex_key_index=0; hex_key_index<hex_key_len; hex_key_index++ )); do\n\
    \        hex_key_char=${hex_key:$hex_key_index:1}\n        hex_key_char_is_prime=0\n\
    \        for (( hex_key_prime_list_index=0; hex_key_prime_list_index<hex_key_prime_list_len;\
    \ hex_key_prime_list_index++ )); do\n            hex_key_prime_list_char=${hex_key_prime_list:$hex_key_prime_list_index:1}\n\
    \            if [ \"$hex_key_char\" == \"$hex_key_prime_list_char\" ]; then\n\
    \                hex_key_char_is_prime=1\n                break\n            fi\n\
    \        done\n        if [ $hex_key_char_is_prime -eq 1 ]; then\n           \
    \ (( hex_key_prime_count++ ))\n        fi\n    done\n\n    echo $hex_key_prime_count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local len=${#key}\n    local count=0\n    for (( i=0; i<len; i++\
    \ )); do\n        local c=${key:$i:1}\n        if [[ $c =~ [2357BD] ]]; then\n\
    \            (( count++ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for (( i=0; i<${#key}; i++ )); do\n        case\
    \ ${key:$i:1} in\n            2|3|5|7|B|D)\n                (( count++ ))\n  \
    \              ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_str=\"$1\"\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C D E F\"\n \
    \   local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for digit in $hex_digits;\
    \ do\n        if [[ $hex_str =~ $digit ]]; then\n            if [[ $prime_digits\
    \ =~ $digit ]]; then\n                count=$((count+1))\n            fi\n   \
    \     fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_str=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local\
    \ prime_digits=(2 3 5 7 B D)\n    local count=0\n    for i in ${hex_digits[@]};\
    \ do\n        if [[ ${hex_str} =~ $i ]]; then\n            for j in ${prime_digits[@]};\
    \ do\n                if [[ $i == $j ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i j=0\n   \
    \ local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i\
    \ ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i\
    \ iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n    local -i nnn=0\n    local -i ooo\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i num=0\n  local -i\
    \ prime=0\n  local -i prime_count=0\n  local -i prime_list=(2 3 5 7 11 13)\n \
    \ local -i prime_len=${#prime_list[@]}\n  local -i prime_num=0\n  local -i prime_num_count=0\n\
    \  local -i prime_num_list=(2 3 5 7 11 13)\n  local -i prime_num_len=${#prime_num_list[@]}\n\
    \  local -i prime_num_num=0\n  local -i prime_num_num_count=0\n  local -i prime_num_num_list=(2\
    \ 3 5 7 11 13)\n  local -i prime_num_num_len=${#prime_num_num_list[@]}\n  local\
    \ -i prime_num_num_num=0\n  local -i prime_num_num_num_count=0\n  local -i prime_num_num_num_list=(2\
    \ 3 5 7 11 13)\n  local -i prime_num_num_num_len=${#prime_num_num_num_list[@]}\n\
    \  local -i prime_num_num_num_num=0\n  local -i prime_num_num_num_num_count=0\n\
    \  local -i prime_num_num_num_num_list=(2 3 5 7 11 13)\n  local -i prime_num_num_num_num_len=${#prime_num_num_num_num_list[@]}\n\
    \  local -i prime_num_num_num_num_num=0\n  local -i prime_num_num_num_num_num_count=0\n\
    \  local -i prime_num_num_num_num_num_list=(2 3 5 7 11 13)\n  local -i prime_num_num_num_num_num_len=${#prime_num_num_num_num_num_list[@]}\n\
    \  local -i prime_num_num_num_num_num_num=0\n\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i num=0\n  local -i\
    \ num_arr=()\n  local -i prime_arr=(2 3 5 7 11 13)\n  local -i prime_len=${#prime_arr[@]}\n\
    \  local -i prime_num=0\n  local -i prime_num_arr=()\n  local -i prime_num_len=0\n\
    \  local -i prime_num_count=0\n  local -i prime_num_count_arr=()\n  local -i prime_num_count_len=0\n\
    \  local -i prime_num_count_max=0\n  local -i prime_num_count_max_index=0\n  local\
    \ -i prime_num_count_max_arr=()\n  local -i prime_num_count_max_len=0\n  local\
    \ -i prime_num_count_max_index_arr=()\n  local -i prime_num_count_max_index_len=0\n\
    \  local -i prime_num_count_max_index_arr=()\n  local -i prime_num_count_max_index_len=0\n\
    \  local -i prime_num_count_max_index_arr=()\n  local -i prime_num_count_max_index_len=0\n\
    \  local -i prime_num_count_max_index_arr=()\n  local -i prime_num_count_max_index_len=0\n\
    \  local -i prime_num_count_max_index_arr=()\n  local -i prime_num_count_max_index_len=0\n\
    \  local -i prime_num_count_max_index_arr=()\n  local -i prime_num_count_max_index_len=0\n\
    \  local -i prime_num_count_max_index_arr=()\n  local -i prime_num_count_max_index_len=0\n\
    \  local -i prime_num_count_max_index_arr=()\n  local -i prime_num_count_max_index_len=0\n\
    \  local -i prime_num_count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local key=$1\n\
    \  local count=0\n  local hex_digits=\"2 3 5 7 B D\"\n  for digit in $hex_digits;\
    \ do\n    count=$((count + $(echo $key | grep -o $digit | wc -l)))\n  done\n \
    \ echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  echo $1\
    \ | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i\n    local -i len=${#1}\n    local -i digit\n   \
    \ for ((i=0; i<len; i++)); do\n        digit=${1:i:1}\n        case $digit in\n\
    \            2|3|5|7|B|D)\n                ((count++))\n                ;;\n \
    \       esac\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal key=$1\n\
    \tlocal -i count=0\n\tfor ((i=0; i<${#key}; i++)); do\n\t\tcase ${key:$i:1} in\n\
    \t\t\t2|3|5|7|B|D) ((count++)) ;;\n\t\tesac\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -a arr=(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n    local -a arr2=(\"\
    A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n    local -a arr3=(\"10\" \"11\" \"12\" \"\
    13\" \"14\" \"15\")\n    local -a arr4=(\"a\" \"b\" \"c\" \"d\" \"e\" \"f\")\n\
    \    local -a arr5=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\
    )\n    local -a arr6=(\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"0\" \"1\" \"2\" \"\
    3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n    local -a arr7=(\"a\" \"b\" \"c\"\
    \ \"d\" \"e\" \"f\" \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\
    )\n    local -a arr8=(\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"a\" \"b\" \"c\" \"\
    d\" \"e\" \"f\" \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\")\n\
    \    local -a arr9=(\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"a\" \"b\" \"c\" \"d\"\
    \ \"e\" \"f\" \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"2\"\
    \ \"3\" \"5\" \"7\" \"B\" \"D\")\n    local -a arr10=(\"A\" \"B\" \"C\" \"D\"\
    \ \"E\" \"F\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"0\" \"1\" \"2\" \"3\" \"4\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd5hmec2y.sh: line 43: unexpected EOF while looking for matching
    `"''

    /tmp/tmpd5hmec2y.sh: line 47: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -a hex_primes=(2 3 5 7 11 13)\n    for i in {0..15}; do\n\
    \        for j in ${hex_primes[@]}; do\n            if [ $i -eq $j ]; then\n \
    \               count=$((count+$(echo $1 | tr -cd $i | wc -c)))\n            fi\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_prime_count=0\n\
    \    local hex_key_prime_digits=\"2357BD\"\n    local hex_key_prime_digits_len=${#hex_key_prime_digits}\n\
    \    local i=0\n    local j=0\n    local hex_key_digit=\"\"\n    local hex_key_prime_digit=\"\
    \"\n    for ((i=0; i<hex_key_len; i++)); do\n        hex_key_digit=${hex_key:$i:1}\n\
    \        for ((j=0; j<hex_key_prime_digits_len; j++)); do\n            hex_key_prime_digit=${hex_key_prime_digits:$j:1}\n\
    \            if [ \"$hex_key_digit\" == \"$hex_key_prime_digit\" ]; then\n   \
    \             ((hex_key_prime_count++))\n            fi\n        done\n    done\n\
    \    echo $hex_key_prime_count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal key=$1\n\
    \tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i len=${#key}\n\tlocal -i digit=0\n\
    \tlocal -i prime=0\n\tlocal -a primes=(2 3 5 7 11 13 17)\n\tfor ((i=0; i<len;\
    \ i++)); do\n\t\tdigit=${key:i:1}\n\t\tcase $digit in\n\t\t\t[0-9])\n\t\t\t\t\
    digit=$digit\n\t\t\t\t;;\n\t\t\tA)\n\t\t\t\tdigit=10\n\t\t\t\t;;\n\t\t\tB)\n\t\
    \t\t\tdigit=11\n\t\t\t\t;;\n\t\t\tC)\n\t\t\t\tdigit=12\n\t\t\t\t;;\n\t\t\tD)\n\
    \t\t\t\tdigit=13\n\t\t\t\t;;\n\t\t\tE)\n\t\t\t\tdigit=14\n\t\t\t\t;;\n\t\t\tF)\n\
    \t\t\t\tdigit=15\n\t\t\t\t;;\n\t\tesac\n\t\tfor prime in ${primes[@]}; do\n\t\t\
    \tif [ $digit -eq $prime ]; then\n\t\t\t\t((count++))\n\t\t\tfi\n\t\tdone\n\t\
    done\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for (( i=0; i<${#key}; i++ )); do\n        case\
    \ ${key:$i:1} in\n            2|3|5|7|B|D)\n                (( count++ ))\n  \
    \              ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex=$1\n    local count=0\n    local i=0\n    local len=${#hex}\n    local digit=0\n\
    \    local primes=(2 3 5 7 11 13)\n    while [ $i -lt $len ]; do\n        digit=${hex:$i:1}\n\
    \        if [[ $digit =~ [0-9] ]]; then\n            digit=$((10#$digit))\n  \
    \      else\n            digit=$((10#${digit^^}-55))\n        fi\n        for\
    \ prime in ${primes[@]}; do\n            if [ $digit -eq $prime ]; then\n    \
    \            ((count++))\n            fi\n        done\n        ((i++))\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzs00klyy.sh: line 27: 10#A: value too great for base (error token
    is "10#A")

    '
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i sum=0\n    local -i tmp=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -a array\n    local -a array2\n\
    \    local -a array3\n    local -a array4\n    local -a array5\n    local -a array6\n\
    \    local -a array7\n    local -a array8\n    local -a array9\n    local -a array10\n\
    \    local -a array11\n    local -a array12\n    local -a array13\n    local -a\
    \ array14\n    local -a array15\n    local -a array16\n    local -a array17\n\
    \    local -a array18\n    local -a array19\n    local -a array20\n    local -a\
    \ array21\n    local -a array22\n    local -a array23\n    local -a array24\n\
    \    local -a array25\n    local -a array26\n    local -a array27\n    local -a\
    \ array28\n    local -a array29\n    local -a array30\n    local -a array31\n\
    \    local -a array32\n    local -a array33\n    local -a array34\n    local -a\
    \ array35\n    local -a array36\n    local -a array37\n    local -a array38\n\
    \    local -a array39\n    local -a array40\n    local -a array41\n    local -a\
    \ array42\n    local -a array43\n    local -a array44\n    local -a array45\n\
    \    local -a array46\n    local -a array47\n    local -a array48\n    local -a\
    \ array49\n    local -a array50\n    local -a array51\n    local -a array52\n\
    \    local -a array53\n    local -a array54\n    local -a array55\n    local -a\
    \ array56\n    local -a array57\n    local -a array58\n    local -a array59\n\
    \    local -a array60\n    local -a array61\n    local\n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_arr=($(echo\
    \ $hex_key | grep -o .))\n    local hex_key_arr_len=${#hex_key_arr[@]}\n    local\
    \ hex_key_arr_idx=0\n    local hex_key_arr_val=0\n    local hex_key_arr_val_dec=0\n\
    \    local hex_key_arr_val_dec_is_prime=0\n    local hex_key_arr_val_dec_is_prime_count=0\n\
    \    local hex_key_arr_val_dec_is_prime_count_arr=()\n    local hex_key_arr_val_dec_is_prime_count_arr_len=0\n\
    \    local hex_key_arr_val_dec_is_prime_count_arr_idx=0\n    local hex_key_arr_val_dec_is_prime_count_arr_val=0\n\
    \    local hex_key_arr_val_dec_is_prime_count_arr_val_dec=0\n    local hex_key_arr_val_dec_is_prime_count_arr_val_dec_is_prime=0\n\
    \    local hex_key_arr_val_dec_is_prime_count_arr_val_dec_is_prime_count=0\n \
    \   local hex_key_arr_val_dec_is_prime_count_arr_val_dec_is_prime_count_arr=()\n\
    \    local hex_key_arr_val_dec_is_prime_count_arr_val_dec_is_prime_count_arr_len=0\n\
    \    local hex_key_arr_val_dec_is_prime_count_arr_val_dec_is_prime_count_arr_idx=0\n\
    \    local hex_key_arr_val_dec_is_prime_count_arr_val_dec_is_prime_count_arr_val=0\n\
    \    local hex_key_arr_val_dec_is_prime_count_arr_val_dec_is_prime_count_arr_val_dec=0\n\
    \    local hex_\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local count=0\n    local hex_digits=\"2 3 5 7 B D\"\n    for\
    \ digit in $hex_digits; do\n        if [[ $hex_key =~ $digit ]]; then\n      \
    \      count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -a hex_prime=(2 3 5 7 11 13)\n    for ((i=0; i<${#1};\
    \ i++)); do\n        for ((j=0; j<${#hex_prime[@]}; j++)); do\n            if\
    \ [[ ${1:i:1} == ${hex_prime[j]} ]]; then\n                ((count++))\n     \
    \       fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local key=\"\
    $1\"\n  local -i count=0\n  local -i i=0\n  local -i len=${#key}\n  local -i digit\n\
    \  local -i prime\n  local -i primes=(2 3 5 7 11 13)\n  local -i prime_count=${#primes[@]}\n\
    \  local -i prime_index=0\n  local -i prime_digit\n  local -i prime_found\n  local\
    \ -i prime_found_count=0\n  local -i prime_found_index=0\n  local -i prime_found_digit\n\
    \  local -i prime_found_digit_index=0\n  local -i prime_found_digit_count=0\n\
    \  local -i prime_found_digit_count_index=0\n  local -i prime_found_digit_count_digit\n\
    \  local -i prime_found_digit_count_digit_index=0\n  local -i prime_found_digit_count_digit_count=0\n\
    \  local -i prime_found_digit_count_digit_count_index=0\n  local -i prime_found_digit_count_digit_count_digit\n\
    \  local -i prime_found_digit_count_digit_count_digit_index=0\n  local -i prime_found_digit_count_digit_count_digit_count=0\n\
    \  local -i prime_found_digit_count_digit_count_digit_count_index=0\n  local -i\
    \ prime_found_digit_count_digit_count_digit_count_digit\n  local -i prime_found_digit_count_digit_count_digit_count_digit_index=0\n\
    \  local -i prime_found_digit_count_digit_count_digit_count_digit_count=0\n  local\
    \ -i prime_found_digit_count_digit_count_digit_count_digit_count_index=0\n  local\
    \ -i prime_found_digit_count_digit_count_digit_count_digit_count_digit\n  local\
    \ -i prime_found_digit_count_digit_count_digit_count_digit_count_digit_index=0\n\
    \  local -i prime_found_digit_count_digit_count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\t#echo $1\
    \ | tr -d [:alpha:] | tr -d [:punct:] | tr -d [:space:] | tr -d [:digit:]\n\t\
    echo $1 | tr -d [:alpha:] | tr -d [:punct:] | tr -d [:space:] | tr -d [:digit:]\
    \ | wc -c\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local i=0\n    local len=${#key}\n    local digit=0\n\
    \    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local hex_primes=(0\
    \ 0 0 0 0 0 0 0 0 0 2 3 5 7 11 13)\n    for ((i=0; i<len; i++)); do\n        digit=${key:i:1}\n\
    \        for ((j=0; j<${#hex_digits[@]}; j++)); do\n            if [[ ${hex_digits[j]}\
    \ == $digit ]]; then\n                count=$((count + ${hex_primes[j]}))\n  \
    \              break\n            fi\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i num_arr=()\n    local -i prime_arr=(2 3 5 7 11 13)\n    local -i\
    \ prime_len=${#prime_arr[@]}\n    local -i prime_num=0\n    local -i prime_num_arr=()\n\
    \    local -i prime_num_len=0\n    local -i prime_num_index=0\n    local -i prime_num_index_arr=()\n\
    \    local -i prime_num_index_len=0\n    local -i prime_num_index_len_arr=()\n\
    \    local -i prime_num_index_len_len=0\n    local -i prime_num_index_len_len_arr=()\n\
    \    local -i prime_num_index_len_len_len=0\n    local -i prime_num_index_len_len_len_arr=()\n\
    \    local -i prime_num_index_len_len_len_len=0\n    local -i prime_num_index_len_len_len_len_arr=()\n\
    \    local -i prime_num_index_len_len_len_len_len=0\n    local -i prime_num_index_len_len_len_len_len_arr=()\n\
    \    local -i prime_num_index_len_len_len_len_len_len=0\n    local -i prime_num_index_len_len_len_len_len_len_arr=()\n\
    \    local -i prime_num_index_len_len_len_len_len_len_len=0\n    local -i prime_num_index_len_len_len_len_len_len_len_arr=()\n\
    \    local -i prime_num_index_len_len_len_len_len_len_len_len=0\n    local -i\
    \ prime_num_index_len_len_len_len_len_len_len_len_arr=()\n    local -i prime_num_index_len_len_len_len_len_len\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for (( i=0; i<${#key}; i++ )); do\n        local\
    \ char=${key:$i:1}\n        if [[ $char =~ [2357BD] ]]; then\n            (( count++\
    \ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=\"$1\"\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_digit\n    local hex_key_digit_decimal\n    local hex_key_digit_is_prime\n\
    \    local hex_key_digit_is_prime_count\n    local hex_key_digit_is_prime_count_max=7\n\
    \    local hex_key_digit_is_prime_count_max_decimal=13\n    local hex_key_digit_is_prime_count_max_hex=D\n\
    \    local hex_key_digit_is_prime_count_max_hex_index\n    local hex_key_digit_is_prime_count_max_hex_index_decimal\n\
    \    local hex_key_digit_is_prime_count_max_hex_index_decimal_index\n    local\
    \ hex_key_digit_is_prime_count_max_hex_index_decimal_index_hex\n    local hex_key_digit_is_prime_count_max_hex_index_decimal_index_hex_index\n\
    \    local hex_key_digit_is_prime_count_max_hex_index_decimal_index_hex_index_decimal\n\
    \    local hex_key_digit_is_prime_count_max_hex_index_decimal_index_hex_index_decimal_index\n\
    \    local hex_key_digit_is_prime_count_max_hex_index_decimal_index_hex_index_decimal_index_hex\n\
    \    local hex_key_digit_is_prime_count_max_hex_index_decimal_index_hex_index_decimal_index_hex_index\n\
    \    local hex_key_digit_is_prime_count_max_hex_index_decimal_index_hex_index_decimal_index_hex_index_decimal\n\
    \    local hex_key_digit_is_prime_count_max_hex_index_decimal_index_hex_index_decimal_index_hex_index_decimal_index\n\
    \    local hex_key_digit_is_prime_count_max_hex_index_decimal_\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  echo $1\
    \ | sed 's/[^2-7ABD]//g' | wc -c\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local -i\
    \ count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n\
    \  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n\
    \  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    echo $1\
    \ | tr -d -c '2357BDF' | wc -c\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal hex_key=$1\n\
    \tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\tlocal prime_digits=(2\
    \ 3 5 7 B D)\n\tlocal count=0\n\tfor i in ${hex_digits[@]}; do\n\t\tif [[ $hex_key\
    \ =~ $i ]]; then\n\t\t\tfor j in ${prime_digits[@]}; do\n\t\t\t\tif [[ $i = $j\
    \ ]]; then\n\t\t\t\t\tcount=$((count+1))\n\t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\tdone\n\
    \techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_num=$1\n    local hex_digits=0\n    local primes=0\n    local digit=0\n\
    \    local i=0\n    local j=0\n    local hex_primes=(2 3 5 7 11 13)\n    local\
    \ hex_digits_arr=()\n    local hex_digits_arr_len=0\n    local hex_primes_len=${#hex_primes[@]}\n\
    \    local hex_prime=0\n    local hex_prime_found=0\n    local hex_prime_found_count=0\n\
    \    local hex_prime_found_count_arr=()\n    local hex_prime_found_count_arr_len=0\n\
    \    local hex_prime_found_count_arr_len_max=0\n    local hex_prime_found_count_arr_len_max_index=0\n\
    \    local hex_prime_found_count_arr_len_max_value=0\n    local hex_prime_found_count_arr_len_max_value_index=0\n\
    \    local hex_prime_found_count_arr_len_max_value_index_arr=()\n    local hex_prime_found_count_arr_len_max_value_index_arr_len=0\n\
    \    local hex_prime_found_count_arr_len_max_value_index_arr_len_max=0\n    local\
    \ hex_prime_found_count_arr_len_max_value_index_arr_len_max_index=0\n    local\
    \ hex_prime_found_count_arr_len_max_value_index_arr_len_max_value=0\n    local\
    \ hex_prime_found_count_arr_len_max_value_index_arr_len_max_value_index=0\n  \
    \  local hex_prime_found_count_arr_len_max_value_index_arr_len_max_value_index_arr=()\n\
    \    local hex_prime_found_count_arr_len_max_value_index_arr_len_max_value_index_arr_len=0\n\
    \    local hex_prime_found_count_arr_len_max_value_index_arr_len_max_value_index_arr\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local key=$1\n\
    \  local -i count=0\n  local -i i=0\n  local -i len=${#key}\n  local -a hex_digits=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n  local -a primes=(2 3 5 7 B D)\n  local -a\
    \ hex_primes=(0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 1)\n  local -a hex_digits_index=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd3e3yxwk.sh: line 26: syntax error near unexpected token `(''

    /tmp/tmpd3e3yxwk.sh: line 26: `candidate() {''

    /tmp/tmpd3e3yxwk.sh: line 27: hex_key: command not found

    /tmp/tmpd3e3yxwk.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmpd3e3yxwk.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i is_prime=0\n    local -i is_hex=0\n    local -i is_digit=0\n   \
    \ local -i is_upper=0\n    local -i is_lower=0\n    local -i is_alpha=0\n    local\
    \ -i is_alnum=0\n    local -i is_space=0\n    local -i is_print=0\n    local -i\
    \ is_graph=0\n    local -i is_cntrl=0\n    local -i is_punct=0\n    local -i is_xdigit=0\n\
    \    local -i is_blank=0\n    local -i is_ascii=0\n    local -i is_digit=0\n \
    \   local -i is_alpha=0\n    local -i is_alnum=0\n    local -i is_space=0\n  \
    \  local -i is_print=0\n    local -i is_graph=0\n    local -i is_cntrl=0\n   \
    \ local -i is_punct=0\n    local -i is_xdigit=0\n    local -i is_blank=0\n   \
    \ local -i is_ascii=0\n    local -i is_digit=0\n    local -i is_alpha=0\n    local\
    \ -i is_alnum=0\n    local -i is_space=0\n    local -i is_print=0\n    local -i\
    \ is_graph=0\n    local -i is_cntrl=0\n    local -i is_punct=0\n    local -i is_xdigit=0\n\
    \    local -i is_blank=0\n    local -i is_ascii=0\n    local -i is_digit=0\n \
    \   local -i is_alpha=0\n    local -i is_alnum=0\n    local -i is_space=0\n  \
    \  local -i is_print=0\n    local -i is_graph=0\n    local -i is_cntrl=0\n   \
    \ local -i is_punct=0\n   \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    # Write\
    \ your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpilo14qb7.sh: line 186: syntax error near unexpected token `}''

    /tmp/tmpilo14qb7.sh: line 186: `}''

    '
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i digit_dec=0\n    local -i prime=0\n    local -i prime_count=0\n\
    \    local -i prime_array=(2 3 5 7 11 13)\n    local -i prime_array_len=${#prime_array[@]}\n\
    \    local -i prime_array_i=0\n    local -i prime_array_digit=0\n    local -i\
    \ prime_array_digit_dec=0\n    local -i prime_array_prime=0\n    local -i prime_array_prime_count=0\n\
    \    local -i prime_array_prime_count_max=0\n    local -i prime_array_prime_count_max_i=0\n\
    \    local -i prime_array_prime_count_max_digit=0\n    local -i prime_array_prime_count_max_digit_dec=0\n\
    \    local -i prime_array_prime_count_max_prime=0\n    local -i prime_array_prime_count_max_prime_count=0\n\
    \    local -i prime_array_prime_count_max_prime_count_max=0\n    local -i prime_array_prime_count_max_prime_count_max_i=0\n\
    \    local -i prime_array_prime_count_max_prime_count_max_digit=0\n    local -i\
    \ prime_array_prime_count_max_prime_count_max_digit_dec=0\n    local -i prime_array_prime_count_max_prime_count_max_prime=0\n\
    \    local -i prime_array_prime_count_max_prime_count_max_prime_count=0\n    local\
    \ -i prime_array_prime_count_max_prime_count_max_prime_count_max=0\n    local\
    \ -i prime_array_prime_count_max_prime_count_max_prime_count_max_i=0\n    local\
    \ -i prime_array_prime_count_max_prime_count_max_prime_count_max_digit=0\n   \
    \ local -i prime\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local hex_primes=\"2357BD\"\n    for ((i=0; i<${#key};\
    \ i++)); do\n        if [[ $hex_primes =~ ${key:$i:1} ]]; then\n            ((count++))\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  local key=$1\n\
    \  local count=0\n  for (( i=0; i<${#key}; i++ )); do\n    case ${key:$i:1} in\n\
    \      2|3|5|7|B|D) (( count++ )) ;;\n    esac\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for (( i=0; i<${#key}; i++ )); do\n        local\
    \ char=${key:$i:1}\n        if [[ $char =~ [2357BD] ]]; then\n            (( count++\
    \ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i rem=0\n    local -i sum=0\n    local -i val=0\n\
    \    local -a primes=(2 3 5 7 11 13)\n    local -a hex=(0 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15)\n    local -a hex_str=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n  \
    \  local -a hex_str_upper=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_str_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 a b c d e f)\n    local -a hex_num=(0 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15)\n    local -a hex_num_upper=(0 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15)\n    local -a hex_num_lower=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    \    local -a hex_num_upper_str=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a\
    \ hex_num_lower_str=(0 1 2 3 4 5 6 7 8 9 a b c d e f)\n    local -a hex_str_upper_num=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_str_lower_num=(0 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_str_upper_num_str=(0 1 2\
    \ 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_str_lower_num_str=(0 1 2 3 4 5\
    \ 6 7 8 9 a b c d e f)\n    local -a hex_num_upper_str_num=(0 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15)\n    local -a hex_num_lower_str_num=(0 1 2 3 4 5 6 7 8\
    \ 9 10\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaen2t11n.sh: line 42: syntax error near unexpected token `(''

    /tmp/tmpaen2t11n.sh: line 42: `candidate() {''

    /tmp/tmpaen2t11n.sh: line 43: hex_key: command not found

    /tmp/tmpaen2t11n.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmpaen2t11n.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n  echo $1\
    \ | tr -d -c '2357BDF' | wc -c\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    echo $1\
    \ | sed 's/[^2-7ABD]//g' | wc -c\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i j=0\n   \
    \ local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n\
    \    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local key_len=${#key}\n    local count=0\n    local i=0\n    local\
    \ digit=0\n    local is_prime=0\n    local primes=(2 3 5 7 11 13)\n    local primes_len=${#primes[@]}\n\
    \    local primes_i=0\n    for ((i=0; i<key_len; i++)); do\n        digit=${key:i:1}\n\
    \        is_prime=0\n        for ((primes_i=0; primes_i<primes_len; primes_i++));\
    \ do\n            if [ $digit = ${primes[primes_i]} ]; then\n                is_prime=1\n\
    \                break\n            fi\n        done\n        if [ $is_prime =\
    \ 1 ]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_string=$1\n    local hex_digits=({0..9} {A..F})\n    local prime_digits=({2..7}\
    \ B D)\n    local count=0\n    for ((i=0; i<${#hex_string}; i++)); do\n      \
    \  local digit=${hex_string:$i:1}\n        for ((j=0; j<${#hex_digits[@]}; j++));\
    \ do\n            if [[ ${hex_digits[$j]} == $digit ]]; then\n               \
    \ for ((k=0; k<${#prime_digits[@]}; k++)); do\n                    if [[ ${prime_digits[$k]}\
    \ == $digit ]]; then\n                        ((count++))\n                  \
    \  fi\n                done\n            fi\n        done\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local i=0\n    local len=${#key}\n    local c\n\
    \    for ((i=0; i<len; i++)); do\n        c=${key:$i:1}\n        if [[ \"$c\"\
    \ == \"2\" || \"$c\" == \"3\" || \"$c\" == \"5\" || \"$c\" == \"7\" || \"$c\"\
    \ == \"B\" || \"$c\" == \"D\" ]]; then\n            ((count++))\n        fi\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=\"$1\"\n    local hex_key_len=${#hex_key}\n    local hex_key_len_dec=$((16#$hex_key_len))\n\
    \    local hex_key_len_dec_mod=$((hex_key_len_dec % 2))\n    local hex_key_len_dec_div=$((hex_key_len_dec\
    \ / 2))\n    local hex_key_len_dec_div_mod=$((hex_key_len_dec_div % 2))\n    local\
    \ hex_key_len_dec_div_div=$((hex_key_len_dec_div / 2))\n    local hex_key_len_dec_div_div_mod=$((hex_key_len_dec_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div=$((hex_key_len_dec_div_div / 2))\n\
    \    local hex_key_len_dec_div_div_div_mod=$((hex_key_len_dec_div_div_div % 2))\n\
    \    local hex_key_len_dec_div_div_div_div=$((hex_key_len_dec_div_div_div / 2))\n\
    \    local hex_key_len_dec_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div_div_div=$((hex_key_len_dec_div_div_div_div\
    \ / 2))\n    local hex_key_len_dec_div_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div_div_div_div=$((hex_key_len_dec_div_div_div_div_div\
    \ / 2))\n    local hex_key_len_dec_div_div_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i rem=0\n    local -i sum=0\n    local -i val=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -a primes=(2\
    \ 3 5 7 11 13 17)\n    local -a hex=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    \    local -a hex_str=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_str_upper=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_str_lower=(0 1 2 3 4 5 6 7\
    \ 8 9 a b c d e f)\n    local -a hex_num=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    \    local -a hex_num_upper=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local\
    \ -a hex_num_lower=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_prime=(0\
    \ 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1)\n    local -a hex_prime_upper=(0 0 0 0 0 0 0\
    \ 0 0 0 0 1 1 1 1 1)\n    local -a hex_prime_lower=(0 0 0 0 0 0 0 0 0 0 0 1 1\
    \ 1 1 1)\n    local -a hex_prime_str=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local\
    \ -a hex_prime_str_upper=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_prime_str_lower=(0\
    \ 1 2 3 4 5 6 7 8 9 a b c d e f)\n    local -a hex_prime_num=(0 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15)\n    local -a hex_prime_num_upper=(0 1 2 3 4 5\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxz_8fhqb.sh: line 45: syntax error near unexpected token `(''

    /tmp/tmpxz_8fhqb.sh: line 45: `candidate() {''

    /tmp/tmpxz_8fhqb.sh: line 46: hex_key: command not found

    /tmp/tmpxz_8fhqb.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpxz_8fhqb.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i prime=0\n    local -i primes=(2 3 5 7 11 13)\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_prime=0\n    local -i j=0\n    local -i num=0\n    local -i num_primes=${#primes[@]}\n\
    \    local -i is_\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit=0\n\
    \    local -i sum=0\n    local -i prime=0\n    local -i primes=0\n    local -i\
    \ hex_primes=0\n    local -i hex_prime_digits=0\n    local -i hex_prime_digits_count=0\n\
    \    local -i hex_prime_digits_sum=0\n    local -i hex_prime_digits_sum_count=0\n\
    \    local -i hex_prime_digits_sum_count_sum=0\n    local -i hex_prime_digits_sum_count_sum_count=0\n\
    \    local -i hex_prime_digits_sum_count_sum_count_sum=0\n    local -i hex_prime_digits_sum_count_sum_count_sum_count=0\n\
    \    local -i hex_prime_digits_sum_count_sum_count_sum_count_sum=0\n    local\
    \ -i hex_prime_digits_sum_count_sum_count_sum_count_sum_count=0\n    local -i\
    \ hex_prime_digits_sum_count_sum_count_sum_count_sum_count_sum=0\n    local -i\
    \ hex_prime_digits_sum_count_sum_count_sum_count_sum_count_sum_count=0\n    local\
    \ -i hex_prime_digits_sum_count_sum_count_sum_count_sum_count_sum_count_sum=0\n\
    \    local -i hex_prime_digits_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count=0\n\
    \    local -i hex_prime_digits_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count_sum=0\n\
    \    local -i hex_prime_digits_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count_sum_count=0\n\
    \    local -i hex_prime_digits_sum_count_sum_count_sum\n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal -i\
    \ count=0\n\tlocal -i i=0\n\tlocal -i len=${#1}\n\tlocal -i num=0\n\tlocal -i\
    \ prime=0\n\tlocal -i rem=0\n\tlocal -i sum=0\n\tlocal -i temp=0\n\tlocal -i value=0\n\
    \tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -a array\n\tlocal -a primes\n\
    \tlocal -a values\n\tlocal -a hex\n\tlocal -a hex_primes\n\tlocal -a hex_values\n\
    \tlocal -a hex_numbers\n\tlocal -a hex_numbers_primes\n\tlocal -a hex_numbers_values\n\
    \tlocal -a hex_numbers_primes_values\n\tlocal -a hex_numbers_values_primes\n\t\
    local -a hex_numbers_values_primes_numbers\n\tlocal -a hex_numbers_values_primes_numbers_values\n\
    \tlocal -a hex_numbers_values_primes_numbers_values_primes\n\tlocal -a hex_numbers_values_primes_numbers_values_primes_numbers\n\
    \tlocal -a hex_numbers_values_primes_numbers_values_primes_numbers_values\n\t\
    local -a hex_numbers_values_primes_numbers_values_primes_numbers_values_primes\n\
    \tlocal -a hex_numbers_values_primes_numbers_values_primes_numbers_values_primes_numbers\n\
    \tlocal -a hex_numbers_values_primes_numbers_values_primes_numbers_values_primes_numbers_values\n\
    \tlocal -a hex_numbers_values_primes_numbers_values_primes_numbers_values_primes_numbers_values_primes\n\
    \tlocal -a hex_numbers_values_primes_numbers_values_primes_numbers_values_primes_numbers_values_primes_numbers\n\
    \tlocal -a hex_numbers_values_primes_numbers_values_primes_n\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local count=0\n    local i=0\n    for (( i=0; i<${#hex_key};\
    \ i++ )); do\n        local digit=${hex_key:$i:1}\n        if [[ $digit == \"\
    2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\"\
    \ || $digit == \"D\" ]]; then\n            count=$(( count + 1 ))\n        fi\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ count=0\n    local key=$1\n    local len=${#key}\n    local i=0\n    local digit=0\n\
    \    local is_prime=0\n    local primes=(2 3 5 7 11 13)\n    local primes_len=${#primes[@]}\n\
    \    local primes_index=0\n    local primes_digit=0\n    local primes_digit_len=0\n\
    \    local primes_digit_index=0\n    local primes_digit_char=0\n    local primes_digit_char_code=0\n\
    \    local digit_char=0\n    local digit_char_code=0\n    for ((i=0; i<len; i++));\
    \ do\n        digit_char=${key:$i:1}\n        digit_char_code=$(printf \"%d\"\
    \ \"'$digit_char\")\n        for ((primes_index=0; primes_index<primes_len; primes_index++));\
    \ do\n            primes_digit=${primes[$primes_index]}\n            primes_digit_len=${#primes_digit}\n\
    \            for ((primes_digit_index=0; primes_digit_index<primes_digit_len;\
    \ primes_digit_index++)); do\n                primes_digit_char=${primes_digit:$primes_digit_index:1}\n\
    \                primes_digit_char_code=$(printf \"%d\" \"'$primes_digit_char\"\
    )\n                if [ $digit_char_code -eq $primes_digit_char_code ]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n\tlocal key=$1\n\
    \tlocal count=0\n\tfor (( i=0; i<${#key}; i++ )); do\n\t\tcase ${key:$i:1} in\n\
    \t\t\t2|3|5|7|B|D)\n\t\t\t\t(( count++ ))\n\t\t\t\t;;\n\t\tesac\n\tdone\n\techo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for ((i=0; i<${#key}; i++)); do\n        local\
    \ c=${key:$i:1}\n        if [[ $c =~ [2357BD] ]]; then\n            ((count++))\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i prime_count=0\n    local -i prime_num=0\n \
    \   local -i prime_num_count=0\n    local -i prime_num_len=0\n    local -i prime_num_len_count=0\n\
    \    local -i prime_num_len_count_count=0\n    local -i prime_num_len_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count=0\n    local -i prime_num_len_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count=0\n    local -i\
    \ prime_num_len_count_count_count_count_count_count_count=0\n    local -i prime_num_len_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local count=0\n    for (( i=0; i<${#hex_key}; i++ )); do\n \
    \       local digit=${hex_key:$i:1}\n        case $digit in\n            2|3|5|7|B|D)\n\
    \                (( count++ ))\n                ;;\n        esac\n    done\n \
    \   echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -a arr=()\n\
    \    local -i arr_len=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n\
    \    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local\
    \ -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local\
    \ -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=0\n    local -i mmm\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_string=$1\n    local hex_digits=0\n    local primes=0\n    local digit=0\n\
    \    local hex_prime_digits=\"2 3 5 7 B D\"\n    for digit in $(echo $hex_string\
    \ | grep -o .); do\n        hex_digits=$((hex_digits + 1))\n        for prime\
    \ in $hex_prime_digits; do\n            if [ \"$digit\" == \"$prime\" ]; then\n\
    \                primes=$((primes + 1))\n            fi\n        done\n    done\n\
    \    echo $primes\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i prime_count=0\n    local -i prime_list=(2 3\
    \ 5 7 11 13)\n    local -i prime_list_len=${#prime_list[@]}\n    local -i prime_num=0\n\
    \    local -i prime_num_len=0\n    local -i prime_num_list=()\n    local -i prime_num_list_len=0\n\
    \    local -i prime_num_list_len_prev=0\n    local -i prime_num_list_len_curr=0\n\
    \    local -i prime_num_list_len_next=0\n    local -i prime_num_list_len_next_next=0\n\
    \    local -i prime_num_list_len_next_next_next=0\n    local -i prime_num_list_len_next_next_next_next=0\n\
    \    local -i prime_num_list_len_next_next_next_next_next=0\n    local -i prime_num_list_len_next_next_next_next_next_next=0\n\
    \    local -i prime_num_list_len_next_next_next_next_next_next_next=0\n    local\
    \ -i prime_num_list_len_next_next_next_next_next_next_next_next=0\n    local -i\
    \ prime_num_list_len_next_next_next_next_next_next_next_next_next=0\n    local\
    \ -i prime_num_list_len_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i prime_num_list_len_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i prime_num_list_len_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i prime_num_list_len_next_next_next_\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i n=0\n   \
    \ local -i prime=0\n    local -i rem=0\n    local -i sum=0\n    local -i val=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -a hex_digits=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a primes=(2 3 5 7 11 13 17)\n   \
    \ local -a hex_values=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_nums=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_primes=(0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0)\n    local -a hex_prime_count=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n\
    \    local -a hex_prime_sum=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_prime_sum_count=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_prime_sum_count_max=(0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_prime_sum_count_max_key=(0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_prime_sum_count_max_key_sum=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_prime_sum_count_max_key_sum_max=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_prime_sum_count_max_key_sum_max_key=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n    local -a hex_prime_sum_count_max_key_sum_max_key_sum=(0\
    \ 0 0 0 0 0 0\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3p3kl5mj.sh: line 43: syntax error near unexpected token `(''

    /tmp/tmp3p3kl5mj.sh: line 43: `candidate() {''

    /tmp/tmp3p3kl5mj.sh: line 44: hex_key: command not found

    /tmp/tmp3p3kl5mj.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp3p3kl5mj.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i prime=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i digit\n \
    \   local -i prime\n    local -i j\n    local -i is_prime\n    local -i is_hex\n\
    \    local -i is_digit\n    local -i is_upper\n    local -i is_alpha\n    local\
    \ -i is_alnum\n    local -i is_ascii\n    local -i is_blank\n    local -i is_cntrl\n\
    \    local -i is_graph\n    local -i is_lower\n    local -i is_print\n    local\
    \ -i is_punct\n    local -i is_space\n    local -i is_upper\n    local -i is_xdigit\n\
    \    local -i is_digit\n    local -i is_alpha\n    local -i is_alnum\n    local\
    \ -i is_ascii\n    local -i is_blank\n    local -i is_cntrl\n    local -i is_graph\n\
    \    local -i is_lower\n    local -i is_print\n    local -i is_punct\n    local\
    \ -i is_space\n    local -i is_upper\n    local -i is_xdigit\n    local -i is_digit\n\
    \    local -i is_alpha\n    local -i is_alnum\n    local -i is_ascii\n    local\
    \ -i is_blank\n    local -i is_cntrl\n    local -i is_graph\n    local -i is_lower\n\
    \    local -i is_print\n    local -i is_punct\n    local -i is_space\n    local\
    \ -i is_upper\n    local -i is_xdigit\n    local -i is_digit\n    local -i is_alpha\n\
    \    local -i is_alnum\n    local -i is_ascii\n    local -i is_blank\n    local\
    \ -i is_cntrl\n    local -i is_graph\n    local -i is_lower\n    local -i is_print\n\
    \    local -i is_punct\n    local -i is_space\n    local -i is_upper\n    local\
    \ -i is_x\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local -i count=0\n    local -i i=0\n    local -i len=${#hex_key}\n\
    \    local -i prime_numbers=(2 3 5 7 11 13)\n    local -i prime_numbers_len=${#prime_numbers[@]}\n\
    \    local -i hex_number=0\n    local -i hex_number_decimal=0\n    local -i hex_number_decimal_len=0\n\
    \    local -i hex_number_decimal_len_mod=0\n    local -i hex_number_decimal_len_mod_div=0\n\
    \    local -i hex_number_decimal_len_mod_div_mod=0\n    local -i hex_number_decimal_len_mod_div_mod_div=0\n\
    \    local -i hex_number_decimal_len_mod_div_mod_div_mod=0\n    local -i hex_number_decimal_len_mod_div_mod_div_mod_div=0\n\
    \    local -i hex_number_decimal_len_mod_div_mod_div_mod_div_mod=0\n    local\
    \ -i hex_number_decimal_len_mod_div_mod_div_mod_div_mod_div=0\n    local -i hex_number_decimal_len_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \    local -i hex_number_decimal_len_mod_div_mod_div_mod_div_mod_div_mod_div=0\n\
    \    local -i hex_number_decimal_len_mod_div_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \    local -i hex_number_decimal_len_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div=0\n\
    \    local -i hex_number_decimal_len_mod_div_mod_div_mod_div_mod_div_mod_div_mod_div_mod=0\n\
    \    local -i hex_number_decimal_len_mod_div_mod_div_\n}\n\ncandidate() {\n  \
    \  hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_len_dec=$((16#$hex_key_len))\n\
    \    local hex_key_len_dec_mod=$((hex_key_len_dec % 2))\n    local hex_key_len_dec_div=$((hex_key_len_dec\
    \ / 2))\n    local hex_key_len_dec_div_mod=$((hex_key_len_dec_div % 2))\n    local\
    \ hex_key_len_dec_div_div=$((hex_key_len_dec_div / 2))\n    local hex_key_len_dec_div_div_mod=$((hex_key_len_dec_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div=$((hex_key_len_dec_div_div / 2))\n\
    \    local hex_key_len_dec_div_div_div_mod=$((hex_key_len_dec_div_div_div % 2))\n\
    \    local hex_key_len_dec_div_div_div_div=$((hex_key_len_dec_div_div_div / 2))\n\
    \    local hex_key_len_dec_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div_div_div=$((hex_key_len_dec_div_div_div_div\
    \ / 2))\n    local hex_key_len_dec_div_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div_div_div_div=$((hex_key_len_dec_div_div_div_div_div\
    \ / 2))\n    local hex_key_len_dec_div_div_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_div_\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_digit=0\n    local hex_key_digit_decimal=0\n    local hex_key_digit_primes=0\n\
    \    local hex_key_digit_primes_list=\"2 3 5 7 11 13\"\n    local hex_key_digit_primes_list_len=${#hex_key_digit_primes_list}\n\
    \    local hex_key_digit_primes_list_digit=0\n    local hex_key_digit_primes_list_digit_decimal=0\n\
    \    local hex_key_digit_primes_list_digit_decimal_hex=0\n    local hex_key_digit_primes_list_digit_decimal_hex_upper=0\n\
    \    local hex_key_digit_primes_list_digit_decimal_hex_upper_match=0\n    local\
    \ hex_key_digit_primes_list_digit_decimal_hex_upper_match_count=0\n    local hex_key_digit_primes_list_digit_decimal_hex_upper_match_count_max=0\n\
    \    local hex_key_digit_primes_list_digit_decimal_hex_upper_match_count_max_digit=0\n\
    \    local hex_key_digit_primes_list_digit_decimal_hex_upper_match_count_max_digit_decimal=0\n\
    \    local hex_key_digit_primes_list_digit_decimal_hex_upper_match_count_max_digit_decimal_hex=0\n\
    \    local hex_key_digit_primes_list_digit_decimal_hex_upper_match_count_max_digit_decimal_hex_upper=0\n\
    \    local hex_key_digit_primes_list_digit_decimal_hex_upper_match_count_max_digit_decimal_hex_upper_match=0\n\
    \    local hex_key_digit_primes_list_digit_decimal_hex_upper_match_count_max_digit_decimal_hex_upper_match_count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=$1\n    local hex_key_len=${#hex_key}\n    local i=0\n    local count=0\n\
    \    local hex_key_char=\"\"\n    local hex_key_char_decimal=0\n    local hex_key_char_decimal_is_prime=0\n\
    \    local hex_key_char_decimal_is_prime_count=0\n    local hex_key_char_decimal_is_prime_count_max=0\n\
    \    local hex_key_char_decimal_is_prime_count_max_char=\"\"\n    local hex_key_char_decimal_is_prime_count_max_char_decimal=0\n\
    \    local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime=0\n \
    \   local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime_count=0\n\
    \    local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max=0\n\
    \    local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max_char=\"\
    \"\n    local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max_char_decimal=0\n\
    \    local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max_char_decimal_is_prime=0\n\
    \    local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max_char_decimal_is_prime_count=0\n\
    \    local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max=0\n\
    \    local hex_key_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max_char_decimal_is_prime_count_max\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ hex_key=\"$1\"\n    local hex_key_len=${#hex_key}\n    local hex_key_len_dec=$((16#$hex_key_len))\n\
    \    local hex_key_len_dec_mod=$((hex_key_len_dec % 2))\n    local hex_key_len_dec_div=$((hex_key_len_dec\
    \ / 2))\n    local hex_key_len_dec_div_mod=$((hex_key_len_dec_div % 2))\n    local\
    \ hex_key_len_dec_div_div=$((hex_key_len_dec_div / 2))\n    local hex_key_len_dec_div_div_mod=$((hex_key_len_dec_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div=$((hex_key_len_dec_div_div / 2))\n\
    \    local hex_key_len_dec_div_div_div_mod=$((hex_key_len_dec_div_div_div % 2))\n\
    \    local hex_key_len_dec_div_div_div_div=$((hex_key_len_dec_div_div_div / 2))\n\
    \    local hex_key_len_dec_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div_div_div=$((hex_key_len_dec_div_div_div_div\
    \ / 2))\n    local hex_key_len_dec_div_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_div_div_div_div_div_div=$((hex_key_len_dec_div_div_div_div_div\
    \ / 2))\n    local hex_key_len_dec_div_div_div_div_div_div_mod=$((hex_key_len_dec_div_div_div_div_div_div\
    \ % 2))\n    local hex_key_len_dec_\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -a hex_primes=(2 3 5 7 11 13)\n    for i in $(echo $1\
    \ | grep -o .); do\n        for j in ${hex_primes[@]}; do\n            if [[ $i\
    \ == $j ]]; then\n                ((count++))\n            fi\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i num_arr=()\n    local -i prime_arr=(2 3 5 7 11 13)\n    local -i\
    \ prime_len=${#prime_arr[@]}\n    local -i prime_num=0\n    local -i prime_num_arr=()\n\
    \    local -i prime_num_len=0\n    local -i prime_num_count=0\n    local -i prime_num_count_arr=()\n\
    \    local -i prime_num_count_len=0\n    local -i prime_num_count_sum=0\n    local\
    \ -i prime_num_count_sum_arr=()\n    local -i prime_num_count_sum_len=0\n    local\
    \ -i prime_num_count_sum_max=0\n    local -i prime_num_count_sum_max_arr=()\n\
    \    local -i prime_num_count_sum_max_len=0\n    local -i prime_num_count_sum_max_index=0\n\
    \    local -i prime_num_count_sum_max_index_arr=()\n    local -i prime_num_count_sum_max_index_len=0\n\
    \    local -i prime_num_count_sum_max_index_num=0\n    local -i prime_num_count_sum_max_index_num_arr=()\n\
    \    local -i prime_num_count_sum_max_index_num_len=0\n    local -i prime_num_count_sum_max_index_num_sum=0\n\
    \    local -i prime_num_count_sum_max_index_num_sum_arr=()\n    local -i prime_num_count_sum_max_index_num_sum_len=0\n\
    \    local -i prime_num_count_sum_max_index_num_sum_max=0\n    local -i prime_num_count_sum_max_index_num_sum_max_arr=()\n\
    \    local -i prime_num_count_sum_max_index_num_sum\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1} in\n  \
    \          [2357BD]) ((count++)) ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000571
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -a hex_arr=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a prime_arr=(2 3 5 7 11 13)\n   \
    \ local -a input_arr=($(echo $1 | grep -o .))\n    for ((i=0; i<len; i++)); do\n\
    \        for ((j=0; j<${#hex_arr[@]}; j++)); do\n            if [[ ${input_arr[$i]}\
    \ == ${hex_arr[$j]} ]]; then\n                for ((k=0; k<${#prime_arr[@]}; k++));\
    \ do\n                    if [[ $j == ${prime_arr[$k]} ]]; then\n            \
    \            ((count++))\n                    fi\n                done\n     \
    \       fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i prime_count=0\n    local -i prime_list=(2 3\
    \ 5 7 11 13)\n    local -i prime_list_len=${#prime_list[@]}\n    local -i prime_num=0\n\
    \    local -i prime_num_len=0\n    local -i prime_num_list=()\n    local -i prime_num_list_len=0\n\
    \    local -i prime_num_list_len_max=0\n    local -i prime_num_list_len_max_index=0\n\
    \    local -i prime_num_list_len_max_list=()\n    local -i prime_num_list_len_max_list_len=0\n\
    \    local -i prime_num_list_len_max_list_len_max=0\n    local -i prime_num_list_len_max_list_len_max_index=0\n\
    \    local -i prime_num_list_len_max_list_len_max_list=()\n    local -i prime_num_list_len_max_list_len_max_list_len=0\n\
    \    local -i prime_num_list_len_max_list_len_max_list_len_max=0\n    local -i\
    \ prime_num_list_len_max_list_len_max_list_len_max_index=0\n    local -i prime_num_list_len_max_list_len_max_list_len_max_list=()\n\
    \    local -i prime_num_list_len_max_list_len_max_list_len_max_list_len=0\n  \
    \  local -i prime_num_list_len_max_list_len_max_list_len_max_list_len_max=0\n\
    \    local -i prime_num_list_len_max_list_len_max_list_len_max_list_len_max_index=0\n\
    \    local -i prime_num_list_len_max_list_len\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    for (( i=0; i<${#key}; i++ )); do\n        local\
    \ char=${key:$i:1}\n        if [[ $char =~ [2357BD] ]]; then\n            (( count++\
    \ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n#\n# $1 is a string\nhex_key() {\n    local\
    \ key=$1\n    local count=0\n    local key_len=${#key}\n    local i=0\n    local\
    \ j=0\n    local hex_prime_list=(2 3 5 7 11 13)\n    local hex_prime_list_len=${#hex_prime_list[@]}\n\
    \    local hex_prime_list_item=0\n    local key_item=0\n    local key_item_dec=0\n\
    \    local key_item_dec_is_prime=0\n    for ((i=0; i<key_len; i++)); do\n    \
    \    key_item=${key:$i:1}\n        key_item_dec=$(echo \"ibase=16; $key_item\"\
    \ | bc)\n        key_item_dec_is_prime=0\n        for ((j=0; j<hex_prime_list_len;\
    \ j++)); do\n            hex_prime_list_item=${hex_prime_list[$j]}\n         \
    \   if [ $key_item_dec -eq $hex_prime_list_item ]; then\n                key_item_dec_is_prime=1\n\
    \                break\n            fi\n        done\n        if [ $key_item_dec_is_prime\
    \ -eq 1 ]; then\n            count=$((count+1))\n        fi\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660000572
