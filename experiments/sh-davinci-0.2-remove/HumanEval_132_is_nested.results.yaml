language: sh
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a string as input which contains\
    \ only square brackets.\n# The function should return True if and only if there\
    \ is a valid subsequence of brackets \n# where at least one bracket in the subsequence\
    \ is nested.\n#\n# $1 is a string\nis_nested() {\n  local str=\"$1\"\n  local\
    \ stack=()\n  local i=0\n  local len=${#str}\n  local top=0\n  local c=''\n  local\
    \ open_brackets='[{('\n  local close_brackets=']})'\n  local open_bracket=''\n\
    \  local close_bracket=''\n  local is_nested=0\n\n  while [ $i -lt $len ]; do\n\
    \    c=${str:$i:1}\n    if [[ $open_brackets =~ $c ]]; then\n      stack+=($c)\n\
    \      top=$((top+1))\n    elif [[ $close_brackets =~ $c ]]; then\n      if [\
    \ $top -eq 0 ]; then\n        is_nested=0\n        break\n      fi\n      open_bracket=${stack[$((top-1))]}\n\
    \      close_bracket=$c\n      if [ $open_bracket == '[' -a $close_bracket ==\
    \ ']' ]; then\n        is_nested=1\n      elif [ $open_bracket == '{' -a $close_bracket\
    \ == '}' ]; then\n        is_nested=1\n      elif [ $open_bracket == '(' -a $close_bracket\
    \ == ')' ]; then\n        is_nested=1\n      else\n        is_nested=0\n     \
    \   break\n      fi\n      stack=(\"${stack[@]:0:$((top-1))}\")\n      top=$((top-1))\n\
    \    fi\n    i=$((i+1))\n  done\n\n  if [ $is_nested -eq 1 -a $top -eq 0 ]; then\n\
    \    echo 'True'\n  else\n    echo 'False'\n  fi\n}\n\ncandidate() {\n    is_nested\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"[[]]\") = \"true\" ]]\n\
    \    [[ $(candidate \"[]]]]]]][[[[[]\") = \"false\" ]]\n    [[ $(candidate \"\
    [][]\") = \"false\" ]]\n    [[ $(candidate \"[]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[[[[]]]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]]]]]\") = \"false\"\
    \ ]]\n    [[ $(candidate \"[][][[]]\") = \"true\" ]]\n    [[ $(candidate \"[[]\"\
    ) = \"false\" ]]\n    [[ $(candidate \"[]]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[[]][[\") = \"true\" ]]\n    [[ $(candidate \"[[][]]\") = \"true\" ]]\n  \
    \  [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"[[[[[[[[\") = \"\
    false\" ]]\n    [[ $(candidate \"]]]]]]]]\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660002925
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a string as input which contains\
    \ only square brackets.\n# The function should return True if and only if there\
    \ is a valid subsequence of brackets \n# where at least one bracket in the subsequence\
    \ is nested.\n#\n# $1 is a string\nis_nested() {\n    local -i i=0\n    local\
    \ -i n=${#1}\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local\
    \ -i f=0\n    local -i g=0\n    local -i h=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i\
    \ dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i\
    \ hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i\
    \ bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local\
    \ -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local\
    \ -i jjj=0\n    local\n}\n\ncandidate() {\n    is_nested \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"[[]]\") = \"true\" ]]\n    [[ $(candidate \"\
    []]]]]]][[[[[]\") = \"false\" ]]\n    [[ $(candidate \"[][]\") = \"false\" ]]\n\
    \    [[ $(candidate \"[]\") = \"false\" ]]\n    [[ $(candidate \"[[[[]]]]\") =\
    \ \"true\" ]]\n    [[ $(candidate \"[]]]]]]]]]]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[][][[]]\") = \"true\" ]]\n    [[ $(candidate \"[[]\") = \"false\" ]]\n  \
    \  [[ $(candidate \"[]]\") = \"false\" ]]\n    [[ $(candidate \"[[]][[\") = \"\
    true\" ]]\n    [[ $(candidate \"[[][]]\") = \"true\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"[[[[[[[[\") = \"false\" ]]\n    [[ $(candidate\
    \ \"]]]]]]]]\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660002925
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a string as input which contains\
    \ only square brackets.\n# The function should return True if and only if there\
    \ is a valid subsequence of brackets \n# where at least one bracket in the subsequence\
    \ is nested.\n#\n# $1 is a string\nis_nested() {\n  local stack=()\n  local char\n\
    \  local top\n  local i\n  local len=${#1}\n  for ((i=0; i<len; i++)); do\n  \
    \  char=${1:i:1}\n    if [[ \"$char\" == '[' ]]; then\n      stack+=($char)\n\
    \    elif [[ \"$char\" == ']' ]]; then\n      top=${stack[-1]}\n      if [[ -z\
    \ \"$top\" ]]; then\n        return 1\n      fi\n      if [[ \"$top\" == '[' ]];\
    \ then\n        stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n      else\n       \
    \ return 1\n      fi\n    fi\n  done\n  if [[ -z \"${stack[@]}\" ]]; then\n  \
    \  return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_nested \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"[[]]\") = \"true\" ]]\n\
    \    [[ $(candidate \"[]]]]]]][[[[[]\") = \"false\" ]]\n    [[ $(candidate \"\
    [][]\") = \"false\" ]]\n    [[ $(candidate \"[]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[[[[]]]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]]]]]\") = \"false\"\
    \ ]]\n    [[ $(candidate \"[][][[]]\") = \"true\" ]]\n    [[ $(candidate \"[[]\"\
    ) = \"false\" ]]\n    [[ $(candidate \"[]]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[[]][[\") = \"true\" ]]\n    [[ $(candidate \"[[][]]\") = \"true\" ]]\n  \
    \  [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"[[[[[[[[\") = \"\
    false\" ]]\n    [[ $(candidate \"]]]]]]]]\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660002925
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a string as input which contains\
    \ only square brackets.\n# The function should return True if and only if there\
    \ is a valid subsequence of brackets \n# where at least one bracket in the subsequence\
    \ is nested.\n#\n# $1 is a string\nis_nested() {\n    local stack=()\n    local\
    \ str=\"$1\"\n    local len=${#str}\n    local i=0\n    local c=''\n    local\
    \ top=''\n    local is_nested=0\n\n    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n\
    \        if [ \"$c\" == \"[\" ]; then\n            stack+=($c)\n        elif [\
    \ \"$c\" == \"]\" ]; then\n            if [ ${#stack[@]} -eq 0 ]; then\n     \
    \           is_nested=0\n                break\n            fi\n            top=${stack[${#stack[@]}-1]}\n\
    \            if [ \"$top\" == \"[\" ]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n                is_nested=1\n            else\n                is_nested=0\n\
    \                break\n            fi\n        fi\n        ((i++))\n    done\n\
    \n    if [ ${#stack[@]} -ne 0 ]; then\n        is_nested=0\n    fi\n\n    echo\
    \ $is_nested\n}\n\ncandidate() {\n    is_nested \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"[[]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]][[[[[]\"\
    ) = \"false\" ]]\n    [[ $(candidate \"[][]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[]\") = \"false\" ]]\n    [[ $(candidate \"[[[[]]]]\") = \"true\" ]]\n   \
    \ [[ $(candidate \"[]]]]]]]]]]\") = \"false\" ]]\n    [[ $(candidate \"[][][[]]\"\
    ) = \"true\" ]]\n    [[ $(candidate \"[[]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[]]\") = \"false\" ]]\n    [[ $(candidate \"[[]][[\") = \"true\" ]]\n    [[\
    \ $(candidate \"[[][]]\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\"\
    \ ]]\n    [[ $(candidate \"[[[[[[[[\") = \"false\" ]]\n    [[ $(candidate \"]]]]]]]]\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660002925
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a string as input which contains\
    \ only square brackets.\n# The function should return True if and only if there\
    \ is a valid subsequence of brackets \n# where at least one bracket in the subsequence\
    \ is nested.\n#\n# $1 is a string\nis_nested() {\n    local stack=()\n    local\
    \ open_brackets=('[' '{' '(')\n    local close_brackets=(']' '}' ')')\n    local\
    \ is_nested=false\n\n    for ((i=0; i<${#1}; i++)); do\n        local char=${1:i:1}\n\
    \        local open_index=\n        local close_index=\n\n        for ((j=0; j<${#open_brackets[@]};\
    \ j++)); do\n            if [[ \"${open_brackets[j]}\" == \"$char\" ]]; then\n\
    \                open_index=$j\n                break\n            fi\n      \
    \  done\n\n        for ((j=0; j<${#close_brackets[@]}; j++)); do\n           \
    \ if [[ \"${close_brackets[j]}\" == \"$char\" ]]; then\n                close_index=$j\n\
    \                break\n            fi\n        done\n\n        if [[ -n \"$open_index\"\
    \ ]]; then\n            stack+=(\"$open_index\")\n        elif [[ -n \"$close_index\"\
    \ ]]; then\n            if [[ \"${#stack[@]}\" -eq 0 ]]; then\n              \
    \  return 1\n            fi\n\n            local last_index=${stack[${#stack[@]}-1]}\n\
    \            if [[ \"$last_index\" -ne \"$close_index\" ]]; then\n           \
    \     return 1\n            fi\n\n            unset stack[${#stack[@]}-1]\n  \
    \      fi\n    done\n\n    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        is_nested=true\n\
    \    fi\n\n    echo \"$is_nested\"\n}\n\ncandidate() {\n    is_nested \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"[[]]\") = \"true\" ]]\n    [[\
    \ $(candidate \"[]]]]]]][[[[[]\") = \"false\" ]]\n    [[ $(candidate \"[][]\"\
    ) = \"false\" ]]\n    [[ $(candidate \"[]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[[[[]]]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]]]]]\") = \"false\"\
    \ ]]\n    [[ $(candidate \"[][][[]]\") = \"true\" ]]\n    [[ $(candidate \"[[]\"\
    ) = \"false\" ]]\n    [[ $(candidate \"[]]\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[[]][[\") = \"true\" ]]\n    [[ $(candidate \"[[][]]\") = \"true\" ]]\n  \
    \  [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"[[[[[[[[\") = \"\
    false\" ]]\n    [[ $(candidate \"]]]]]]]]\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660002925
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a string as input which contains\
    \ only square brackets.\n# The function should return True if and only if there\
    \ is a valid subsequence of brackets \n# where at least one bracket in the subsequence\
    \ is nested.\n#\n# $1 is a string\nis_nested() {\n    local input=$1\n    local\
    \ stack=()\n    local i=0\n    local len=${#input}\n    local top=0\n    local\
    \ is_nested=0\n\n    while [ $i -lt $len ]; do\n        local ch=${input:$i:1}\n\
    \        if [ \"$ch\" == \"[\" ]; then\n            stack[$top]=$ch\n        \
    \    top=$((top+1))\n        elif [ \"$ch\" == \"]\" ]; then\n            if [\
    \ $top -eq 0 ]; then\n                return 1\n            fi\n            top=$((top-1))\n\
    \            if [ \"${stack[$top]}\" == \"[\" ]; then\n                is_nested=1\n\
    \            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [ $top -eq\
    \ 0 ]; then\n        return $is_nested\n    else\n        return 1\n    fi\n}\n\
    \ncandidate() {\n    is_nested \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"[[]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]][[[[[]\") = \"false\"\
    \ ]]\n    [[ $(candidate \"[][]\") = \"false\" ]]\n    [[ $(candidate \"[]\")\
    \ = \"false\" ]]\n    [[ $(candidate \"[[[[]]]]\") = \"true\" ]]\n    [[ $(candidate\
    \ \"[]]]]]]]]]]\") = \"false\" ]]\n    [[ $(candidate \"[][][[]]\") = \"true\"\
    \ ]]\n    [[ $(candidate \"[[]\") = \"false\" ]]\n    [[ $(candidate \"[]]\")\
    \ = \"false\" ]]\n    [[ $(candidate \"[[]][[\") = \"true\" ]]\n    [[ $(candidate\
    \ \"[[][]]\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"[[[[[[[[\") = \"false\" ]]\n    [[ $(candidate \"]]]]]]]]\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660002925
