name: HumanEval_161_solve
language: sh
prompt: "#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n\
  # If the string contains no letters, reverse the string.\n# The function should\
  \ return the resulted string.\n# Examples\n#\n# $1 is a string\nsolve() {\n"
tests: "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate\
  \ \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate\
  \ \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n\
  \    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\")\
  \ = \"#CCC\" ]]\n}\n\nrun_test"
completions: ["    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    # Write your code here\n    # echo $1\n    # echo $2\n    # echo $3\n    #\
    \ echo $4\n    # echo $5\n    # echo $6\n    # echo $7\n    # echo $8\n    # echo\
    \ $9\n    # echo ${10}\n    # echo ${11}\n    # echo ${12}\n    # echo ${13}\n\
    \    # echo ${14}\n    # echo ${15}\n    # echo ${16}\n    # echo ${17}\n    #\
    \ echo ${18}\n    # echo ${19}\n    # echo ${20}\n    # echo ${21}\n    # echo\
    \ ${22}\n    # echo ${23}\n    # echo ${24}\n    # echo ${25}\n    # echo ${26}\n\
    \    # echo ${27}\n    # echo ${28}\n    # echo ${29}\n    # echo ${30}\n    #\
    \ echo ${31}\n    # echo ${32}\n    # echo ${33}\n    # echo ${34}\n    # echo\
    \ ${35}\n    # echo ${36}\n    # echo ${37}\n    # echo ${38}\n    # echo ${39}\n\
    \    # echo ${40}\n    # echo ${41}\n    # echo ${42}\n    # echo ${43}\n    #\
    \ echo ${44}\n    # echo ${45}\n    # echo ${46}\n    # echo ${47}\n    # echo\
    \ ${48}\n    # echo ${49}\n    # echo ${50}\n    # echo ${51}\n    # echo ${52}\n\
    \    # echo ${53}\n    # echo ${54}\n    # echo ${55}\n    # echo ${56}\n    #\
    \ echo ${57}\n    # echo ${58}\n    # echo ${59}\n    # echo ${60}\n    # echo\
    \ ${61}\n    # echo ${62}\n    # echo ${63}\n    # echo ${64}\n    # echo ${65}\n\
    \    # echo ${66}\n    # echo ${67}\n    # echo ${68}\n    # echo ${69}\n    #\
    \ echo ${70}\n    # echo ${71}\n    # echo ${72}\n    # echo ${73}\n    #", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local\
    \ s=$1\n    local r=\"\"\n    local i=0\n    local len=${#s}\n    local c\n  \
    \  local l\n    local u\n    local is_letter=0\n    while [ $i -lt $len ]; do\n\
    \        c=${s:$i:1}\n        l=${c,,}\n        u=${c^^}\n        if [ \"$c\"\
    \ != \"$l\" ] && [ \"$c\" != \"$u\" ]; then\n            is_letter=1\n       \
    \     if [ \"$c\" == \"$l\" ]; then\n                r=$r$u\n            else\n\
    \                r=$r$l\n            fi\n        else\n            r=$r$c\n  \
    \      fi\n        i=$((i+1))\n    done\n    if [ $is_letter -eq 0 ]; then\n \
    \       echo $r | rev\n    else\n        echo $r\n    fi", "    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", "  local s=$1\n \
    \ local result=\"\"\n  local i=0\n  local len=${#s}\n  local c\n  local is_letter=0\n\
    \  while [ $i -lt $len ]; do\n    c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n\
    \      is_letter=1\n      if [[ $c =~ [a-z] ]]; then\n        c=$(echo $c | tr\
    \ a-z A-Z)\n      else\n        c=$(echo $c | tr A-Z a-z)\n      fi\n    fi\n\
    \    result=\"$result$c\"\n    i=$((i+1))\n  done\n  if [ $is_letter -eq 0 ];\
    \ then\n    result=$(echo $result | rev)\n  fi\n  echo $result", "    local s=$1\n\
    \    local res=\"\"\n    local i\n    for ((i=0; i<${#s}; i++)); do\n        if\
    \ [[ ${s:i:1} =~ [a-zA-Z] ]]; then\n            res+=${s:i:1} | tr '[:upper:]'\
    \ '[:lower:]'\n        else\n            res+=${s:i:1}\n        fi\n    done\n\
    \    echo $res", "    local str=$1\n    local result=\"\"\n    local char\n  \
    \  local i\n    for ((i=0; i<${#str}; i++)); do\n        char=${str:$i:1}\n  \
    \      if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                char=$(echo $char | tr '[:lower:]' '[:upper:]')\n    \
    \        else\n                char=$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        fi\n        result+=$char\n    done\n    echo $result",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local s=$1\n    local res=\"\"\n    local i=0\n    local c=\"\"\n    local\
    \ l=\"\"\n    local u=\"\"\n    local r=\"\"\n    local n=\"\"\n    local is_letter=0\n\
    \    local is_reversed=0\n    local is_reversed_letter=0\n    local is_reversed_non_letter=0\n\
    \    local is_reversed_letter_and_non_letter=0\n    local is_reversed_non_letter_and_letter=0\n\
    \    local is_reversed_letter_and_letter=0\n    local is_reversed_non_letter_and_non_letter=0\n\
    \    local is_reversed_letter_and_non_letter_and_letter=0\n    local is_reversed_non_letter_and_letter_and_non_letter=0\n\
    \    local is_reversed_letter_and_letter_and_letter=0\n    local is_reversed_non_letter_and_non_letter_and_non_letter=0\n\
    \    local is_reversed_letter_and_non_letter_and_letter_and_non_letter=0\n   \
    \ local is_reversed_non_letter_and_letter_and_non_letter_and_letter=0\n    local\
    \ is_reversed_letter_and_letter_and_letter_and_letter=0\n    local is_reversed_non_letter_and_non_letter_and_non_letter_and_non_letter=0\n\
    \    local is_reversed_letter_and_non_letter_and_letter_and_non_letter_and_letter=0\n\
    \    local is_reversed_non_letter_and_letter_and_non_letter_and_letter_and_non_letter=0\n\
    \    local is_reversed_letter_and_letter_and_letter_and_letter_and_letter=0\n\
    \    local is_reversed_non_letter_and_non_letter_and_non_letter_and_non_letter_and_non_letter=0\n\
    \    local is_reversed_letter_and_non_letter_and", "    # Write your code here\n\
    \    # echo \"solve $1\"\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ $1 | rev\n    fi", "    local s=$1\n    local res=''\n    local i=0\n    local\
    \ len=${#s}\n    local c\n    local is_letter=0\n    local is_upper=0\n    local\
    \ is_lower=0\n    local is_digit=0\n    local is_special=0\n    local is_space=0\n\
    \    local is_other=0\n    local is_empty=0\n    local is_all_letter=0\n    local\
    \ is_all_upper=0\n    local is_all_lower=0\n    local is_all_digit=0\n    local\
    \ is_all_special=0\n    local is_all_space=0\n    local is_all_other=0\n    local\
    \ is_all_empty=0\n    local is_all_empty_or_letter=0\n    local is_all_empty_or_upper=0\n\
    \    local is_all_empty_or_lower=0\n    local is_all_empty_or_digit=0\n    local\
    \ is_all_empty_or_special=0\n    local is_all_empty_or_space=0\n    local is_all_empty_or_other=0\n\
    \    local is_all_empty_or_letter_or_digit=0\n    local is_all_empty_or_letter_or_special=0\n\
    \    local is_all_empty_or_letter_or_space=0\n    local is_all_empty_or_letter_or_other=0\n\
    \    local is_all_empty_or_upper_or_digit=0\n    local is_all_empty_or_upper_or_special=0\n\
    \    local is_all_empty_or_upper_or_space=0\n    local is_all_empty_or_upper_or_other=0\n\
    \    local is_all_empty_or_lower_or_digit=0\n    local is_all_empty_or_lower_or_special=0\n\
    \    local is_all_empty_or_lower_or_space=0\n    local is_all_empty_or_lower_or_other=0\n\
    \    local is_all_empty_or_digit_or_special=0\n    local is_", "  echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local s=$1\n   \
    \ local result=\"\"\n    local i=0\n    local len=${#s}\n    local c\n    local\
    \ is_letter=false\n    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n      \
    \  if [[ $c =~ [a-zA-Z] ]]; then\n            is_letter=true\n            if [[\
    \ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n         \
    \       c=${c,,}\n            fi\n        fi\n        result+=$c\n        i=$((i+1))\n\
    \    done\n    if [ $is_letter = false ]; then\n        result=`echo $result |\
    \ rev`\n    fi\n    echo $result", "    local s=$1\n    local res=\"\"\n    local\
    \ i=0\n    local c\n    local is_letter=0\n    while [ $i -lt ${#s} ]; do\n  \
    \      c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            is_letter=1\n\
    \            if [[ $c =~ [a-z] ]]; then\n                c=$(echo $c | tr a-z\
    \ A-Z)\n            else\n                c=$(echo $c | tr A-Z a-z)\n        \
    \    fi\n        fi\n        res+=$c\n        i=$((i+1))\n    done\n    if [ $is_letter\
    \ -eq 0 ]; then\n        res=$(echo $res | rev)\n    fi\n    echo $res", "   \
    \ echo $1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "    # Write\
    \ your code here\n    # echo \"$1\"\n    # echo \"${1//[^a-zA-Z]/}\"\n    if [[\
    \ -z \"${1//[^a-zA-Z]/}\" ]]; then\n        echo \"$1\" | rev\n    else\n    \
    \    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   fi", "  local s=$1\n  local result=\"\"\n  local i\n  for ((i=0; i<${#s};\
    \ i++)); do\n    local c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if\
    \ [[ $c =~ [a-z] ]]; then\n        result+=\"${c^^}\"\n      else\n        result+=\"\
    ${c,,}\"\n      fi\n    else\n      result+=\"$c\"\n    fi\n  done\n  echo \"\
    $result\"", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local s=$1\n    local res=\"\"\n    local i=0\n    local c\n  \
    \  local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n\
    \    local is_special=0\n    local is_empty=0\n    local is_reversed=0\n    local\
    \ is_reversed_again=0\n    local is_reversed_again_again=0\n    local is_reversed_again_again_again=0\n\
    \    local is_reversed_again_again_again_again=0\n    local is_reversed_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again=0\n    local is_reversed_again_again_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again_again_again=0\n   \
    \ local is_reversed_again_again_again_again_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again_again_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again_again_again_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again_again_again_again_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again_again_again_again_again_again_again_again_again_again=0\n\
    \    local is_reversed_again_again_again_again_again_again_again_again_again_again_again_again_again_again_again_again=0\n",
  "  local result=\"\"\n  local -i i=0\n  local -i len=${#1}\n  while (( i < len ));\
    \ do\n    local c=${1:i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      result+=\"\
    ${c,,}\"\n    else\n      result+=\"$c\"\n    fi\n    (( i++ ))\n  done\n  echo\
    \ \"${result^^}\"", "  local str=$1\n  local result=\"\"\n  local i=0\n  local\
    \ len=${#str}\n  local is_letter=0\n  local char\n  while [ $i -lt $len ]; do\n\
    \    char=${str:$i:1}\n    if [[ $char =~ [a-zA-Z] ]]; then\n      is_letter=1\n\
    \      if [[ $char =~ [a-z] ]]; then\n        char=$(echo $char | tr a-z A-Z)\n\
    \      else\n        char=$(echo $char | tr A-Z a-z)\n      fi\n    fi\n    result+=$char\n\
    \    i=$((i+1))\n  done\n  if [ $is_letter -eq 0 ]; then\n    result=$(echo $result\
    \ | rev)\n  fi\n  echo $result", "    # Write your code here\n    # echo $1 |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    local s=$1\n    local res=\"\"\n\
    \    local i=0\n    local len=${#s}\n    local c\n    local is_letter=0\n    while\
    \ [ $i -lt $len ]; do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            is_letter=1\n            if [[ $c =~ [a-z] ]]; then\n           \
    \     c=${c^^}\n            else\n                c=${c,,}\n            fi\n \
    \       fi\n        res=$res$c\n        i=$((i+1))\n    done\n    if [ $is_letter\
    \ -eq 0 ]; then\n        res=`echo $res | rev`\n    fi\n    echo $res", "  # Write\
    \ your code here\n  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    local -a arr\n    local -a arr2\n    local -i i=0\n    local -i j=0\n    local\
    \ -i len=${#1}\n    local -i flag=0\n    local -i flag2=0\n    local -i flag3=0\n\
    \    local -i flag4=0\n    local -i flag5=0\n    local -i flag6=0\n    local -i\
    \ flag7=0\n    local -i flag8=0\n    local -i flag9=0\n    local -i flag10=0\n\
    \    local -i flag11=0\n    local -i flag12=0\n    local -i flag13=0\n    local\
    \ -i flag14=0\n    local -i flag15=0\n    local -i flag16=0\n    local -i flag17=0\n\
    \    local -i flag18=0\n    local -i flag19=0\n    local -i flag20=0\n    local\
    \ -i flag21=0\n    local -i flag22=0\n    local -i flag23=0\n    local -i flag24=0\n\
    \    local -i flag25=0\n    local -i flag26=0\n    local -i flag27=0\n    local\
    \ -i flag28=0\n    local -i flag29=0\n    local -i flag30=0\n    local -i flag31=0\n\
    \    local -i flag32=0\n    local -i flag33=0\n    local -i flag34=0\n    local\
    \ -i flag35=0\n    local -i flag36=0\n    local -i flag37=0\n    local -i flag38=0\n\
    \    local -i flag39=0\n    local -i flag40=0\n    local -i flag41=0\n    local\
    \ -i flag42=0\n    local -i flag43=0\n    local -i flag44=0\n    local -i flag45=0\n\
    \    local -i flag46=0\n    local -i flag47=0\n    local -i flag48=0\n    local\
    \ -i flag49=0\n    local -i flag50=0\n    local -i flag51=0\n    local -i flag52=0\n\
    \    local -i", "    local str=$1\n    local res=''\n    local char=''\n    for\
    \ ((i=0; i<${#str}; i++)); do\n        char=${str:$i:1}\n        if [[ $char =~\
    \ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]]; then\n             \
    \   res+=$(echo $char | tr '[:lower:]' '[:upper:]')\n            else\n      \
    \          res+=$(echo $char | tr '[:upper:]' '[:lower:]')\n            fi\n \
    \       else\n            res+=$char\n        fi\n    done\n    echo $res", " \
    \   # Write your code here\n    # echo $1 | tr '[:upper:]' '[:lower:]'\n    #\
    \ echo $1 | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 |", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'", "  local s=$1\n  local s_len=${#s}\n  local s_rev=''\n  local\
    \ i=0\n  local c=''\n  local c_rev=''\n  local is_letter=0\n  local has_letter=0\n\
    \  local is_upper=0\n  local is_lower=0\n  local s_rev=''\n  local s_rev_len=0\n\
    \  local s_rev_i=0\n  local s_rev_c=''\n  local s_rev_c_rev=''\n  local s_rev_is_letter=0\n\
    \  local s_rev_is_upper=0\n  local s_rev_is_lower=0\n  local s_rev_has_letter=0\n\
    \  local s_rev_has_upper=0\n  local s_rev_has_lower=0\n  local s_rev_has_upper_or_lower=0\n\
    \  local s_rev_has_upper_and_lower=0\n  local s_rev_has_upper_and_lower_and_letter=0\n\
    \  local s_rev_has_upper_or_lower_and_letter=0\n  local s_rev_has_upper_or_lower_and_not_letter=0\n\
    \  local s_rev_has_upper_and_lower_and_not_letter=0\n  local s_rev_has_upper_or_lower_and_not_letter_or_letter=0\n\
    \  local s_rev_has_upper_and_lower_and_not_letter_or_letter=0\n  local s_rev_has_upper_or_lower_and_not_letter_or_letter_or_letter=0\n\
    \  local s_rev_has_upper_and_lower_and_not_letter_or_letter_or_letter=0\n  local\
    \ s_rev_has_upper_or_lower_and_not_letter_or_letter_or_letter_or_letter=0\n  local\
    \ s_rev_has_upper_and_lower_and_not_letter_or_letter_or_letter_or_letter=0\n \
    \ local s_rev_has_upper_or_lower_and_", "  local s=$1\n  local r=\"\"\n  local\
    \ i\n  for ((i=0; i<${#s}; i++)); do\n    local c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n      if [[ $c =~ [a-z] ]]; then\n        c=${c^^}\n      else\n \
    \       c=${c,,}\n      fi\n    fi\n    r=\"$r$c\"\n  done\n  echo $r", "    local\
    \ s=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#s}\n    local\
    \ c\n    local isLetter=0\n    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            isLetter=1\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                c=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                c=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        fi\n        result=\"$result$c\"\n        i=$((i+1))\n\
    \    done\n    if [ $isLetter -eq 0 ]; then\n        result=$(echo $result | rev)\n\
    \    fi\n    echo $result", "    local s=\"$1\"\n    local res=\"\"\n    local\
    \ c=\"\"\n    local l=\"\"\n    local u=\"\"\n    local i=0\n    local lc=0\n\
    \    local uc=0\n    for ((i=0; i<${#s}; i++)); do\n        c=\"${s:$i:1}\"\n\
    \        l=\"${c,,}\"\n        u=\"${c^^}\"\n        if [[ \"$c\" == \"$l\" ]];\
    \ then\n            res+=\"$u\"\n            ((uc++))\n        else\n        \
    \    res+=\"$l\"\n            ((lc++))\n        fi\n    done\n    if [[ $lc -eq\
    \ 0 ]]; then\n        echo \"${res::-1}\" | rev\n    else\n        echo \"$res\"\
    \n    fi", "    local str=$1\n    local res=\"\"\n    local char=\"\"\n    local\
    \ i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n\
    \        if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                char=$(echo $char | tr a-z A-Z)\n            else\n  \
    \              char=$(echo $char | tr A-Z a-z)\n            fi\n        fi\n \
    \       res=$res$char\n        i=$((i+1))\n    done\n    echo $res", "  echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'", "    echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "    local s=$1\n \
    \   local res=\"\"\n    local i=0\n    local l=${#s}\n    local c\n    local is_letter=0\n\
    \    while [ $i -lt $l ]; do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            is_letter=1\n            if [[ $c =~ [a-z] ]]; then\n\
    \                c=$(echo $c | tr [a-z] [A-Z])\n            else\n           \
    \     c=$(echo $c | tr [A-Z] [a-z])\n            fi\n        fi\n        res=$res$c\n\
    \        i=$((i+1))\n    done\n    if [ $is_letter -eq 0 ]; then\n        echo\
    \ $res | rev\n    else\n        echo $res\n    fi", "    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", "    if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  # Write your code\
    \ here\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n  else\n    echo $1 | rev\n  fi", "  # Write your\
    \ code here\n  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local\
    \ s=$1\n    local res=\"\"\n    local i=0\n    local l=${#s}\n    local c\n  \
    \  local r\n    local is_letter=0\n    for (( i=0; i<l; i++ )); do\n        c=${s:$i:1}\n\
    \        r=$(echo $c | tr '[:upper:]' '[:lower:]')\n        if [[ \"$c\" != \"\
    $r\" ]]; then\n            is_letter=1\n        fi\n        res+=$r\n    done\n\
    \    if [[ $is_letter -eq 0 ]]; then\n        echo $res | rev\n    else\n    \
    \    echo $res | tr '[:lower:]' '[:upper:]'\n    fi", "    # Write your code here\n\
    \    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  #\
    \ Write your code here\n  # Use echo to print to stdout\n  echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr -d '[:punct:]' | rev", "    local s=$1\n    local res=\"\"\n\
    \    local i\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n \
    \       if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=\"${c^^}\"\n            else\n                res+=\"${c,,}\"\
    \n            fi\n        else\n            res+=\"$c\"\n        fi\n    done\n\
    \    echo \"$res\"", "  echo $1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]'\
    \ | rev", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++));\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n\
    \                c=${c,,}\n            fi\n        fi\n        res+=$c\n    done\n\
    \    echo $res", "  # Write your code here\n  # echo $1\n  # echo ${1//[^a-zA-Z]/}\n\
    \  # echo ${1//[a-zA-Z]/}\n  if [ -z \"${1//[^a-zA-Z]/}\" ]; then\n    echo $1\
    \ | rev\n  else\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \  fi", "    local s=$1\n    local res=\"\"\n    local i=0\n    local l=${#s}\n\
    \    local c\n    local is_letter=0\n    while [ $i -lt $l ]; do\n        c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            is_letter=1\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    if [ $is_letter -eq 0 ]; then\n        echo $res | rev\n    else\n\
    \        echo $res\n    fi", "    # Write your code here\n    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", "    local s=$1\n\
    \    local res=\"\"\n    local i=0\n    local len=${#s}\n    local c\n    local\
    \ is_letter=0\n    while [[ $i -lt $len ]]; do\n        c=${s:$i:1}\n        if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n            is_letter=1\n            if [[ $c =~\
    \ [a-z] ]]; then\n                c=${c^^}\n            else\n               \
    \ c=${c,,}\n            fi\n        fi\n        res+=$c\n        i=$((i+1))\n\
    \    done\n    if [[ $is_letter -eq 0 ]]; then\n        res=${res::-1}\n    fi\n\
    \    echo $res", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  local s=$1\n  local r=\"\"\n  local i\n  for ((i=0; i<${#s};\
    \ i++)); do\n    local c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if\
    \ [[ $c =~ [a-z] ]]; then\n        r+=\"${c^^}\"\n      else\n        r+=\"${c,,}\"\
    \n      fi\n    else\n      r+=\"$c\"\n    fi\n  done\n  echo \"$r\"", "    #\
    \ Write your code here\n    # echo $1\n    if [[ $1 =~ [A-Za-z] ]]; then\n   \
    \     echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n\
    \        echo $1 | rev\n    fi", "    local s=\"$1\"\n    local len=${#s}\n  \
    \  local i=0\n    local new=\"\"\n    local c=\"\"\n    local isLetter=0\n   \
    \ local isUpper=0\n    local isLower=0\n    local isDigit=0\n    local isOther=0\n\
    \    local isAllOther=1\n    local isAllDigit=1\n    local isAllUpper=1\n    local\
    \ isAllLower=1\n    local isAllLetter=1\n    local isAllLetterOrDigit=1\n    local\
    \ isAllLetterOrDigitOrOther=1\n    local isAllLetterOrDigitOrOtherOrSpace=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpper=1\n    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLower=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigit=1\n    local\
    \ isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOther=1\n    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpace=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpaceOrUpper=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpaceOrUpperOrLower=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigit=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOther=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpace=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpaceOrUpper=1\n\
    \    local isAllLetterOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigitOrOtherOrSpaceOrUpperOrLowerOrDigit",
  "  local s=$1\n  if [[ $s =~ [a-zA-Z] ]]; then\n    echo $s | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n  else\n    echo $s | rev\n  fi", "    local s=$1\n\
    \    local res=''\n    local i\n    for ((i=0; i<${#s}; i++)); do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                res+=\"${c^^}\"\n            else\n        \
    \        res+=\"${c,,}\"\n            fi\n        else\n            res+=\"$c\"\
    \n        fi\n    done\n    echo \"$res\"", "    # Write your code here\n    #\
    \ echo $1\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "  echo \"$1\" | sed -e 's/[a-z]/\\U&/g' -e 's/[A-Z]/\\L&/g' -e 's/[^a-zA-Z]/\\\
    U&/g'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    local\
    \ c\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ is_digit=0\n    local is_special=0\n    local is_space=0\n    local is_newline=0\n\
    \    local is_tab=0\n    local is_backspace=0\n    local is_carriage_return=0\n\
    \    local is_form_feed=0\n    local is_vertical_tab=0\n    local is_null=0\n\
    \    local is_octal=0\n    local is_hex=0\n    local is_unicode=0\n    local is_other=0\n\
    \    local is_ascii=0\n    local is_printable=0\n    local is_control=0\n    local\
    \ is_graphic=0\n    local is_punct=0\n    local is_alnum=0\n    local is_alpha=0\n\
    \    local is_blank=0\n    local is_cntrl=0\n    local is_digit=0\n    local is_graph=0\n\
    \    local is_lower=0\n    local is_print=0\n    local is_punct=0\n    local is_space=0\n\
    \    local is_upper=0\n    local is_xdigit=0\n    local is_word=0\n    local is_ascii_printable=0\n\
    \    local is_ascii_control=0\n    local is_ascii_graphic=0\n    local is_ascii_punct=0\n\
    \    local is_ascii_alnum=0\n    local is_ascii_alpha=0\n    local is_ascii_blank=0\n\
    \    local is_ascii_cntrl=0\n    local is_ascii_digit=0\n    local is_ascii_graph=0\n\
    \    local is_ascii_lower=0\n    local is_ascii_print=0\n    local is_ascii_punct=0\n\
    \    local is_ascii_space=0\n    local is_", "    # Write your code here\n   \
    \ if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  #\
    \ Write your code here\n  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  # Write your code here\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr\
    \ '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n   \
    \ # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n   \
    \ # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo\
    \ $1 | tr '[:upper:]' '[:lower:]' |", "    # Write your code here\n    # If the\
    \ string contains no letters, reverse the string.\n    if [[ ! $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo $1 | rev\n    else\n        # if s[i] is a letter, reverse\
    \ its case from lower to upper or vise versa, \n        # otherwise keep it as\
    \ it is.\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    fi", "    # Write your code here\n    # echo $1\n    # echo $1 | tr '[:upper:]'\
    \ '[:lower:]'\n    # echo $1 | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    #\
    \ echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n", "    local s=$1\n    local res=\"\"\n    for\
    \ ((i=0; i<${#s}; i++)); do\n        if [[ \"${s:$i:1}\" =~ [a-zA-Z] ]]; then\n\
    \            res+=${s:$i:1} | tr '[:upper:]' '[:lower:]'\n        else\n     \
    \       res+=${s:$i:1}\n        fi\n    done\n    echo $res", "  # Write your\
    \ code here\n  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  local s=$1\n  local result=\"\"\n  local i=0\n  local len=${#s}\n  local c\n\
    \  local is_letter=0\n  local is_upper=0\n  while [ $i -lt $len ]; do\n    c=${s:$i:1}\n\
    \    is_letter=0\n    is_upper=0\n    if [[ $c =~ [a-z] ]]; then\n      is_letter=1\n\
    \    elif [[ $c =~ [A-Z] ]]; then\n      is_letter=1\n      is_upper=1\n    fi\n\
    \    if [ $is_letter -eq 1 ]; then\n      if [ $is_upper -eq 1 ]; then\n     \
    \   c=$(echo \"$c\" | tr '[:upper:]' '[:lower:]')\n      else\n        c=$(echo\
    \ \"$c\" | tr '[:lower:]' '[:upper:]')\n      fi\n    fi\n    result=\"$result$c\"\
    \n    i=$((i+1))\n  done\n  echo \"$result\"", "    local s=$1\n    local result=\"\
    \"\n    local i\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                c=${c^^}\n            else\n                c=${c,,}\n      \
    \      fi\n        fi\n        result+=$c\n    done\n    echo $result", "    local\
    \ s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n    local c\n\
    \    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ ascii_code\n    local ascii_code_upper\n    local ascii_code_lower\n    local\
    \ ascii_code_diff\n    local ascii_code_upper_diff\n    local ascii_code_lower_diff\n\
    \    local ascii_code_upper_lower_diff\n    local ascii_code_lower_upper_diff\n\
    \    local ascii_code_upper_lower_diff_abs\n    local ascii_code_lower_upper_diff_abs\n\
    \    local ascii_code_upper_lower_diff_abs_min\n    local ascii_code_lower_upper_diff_abs_min\n\
    \    local ascii_code_upper_lower_diff_abs_min_index\n    local ascii_code_lower_upper_diff_abs_min_index\n\
    \    local ascii_code_upper_lower_diff_abs_min_index_upper\n    local ascii_code_lower_upper_diff_abs_min_index_lower\n\
    \    local ascii_code_upper_lower_diff_abs_min_index_upper_lower\n    local ascii_code_lower_upper_diff_abs_min_index_lower_upper\n\
    \    local ascii_code_upper_lower_diff_abs_min_index_upper_lower_abs\n    local\
    \ ascii_code_lower_upper_diff_abs_min_index_lower_upper_abs\n    local ascii_code_upper_lower_diff_abs_min_index_upper_lower_abs_min\n\
    \    local ascii_code_lower_upper_diff_abs_min_index_lower_upper_abs_min\n   \
    \ local ascii_code_upper_lower_diff_abs_min_index_upper_lower_abs_min_index\n\
    \    local ascii_code_lower_upper_diff_abs_min_index_lower_upper_abs_min_index",
  "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  # Write\
    \ your code here\n  # Use echo to print to stdout\n  echo $(echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]')", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    # Write your code here\n    echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr -d '[:digit:]' | tr -d '[:punct:]'\
    \ | tr -d '[:space:]' | rev", "    local s=$1\n    local s_len=${#s}\n    local\
    \ i=0\n    local res=\"\"\n    local c=\"\"\n    local c_code=0\n    local c_code_new=0\n\
    \    local c_new=\"\"\n    local c_new_code=0\n    local c_new_code_new=0\n  \
    \  local c_new_new=\"\"\n    local c_new_new_code=0\n    local c_new_new_code_new=0\n\
    \    local c_new_new_new=\"\"\n    local c_new_new_new_code=0\n    local c_new_new_new_code_new=0\n\
    \    local c_new_new_new_new=\"\"\n    local c_new_new_new_new_code=0\n    local\
    \ c_new_new_new_new_code_new=0\n    local c_new_new_new_new_new=\"\"\n    local\
    \ c_new_new_new_new_new_code=0\n    local c_new_new_new_new_new_code_new=0\n \
    \   local c_new_new_new_new_new_new=\"\"\n    local c_new_new_new_new_new_new_code=0\n\
    \    local c_new_new_new_new_new_new_code_new=0\n    local c_new_new_new_new_new_new_new=\"\
    \"\n    local c_new_new_new_new_new_new_new_code=0\n    local c_new_new_new_new_new_new_new_code_new=0\n\
    \    local c_new_new_new_new_new_new_new_new=\"\"\n    local c_new_new_new_new_new_new_new_new_code=0\n\
    \    local c_new_new_new_new_new_new_new_new_code_new=0\n    local c_new_new_new_new_new_new_new_new_new=\"\
    \"\n    local c_new_new_new_new_new_new_new_new_new_code=0\n    local c_new_new_new_new",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "  local str=$1\n  local res=\"\"\n  local i=0\n  local len=${#str}\n  local c\n\
    \  local is_letter=0\n  while [ $i -lt $len ]; do\n    c=${str:$i:1}\n    if [[\
    \ $c =~ [a-zA-Z] ]]; then\n      is_letter=1\n      if [[ $c =~ [a-z] ]]; then\n\
    \        c=${c^^}\n      else\n        c=${c,,}\n      fi\n    fi\n    res+=$c\n\
    \    i=$((i+1))\n  done\n  if [ $is_letter -eq 0 ]; then\n    res=${res::-1}\n\
    \  fi\n  echo $res", "  local s=\"$1\"\n  local res=\"\"\n  local i=0\n  local\
    \ len=${#s}\n  local c\n  while [ $i -lt $len ]; do\n    c=${s:$i:1}\n    if [[\
    \ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n        res+=\"${c^^}\"\
    \n      else\n        res+=\"${c,,}\"\n      fi\n    else\n      res+=\"$c\"\n\
    \    fi\n    i=$((i+1))\n  done\n  echo \"$res\"", "    # Write your code here\n\
    \    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "  local s=$1\n  local result=\"\
    \"\n  local i\n  for ((i=0; i<${#s}; i++)); do\n    local c=${s:$i:1}\n    if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n        result+=\"\
    ${c^^}\"\n      else\n        result+=\"${c,,}\"\n      fi\n    else\n      result+=\"\
    $c\"\n    fi\n  done\n  echo \"$result\"", "    local s=$1\n    local result=\"\
    \"\n    local i=0\n    local len=${#s}\n    local c\n    local is_letter=0\n \
    \   for ((i=0; i<len; i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            is_letter=1\n            if [[ $c =~ [a-z] ]]; then\n\
    \                c=${c^^}\n            else\n                c=${c,,}\n      \
    \      fi\n        fi\n        result+=$c\n    done\n    if [ $is_letter -eq 0\
    \ ]; then\n        result=`echo $result | rev`\n    fi\n    echo $result", " \
    \   # Write your code here\n    echo $1 | tr '[:upper:]' '[:lower:]' | rev", " \
    \   echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  local\
    \ str=$1\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local is_letter=0\n\
    \  local char\n\n  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n    if [[\
    \ $char =~ [a-zA-Z] ]]; then\n      is_letter=1\n      if [[ $char =~ [a-z] ]];\
    \ then\n        char=$(echo $char | tr '[:lower:]' '[:upper:]')\n      else\n\
    \        char=$(echo $char | tr '[:upper:]' '[:lower:]')\n      fi\n    fi\n \
    \   result=\"$result$char\"\n    i=$((i+1))\n  done\n\n  if [ $is_letter -eq 0\
    \ ]; then\n    result=$(echo $result | rev)\n  fi\n\n  echo $result", "  echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo $1 | tr\
    \ -d '[:digit:]' | rev | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "  local s=$1\n  local r=\"\"\n  local c\n  for ((i=0; i<${#s}; i++)); do\n    c=${s:$i:1}\n\
    \    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n       \
    \ r+=\"${c^^}\"\n      else\n        r+=\"${c,,}\"\n      fi\n    else\n     \
    \ r+=\"$c\"\n    fi\n  done\n  echo \"$r\"", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[a-zA-Z]' '[A-Za-z]'\n    else\n        echo $1 | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    # Write your code here\n    # Reverse the string if it contains\
    \ no letters\n    if [[ ! $1 =~ [a-zA-Z] ]]; then\n        echo $1 | rev\n   \
    \ else\n        # Reverse the case of each letter\n        for (( i=0; i<${#1};\
    \ i++ )); do\n            if [[ ${1:$i:1} =~ [a-z] ]]; then\n                echo\
    \ -n ${1:$i:1} | tr [a-z] [A-Z]\n            elif [[ ${1:$i:1} =~ [A-Z] ]]; then\n\
    \                echo -n ${1:$i:1} | tr [A-Z] [a-z]\n            else\n      \
    \          echo -n ${1:$i:1}\n            fi\n        done\n    fi", "    local\
    \ s=$1\n    local res=\"\"\n    local len=${#s}\n    local i=0\n    local c\n\
    \    local c_lower\n    local c_upper\n    local c_res\n    while [ $i -lt $len\
    \ ]; do\n        c=${s:$i:1}\n        c_lower=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \        c_upper=$(echo $c | tr '[:lower:]' '[:upper:]')\n        if [ \"$c\"\
    \ == \"$c_lower\" ]; then\n            c_res=$c_upper\n        elif [ \"$c\" ==\
    \ \"$c_upper\" ]; then\n            c_res=$c_lower\n        else\n           \
    \ c_res=$c\n        fi\n        res=\"$res$c_res\"\n        i=$((i+1))\n    done\n\
    \    echo $res", "  # Write your code here\n  echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev", "    local s=$1\n    local res=\"\"\n    local i=0\n    local c\n  \
    \  local is_letter=0\n    while [ $i -lt ${#s} ]; do\n        c=${s:$i:1}\n  \
    \      if [[ $c =~ [a-zA-Z] ]]; then\n            is_letter=1\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n      \
    \          c=${c,,}\n            fi\n        fi\n        res=$res$c\n        i=$((i+1))\n\
    \    done\n    if [ $is_letter -eq 0 ]; then\n        res=${res::-1}\n    fi\n\
    \    echo $res", "    # Write your code here\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | rev\n    # echo $1 | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]' | rev | tr '[:upper:]' '[:lower:]'\n    # echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | rev | tr '[:upper:]'\
    \ '[:lower:]' | rev\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]' | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | rev\
    \ | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]' '[:lower:]' | rev\n    #\
    \ echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | rev | tr\
    \ '[:upper:]' '[:lower:]' | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]'\
    \ '[:lower:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]' '[:lower:]' | rev\
    \ | tr '[:upper:]' '[:lower:]' | rev\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]'\
    \ '[:lower:]' | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]' '[:lower:]'\n\
    \    #", "  # Write your code here\n  echo $1 | tr '[:upper:]' '[:lower:]' | rev",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local s=\"$1\"\n    local res=\"\"\n    local i=0\n    local l=${#s}\n    while\
    \ [ $i -lt $l ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]];\
    \ then\n            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\
    \n            else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n        i=$((i+1))\n    done\n    echo \"\
    $res\"", "  local s=$1\n  local r=\"\"\n  local c=\"\"\n  local i=0\n  local l=${#s}\n\
    \  local j=0\n  local k=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  for ((i=0;\
    \ i<l; i++)); do\n    c=${s:i:1}\n    case $c in\n      a) ((a++)) ;;\n      b)\
    \ ((b++)) ;;\n      c) ((c++)) ;;\n      d) ((d++)) ;;\n      e) ((e++)) ;;\n\
    \      f) ((f++)) ;;\n      g) ((g++)) ;;\n      h) ((h++)) ;;\n      i) ((i++))\
    \ ;;\n      j) ((j++)) ;;\n      k) ((k++)) ;;\n      l) ((l++)) ;;\n      m)\
    \ ((m++)) ;;\n      n) ((n++)) ;;\n      o) ((o++)) ;;\n      p) ((p++)) ;;\n\
    \      q) ((q++)) ;;\n      r) ((r++)) ;;\n      s) ((s++)) ;;\n      t) ((t++))\
    \ ;;\n      u) ((u++)) ;;\n      v) ((v++)) ;;\n      w)", "    echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo $1 | tr '[a-zA-Z]' '[A-Za-z]'\n    else\n        echo\
    \ $1 | rev\n    fi", "  # Write your code here\n  echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'", "    local s=$1\n    local result=\"\"\n    local\
    \ i=0\n    local len=${#s}\n    local c\n    local is_letter=0\n    local is_upper=0\n\
    \    local is_lower=0\n    local is_digit=0\n    local is_special=0\n    local\
    \ is_empty=0\n    local is_all_letter=0\n    local is_all_upper=0\n    local is_all_lower=0\n\
    \    local is_all_digit=0\n    local is_all_special=0\n    local is_all_empty=0\n\
    \    local is_all_same=0\n    local is_all_same_letter=0\n    local is_all_same_upper=0\n\
    \    local is_all_same_lower=0\n    local is_all_same_digit=0\n    local is_all_same_special=0\n\
    \    local is_all_same_empty=0\n    local is_all_same_letter_upper=0\n    local\
    \ is_all_same_letter_lower=0\n    local is_all_same_letter_digit=0\n    local\
    \ is_all_same_letter_special=0\n    local is_all_same_letter_empty=0\n    local\
    \ is_all_same_upper_lower=0\n    local is_all_same_upper_digit=0\n    local is_all_same_upper_special=0\n\
    \    local is_all_same_upper_empty=0\n    local is_all_same_lower_digit=0\n  \
    \  local is_all_same_lower_special=0\n    local is_all_same_lower_empty=0\n  \
    \  local is_all_same_digit_special=0\n    local is_all_same_digit_empty=0\n  \
    \  local is_all_same_special_empty=0\n    local is_all_same_letter_upper_lower=0\n\
    \    local is_all_same_letter_upper_digit=0\n    local is_all_same_letter_upper_special=0\n\
    \    local is_all_same_letter_upper_empty=0\n    local is_all_same_letter_lower_digit=0\n\
    \   ", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "   \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n  else\n    echo $1 | rev\n  fi", "    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local s=$1\n    local result=\"\
    \"\n    local i=0\n    local len=${#s}\n    local c=\"\"\n    local is_letter=0\n\
    \    local is_upper=0\n    local is_lower=0\n    for ((i=0; i<len; i++)); do\n\
    \        c=${s:$i:1}\n        is_letter=$(is_letter $c)\n        if [[ $is_letter\
    \ -eq 1 ]]; then\n            is_upper=$(is_upper $c)\n            is_lower=$(is_lower\
    \ $c)\n            if [[ $is_upper -eq 1 ]]; then\n                c=$(to_lower\
    \ $c)\n            elif [[ $is_lower -eq 1 ]]; then\n                c=$(to_upper\
    \ $c)\n            fi\n        fi\n        result=\"$result$c\"\n    done\n  \
    \  echo $result", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  local s=$1\n  local result=\"\"\n  for (( i=0; i<${#s}; i++ )); do\n    if [[\
    \ \"${s:$i:1}\" =~ [a-zA-Z] ]]; then\n      result+=\"${s:$i:1}\"\n    else\n\
    \      result=\"${s:$i:1}$result\"\n    fi\n  done\n  echo \"$result\"", "   \
    \ local s=$1\n    local res=\"\"\n    local i=0\n    local c=\"\"\n    local is_letter=0\n\
    \    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n    local is_special=0\n\
    \    local is_empty=0\n    local is_all_letter=1\n    local is_all_upper=1\n \
    \   local is_all_lower=1\n    local is_all_digit=1\n    local is_all_special=1\n\
    \    local is_all_empty=1\n    local is_all_upper_or_lower=1\n    local is_all_upper_or_digit=1\n\
    \    local is_all_lower_or_digit=1\n    local is_all_upper_or_special=1\n    local\
    \ is_all_lower_or_special=1\n    local is_all_digit_or_special=1\n    local is_all_upper_or_lower_or_digit=1\n\
    \    local is_all_upper_or_lower_or_special=1\n    local is_all_lower_or_digit_or_special=1\n\
    \    local is_all_upper_or_digit_or_special=1\n    local is_all_upper_or_lower_or_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_empty=1\n    local is_all_upper_or_lower_or_special_or_empty=1\n\
    \    local is_all_lower_or_digit_or_special_or_empty=1\n    local is_all_upper_or_digit_or_special_or_empty=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty=1\n    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_letter=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_digit=1\n   \
    \ local is_all_upper_or_lower_or_digit_or_special_or_empty_or_special=1", "  \
    \  local s=$1\n    local r=\"\"\n    local c\n    for ((i=0; i<${#s}; i++)); do\n\
    \        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[\
    \ $c =~ [a-z] ]]; then\n                r+=\"${c^^}\"\n            else\n    \
    \            r+=\"${c,,}\"\n            fi\n        else\n            r+=\"$c\"\
    \n        fi\n    done\n    echo \"$r\"", "    # Write your code here\n    # echo\
    \ $1\n    # echo ${1//[^[:alpha:]]/}\n    # echo ${1//[^[:alpha:]]/} | rev\n \
    \   # echo ${1//[^[:alpha:]]/} | rev | tr '[:upper:]' '[:lower:]'\n    # echo\
    \ ${1//[^[:alpha:]]/} | rev | tr '[:upper:]' '[:lower:]' | rev\n    # echo ${1//[^[:alpha:]]/}\
    \ | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:lower:]' '[:upper:]'\n    #\
    \ echo ${1//[^[:alpha:]]/} | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:lower:]'\
    \ '[:upper:]' | rev\n    # echo ${1//[^[:alpha:]]/} | rev | tr '[:upper:]' '[:lower:]'\
    \ | rev | tr '[:lower:]' '[:upper:]' | rev | tr '[:upper:]' '[:lower:]'\n    #\
    \ echo ${1//[^[:alpha:]]/} | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:lower:]'\
    \ '[:upper:]' | rev | tr '[:upper:]' '[:lower:]' | rev\n    # echo ${1//[^[:alpha:]]/}\
    \ | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:lower:]' '[:upper:]' | rev\
    \ | tr '[:upper:]' '[:lower:]' | rev | tr '[:lower:]' '[:upper:]'\n    # echo\
    \ ${1//[^[:alpha:]]/} | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:lower:]'\
    \ '[:upper:]' | rev | tr '[:upper:]' '[:lower:]' | rev | tr '[:lower:]' '[:upper:]'\
    \ | rev\n    # echo ${1//[^[:alpha:]]/} | rev | tr '[:upper:]' '[:lower:]' | rev\
    \ | tr '[:lower:]' '[:upper:]' | rev | tr '[", "    # Write your code here\n \
    \   # echo $1\n    # echo ${#1}\n    # echo ${1:0:1}\n    # echo ${1:1:1}\n  \
    \  # echo ${1:2:1}\n    # echo ${1:3:1}\n    # echo ${1:4:1}\n    # echo ${1:5:1}\n\
    \    # echo ${1:6:1}\n    # echo ${1:7:1}\n    # echo ${1:8:1}\n    # echo ${1:9:1}\n\
    \    # echo ${1:10:1}\n    # echo ${1:11:1}\n    # echo ${1:12:1}\n    # echo\
    \ ${1:13:1}\n    # echo ${1:14:1}\n    # echo ${1:15:1}\n    # echo ${1:16:1}\n\
    \    # echo ${1:17:1}\n    # echo ${1:18:1}\n    # echo ${1:19:1}\n    # echo\
    \ ${1:20:1}\n    # echo ${1:21:1}\n    # echo ${1:22:1}\n    # echo ${1:23:1}\n\
    \    # echo ${1:24:1}\n    # echo ${1:25:1}\n    # echo ${1:26:1}\n    # echo\
    \ ${1:27:1}\n    # echo ${1:28:1}\n    # echo ${1:29:1}\n    # echo ${1:30:1}\n\
    \    # echo ${1:31:1}\n    # echo ${1:32:1}\n    # echo ${1:33:1}\n    # echo\
    \ ${1:34:1}\n    # echo ${1:35:1}\n    # echo ${1:36:1}\n    # echo ${1:37:1}\n\
    \    # echo ${1:38:1}\n    # echo ${1:39:1}\n    # echo ${1:40:1}\n    # echo\
    \ ${1:41:1}\n    # echo ${1:42:1}\n    # echo ${1:43:1}\n    # echo ${1:", " \
    \   echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local\
    \ s=\"$1\"\n    local res=\"\"\n    local c=\"\"\n    local i=0\n    local len=${#s}\n\
    \    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ is_digit=0\n    local is_special=0\n    local is_reversed=0\n    local is_reversed_upper=0\n\
    \    local is_reversed_lower=0\n    local is_reversed_digit=0\n    local is_reversed_special=0\n\
    \    local is_reversed_letter=0\n    local is_reversed_all=0\n    local is_reversed_all_upper=0\n\
    \    local is_reversed_all_lower=0\n    local is_reversed_all_digit=0\n    local\
    \ is_reversed_all_special=0\n    local is_reversed_all_letter=0\n    local is_reversed_all_upper_lower=0\n\
    \    local is_reversed_all_upper_digit=0\n    local is_reversed_all_upper_special=0\n\
    \    local is_reversed_all_upper_letter=0\n    local is_reversed_all_lower_digit=0\n\
    \    local is_reversed_all_lower_special=0\n    local is_reversed_all_lower_letter=0\n\
    \    local is_reversed_all_digit_special=0\n    local is_reversed_all_digit_letter=0\n\
    \    local is_reversed_all_special_letter=0\n    local is_reversed_all_upper_lower_digit=0\n\
    \    local is_reversed_all_upper_lower_special=0\n    local is_reversed_all_upper_lower_letter=0\n\
    \    local is_reversed_all_upper_digit_special=0\n    local is_reversed_all_upper_digit_letter=0\n\
    \    local is_reversed_all_upper_special_letter=0\n    local is_reversed_all_lower_digit_special=0\n",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \   # Write your code here\n    # echo $1 | tr '[:upper:]' '[:lower:]'\n    #\
    \ echo $1 | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 |", "    # Write your code here\n    # echo \"$1\"\n    # echo\
    \ \"${1//[^a-zA-Z]/}\"\n    if [[ -z \"${1//[^a-zA-Z]/}\" ]]; then\n        echo\
    \ \"$1\" | rev\n    else\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    fi", "    if [[ ! $1 =~ [a-zA-Z] ]]; then\n   \
    \     echo \"$1\" | rev\n    else\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    fi", "    # Write your code here\n    # echo\
    \ $1 | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n   \
    \ # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 |",
  "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    local\
    \ c\n    local c_upper\n    local c_lower\n    local c_upper_lower\n    local\
    \ c_lower_upper\n    local c_upper_lower_upper\n    local c_lower_upper_lower\n\
    \    local c_upper_lower_upper_lower\n    local c_lower_upper_lower_upper\n  \
    \  local c_upper_lower_upper_lower_upper\n    local c_lower_upper_lower_upper_lower\n\
    \    local c_upper_lower_upper_lower_upper_lower\n    local c_lower_upper_lower_upper_lower_upper\n\
    \    local c_upper_lower_upper_lower_upper_lower_upper\n    local c_lower_upper_lower_upper_lower_upper_lower\n\
    \    local c_upper_lower_upper_lower_upper_lower_upper_lower\n    local c_lower_upper_lower_upper_lower_upper_lower_upper\n\
    \    local c_upper_lower_upper_lower_upper_lower_upper_lower_upper\n    local\
    \ c_lower_upper_lower_upper_lower_upper_lower_upper_lower\n    local c_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower\n\
    \    local c_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\n   \
    \ local c_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\n\
    \    local c_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower\n\
    \    local c_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower\n\
    \    local c_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\n\
    \    local c_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\n\
    \    local c_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower\n\
    \    local c_upper_lower_upper_lower_upper", "    echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo $1 | tr -d '[:digit:]' | tr -d '[:punct:]'\
    \ | tr -d '[:space:]' | rev", "    # Write your code here\n    # echo $1\n   \
    \ if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    echo $1 | tr -d '[:digit:]' | tr '[:upper:]' '[:lower:]' | rev", "    echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | rev", "  # Write your code here\n  if [[ $1\
    \ =~ [a-zA-Z] ]]; then\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n  else\n    echo $1 | rev\n  fi", "    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo $1 | rev\n    fi", "  # Write your code here\n  echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    # Write your code\
    \ here\n    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "  local s=$1\n  local\
    \ res=\"\"\n  local i=0\n  local c\n  local is_letter=0\n  local is_upper=0\n\
    \  local is_lower=0\n  local is_digit=0\n  local is_special=0\n  local is_space=0\n\
    \  local is_newline=0\n  local is_tab=0\n  local is_carriage=0\n  local is_backspace=0\n\
    \  local is_formfeed=0\n  local is_vertical=0\n  local is_backslash=0\n  local\
    \ is_single_quote=0\n  local is_double_quote=0\n  local is_question=0\n  local\
    \ is_exclamation=0\n  local is_at=0\n  local is_hash=0\n  local is_dollar=0\n\
    \  local is_percent=0\n  local is_caret=0\n  local is_ampersand=0\n  local is_asterisk=0\n\
    \  local is_open_paren=0\n  local is_close_paren=0\n  local is_minus=0\n  local\
    \ is_underscore=0\n  local is_equal=0\n  local is_plus=0\n  local is_open_bracket=0\n\
    \  local is_close_bracket=0\n  local is_open_brace=0\n  local is_close_brace=0\n\
    \  local is_pipe=0\n  local is_semicolon=0\n  local is_colon=0\n  local is_comma=0\n\
    \  local is_period=0\n  local is_less_than=0\n  local is_greater_than=0\n  local\
    \ is_slash=0\n  local is_backtick=0\n  local is_tilde=0\n  local is_backtick=0\n\
    \  local is_tilde=0\n  local is_backtick=0\n  local is_tilde=0\n  local is_backtick=0\n\
    \  local is_tilde=0\n  local is_backtick=0\n  local is_tilde=0\n  local is_backtick=0\n\
    \  local is_tilde=0\n  local is_back", "    # Write your code here\n    # echo\
    \ $1\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    # Write\
    \ your code here\n    # echo $1\n    # echo $1 | rev\n    # echo $1 | tr '[:upper:]'\
    \ '[:lower:]'\n    # echo $1 | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | rev\n    # echo $1 | tr '[:lower:]' '[:upper:]' |\
    \ rev\n    # echo $1 | tr '[:upper:]' '[:lower:]' | rev | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 | tr '[:lower:]' '[:upper:]' | rev | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]' '[:lower:]'\
    \ | rev\n    # echo $1 | tr '[:lower:]' '[:upper:]' | rev | tr '[:upper:]' '[:lower:]'\
    \ | rev\n    # echo $1 | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]' '[:lower:]'\
    \ | rev | rev\n    # echo $1 | tr '[:lower:]' '[:upper:]' | rev | tr '[:upper:]'\
    \ '[:lower:]' | rev | rev\n    # echo $1 | tr '[:upper:]' '[:lower:]' | rev |\
    \ tr '[:upper:]' '[:lower:]' | rev | rev | rev\n    # echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | rev | tr '[:upper:]' '[:lower:]' | rev | rev | rev\n    # echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | rev | tr '[:upper:]' '[:lower:]' | rev | rev\
    \ | rev | rev\n    # echo $1 | tr '[:lower:]' '[:upper:]' | rev | tr '[:upper:]'\
    \ '[:lower:]' | rev | rev | rev | rev\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | rev | tr '[:upper:]' '[:lower:]' | rev | rev | rev | rev | rev\n    # echo\
    \ $1 | tr '[:lower:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ $1 | rev\n    fi", "    # Write your code here\n    # Reverse the string\n \
    \   # Check if the string contains a letter\n    # If it does, reverse the case\
    \ of the letter\n    # If it doesn't, return the string\n    # If the string is\
    \ empty, return an empty string\n    if [ -z \"$1\" ]; then\n        echo \"\"\
    \n    else\n        echo \"$1\" | rev | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    fi", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++));\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                res+=${c^^}\n            else\n\
    \                res+=${c,,}\n            fi\n        else\n            res+=$c\n\
    \        fi\n    done\n    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n  \
    \      echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n   \
    \ else\n        echo $1 | rev\n    fi", "    # Write your code here\n    echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    # write your code here\n    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local\
    \ s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if [[ \"\
    ${s:$i:1}\" =~ [a-zA-Z] ]]; then\n            res+=${s:$i:1} | tr '[:upper:]'\
    \ '[:lower:]'\n        else\n            res+=${s:$i:1}\n        fi\n    done\n\
    \    echo $res", "    echo $1 | tr -d '[:digit:]' | rev", "  echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    local s=\"$1\"\n    local res=\"\
    \"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n      \
    \  local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[\
    \ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n            else\n  \
    \              res+=\"${c,,}\"\n            fi\n        else\n            res+=\"\
    $c\"\n        fi\n        i=$((i+1))\n    done\n    echo \"$res\"", "    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \  else\n    echo $1 | rev\n  fi", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr -d '[:digit:]' | rev",
  "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n       \
    \ local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[\
    \ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n            else\n  \
    \              res+=\"${c,,}\"\n            fi\n        else\n            res+=\"\
    $c\"\n        fi\n    done\n    echo \"$res\"", "    local s=\"$1\"\n    local\
    \ i=0\n    local l=${#s}\n    local r=\"\"\n    while [ $i -lt $l ]; do\n    \
    \    local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                c=$(echo $c | tr a-z A-Z)\n       \
    \     else\n                c=$(echo $c | tr A-Z a-z)\n            fi\n      \
    \  fi\n        r=\"$r$c\"\n        i=$((i+1))\n    done\n    echo $r", "    #\
    \ Write your code here\n    # echo $1 | tr '[:upper:]' '[:lower:]'\n    # echo\
    \ $1 | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 |", "  # Write your code here\n  # Use echo to print to stdout\n\
    \  echo \"solve\"", "    local s=$1\n    local s_len=${#s}\n    local s_rev=''\n\
    \    local i=0\n    local c=''\n    local c_rev=''\n    local is_letter=''\n \
    \   local is_upper=''\n    local is_lower=''\n    local is_no_letter=''\n    local\
    \ is_no_letter_rev=''\n    local is_letter_rev=''\n    local is_upper_rev=''\n\
    \    local is_lower_rev=''\n    local s_rev_len=0\n    local s_rev_len_half=0\n\
    \    local s_rev_len_half_floor=0\n    local s_rev_len_half_ceil=0\n    local\
    \ s_rev_len_half_floor_i=0\n    local s_rev_len_half_ceil_i=0\n    local s_rev_len_half_floor_c=''\n\
    \    local s_rev_len_half_ceil_c=''\n    local s_rev_len_half_floor_c_rev=''\n\
    \    local s_rev_len_half_ceil_c_rev=''\n    local s_rev_len_half_floor_is_letter=''\n\
    \    local s_rev_len_half_ceil_is_letter=''\n    local s_rev_len_half_floor_is_upper=''\n\
    \    local s_rev_len_half_ceil_is_upper=''\n    local s_rev_len_half_floor_is_lower=''\n\
    \    local s_rev_len_half_ceil_is_lower=''\n    local s_rev_len_half_floor_is_no_letter=''\n\
    \    local s_rev_len_half_ceil_is_no_letter=''\n    local s_rev_len_half_floor_is_no_letter_rev=''\n\
    \    local s_rev_len_half_ceil_is_no_letter_rev=''\n    local s_rev_len_half_floor_is_letter_rev=''\n\
    \    local s_rev_len_half_ceil_is_letter_rev=", "    echo $1 | tr -d '[:digit:]'\
    \ | rev", "    local s=$1\n    local res=\"\"\n    local i=0\n    local c=\"\"\
    \n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ has_letter=0\n    local has_lower=0\n    local has_upper=0\n    local has_digit=0\n\
    \    local has_symbol=0\n    local has_space=0\n    local has_newline=0\n    local\
    \ has_tab=0\n    local has_backslash=0\n    local has_quote=0\n    local has_double_quote=0\n\
    \    local has_backtick=0\n    local has_dollar=0\n    local has_at=0\n    local\
    \ has_exclamation=0\n    local has_hash=0\n    local has_percent=0\n    local\
    \ has_caret=0\n    local has_ampersand=0\n    local has_star=0\n    local has_open_paren=0\n\
    \    local has_close_paren=0\n    local has_minus=0\n    local has_plus=0\n  \
    \  local has_equal=0\n    local has_open_bracket=0\n    local has_close_bracket=0\n\
    \    local has_open_brace=0\n    local has_close_brace=0\n    local has_pipe=0\n\
    \    local has_semicolon=0\n    local has_colon=0\n    local has_comma=0\n   \
    \ local has_dot=0\n    local has_slash=0\n    local has_question=0\n    local\
    \ has_less_than=0\n    local has_greater_than=0\n    local has_underscore=0\n\
    \    local has_backspace=0\n    local has_form_feed=0\n    local has_vertical_tab=0\n\
    \    local has_null=0\n    local has_bell=0\n    local has_escape=0\n    local\
    \ has_octal=0\n    local has_hex=0\n    local has_unicode=0\n    local has_other=0\n\
    \    local has_other_utf8=0\n    local has_other_utf16=0\n    local has_other_utf",
  "    local s=$1\n    local res=\"\"\n    local i\n    local c\n    for ((i=0; i<${#s};\
    \ i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n    \
    \        if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n       \
    \     else\n                res+=\"${c,,}\"\n            fi\n        else\n  \
    \          res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "    # Write\
    \ your code here\n    # echo $1 | tr '[:upper:]' '[:lower:]'\n    # echo $1 |\
    \ tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 |", "    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "    local\
    \ s=$1\n    local result=\"\"\n    local i\n    local c\n    for ((i=0; i<${#s};\
    \ i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n    \
    \        if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n\
    \                c=${c,,}\n            fi\n        fi\n        result+=$c\n  \
    \  done\n    echo $result", "    local s=$1\n    local res=\"\"\n    local i\n\
    \    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[ \"\
    $c\" =~ [a-zA-Z] ]]; then\n            if [[ \"$c\" =~ [a-z] ]]; then\n      \
    \          res+=\"${c^^}\"\n            else\n                res+=\"${c,,}\"\n\
    \            fi\n        else\n            res+=\"$c\"\n        fi\n    done\n\
    \    echo \"$res\"", "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'", "    local s=$1\n    local res=\"\"\n    local i=0\n    local\
    \ len=${#s}\n    local c\n    local is_letter=0\n    while [[ $i -lt $len ]];\
    \ do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n           \
    \ is_letter=1\n            if [[ $c =~ [a-z] ]]; then\n                res+=\"\
    ${c^^}\"\n            else\n                res+=\"${c,,}\"\n            fi\n\
    \        else\n            res+=\"$c\"\n        fi\n        i=$((i+1))\n    done\n\
    \    if [[ $is_letter -eq 0 ]]; then\n        echo \"${res::-1}\" | rev\n    else\n\
    \        echo \"$res\"\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "    local s=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#s}\n    local c\n    local is_letter=0\n    while [ $i -lt $len\
    \ ]; do\n        c=${s:$i:1}\n        if [[ \"$c\" =~ [a-zA-Z] ]]; then\n    \
    \        is_letter=1\n            if [[ \"$c\" =~ [a-z] ]]; then\n           \
    \     res+=\"${c^^}\"\n            else\n                res+=\"${c,,}\"\n   \
    \         fi\n        else\n            res+=\"$c\"\n        fi\n        i=$((i+1))\n\
    \    done\n    if [ $is_letter -eq 0 ]; then\n        echo \"${res::-1}\" | rev\n\
    \    else\n        echo \"$res\"\n    fi", "    local s=$1\n    local s_len=${#s}\n\
    \    local s_rev=\"\"\n    local i=0\n    local c=\"\"\n    local c_rev=\"\"\n\
    \    for ((i=0; i<s_len; i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                c_rev=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                c_rev=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ c_rev=$c\n        fi\n        s_rev=$s_rev$c_rev\n    done\n    if [[ $s_rev\
    \ =~ [a-zA-Z] ]]; then\n        echo $s_rev\n    else\n        echo $s | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "  # Write your code here\n  # If the string contains no letters, reverse\
    \ the string.\n  if [[ $1 =~ ^[a-zA-Z]+$ ]]; then\n    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | rev\n  else\n    echo $1 | rev\n  fi", "    local s=$1\n    local\
    \ res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if [[ \"${s:$i:1}\" =~\
    \ [a-zA-Z] ]]; then\n            res+=\"${s:$i:1}\"\n        else\n          \
    \  res=\"${s:$i:1}$res\"\n        fi\n    done\n    echo \"$res\"", "    # Write\
    \ your code here\n    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "    local\
    \ s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n    local c\n\
    \    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ is_digit=0\n    local is_special=0\n    local is_space=0\n    local is_empty=0\n\
    \    local is_all_letter=1\n    local is_all_upper=1\n    local is_all_lower=1\n\
    \    local is_all_digit=1\n    local is_all_special=1\n    local is_all_space=1\n\
    \    local is_all_empty=1\n    local is_all_upper_or_lower=1\n    local is_all_upper_or_digit=1\n\
    \    local is_all_lower_or_digit=1\n    local is_all_upper_or_special=1\n    local\
    \ is_all_lower_or_special=1\n    local is_all_digit_or_special=1\n    local is_all_upper_or_lower_or_digit=1\n\
    \    local is_all_upper_or_lower_or_special=1\n    local is_all_lower_or_digit_or_special=1\n\
    \    local is_all_upper_or_digit_or_special=1\n    local is_all_upper_or_lower_or_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_space=1\n    local is_all_upper_or_lower_or_special_or_space=1\n\
    \    local is_all_lower_or_digit_or_special_or_space=1\n    local is_all_upper_or_digit_or_special_or_space=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space=1\n    local is_all_upper_or_lower_or_digit_or_special_or_empty=1\n\
    \    local is_all_upper_or_lower_or_special_or_empty=1\n    local is_all_lower_or_digit_or_special",
  "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    local\
    \ c\n    local is_letter=0\n    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            is_letter=1\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n      \
    \          c=${c,,}\n            fi\n        fi\n        res=$res$c\n        i=$((i+1))\n\
    \    done\n    if [ $is_letter -eq 0 ]; then\n        res=`echo $res | rev`\n\
    \    fi\n    echo $res", "    # Write your code here\n    # echo $1\n    # echo\
    \ $1 | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n   \
    \ # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'\n    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    # echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n", "    local s=$1\n\
    \    local res=\"\"\n    local i=0\n    local len=${#s}\n    local c\n    local\
    \ c_up\n    local c_low\n    local is_letter=0\n    for ((i=0; i<len; i++)); do\n\
    \        c=${s:$i:1}\n        c_up=${c^^}\n        c_low=${c,,}\n        if [[\
    \ \"$c\" == \"$c_up\" ]]; then\n            c=$c_low\n            is_letter=1\n\
    \        elif [[ \"$c\" == \"$c_low\" ]]; then\n            c=$c_up\n        \
    \    is_letter=1\n        fi\n        res=$res$c\n    done\n    if [[ $is_letter\
    \ -eq 0 ]]; then\n        res=`echo $res | rev`\n    fi\n    echo $res"]
stop_tokens:
- "\n}"
