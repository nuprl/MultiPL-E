language: sh
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{print length, $0}' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1,1\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.2n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.2,1n\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4,1.4 -k1.3,1.3 -k1.2,1.2 -k1.1,1.1\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1,1\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    # sort\
    \ by length\n    echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ array=(\"$@\")\n  local i len\n  for ((i=0; i<${#array[@]}; i++)); do\n    len[i]=${#array[i]}\n\
    \  done\n  printf \"%s\\n\" \"${array[@]}\" | sort -n -k1.${len[0]},1.${len[${#len[@]}-1]}\
    \ -s\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  printf\
    \ \"%s\\n\" \"$1\" | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ array=($1)\n  local i\n  local j\n  local tmp\n  for ((i=0; i<${#array[@]};\
    \ i++)); do\n    for ((j=0; j<${#array[@]}-1; j++)); do\n      if [[ ${#array[j]}\
    \ -gt ${#array[j+1]} ]]; then\n        tmp=${array[j]}\n        array[j]=${array[j+1]}\n\
    \        array[j+1]=$tmp\n      fi\n    done\n  done\n  echo ${array[@]}\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ array=(\"$@\")\n    local length=${#array[@]}\n    local i=0\n    local j=0\n\
    \    local tmp=0\n    for ((i=0; i<$length; i++)); do\n        for ((j=i+1; j<$length;\
    \ j++)); do\n            if [[ ${array[i]} -gt ${array[j]} ]]; then\n        \
    \        tmp=${array[i]}\n                array[i]=${array[j]}\n             \
    \   array[j]=$tmp\n            fi\n        done\n    done\n    echo ${array[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t ' ' -k1.1,1.1 -k1.2n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t ' ' -k 1.2,1.2\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t ' ' -k 1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t' ' -k1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t' ' -k1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3,1.3n -k1.2,1.2\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t ' ' -k 1,1 -k 2,2n\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -n -t ' ' -k 1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    [ \"\
    ${#1}\" -eq \"${#2}\" ]\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    awk\
    \ '{ print length($0), $0; }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    awk\
    \ '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1,1\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$@\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t ' ' -k1.1,1.1 -k1.3n -k1.2\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ array=($1)\n    local length=${#array[@]}\n    local i=0\n    local j=0\n  \
    \  local temp=0\n    for ((i=0; i<$length; i++))\n    do\n        for ((j=0; j<$length-1;\
    \ j++))\n        do\n            if [[ ${array[j]} -gt ${array[$((j+1))]} ]]\n\
    \            then\n                temp=${array[j]}\n                array[$j]=${array[$((j+1))]}\n\
    \                array[$((j+1))]=$temp\n            fi\n        done\n    done\n\
    \    echo ${array[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4,1.4 -k1.3,1.3 -k1.2,1.2 -k1.1,1.1\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    awk\
    \ '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -n -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    # sort\
    \ by length\n    echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ array=(\"$@\")\n  local i len\n  for ((i=0; i<${#array[@]}; i++)); do\n    len[i]=${#array[i]}\n\
    \  done\n  printf \"%s\\n\" \"${array[@]}\" | sort -n -k1.1,1.${#len[@]}\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1,1 -k2n,2\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ array=(\"$@\")\n  local i len\n  for ((i=0; i<${#array[@]}; i++)); do\n    len[i]=${#array[i]}\n\
    \  done\n  printf \"%s\\n\" \"${array[@]}\" | sort -n -k1.${len[0]},1.${len[${#len[@]}-1]}\
    \ -s\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n -k1.2\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    awk\
    \ '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    # sort\
    \ by length\n    awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t' ' -k1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    # Sort\
    \ the array by the length of each element.\n    # If two elements have the same\
    \ length, sort them by their values.\n    #\n    # Example:\n    #   Input: [\"\
    abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]\n    #   Output: [\"\
    o\", \"de\", \"de\", \"mn\", \"abc\", \"fgh\", \"ijkl\"]\n    #\n    #   Input:\
    \ [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\n    #   Output: [\"abc\", \"\
    abc\", \"abc\", \"abc\", \"abc\"]\n    #\n    #   Input: [\"empty\", \"\", \"\"\
    , \"\", \"empty\"]\n    #   Output: [\"\", \"\", \"\", \"empty\", \"empty\"]\n\
    \    #\n    #   Input: [\"a\", \"b\", \"c\", \"d\", \"e\"]\n    #   Output: [\"\
    a\", \"b\", \"c\", \"d\", \"e\"]\n    #\n    #   Input: [\"zzzz\", \"a\", \"bb\"\
    , \"ccc\"]\n    #   Output: [\"a\", \"bb\", \"ccc\", \"zzzz\"]\n    #\n    # \
    \  Input: [\"1234567890\", \"123456789\", \"12345678\", \"1234567\", \"123456\"\
    , \"12345\", \"1234\", \"123\", \"12\", \"1\"]\n    #   Output: [\"1\", \"12\"\
    , \"123\", \"1234\", \"12345\", \"123456\", \"1234567\", \"12345678\", \"123456789\"\
    , \"1234567890\"]\n    #\n    #   Input: [\"1234567890\", \"123456789\", \"12345678\"\
    , \"1234567\", \"123456\", \"12345\", \"1234\", \"123\", \"12\", \"1\", \"\"]\n\
    \    #   Output: [\"\", \"1\", \"12\", \"123\", \"1234\", \"12345\", \"123456\"\
    , \"1234567\", \"12345678\", \"123456789\", \"1234567890\"]\n    #\n    #   Input:\
    \ [\"empty\", \"\", \"\", \"\", \"empty\"]\n    #   Output: [\"\", \"\", \"\"\
    , \"empty\", \"empty\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp914x1cf0.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmp914x1cf0.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k2\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t ' ' -k 1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t' ' -k2\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3,1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.1,1.1\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4,1.4 -k1.3,1.3 -k1.2,1.2 -k1.1,1.1\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t' ' -k2\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t ' ' -k 1.4\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ array=($1)\n  local length=${#array[@]}\n  local i=0\n  local j=0\n  local temp=0\n\
    \  for ((i=0; i<$length; i++))\n  do\n    for ((j=0; j<$length-1; j++))\n    do\n\
    \      if [[ ${array[j]} -gt ${array[$((j+1))]} ]]\n      then\n        temp=${array[j]}\n\
    \        array[$j]=${array[$((j+1))]}\n        array[$((j+1))]=$temp\n      fi\n\
    \    done\n  done\n  echo ${array[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3,1.3\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    awk\
    \ '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1,1\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t ' ' -k 1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{print length, $0}' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    # sort\
    \ by length\n    echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ array=(\"$@\")\n  local i len\n  for ((i=0; i<${#array[@]}; i++)); do\n    len[i]=${#array[i]}\n\
    \  done\n  printf \"%s\\n\" \"${array[@]}\" | sort -n -k1.${len[0]},1.${len[${#len[@]}-1]}\
    \ -s\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4,1.4 -k1.3,1.3 -k1.2,1.2 -k1.1,1.1\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k2\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    # sort\
    \ by length\n    awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.4\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3,1.3n -k1.2,1.2\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{print length, $0}' | sort -n -s | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  awk '{\
    \ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    # sort\
    \ by length\n    awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003734
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ IFS=$'\\n'\n  echo \"$*\" | sort -n -t ' ' -k 1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  local\
    \ i len\n  for i; do\n    len=${#i}\n    echo \"$len $i\"\n  done | sort -n |\
    \ cut -d' ' -f2-\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t ' ' -k1.1,1.1 -k1.2n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -n -t' ' -k1.1,1.1\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ IFS=$'\\n'\n    echo \"$*\" | sort -t' ' -k1.1,1.1 -k1.3n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n    local\
    \ array=(\"$@\")\n    local i\n    for ((i=0; i<${#array[@]}; i++)); do\n    \
    \    local j\n        for ((j=i; j<${#array[@]}; j++)); do\n            if [[\
    \ ${#array[i]} -gt ${#array[j]} ]]; then\n                local tmp=${array[i]}\n\
    \                array[i]=${array[j]}\n                array[j]=$tmp\n       \
    \     fi\n        done\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ If the array is empty, return an empty array:\n# If the array has any strange\
    \ number ignore it:\n#\n# $1 is a space-separated list\nby_length() {\n  echo\
    \ \"$1\" | awk '{ print length, $0 }' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003729
