language: sh
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i n=${#nodes[@]}\n  local -i i=0\n  local -i\
    \ min_even_value=1000000001\n  local -i min_even_index=-1\n  local -i min_even_count=0\n\
    \  local -i min_even_first_index=-1\n  local -i min_even_last_index=-1\n  for\
    \ ((i=0; i<n; i++)); do\n    local -i node=${nodes[i]}\n    if ((node % 2 == 0));\
    \ then\n      if ((node < min_even_value)); then\n        min_even_value=$node\n\
    \        min_even_index=$i\n        min_even_count=1\n        min_even_first_index=$i\n\
    \        min_even_last_index=$i\n      elif ((node == min_even_value)); then\n\
    \        ((min_even_count++))\n        min_even_last_index=$i\n      fi\n    fi\n\
    \  done\n  if ((min_even_count == 0)); then\n    echo \"[]\"\n  elif ((min_even_count\
    \ == 1)); then\n    echo \"[$min_even_value, $min_even_index]\"\n  else\n    echo\
    \ \"[$min_even_value, $min_even_first_index]\"\n  fi\n}\n\ncandidate() {\n   \
    \ pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \    local -a nodes=($1)\n    local -i min_even_value=100000000\n    local -i\
    \ min_even_index=100000000\n    local -i min_even_index_first=100000000\n    local\
    \ -i min_even_value_first=100000000\n    local -i index=0\n    local -i value=0\n\
    \    local -i i=0\n    for i in \"${nodes[@]}\"; do\n        if [[ $i -eq 0 ]];\
    \ then\n            if [[ $min_even_value_first -eq 100000000 ]]; then\n     \
    \           min_even_value_first=0\n                min_even_index_first=$index\n\
    \            fi\n        elif [[ $((i%2)) -eq 0 ]]; then\n            if [[ $i\
    \ -lt $min_even_value ]]; then\n                min_even_value=$i\n          \
    \      min_even_index=$index\n            fi\n        fi\n        index=$((index+1))\n\
    \    done\n    if [[ $min_even_value -eq 100000000 ]]; then\n        if [[ $min_even_value_first\
    \ -eq 100000000 ]]; then\n            echo \"[]\"\n        else\n            echo\
    \ \"[$min_even_value_first, $min_even_index_first]\"\n        fi\n    else\n \
    \       echo \"[$min_even_value, $min_even_index]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_value_count=0\n  local -i min_even_index_count=0\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n \
    \ local -i node_value_count=0\n  local -i node_index_count=0\n  local -i node_value_count_min=0\n\
    \  local -i node_index_count_min=0\n  local -i node_count_min=0\n  local -i node_value_count_min_index=0\n\
    \  local -i node_index_count_min_index=0\n  local -i node_count_min_index=0\n\
    \  local -i node_value_count_min_index_count=0\n  local -i node_index_count_min_index_count=0\n\
    \  local -i node_count_min_index_count=0\n  local -i node_value_count_min_index_count_min=0\n\
    \  local -i node_index_count_min_index_count_min=0\n  local -i node_count_min_index_count_min=0\n\
    \  local -i node_value_count_min_index_count_min_index=0\n  local -i node_index_count_min_index_count_min_index=0\n\
    \  local -i node_count_min_index_count_min_index=0\n  local -i node_value_count_min_index_count_min_index_count=0\n\
    \  local -i node_index_count_min_index_count_min_index_count=0\n  local -i node_count_min_index_count_min_index_count=0\n\
    \  local -i node_value_count_min_index_count_min_index_count_min=0\n  local -i\
    \ node_index_count_min_index_count_min_index_count_min=0\n  local -i node\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i min_even_count=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local\
    \ -i value=0\n  local -i count=0\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n\
    \    if ((value%2==0)); then\n      if ((value<min_even_value || min_even_count==0));\
    \ then\n        min_even_value=$value\n        min_even_index=$i\n        min_even_count=1\n\
    \      elif ((value==min_even_value)); then\n        ((min_even_count++))\n  \
    \    fi\n    fi\n  done\n  if ((min_even_count==0)); then\n    echo \"[]\"\n \
    \ else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i i=0\n  local -i j=0\n  local -i node_value=0\n  local -i node_index=0\n\
    \  local -i min_even_value_found=0\n  local -i min_even_index_found=0\n  local\
    \ -i min_even_value_index=0\n  local -i min_even_index_index=0\n  local -i min_even_value_index_found=0\n\
    \  local -i min_even_index_index_found=0\n  local -i min_even_value_index_index=0\n\
    \  local -i min_even_index_index_index=0\n  local -i min_even_value_index_index_found=0\n\
    \  local -i min_even_index_index_index_found=0\n  local -i min_even_value_index_index_index=0\n\
    \  local -i min_even_index_index_index_index=0\n  local -i min_even_value_index_index_index_found=0\n\
    \  local -i min_even_index_index_index_index_found=0\n  local -i min_even_value_index_index_index_index=0\n\
    \  local -i min_even_index_index_index_index_index=0\n  local -i min_even_value_index_index_index_index_found=0\n\
    \  local -i min_even_index_index_index_index_index_found=0\n  local -i min_even_value_index_index_index_index_index=0\n\
    \  local -i min_even_index_index_index_index_index_index=0\n  local -i min_even_value_index_index_index_index_index_found=0\n\
    \  local -i min_even_index_index_index_index_index_index_found=0\n  local -i min_even_value_index_index_index_index_index_index=0\n\
    \  local -i min_even_index\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min=999999\n  local -i min_index=999999\n \
    \ local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ $node -lt $min ]]; then\n        min=$node\n       \
    \ min_index=$i\n      elif [[ $node -eq $min ]]; then\n        if [[ $i -lt $min_index\
    \ ]]; then\n          min_index=$i\n        fi\n      fi\n    fi\n    ((i++))\n\
    \  done\n  if [[ $min -eq 999999 ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [$min, $min_index]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i j=0\n\
    \  local -i min=0\n  local -i min_i=0\n  local -i min_j=0\n  local -i n=${#nodes[@]}\n\
    \  for ((i=0; i<n; i++)); do\n    if (( nodes[i] % 2 == 0 )); then\n      evens[j]=${nodes[i]}\n\
    \      ((j++))\n    fi\n  done\n  if (( ${#evens[@]} == 0 )); then\n    echo \"\
    []\"\n    return\n  fi\n  min=${evens[0]}\n  min_i=0\n  min_j=0\n  for ((i=0;\
    \ i<${#evens[@]}; i++)); do\n    if (( evens[i] < min )); then\n      min=${evens[i]}\n\
    \      min_i=i\n      min_j=${nodes[i]}\n    fi\n  done\n  echo \"[ $min, $min_j\
    \ ]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n;\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens[$j]=$i\n     \
    \ ((j++))\n    elif [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      evens[$j]=$i\n\
    \      ((j++))\n    else\n      odds[$k]=$i\n      ((k++))\n    fi\n  done\n \
    \ if [[ ${#evens[@]} -eq 0 ]]; then\n    result=([0]=-1 [1]=-1)\n  elif [[ ${#evens[@]}\
    \ -eq 1 ]]; then\n    result=([0]=${nodes[${evens[0]}]} [1]=${evens[0]})\n  else\n\
    \    local min=${nodes[${evens[0]}]}\n    local min_i=0\n    for ((i=1; i<${#evens[@]};\
    \ i++)); do\n      if [[ ${nodes[${evens[$i]}]} -lt $min ]]; then\n        min=${nodes[${evens[$i]}]}\n\
    \        min_i=$i\n      fi\n    done\n    result=([0]=$min [1]=${evens[$min_i]})\n\
    \  fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i min_even_index=0\n  local -i min_even_value=0\n  local -i is_even=0\n\
    \  local -i is_first_even=0\n  local -i is_first_value=0\n  local -i is_first_index=0\n\
    \  local -i is_first_even_value=0\n  local -i is_first_even_index=0\n  local -i\
    \ is_first_even_value_index=0\n  local -i is_first_even_index_value=0\n  local\
    \ -i is_first_even_index_value_index=0\n  local -i is_first_even_value_index_index=0\n\
    \  local -i is_first_even_index_value_index_index=0\n  local -i is_first_even_value_index_index_index=0\n\
    \  local -i is_first_even_index_value_index_index_index=0\n  local -i is_first_even_value_index_index_index_index=0\n\
    \  local -i is_first_even_index_value_index_index_index_index=0\n  local -i is_first_even_value_index_index_index_index_index=0\n\
    \  local -i is_first_even_index_value_index_index_index_index_index=0\n  local\
    \ -i is_first_even_value_index_index_index_index_index_index=0\n  local -i is_first_even_index_value_index_index_index_index_index_index=0\n\
    \  local -i is_first_even_value_index_index_index_index_index_index_index=0\n\
    \  local -i is_first_even_index_value_index_index_index_index_index_index_index=0\n\
    \  local -i is_first_even_value_index_index_index_index_index_index_index_index=0\n\
    \  local -i is_first\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local -i min_even_index=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value=0\n  local -i found=0\n\
    \  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0));\
    \ then\n      if ((value < min_even_value)); then\n        min_even_value=$value\n\
    \        min_even_index=$i\n        found=1\n      fi\n    fi\n  done\n  if ((found\
    \ == 1)); then\n    echo \"[$min_even_value, $min_even_index]\"\n  else\n    echo\
    \ \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_index=${#nodes[@]}\n  local -i min_value=${#nodes[@]}\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 ));\
    \ then\n      if (( node < min_value )); then\n        min_value=$node\n     \
    \   min_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_index <\
    \ ${#nodes[@]} )); then\n    echo \"[ $min_value, $min_index ]\"\n  else\n   \
    \ echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min=${nodes[0]}\n  local -i min_idx=0\n  local\
    \ -i idx=0\n  for n in \"${nodes[@]}\"; do\n    if (( n < min && n % 2 == 0 ));\
    \ then\n      min=$n\n      min_idx=$idx\n    fi\n    (( idx++ ))\n  done\n  if\
    \ (( min % 2 == 0 )); then\n    echo \"[$min, $min_idx]\"\n  else\n    echo \"\
    []\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local min_even=\n  local min_even_idx=\n  local idx=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n \
    \     if [[ -z $min_even ]] || [[ $node -lt $min_even ]]; then\n        min_even=$node\n\
    \        min_even_idx=$idx\n      fi\n    fi\n    ((idx++))\n  done\n  if [[ -z\
    \ $min_even ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even, $min_even_idx]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local i\n  local\
    \ min_even\n  local min_even_index\n  local min_odd\n  local min_odd_index\n \
    \ for ((i=0; i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n \
    \     evens+=(${nodes[i]})\n    else\n      odds+=(${nodes[i]})\n    fi\n  done\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    if [[ ${#odds[@]} -eq 0 ]]; then\n \
    \     echo \"[]\"\n    else\n      min_odd=${odds[0]}\n      min_odd_index=0\n\
    \      for ((i=1; i<${#odds[@]}; i++)); do\n        if ((odds[i] < min_odd));\
    \ then\n          min_odd=${odds[i]}\n          min_odd_index=i\n        fi\n\
    \      done\n      echo \"[${min_odd}, ${min_odd_index}]\"\n    fi\n  else\n \
    \   min_even=${evens[0]}\n    min_even_index=0\n    for ((i=1; i<${#evens[@]};\
    \ i++)); do\n      if ((evens[i] < min_even)); then\n        min_even=${evens[i]}\n\
    \        min_even_index=i\n      fi\n    done\n    echo \"[${min_even}, ${min_even_index}]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i num_evens=0\n  local -i num_nodes=${#nodes[@]}\n\
    \  local -i value=0\n\n  if [ $num_nodes -eq 0 ]; then\n    echo \"[]\"\n    return\n\
    \  fi\n\n  for ((i=0; i<num_nodes; i++)); do\n    value=${nodes[$i]}\n    if [\
    \ $((value % 2)) -eq 0 ]; then\n      evens[$num_evens]=$value\n      num_evens=$((num_evens\
    \ + 1))\n    fi\n  done\n\n  if [ $num_evens -eq 0 ]; then\n    echo \"[]\"\n\
    \    return\n  fi\n\n  min_value=${evens[0]}\n  min_index=0\n  for ((i=1; i<num_evens;\
    \ i++)); do\n    value=${evens[$i]}\n    if [ $value -lt $min_value ]; then\n\
    \      min_value=$value\n      min_index=$i\n    fi\n  done\n\n  echo \"[$min_value,\
    \ $min_index]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a=($1)\n  local -a b=()\n  local -i i=0\n  local -i j=0\n  local -i\
    \ k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local\
    \ -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n  local\
    \ -i J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n  local\
    \ -i O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local\
    \ -i T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local\
    \ -i Y=0\n  local -i Z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n\
    \  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i\
    \ ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n \
    \ local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i\
    \ aq=0\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
    \ -i n=${#a[@]}\n  for ((i=0; i<n; i++)); do\n    if ((a[i] % 2 == 0)); then\n\
    \      if ((min == 0 || a[i] < min)); then\n        min=${a[i]}\n        min_i=$i\n\
    \      fi\n    fi\n  done\n  if ((min == 0)); then\n    echo \"[]\"\n  else\n\
    \    echo \"[ $min, $min_i ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a odds=()\n  local -a odds_idx=()\n  local -a result=()\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local\
    \ bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n\
    \  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local\
    \ mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n\
    \  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local\
    \ xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n\
    \  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n \
    \ local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local\
    \ nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n\
    \  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n \
    \ local yyy=0\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=$1\n  local evens=$(echo $nodes | tr ' ' '\\n' | grep -E '^[0-9]+$'\
    \ | grep -E '^[02468]*$')\n  if [ -z \"$evens\" ]; then\n    echo \"[]\"\n  else\n\
    \    local min=$(echo $evens | tr ' ' '\\n' | sort -n | head -n 1)\n    local\
    \ index=$(echo $nodes | tr ' ' '\\n' | grep -n -E \"^$min$\" | cut -d: -f1)\n\
    \    echo \"[$min, $index]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=($1)\n  local evens=()\n  local evens_index=()\n  local i=0\n \
    \ for n in \"${nodes[@]}\"; do\n    if [[ $((n%2)) -eq 0 ]]; then\n      evens+=($n)\n\
    \      evens_index+=($i)\n    fi\n    i=$((i+1))\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min=${evens[0]}\n    local\
    \ min_index=0\n    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt\
    \ $min ]]; then\n        min=${evens[$i]}\n        min_index=$i\n      fi\n  \
    \  done\n    echo \"[$min, ${evens_index[$min_index]}]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i min_even_count=0\n  local -i i=0\n  local -i len=${#nodes[@]}\n  local\
    \ -i value=0\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value\
    \ % 2 == 0)); then\n      if ((min_even_count == 0)); then\n        min_even_value=$value\n\
    \        min_even_index=$i\n        min_even_count=1\n      elif ((value < min_even_value));\
    \ then\n        min_even_value=$value\n        min_even_index=$i\n        min_even_count=1\n\
    \      elif ((value == min_even_value)); then\n        min_even_count+=1\n   \
    \   fi\n    fi\n  done\n  if ((min_even_count == 0)); then\n    echo \"[]\"\n\
    \  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n\
    \      evens+=(${nodes[i]})\n    else\n      odds+=(${nodes[i]})\n    fi\n  done\n\
    \  if ((${#evens[@]} > 0)); then\n    local smallest=${evens[0]}\n    local index=0\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if ((evens[i] < smallest)); then\n\
    \        smallest=${evens[i]}\n        index=i\n      fi\n    done\n    result=($smallest\
    \ $index)\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i max_value=0\n  local -i max_index=0\n  local\
    \ -i node_value=0\n  local -i node_index=0\n  local -i even_index=0\n  local -i\
    \ even_value=0\n  local -i even_count=0\n  local -i even_max_index=0\n  local\
    \ -i even_max_value=0\n  local -i even_min_index=0\n  local -i even_min_value=0\n\
    \  local -i even_max_index=0\n  local -i even_max_value=0\n  local -i even_min_index=0\n\
    \  local -i even_min_value=0\n  local -i even_max_index=0\n  local -i even_max_value=0\n\
    \  local -i even_min_index=0\n  local -i even_min_value=0\n  local -i even_max_index=0\n\
    \  local -i even_max_value=0\n  local -i even_min_index=0\n  local -i even_min_value=0\n\
    \  local -i even_max_index=0\n  local -i even_max_value=0\n  local -i even_min_index=0\n\
    \  local -i even_min_value=0\n  local -i even_max_index=0\n  local -i even_max_value=0\n\
    \  local -i even_min_index=0\n  local -i even_min_value=0\n  local -i even_max_index=0\n\
    \  local -i even_max_value=0\n  local -i even_min_index=0\n  local -i even_min_value=0\n\
    \  local -i even_max_index=0\n  local -i even_max_value=0\n  local -i even_min_index=0\n\
    \  local -i even_min_value=0\n  local -i even_max_index=\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_odd_value=0\n\
    \  local -i min_odd_index=0\n  local -i min_odd_count=0\n  local -i value=0\n\
    \  local -i count=0\n  local -i is_even=0\n  local -i is_odd=0\n  local -i is_first=0\n\
    \  local -i is_first_even=0\n  local -i is_first_odd=0\n  local -i is_first_even_or_odd=0\n\
    \  local -i is_first_even_and_odd=0\n  local -i is_first_even_and_odd_and_zero=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one=0\n  local -i is_first_even_and_odd_and_zero_and_one_and_two=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one_and_two_and_three=0\n  local\
    \ -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four=0\n  local\
    \ -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four_and_five=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four_and_five_and_six=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four_and_five_and_six_and_seven=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four_and_five_and_six_and_seven_and\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#nodes[@]}\n\
    \  local -i m=0\n  local -i min=0\n  local -i min_idx=0\n  local -i min_idx_idx=0\n\
    \  local -i min_idx_idx_idx=0\n  local -i min_idx_idx_idx_idx=0\n  local -i min_idx_idx_idx_idx_idx=0\n\
    \  local -i min_idx_idx_idx_idx_idx_idx=0\n  local -i min_idx_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i min_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i min_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i min_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i min_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i min_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i\
    \ min_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i min_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local min_even=0\n  local min_odd=0\n  local min_even_index=0\n\
    \  local min_odd_index=0\n  local min_even_count=0\n  local min_odd_count=0\n\
    \  local min_even_index_count=0\n  local min_odd_index_count=0\n  #\n  # split\
    \ the nodes into even and odd arrays\n  #\n  for i in \"${nodes[@]}\"; do\n  \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n      evens+=($i)\n    else\n      odds+=($i)\n\
    \    fi\n  done\n  #\n  # if there are no evens, return empty\n  #\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  #\n  # find the min even\
    \ value and its index\n  #\n  min_even=${evens[0]}\n  min_even_index=0\n  min_even_count=0\n\
    \  min_even_index_count=0\n  for i in \"${evens[@]}\"; do\n    if [[ $i -lt $min_even\
    \ ]]; then\n      min_even=$i\n      min_even_index=$min_even_index_count\n  \
    \  fi\n    ((min_even_index_count++))\n  done\n  #\n  # find the min odd value\
    \ and its index\n  #\n  min_odd=${odds[0]}\n  min_odd_index=0\n  min_odd_count=0\n\
    \  min_odd_index_count=0\n  for i in \"${odds[@]}\"; do\n    if [[ $i -lt $min_odd\
    \ ]]; then\n      min_odd=$i\n      min_odd_index=$min_odd_index_count\n    fi\n\
    \    ((min_odd_index_count++))\n  done\n  #\n  # if the min even is less than\
    \ the min odd, return\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=0\n\
    \  local -i value=0\n  for value in \"${nodes[@]}\"; do\n    if [[ $((value %\
    \ 2)) -eq 0 ]]; then\n      if [[ $min_index -eq -1 ]]; then\n        min_index=$i\n\
    \        min_value=$value\n      elif [[ $value -lt $min_value ]]; then\n    \
    \    min_index=$i\n        min_value=$value\n      fi\n    fi\n    ((i++))\n \
    \ done\n  if [[ $min_index -eq -1 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[$min_value, $min_index]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_idx+=($i)\n    fi\n\
    \    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=(0 0)\n\
    \  else\n    local min=${evens[0]}\n    local min_idx=0\n    for ((i=1; i<${#evens[@]};\
    \ i++)); do\n      if [[ ${evens[$i]} -lt $min ]]; then\n        min=${evens[$i]}\n\
    \        min_idx=$i\n      fi\n    done\n    result=($min ${evens_idx[$min_idx]})\n\
    \  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local -a even_indexes\n\
    \  local -a odd_indexes\n  local -a even_indexes_sorted\n  local -a odd_indexes_sorted\n\
    \  local -a even_indexes_sorted_uniq\n  local -a odd_indexes_sorted_uniq\n  local\
    \ -a even_indexes_sorted_uniq_sorted\n  local -a odd_indexes_sorted_uniq_sorted\n\
    \  local -a even_indexes_sorted_uniq_sorted_sorted\n  local -a odd_indexes_sorted_uniq_sorted_sorted\n\
    \  local -a even_indexes_sorted_uniq_sorted_sorted_sorted\n  local -a odd_indexes_sorted_uniq_sorted_sorted_sorted\n\
    \  local -a even_indexes_sorted_uniq_sorted_sorted_sorted_sorted\n  local -a odd_indexes_sorted_uniq_sorted_sorted_sorted_sorted\n\
    \  local -a even_indexes_sorted_uniq_sorted_sorted_sorted_sorted_sorted\n  local\
    \ -a odd_indexes_sorted_uniq_sorted_sorted_sorted_sorted_sorted\n  local -a even_indexes_sorted_uniq_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \  local -a odd_indexes_sorted_uniq_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \  local -a even_indexes_sorted_uniq_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \  local -a odd_indexes_sorted_uniq_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \  local -a even_indexes_sorted_uniq_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local min_even=0\n  local\
    \ min_even_index=0\n  local min_even_index_count=0\n  local min_even_index_count_index=0\n\
    \  local min_even_index_count_index_count=0\n  local min_even_index_count_index_count_index=0\n\
    \  local min_even_index_count_index_count_index_count=0\n  local min_even_index_count_index_count_index_count_index=0\n\
    \  local min_even_index_count_index_count_index_count_index_count=0\n  local min_even_index_count_index_count_index_count_index_count_index=0\n\
    \  local min_even_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local min_even_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local min_even_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local min_even_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local min_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local min_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local min_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \  local min_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \  local min_even\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a result=()\n  local i=0\n\
    \  local min=0\n  local min_index=0\n  local min_even=0\n  local min_even_index=0\n\
    \  local node=0\n  local even=0\n  for node in \"${nodes[@]}\"; do\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n    fi\n  done\n  if [[\
    \ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n\
    \  min_even_index=0\n  for even in \"${evens[@]}\"; do\n    if [[ $even -lt $min_even\
    \ ]]; then\n      min_even=$even\n      min_even_index=$i\n    fi\n    i=$((i\
    \ + 1))\n  done\n  echo \"[$min_even, $min_even_index]\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 0
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n;\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens[$j]=$i\n     \
    \ ((j++))\n    elif [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      evens[$j]=$i\n\
    \      ((j++))\n    else\n      odds[$k]=$i\n      ((k++))\n    fi\n  done\n \
    \ if [[ ${#evens[@]} -gt 0 ]]; then\n    result[0]=${nodes[${evens[0]}]}\n   \
    \ result[1]=${evens[0]}\n    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[\
    \ ${nodes[${evens[$i]}]} -lt ${result[0]} ]]; then\n        result[0]=${nodes[${evens[$i]}]}\n\
    \        result[1]=${evens[$i]}\n      fi\n    done\n  fi\n  echo ${result[@]}\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
    \ -i len=${#a[@]}\n  local -i found=0\n  for ((i=0; i<len; i++)); do\n    if ((a[i]\
    \ % 2 == 0)); then\n      if ((found == 0)); then\n        min=a[i]\n        min_i=i\n\
    \        found=1\n      elif ((a[i] < min)); then\n        min=a[i]\n        min_i=i\n\
    \      fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n\
    \    echo \"[$min, $min_i]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n    \
    \  if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n    ((i++))\n\
    \  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=()\n  local -i i=0\n  local -i min_idx=-1\n  local -i min_val=-1\n\
    \  local -i val=0\n  local -i idx=0\n  local -i len=0\n  local -i even=0\n  local\
    \ -i first_even=0\n  local -i first_even_idx=0\n  local -i first_even_found=0\n\
    \  local -i first_even_idx_found=0\n  local -i first_even_idx_min=0\n  local -i\
    \ first_even_idx_min_found=0\n  local -i first_even_idx_min_val=0\n  local -i\
    \ first_even_idx_min_val_found=0\n  local -i first_even_idx_min_val_found_idx=0\n\
    \  local -i first_even_idx_min_val_found_idx_found=0\n  local -i first_even_idx_min_val_found_idx_found_found=0\n\
    \  local -i first_even_idx_min_val_found_idx_found_found_found=0\n  local -i first_even_idx_min_val_found_idx_found_found_found_found=0\n\
    \  local -i first_even_idx_min_val_found_idx_found_found_found_found_found=0\n\
    \  local -i first_even_idx_min_val_found_idx_found_found_found_found_found_found=0\n\
    \  local -i first_even_idx_min_val_found_idx_found_found_found_found_found_found_found=0\n\
    \  local -i first_even_idx_min_val_found_idx_found_found_found_found_found_found_found_found=0\n\
    \  local -i first_even_idx_min_val_found_idx_found_found_found_found_found_found_found_found_found=0\n\
    \  local -i first_even_idx_min_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a evens_index_sorted=()\n  local -a result=()\n  local i=0\n  local j=0\n \
    \ local k=0\n  local -i len=${#nodes[@]}\n  local -i evens_len=0\n  local -i evens_index_len=0\n\
    \  local -i evens_index_sorted_len=0\n  local -i result_len=0\n  local -i min_even=0\n\
    \  local -i min_even_index=0\n  local -i min_even_index_sorted=0\n  local -i min_even_index_sorted_index=0\n\
    \  local -i min_even_index_sorted_index_index=0\n  local -i min_even_index_sorted_index_index_index=0\n\
    \  local -i min_even_index_sorted_index_index_index_index=0\n  local -i min_even_index_sorted_index_index_index_index_index=0\n\
    \  local -i min_even_index_sorted_index_index_index_index_index_index=0\n  local\
    \ -i min_even_index_sorted_index_index_index_index_index_index_index=0\n  local\
    \ -i min_even_index_sorted_index_index_index_index_index_index_index_index=0\n\
    \  local -i min_even_index_sorted_index_index_index_index_index_index_index_index_index=0\n\
    \  local -i min_even_index_sorted_index_index_index_index_index_index_index_index_index_index=0\n\
    \  local -i min_even_index_sorted_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \  local -i min_even_index_sorted_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \  local -i\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [[ $(( node % 2 )) -eq 0 ]]; then\n  \
    \    if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n  \
    \      min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n   \
    \ i=$(( i + 1 ))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min=999999\n  local -i min_idx=-1\n  local\
    \ -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 && node <\
    \ min )); then\n      min=$node\n      min_idx=$i\n    fi\n    (( i++ ))\n  done\n\
    \  if (( min_idx == -1 )); then\n    echo \"[]\"\n  else\n    echo \"[$min, $min_idx]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
    \ -i min_cnt=0\n  local -i cnt=0\n  local -i len=0\n  local -i val=0\n  local\
    \ -i tmp=0\n  local -i tmp_i=0\n  local -i tmp_cnt=0\n  local -i tmp_len=0\n \
    \ local -i tmp_val=0\n  local -i tmp_min=0\n  local -i tmp_min_i=0\n  local -i\
    \ tmp_min_cnt=0\n  local -i tmp_min_len=0\n  local -i tmp_min_val=0\n  local -i\
    \ tmp_min_tmp=0\n  local -i tmp_min_tmp_i=0\n  local -i tmp_min_tmp_cnt=0\n  local\
    \ -i tmp_min_tmp_len=0\n  local -i tmp_min_tmp_val=0\n  local -i tmp_min_tmp_min=0\n\
    \  local -i tmp_min_tmp_min_i=0\n  local -i tmp_min_tmp_min_cnt=0\n  local -i\
    \ tmp_min_tmp_min_len=0\n  local -i tmp_min_tmp_min_val=0\n  local -i tmp_min_tmp_min_tmp=0\n\
    \  local -i tmp_min_tmp_min_tmp_i=0\n  local -i tmp_min_tmp_min_tmp_cnt=0\n  local\
    \ -i tmp_min_tmp_min_tmp_len=0\n  local -i tmp_min_tmp_min_tmp_val=0\n  local\
    \ -i tmp_min_tmp_min_tmp_min=0\n  local -i tmp_min_tmp_min_tmp_min_i=0\n  local\
    \ -i tmp_min_tmp_min_tmp_min_cnt=0\n  local -i tmp_min_tmp_min_tmp_min_len=0\n\
    \  local -i tmp_min_tmp_min_tmp_min_val\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local min_even=\n  local min_even_index=\n  local i=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n \
    \     if [[ -z $min_even ]] || [[ $node -lt $min_even ]]; then\n        min_even=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if [[ -z\
    \ $min_even ]]; then\n    echo \"[]\"\n  else\n    echo \"[ $min_even, $min_even_index\
    \ ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local -i i=0\n  local -i min_i=0\n  local -i min_v=0\n \
    \ local -i v=0\n  local -i len=0\n  local -i first_even=1\n  for v in $1; do\n\
    \    arr[$i]=$v\n    ((v%2==0)) && {\n      if ((first_even)); then\n        min_v=$v\n\
    \        min_i=$i\n        first_even=0\n      else\n        ((v<min_v)) && {\n\
    \          min_v=$v\n          min_i=$i\n        }\n      fi\n    }\n    ((i++))\n\
    \  done\n  ((first_even)) && echo \"[]\" && return\n  echo \"[ $min_v, $min_i\
    \ ]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
    \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i A=0\n\
    \  local -i B=0\n  local -i C=0\n  local -i D=0\n  local -i E=0\n  local -i F=0\n\
    \  local -i G=0\n  local -i H=0\n  local -i I=0\n  local -i J=0\n  local -i K=0\n\
    \  local -i L=0\n  local -i M=0\n  local -i N=0\n  local -i O=0\n  local -i P=0\n\
    \  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i T=0\n  local -i U=0\n\
    \  local -i V=0\n  local -i W=0\n  local -i X=0\n  local -i Y=0\n  local -i Z=0\n\
    \  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i\
    \ ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n \
    \ local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i\
    \ an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n \n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a evens_idx_sorted=()\n  local -a evens_sorted=()\n  local -a result=()\n \
    \ local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min=999999999\n  local -i index=0\n  local\
    \ -i i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n\
    \      if [[ $n -lt $min ]]; then\n        min=$n\n        index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ $min -eq 999999 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[$min, $index]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=($1)\n  local evens=()\n  local evens_idx=()\n  local min_even=0\n\
    \  local min_even_idx=0\n  local min_even_idx_idx=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    if ((nodes[i]\
    \ % 2 == 0)); then\n      evens[j]=${nodes[i]}\n      evens_idx[j]=$i\n      ((j++))\n\
    \    fi\n  done\n  if ((j == 0)); then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n\
    \  min_even_idx=${evens_idx[0]}\n  for ((k=1; k<j; k++)); do\n    if ((evens[k]\
    \ < min_even)); then\n      min_even=${evens[k]}\n      min_even_idx=${evens_idx[k]}\n\
    \    fi\n  done\n  echo \"[$min_even, $min_even_idx]\"\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_val=1000000000\n  local -i min_even_idx=-1\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if ((node % 2 == 0 &&\
    \ node < min_even_val)); then\n      min_even_val=$node\n      min_even_idx=$i\n\
    \    fi\n    ((i++))\n  done\n  if ((min_even_idx == -1)); then\n    echo \"[]\"\
    \n  else\n    echo \"[$min_even_val, $min_even_idx]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=($1)\n  local min=${nodes[0]}\n  local min_index=0\n  local i=0\n\
    \  local len=${#nodes[@]}\n  local even_found=false\n  for ((i=0; i<len; i++));\
    \ do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      even_found=true\n      min=0\n\
    \      min_index=$i\n      break\n    fi\n    if [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      even_found=true\n      if [[ ${nodes[$i]}\
    \ -lt $min ]]; then\n        min=${nodes[$i]}\n        min_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ $even_found == true ]]; then\n    echo \"[ $min, $min_index\
    \ ]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 0
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n\
    \      evens+=(\"$n\")\n    else\n      odds+=(\"$n\")\n    fi\n  done\n  if [[\
    \ ${#evens[@]} -gt 0 ]]; then\n    result+=(\"${evens[0]}\")\n    for n in \"\
    ${evens[@]}\"; do\n      if [[ $n -lt ${result[0]} ]]; then\n        result[0]=\"\
    $n\"\n      fi\n    done\n    for n in \"${nodes[@]}\"; do\n      if [[ $n -eq\
    \ ${result[0]} ]]; then\n        result+=(\"$i\")\n        break\n      fi\n \
    \     ((i++))\n    done\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -i i=0\n\
    \  local -i len=${#nodes[@]}\n  local -i min_even=0\n  local -i min_odd=0\n  local\
    \ -i min_even_idx=0\n  local -i min_odd_idx=0\n  local -i even_count=0\n  local\
    \ -i odd_count=0\n  local -i even_idx=0\n  local -i odd_idx=0\n  local -i idx=0\n\
    \  local -i val=0\n  local -i min_idx=0\n  local -i min_val=0\n  local -i min_idx_even=0\n\
    \  local -i min_idx_odd=0\n  local -i min_val_even=0\n  local -i min_val_odd=0\n\
    \  local -i min_idx_even_idx=0\n  local -i min_idx_odd_idx=0\n  local -i min_val_even_idx=0\n\
    \  local -i min_val_odd_idx=0\n  local -i min_idx_even_idx_even=0\n  local -i\
    \ min_idx_odd_idx_even=0\n  local -i min_val_even_idx_even=0\n  local -i min_val_odd_idx_even=0\n\
    \  local -i min_idx_even_idx_odd=0\n  local -i min_idx_odd_idx_odd=0\n  local\
    \ -i min_val_even_idx_odd=0\n  local -i min_val_odd_idx_odd=0\n  local -i min_idx_even_idx_even_idx=0\n\
    \  local -i min_idx_odd_idx_even_idx=0\n  local -i min_val_even_idx_even_idx=0\n\
    \  local -i min_val_odd_idx_even_idx=0\n  local\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
    \  local -i i=0\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n\
    \    if [[ ${nodes[$i]} -eq 0 ]]; then\n      echo \"[0, $i]\"\n      return\n\
    \    fi\n    if [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]] && [[ ${nodes[$i]}\
    \ -lt $min_even_value ]]; then\n      min_even_value=${nodes[$i]}\n      min_even_index=$i\n\
    \    fi\n  done\n  if [[ $min_even_value -eq 1000000000 ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_index_found=0\n \
    \ local -i min_even_last_index_found=0\n  local -i min_even_first_index_found_count=0\n\
    \  local -i min_even_last_index_found_count=0\n  local -i min_even_first_index_found_last_index=0\n\
    \  local -i min_even_last_index_found_last_index=0\n  local -i min_even_first_index_found_last_index_count=0\n\
    \  local -i min_even_last_index_found_last_index_count=0\n  local -i min_even_first_index_found_last_index_first_index=0\n\
    \  local -i min_even_last_index_found_last_index_first_index=0\n  local -i min_even_first_index_found_last_index_first_index_count=0\n\
    \  local -i min_even_last_index_found_last_index_first_index_count=0\n  local\
    \ -i min_even_first_index_found_last_index_first_index_last_index=0\n  local -i\
    \ min_even_last_index_found_last_index_first_index_last_index=0\n  local -i min_even_first_index_found_last_index_first_index_last_index_count=0\n\
    \  local -i min_even_last_index_found_last_index_first_index_last_index_count=0\n\
    \  local -i min_even_first_index_found_last_index_first_index_last_index_first_index=0\n\
    \  local -i min_even_last_index_found_last_index_first_index_last_index_first_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=($1)\n  local evens=()\n  local even_indexes=()\n  local smallest_even=0\n\
    \  local smallest_even_index=0\n  local i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      even_indexes+=($i)\n\
    \    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"\
    []\"\n    return\n  fi\n  smallest_even=${evens[0]}\n  smallest_even_index=${even_indexes[0]}\n\
    \  for i in \"${!evens[@]}\"; do\n    if [[ ${evens[$i]} -lt $smallest_even ]];\
    \ then\n      smallest_even=${evens[$i]}\n      smallest_even_index=${even_indexes[$i]}\n\
    \    fi\n  done\n  echo \"[$smallest_even, $smallest_even_index]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local min_even=0\n  local\
    \ min_even_index=0\n  local min_even_count=0\n  local node=0\n  local node_index=0\n\
    \  local node_count=0\n  local node_count_even=0\n  local node_count_odd=0\n \
    \ local node_count_even_index=0\n  local node_count_odd_index=0\n  local node_count_even_index_min=0\n\
    \  local node_count_odd_index_min=0\n  local node_count_even_index_min_count=0\n\
    \  local node_count_odd_index_min_count=0\n  local node_count_even_index_min_count_min=0\n\
    \  local node_count_odd_index_min_count_min=0\n  local node_count_even_index_min_count_min_index=0\n\
    \  local node_count_odd_index_min_count_min_index=0\n  local node_count_even_index_min_count_min_index_min=0\n\
    \  local node_count_odd_index_min_count_min_index_min=0\n  local node_count_even_index_min_count_min_index_min_index=0\n\
    \  local node_count_odd_index_min_count_min_index_min_index=0\n  local node_count_even_index_min_count_min_index_min_index_min=0\n\
    \  local node_count_odd_index_min_count_min_index_min_index_min=0\n  local node_count_even_index_min_count_min_index_min_index_min_index=0\n\
    \  local node_count_odd_index_min_count_min_index_min_index_min_index=0\n  local\
    \ node_count_even_index_min_count_min_index_min_index_min_index\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_even=0\n\
    \  local -i min_even_idx=0\n  local -i min_idx=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node=0\n  local -i result=0\n\n  if [[ $n -eq 0 ]]; then\n    echo\
    \ \"[]\"\n    return\n  fi\n\n  for ((i=0; i<n; i++)); do\n    node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n    fi\n  done\n\
    \n  n=${#evens[@]}\n  if [[ $n -eq 0 ]]; then\n    echo \"[]\"\n    return\n \
    \ fi\n\n  min_even=${evens[0]}\n  min_even_idx=0\n  for ((i=1; i<n; i++)); do\n\
    \    node=${evens[$i]}\n    if [[ $node -lt $min_even ]]; then\n      min_even=$node\n\
    \      min_even_idx=$i\n    fi\n  done\n\n  min_idx=0\n  for ((i=0; i<n; i++));\
    \ do\n    node=${nodes[$i]}\n    if [[ $node -eq $min_even ]]; then\n      min_idx=$i\n\
    \      break\n    fi\n  done\n\n  echo \"[$min_even, $min_idx]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  local\
    \ min_even_count=0\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n        min_even_count=1\n\
    \      elif [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n        min_even_count=1\n      elif [[ $node -eq\
    \ $min_even_value ]]; then\n        ((min_even_count++))\n      fi\n    fi\n \
    \   ((i++))\n  done\n  if [[ $min_even_count -eq 0 ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[$min_even_value, $min_even_index]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n\
    \      evens+=(\"$node\")\n    else\n      odds+=(\"$node\")\n    fi\n  done\n\
    \  if (( ${#evens[@]} > 0 )); then\n    result+=(\"${evens[0]}\")\n    result+=(\"\
    ${evens[1]}\")\n  else\n    result+=(\"${odds[0]}\")\n    result+=(\"${odds[1]}\"\
    )\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      evens+=(${nodes[$i]} $i)\n\
    \    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    local -a min=(${evens[0]} 0)\n    for ((i=2; i<${#evens[@]}; i+=2)); do\n\
    \      if [[ ${evens[$i]} -lt ${min[0]} ]]; then\n        min=(${evens[$i]} ${evens[$((i+1))]})\n\
    \      fi\n    done\n    echo \"[${min[0]}, ${min[1]}]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_index=0\n\
    \  local -i len=0\n  local -i val=0\n  local -i is_first=1\n  local -i is_even=0\n\
    \  local -i is_smaller=0\n  local -i is_smaller_index=0\n  local -i is_smaller_index_even=0\n\
    \  local -i is_smaller_index_even_first=1\n  local -i is_smaller_index_even_first_index=0\n\
    \  local -i is_smaller_index_even_first_value=0\n  local -i is_smaller_index_even_first_index_first=1\n\
    \  local -i is_smaller_index_even_first_index_first_value=0\n  local -i is_smaller_index_even_first_index_first_index=0\n\
    \  local -i is_smaller_index_even_first_index_first_index_first=1\n  local -i\
    \ is_smaller_index_even_first_index_first_index_first_value=0\n  local -i is_smaller_index_even_first_index_first_index_first_index=0\n\
    \  local -i is_smaller_index_even_first_index_first_index_first_index_first=1\n\
    \  local -i is_smaller_index_even_first_index_first_index_first_index_first_value=0\n\
    \  local -i is_smaller_index_even_first_index_first_index_first_index_first_index=0\n\
    \  local -i is_smaller_index_even_first_index_first_index_first_index_first_index_first=1\n\
    \  local -i is_smaller_index_even_first_index_first_index_first_index_first_index_first_value=0\n\
    \  local -i is_smaller_index_even_first_index_first_index_first_index_first_index_first_index=0\n\
    \  local -i is_small\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  local even=0\n\
    \  local odd=0\n  local min=0\n  local index=0\n  local found=0\n\n  for ((i=0;\
    \ i<n; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens[$j]=$i\n\
    \      ((j++))\n    elif [[ $((nodes[$i] % 2)) -eq 0 ]]; then\n      evens[$j]=$i\n\
    \      ((j++))\n    else\n      odds[$k]=$i\n      ((k++))\n    fi\n  done\n\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n\n  min=${nodes[${evens[0]}]}\n\
    \  index=${evens[0]}\n  for ((i=1; i<${#evens[@]}; i++)); do\n    even=${nodes[${evens[$i]}]}\n\
    \    if [[ $even -lt $min ]]; then\n      min=$even\n      index=${evens[$i]}\n\
    \    fi\n  done\n\n  for ((i=0; i<${#odds[@]}; i++)); do\n    odd=${nodes[${odds[$i]}]}\n\
    \    if [[ $odd -lt $min ]]; then\n      found=1\n      break\n    fi\n  done\n\
    \n  if [[ $found -eq 1 ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min, $index]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 0
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a indices=()\n  local -a\
    \ result=()\n  local i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2))\
    \ -eq 0 ]]; then\n      evens+=($n)\n      indices+=($i)\n    fi\n    i=$((i +\
    \ 1))\n  done\n  if [[ ${#evens[@]} -gt 0 ]]; then\n    local min=${evens[0]}\n\
    \    local min_index=0\n    for ((i = 1; i < ${#evens[@]}; i++)); do\n      if\
    \ [[ ${evens[$i]} -lt $min ]]; then\n        min=${evens[$i]}\n        min_index=$i\n\
    \      fi\n    done\n    result=($min ${indices[$min_index]})\n  fi\n  echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=${#arr[@]}\n  for ((i=0; i<n;\
    \ i++)); do\n    if (( arr[i] % 2 == 0 )); then\n      evens[j]=${arr[i]}\n  \
    \    ((j++))\n    else\n      odds[k]=${arr[i]}\n      ((k++))\n    fi\n  done\n\
    \  if (( j > 0 )); then\n    result[0]=${evens[0]}\n    result[1]=0\n    for ((i=1;\
    \ i<j; i++)); do\n      if (( evens[i] < result[0] )); then\n        result[0]=${evens[i]}\n\
    \        result[1]=i\n      fi\n    done\n  elif (( k > 0 )); then\n    result[0]=${odds[0]}\n\
    \    result[1]=0\n    for ((i=1; i<k; i++)); do\n      if (( odds[i] < result[0]\
    \ )); then\n        result[0]=${odds[i]}\n        result[1]=i\n      fi\n    done\n\
    \  fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    if (( nodes[i] % 2 == 0 )); then\n   \
    \   if [[ -z $min_even_value ]]; then\n        min_even_value=${nodes[i]}\n  \
    \      min_even_index=$i\n      elif (( nodes[i] < min_even_value )); then\n \
    \       min_even_value=${nodes[i]}\n        min_even_index=$i\n      fi\n    fi\n\
    \  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  local i=0\n  local j=0\n  local min_even=0\n  local min_index=0\n\
    \  local len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n    if [[ ${nodes[$i]}%2\
    \ -eq 0 ]]; then\n      evens[$j]=${nodes[$i]}\n      evens_index[$j]=$i\n   \
    \   ((j++))\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"\
    []\"\n    return\n  fi\n  min_even=${evens[0]}\n  min_index=${evens_index[0]}\n\
    \  for ((i=1; i<${#evens[@]}; i++)); do\n    if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n      min_even=${evens[$i]}\n      min_index=${evens_index[$i]}\n\
    \    fi\n  done\n  result[0]=$min_even\n  result[1]=$min_index\n  echo \"[${result[@]}]\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_index=${#nodes[@]}\n  local -i min_value=${nodes[0]}\n\
    \  local -i i=0\n  local -i value=0\n  local -i index=0\n  local -i len=${#nodes[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0\
    \ && value < min_value)); then\n      min_value=$value\n      min_index=$i\n \
    \   fi\n  done\n  if ((min_index == len)); then\n    echo \"[]\"\n  else\n   \
    \ echo \"[$min_value, $min_index]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=-1\n\
    \  local -i min_even_index=-1\n  local -i min_even_value=-1\n  for i in \"${!nodes[@]}\"\
    ; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      if [[ $min_index -eq -1 ]];\
    \ then\n        min_index=$i\n        min_value=0\n      fi\n    elif [[ ${nodes[$i]}\
    \ -eq 1 ]]; then\n      if [[ $min_index -eq -1 ]]; then\n        min_index=$i\n\
    \        min_value=1\n      fi\n    elif [[ ${nodes[$i]} -gt 1 ]]; then\n    \
    \  if [[ $min_index -eq -1 ]]; then\n        min_index=$i\n        min_value=${nodes[$i]}\n\
    \      elif [[ ${nodes[$i]} -lt $min_value ]]; then\n        min_index=$i\n  \
    \      min_value=${nodes[$i]}\n      fi\n      if [[ ${nodes[$i]} -eq 2 ]]; then\n\
    \        if [[ $min_even_index -eq -1 ]]; then\n          min_even_index=$i\n\
    \          min_even_value=2\n        fi\n      elif [[ ${nodes[$i]} -gt 2 ]];\
    \ then\n        if [[ $min_even_index -eq -1 ]]; then\n          min_even_index=$i\n\
    \          min_even_value=${nodes[$i]}\n        elif [[ ${nodes[$i]} -lt $min_even_value\
    \ ]]; then\n          min_even_index=$i\n          min_even_value=${nodes[$i]}\n\
    \        fi\n      fi\n    fi\n  done\n  if [[ $min_even_index -eq -1 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[ $min_even_value, $min_even_index ]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
    \ -i n=${#a[@]}\n  local -i v=0\n  for ((i=0; i<n; i++)); do\n    v=${a[i]}\n\
    \    if ((v % 2 == 0)); then\n      if ((v < min)); then\n        min=$v\n   \
    \     min_i=$i\n      fi\n    fi\n  done\n  if ((min == 0)); then\n    echo \"\
    []\"\n  else\n    echo \"[$min, $min_i]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n  \
    \    min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[ $min_even_value, $min_even_index\
    \ ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=( $1 )\n  local -i min_index=0\n  local -i min_value=0\n  local\
    \ -i i=0\n  local -i n=${#nodes[@]}\n  local -i found=0\n  local -i value=0\n\
    \  for (( i=0; i<n; i++ )); do\n    value=${nodes[i]}\n    if (( value % 2 ==\
    \ 0 )); then\n      if (( found == 0 )); then\n        min_value=$value\n    \
    \    min_index=$i\n        found=1\n      elif (( value < min_value )); then\n\
    \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if\
    \ (( found == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[ $min_value, $min_index\
    \ ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a evens_idx_sorted=()\n  local -a result=()\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local n=${#nodes[@]}\n  local m=0\n  local min=0\n  local min_idx=0\n\
    \  local min_idx_sorted=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      evens+=(0)\n      evens_idx+=($i)\n    elif [[ $((${nodes[$i]}\
    \ % 2)) -eq 0 ]]; then\n      evens+=(${nodes[$i]})\n      evens_idx+=($i)\n \
    \   fi\n  done\n  m=${#evens[@]}\n  if [[ $m -eq 0 ]]; then\n    echo \"[]\"\n\
    \    return\n  fi\n  min=${evens[0]}\n  min_idx=${evens_idx[0]}\n  for ((j=1;\
    \ j<m; j++)); do\n    if [[ ${evens[$j]} -lt $min ]]; then\n      min=${evens[$j]}\n\
    \      min_idx=${evens_idx[$j]}\n    fi\n  done\n  for ((k=0; k<m; k++)); do\n\
    \    if [[ ${evens[$k]} -eq $min ]]; then\n      evens_idx_sorted+=(${evens_idx[$k]})\n\
    \    fi\n  done\n  min_idx_sorted=${evens_idx_sorted[0]}\n  for ((k=1; k<m; k++));\
    \ do\n    if [[ ${evens_idx_sorted[$k]} -lt $min_idx_sorted ]]; then\n      min_idx_sorted=${evens_idx_sorted[$k]}\n\
    \    fi\n \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcv0ck0aj.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmpcv0ck0aj.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_value=0\n  local\
    \ -i min_even_last_value=0\n  local -i min_even_first_count=0\n  local -i min_even_last_count=0\n\
    \  local -i min_even_first_index_count=0\n  local -i min_even_last_index_count=0\n\
    \  local -i min_even_first_value_count=0\n  local -i min_even_last_value_count=0\n\
    \  local -i min_even_first_index_value_count=0\n  local -i min_even_last_index_value_count=0\n\
    \  local -i min_even_first_index_value_count_count=0\n  local -i min_even_last_index_value_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count=0\n  local -i min_even_last_index_value_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count=0\n  local -i min_even_last_index_value_count_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count_count=0\n  local\
    \ -i min_even_last_index_value_count_count_count_count_count=0\n  local -i min_even_first_index_value_count_count_count_count_count_count=0\n\
    \  local -i min_even_last_index_value_count_count_count_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count_count_count_count=0\n\
    \  local -\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i min_even_count=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  for\
    \ ((i=0; i<n; i++)); do\n    if [[ ${nodes[i]} -eq 0 ]]; then\n      ((min_even_count++))\n\
    \      if [[ min_even_count -eq 1 ]]; then\n        min_even_value=0\n       \
    \ min_even_index=$i\n      fi\n    elif [[ ${nodes[i]} -gt 0 ]] && [[ ${nodes[i]}%2\
    \ -eq 0 ]]; then\n      if [[ min_even_value -eq 0 ]]; then\n        min_even_value=${nodes[i]}\n\
    \        min_even_index=$i\n      elif [[ ${nodes[i]} -lt $min_even_value ]];\
    \ then\n        min_even_value=${nodes[i]}\n        min_even_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ min_even_value -eq 0 ]]; then\n    echo \"[$min_even_value,\
    \ $min_even_index]\"\n  elif [[ min_even_value -gt 0 ]]; then\n    echo \"[$min_even_value,\
    \ $min_even_index]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[ $smallest_even_value, $smallest_even_value_index\
    \ ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=-1\n\
    \  local -i len=${#nodes[@]}\n  while (( i < len )); do\n    if (( nodes[i] %\
    \ 2 == 0 )); then\n      if (( min_value == -1 || nodes[i] < min_value )); then\n\
    \        min_value=${nodes[i]}\n        min_index=$i\n      fi\n    fi\n    ((\
    \ i++ ))\n  done\n  if (( min_index == -1 )); then\n    echo \"[]\"\n  else\n\
    \    echo \"[ $min_value, $min_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_idx=0\n \
    \ local -i idx=0\n  local -i val=0\n  local -i len=0\n  local -i found=0\n  local\
    \ -i is_even=0\n  local -i is_first=0\n  local -i is_smaller=0\n  local -i is_smaller_idx=0\n\
    \  local -i is_smaller_val=0\n  local -i is_smaller_even=0\n  local -i is_smaller_first=0\n\
    \  local -i is_smaller_found=0\n  local -i is_smaller_idx_found=0\n  local -i\
    \ is_smaller_val_found=0\n  local -i is_smaller_even_found=0\n  local -i is_smaller_first_found=0\n\
    \  local -i is_smaller_found_found=0\n  local -i is_smaller_idx_found_found=0\n\
    \  local -i is_smaller_val_found_found=0\n  local -i is_smaller_even_found_found=0\n\
    \  local -i is_smaller_first_found_found=0\n  local -i is_smaller_found_found_found=0\n\
    \  local -i is_smaller_idx_found_found_found=0\n  local -i is_smaller_val_found_found_found=0\n\
    \  local -i is_smaller_even_found_found_found=0\n  local -i is_smaller_first_found_found_found=0\n\
    \  local -i is_smaller_found_found_found_found=0\n  local -i is_smaller_idx_found_found_found_found=0\n\
    \  local -i is_smaller_val_found_found_found_found=0\n  local -i is_smaller_even_found_found_found_found=0\n\
    \  local -i is_smaller_first_found_found_found_found=0\n  local -\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n\
    \    if ((nodes[i] % 2 == 0)); then\n      evens+=(${nodes[i]})\n    fi\n  done\n\
    \  if ((${#evens[@]} == 0)); then\n    echo \"[]\"\n  else\n    min_value=${evens[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if ((evens[i] < min_value));\
    \ then\n        min_value=${evens[i]}\n        min_index=i\n      fi\n    done\n\
    \    echo \"[${min_value}, ${min_index}]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=$1\n  local evens=()\n  local even_indexes=()\n  local i=0\n  for\
    \ node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n\
    \      even_indexes+=($i)\n    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n  \
    \  local min_even_index=${even_indexes[0]}\n    for i in ${!evens[@]}; do\n  \
    \    if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n\
    \        min_even_index=${even_indexes[$i]}\n      fi\n    done\n    echo \"[\
    \ $min_even, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  for n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n\
    \      evens+=(\"$n\")\n    else\n      odds+=(\"$n\")\n    fi\n  done\n  if [[\
    \ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min=${evens[0]}\n\
    \    for e in \"${evens[@]}\"; do\n      if [[ $e -lt $min ]]; then\n        min=$e\n\
    \      fi\n    done\n    for n in \"${nodes[@]}\"; do\n      if [[ $n -eq $min\
    \ ]]; then\n        result+=(\"$n\")\n        result+=(\"$i\")\n        break\n\
    \      fi\n      i=$((i + 1))\n    done\n    echo \"[${result[0]}, ${result[1]}]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_index=0\n  local -i min_value=0\n  local\
    \ -i i=0\n  local -i len=${#nodes[@]}\n  local -i min_even=0\n  local -i min_even_index=0\n\
    \  local -i min_even_found=0\n  local -i min_even_value=0\n  local -i min_even_index_value=0\n\
    \  local -i min_even_index_found=0\n  local -i min_even_index_value_found=0\n\
    \  local -i min_even_index_value_found_index=0\n  local -i min_even_index_value_found_index_found=0\n\
    \  local -i min_even_index_value_found_index_found_value=0\n  local -i min_even_index_value_found_index_found_value_found=0\n\
    \  local -i min_even_index_value_found_index_found_value_found_index=0\n  local\
    \ -i min_even_index_value_found_index_found_value_found_index_found=0\n  local\
    \ -i min_even_index_value_found_index_found_value_found_index_found_value=0\n\
    \  local -i min_even_index_value_found_index_found_value_found_index_found_value_found=0\n\
    \  local -i min_even_index_value_found_index_found_value_found_index_found_value_found_index=0\n\
    \  local -i min_even_index_value_found_index_found_value_found_index_found_value_found_index_found=0\n\
    \  local -i min_even_index_value_found_index_found_value_found_index_found_value_found_index_found_value=0\n\
    \  local -i min_even_index_value_found_index_found_value_found_index_found_value_found_index_found_value_found=0\n\
    \  local -i min_even_index_value_found_index_found_value_found\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local min=\n  local min_idx=\n  local i=0\n  for n in $1;\
    \ do\n    if [[ $((n % 2)) -eq 0 ]]; then\n      if [[ -z $min || $n -lt $min\
    \ ]]; then\n        min=$n\n        min_idx=$i\n      fi\n    fi\n    arr+=($n)\n\
    \    ((i++))\n  done\n  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[ $min, $min_idx ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  local i=0\n  local j=0\n  local min_index=0\n  local min_value=0\n\
    \  local value=0\n  local index=0\n  for i in \"${nodes[@]}\"; do\n    if (( i\
    \ % 2 == 0 )); then\n      evens[j]=$i\n      evens_index[j]=$j\n      (( j++\
    \ ))\n    fi\n  done\n  if (( ${#evens[@]} > 0 )); then\n    min_value=${evens[0]}\n\
    \    min_index=${evens_index[0]}\n    for (( i=1; i<${#evens[@]}; i++ )); do\n\
    \      value=${evens[i]}\n      index=${evens_index[i]}\n      if (( value < min_value\
    \ )); then\n        min_value=$value\n        min_index=$index\n      elif ((\
    \ value == min_value )); then\n        if (( index < min_index )); then\n    \
    \      min_index=$index\n        fi\n      fi\n    done\n    result=($min_value\
    \ $min_index)\n  fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=($1)\n  local -i min=0\n  local -i min_idx=0\n  local -i idx=0\n\
    \  local -i len=${#arr[@]}\n  local -i i=0\n  local -i val=0\n  local -i found=0\n\
    \  for ((i=0; i<len; i++)); do\n    val=${arr[i]}\n    if ((val % 2 == 0)); then\n\
    \      if ((found == 0)); then\n        min=val\n        min_idx=i\n        found=1\n\
    \      else\n        if ((val < min)); then\n          min=val\n          min_idx=i\n\
    \        fi\n      fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"\
    []\"\n  else\n    echo \"[ $min, $min_idx ]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_odd_value=0\n\
    \  local -i min_odd_index=0\n  local -i min_odd_count=0\n  local -i value=0\n\
    \  local -i count=0\n  local -i is_even=0\n  local -i is_odd=0\n  local -i is_first=0\n\
    \  local -i is_second=0\n  local -i is_third=0\n  local -i is_fourth=0\n  local\
    \ -i is_fifth=0\n  local -i is_sixth=0\n  local -i is_seventh=0\n  local -i is_eighth=0\n\
    \  local -i is_ninth=0\n  local -i is_tenth=0\n  local -i is_eleventh=0\n  local\
    \ -i is_twelfth=0\n  local -i is_thirteenth=0\n  local -i is_fourteenth=0\n  local\
    \ -i is_fifteenth=0\n  local -i is_sixteenth=0\n  local -i is_seventeenth=0\n\
    \  local -i is_eighteenth=0\n  local -i is_nineteenth=0\n  local -i is_twentieth=0\n\
    \  local -i is_twenty_first=0\n  local -i is_twenty_second=0\n  local -i is_twenty_third=0\n\
    \  local -i is_twenty_fourth=0\n  local -i is_twenty_fifth=0\n  local -i is_twenty_sixth=0\n\
    \  local -i is_twenty_seventh=0\n  local -i is_twenty_eighth=0\n  local -i is_twenty_ninth=0\n\
    \  local -i is_thirtieth=0\n  local -i is_thirty_first=0\n  local -i is_thirty_second=0\n\
    \  local -i is_thirty\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local evens=()\n  local min=\n  local min_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n    \
    \  evens+=(\"$node\")\n      if [[ -z $min || $node -lt $min ]]; then\n      \
    \  min=\"$node\"\n        min_index=\"$i\"\n      fi\n    fi\n    ((i++))\n  done\n\
    \  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n    echo \"[ $min, $min_index\
    \ ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_value_count=0\n  local -i min_even_value_index=0\n\
    \  local -i node_value=0\n  local -i node_count=${#nodes[@]}\n  local -i node_index=0\n\
    \  local -i even_value_count=0\n  local -i even_value_index=0\n  local -i even_value=0\n\
    \  local -i even_value_index_count=0\n  local -i even_value_index_index=0\n  local\
    \ -i even_value_index_value=0\n  local -i even_value_index_index_count=0\n  local\
    \ -i even_value_index_index_index=0\n  local -i even_value_index_index_value=0\n\
    \  local -i even_value_index_index_index_count=0\n  local -i even_value_index_index_index_index=0\n\
    \  local -i even_value_index_index_index_value=0\n  local -i even_value_index_index_index_index_count=0\n\
    \  local -i even_value_index_index_index_index_index=0\n  local -i even_value_index_index_index_index_value=0\n\
    \  local -i even_value_index_index_index_index_index_count=0\n  local -i even_value_index_index_index_index_index_index=0\n\
    \  local -i even_value_index_index_index_index_index_value=0\n  local -i even_value_index_index_index_index_index_index_count=0\n\
    \  local -i even_value_index_index_index_index_index_index_index=0\n  local -i\
    \ even_value_index_index_index_index_index_index_value=0\n  local -i even_value_index_index_index_index_index_index_index_count=0\n\
    \  local -\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i min_even_index=0\n  local -i min_even_value=0\n  local -i len=${#nodes[@]}\n\
    \  local -i even_found=0\n  local -i even_value=0\n  local -i value=0\n  local\
    \ -i index=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n  local\
    \ -i even_found=0\n  local -i even_value=0\n  local -i value=0\n  local -i index=0\n\
    \  local -i min_index=0\n  local -i min_value=0\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -a nodes=($1)\n  if [ $len -eq 0 ]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  min_value=${nodes[0]}\n  min_index=0\n  for ((i=1; i<len; i++)); do\n\
    \    value=${nodes[i]}\n    if [ $value -lt $min_value ]; then\n      min_value=$value\n\
    \      min_index=$i\n    fi\n  done\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n\
    \    if [ $((value%2)) -eq 0 ]; then\n      even_found=1\n      even_value=$value\n\
    \      even_index=$i\n      break\n    fi\n  done\n  if [ $even_found -eq 0 ];\
    \ then\n    echo \"[]\"\n    return\n  fi\n  min_even_value=$even_value\n  min_even_index=$even_index\n\
    \  for ((i=even_index+1; i<len; i++)); do\n    value=${nodes[i]}\n    if [ $((value%2))\
    \ -eq 0 ]; then\n      if [ $value -lt $min_even_value ]; then\n        min_even_value=$value\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpibv0x5re.sh: line 77: syntax error near unexpected token `}''

    /tmp/tmpibv0x5re.sh: line 77: `}''

    '
  stdout: ''
  timestamp: 1659999339
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a evens_idx_sorted=()\n  local -a result=()\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local min=0\n  local min_idx=0\n  local min_idx_sorted=0\n  local len=${#nodes[@]}\n\
    \  if [[ $len -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  for ((i=0;\
    \ i<len; i++)); do\n    if [[ $((nodes[i] % 2)) -eq 0 ]]; then\n      evens+=(${nodes[i]})\n\
    \      evens_idx+=($i)\n    fi\n  done\n  len=${#evens[@]}\n  if [[ $len -eq 0\
    \ ]]; then\n    echo \"[]\"\n    return\n  fi\n  min=${evens[0]}\n  min_idx=${evens_idx[0]}\n\
    \  for ((i=1; i<len; i++)); do\n    if [[ ${evens[i]} -lt $min ]]; then\n    \
    \  min=${evens[i]}\n      min_idx=${evens_idx[i]}\n    fi\n  done\n  for ((i=0;\
    \ i<len; i++)); do\n    if [[ ${evens[i]} -eq $min ]]; then\n      evens_idx_sorted+=(${evens_idx[i]})\n\
    \    fi\n  done\n  len=${#evens_idx_sorted[@]}\n  min_idx_sorted=${evens_idx_sorted[0]}\n\
    \  for ((i=1; i<len; i++)); do\n    if [[ ${evens_idx_sorted[i]} -lt $min_idx_sorted\
    \ ]]; then\n      min_idx_sorted=${evens_idx_sorted[i]}\n    fi\n  done\n  result=($min\
    \ $min_idx_s\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj6dazl8l.sh: line 72: syntax error near unexpected token `(''

    /tmp/tmpj6dazl8l.sh: line 72: `candidate() {''

    /tmp/tmpj6dazl8l.sh: line 73: pluck: command not found

    /tmp/tmpj6dazl8l.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmpj6dazl8l.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i j=0\n\
    \  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i\
    \ dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n \
    \ local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i\
    \ mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n \
    \ local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i\
    \ vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n \
    \ local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local\
    \ -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n\
    \  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local\
    \ -i nnn=\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_index=0\n  local -i min_value=0\n  local\
    \ -i i=0\n  local -i len=${#nodes[@]}\n  local -i min_even_index=0\n  local -i\
    \ min_even_value=0\n  local -i found_even=0\n  while (( i < len )); do\n    if\
    \ (( nodes[i] % 2 == 0 )); then\n      if (( found_even == 0 )); then\n      \
    \  min_even_index=$i\n        min_even_value=${nodes[i]}\n        found_even=1\n\
    \      elif (( nodes[i] < min_even_value )); then\n        min_even_index=$i\n\
    \        min_even_value=${nodes[i]}\n      fi\n    fi\n    if (( nodes[i] < min_value\
    \ )); then\n      min_index=$i\n      min_value=${nodes[i]}\n    fi\n    (( i++\
    \ ))\n  done\n  if (( found_even == 0 )); then\n    echo \"[]\"\n  else\n    echo\
    \ \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a=($1)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local -i E=0\n  local\
    \ -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n  local -i J=0\n  local\
    \ -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n  local -i O=0\n  local\
    \ -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i T=0\n  local\
    \ -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local -i Y=0\n  local\
    \ -i Z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n\
    \  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i\
    \ ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n \
    \ local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i\
    \ ar=0\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a odds=()\n  local -a odds_idx=()\n  local -a result=()\n  local -i i=0\n \
    \ local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\
    \  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n\
    \  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n\
    \  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i\
    \ cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n \
    \ local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n \
    \ local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
    \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \
    \ local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local\
    \ -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n\
    \  local -i iii=0\n  local -i\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n;\
    \ i++)); do\n    if ((nodes[i] % 2 == 0)); then\n      evens[j]=${nodes[i]}\n\
    \      j=$((j+1))\n    else\n      odds[k]=${nodes[i]}\n      k=$((k+1))\n   \
    \ fi\n  done\n  if ((j > 0)); then\n    local min=${evens[0]}\n    local min_index=0\n\
    \    for ((i=1; i<j; i++)); do\n      if ((evens[i] < min)); then\n        min=${evens[i]}\n\
    \        min_index=$i\n      fi\n    done\n    result=($min $min_index)\n  elif\
    \ ((k > 0)); then\n    local min=${odds[0]}\n    local min_index=0\n    for ((i=1;\
    \ i<k; i++)); do\n      if ((odds[i] < min)); then\n        min=${odds[i]}\n \
    \       min_index=$i\n      fi\n    done\n    result=($min $min_index)\n  fi\n\
    \  echo ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a=($1)\n  local -a b=()\n  local -i i=0\n  local -i j=0\n  local -i\
    \ k=0\n  for ((i=0; i<${#a[@]}; i++)); do\n    if ((a[i] % 2 == 0)); then\n  \
    \    b[j]=${a[i]}\n      ((j++))\n    fi\n  done\n  if ((j == 0)); then\n    echo\
    \ \"[]\"\n    return\n  fi\n  for ((i=0; i<${#b[@]}; i++)); do\n    if ((b[i]\
    \ < b[k])); then\n      k=$i\n    fi\n  done\n  echo \"[${b[k]}, $k]\"\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \    local -a nodes=($1)\n    local -i min_even_value=10000000000\n    local -i\
    \ min_even_index=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i\
    \ node_value=0\n    local -i node_index=0\n    local -i min_even_count=0\n   \
    \ local -i min_even_first_index=0\n    local -i min_even_last_index=0\n    local\
    \ -i min_even_first_value=0\n    local -i min_even_last_value=0\n    local -i\
    \ min_even_first_index_count=0\n    local -i min_even_last_index_count=0\n   \
    \ local -i min_even_first_value_count=0\n    local -i min_even_last_value_count=0\n\
    \    local -i min_even_first_index_first_value_count=0\n    local -i min_even_last_index_last_value_count=0\n\
    \    local -i min_even_first_index_last_value_count=0\n    local -i min_even_last_index_first_value_count=0\n\
    \    local -i min_even_first_index_first_value_last_index_count=0\n    local -i\
    \ min_even_first_index_last_value_last_index_count=0\n    local -i min_even_last_index_first_value_first_index_count=0\n\
    \    local -i min_even_last_index_last_value_first_index_count=0\n    local -i\
    \ min_even_first_index_first_value_first_index_count=0\n    local -i min_even_last_index_last_value_last_index_count=0\n\
    \    local -i min_even_first_index_first_value_last_index_first_value_count=0\n\
    \    local -i min_even_first_index_last_value_last_index_last_value_count=0\n\
    \    local -i min_even_last_index_first_value_first_index_first\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a result=()\n  local i=0\n  local j=0\n  local len=${#nodes[@]}\n  local even_len=0\n\
    \  local min_even=0\n  local min_even_idx=0\n  for ((i=0; i<len; i++)); do\n \
    \   if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens[$j]=0\n      evens_idx[$j]=$i\n\
    \      ((j++))\n    elif [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      evens[$j]=${nodes[$i]}\n\
    \      evens_idx[$j]=$i\n      ((j++))\n    fi\n  done\n  even_len=${#evens[@]}\n\
    \  if [[ $even_len -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n\
    \  min_even_idx=0\n  for ((i=1; i<even_len; i++)); do\n    if [[ ${evens[$i]}\
    \ -lt $min_even ]]; then\n      min_even=${evens[$i]}\n      min_even_idx=$i\n\
    \    fi\n  done\n  result[0]=$min_even\n  result[1]=${evens_idx[$min_even_idx]}\n\
    \  echo \"[${result[0]}, ${result[1]}]\"\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_index_found=0\n \
    \ local -i min_even_last_index_found=0\n  local -i min_even_value_found=0\n  local\
    \ -i min_even_index_found=0\n  local -i min_even_count_found=0\n  local -i min_even_first_index_found=0\n\
    \  local -i min_even_last_index_found=0\n  local -i min_even_value_found=0\n \
    \ local -i min_even_index_found=0\n  local -i min_even_count_found=0\n  local\
    \ -i min_even_first_index_found=0\n  local -i min_even_last_index_found=0\n  local\
    \ -i min_even_value_found=0\n  local -i min_even_index_found=0\n  local -i min_even_count_found=0\n\
    \  local -i min_even_first_index_found=0\n  local -i min_even_last_index_found=0\n\
    \  local -i min_even_value_found=0\n  local -i min_even_index_found=0\n  local\
    \ -i min_even_count_found=0\n  local -i min_even_first_index_found=0\n  local\
    \ -i min_even_last_index_found=0\n  local -i min_even_value_found=0\n  local -i\
    \ min_even_index_found=0\n  local -i min_even_count_found=0\n  local -i min_even_first_index_found=0\n\
    \  local -i min_even_last_index_found=0\n  local -i min_even_value_found=0\n \
    \ local -i min_even_index_found=0\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i min_even_count=0\n  local -i i=0\n  local -i len=${#nodes[@]}\n  local\
    \ -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n  local -i\
    \ node_even=0\n  local -i node_odd=0\n  local -i node_min_even=0\n  local -i node_min_odd=0\n\
    \  local -i node_min_even_count=0\n  local -i node_min_odd_count=0\n  local -i\
    \ node_min_even_index=0\n  local -i node_min_odd_index=0\n  local -i node_min_even_value=0\n\
    \  local -i node_min_odd_value=0\n  local -i node_min_even_index=0\n  local -i\
    \ node_min_odd_index=0\n  local -i node_min_even_count=0\n  local -i node_min_odd_count=0\n\
    \  local -i node_min_even_index=0\n  local -i node_min_odd_index=0\n  local -i\
    \ node_min_even_value=0\n  local -i node_min_odd_value=0\n  local -i node_min_even_index=0\n\
    \  local -i node_min_odd_index=0\n  local -i node_min_even_count=0\n  local -i\
    \ node_min_odd_count=0\n  local -i node_min_even_index=0\n  local -i node_min_odd_index=0\n\
    \  local -i node_min_even_value=0\n  local -i node_min_odd_value=0\n  local -i\
    \ node_min_even_index=0\n  local -i node_min_odd_index=0\n  local -i node_min_even_count=0\n\
    \  local -i node_min_odd_count=0\n  local -i node\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a even_idx=()\n  local -a\
    \ result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      evens+=($node)\n      even_idx+=($i)\n    fi\n \
    \   i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=(0 0)\n\
    \  else\n    local min=${evens[0]}\n    local min_idx=0\n    i=0\n    for even\
    \ in \"${evens[@]}\"; do\n      if [[ $even -lt $min ]]; then\n        min=$even\n\
    \        min_idx=$i\n      fi\n      i=$((i + 1))\n    done\n    result=($min\
    \ ${even_idx[$min_idx]})\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i n=${#nodes[@]}\n  local -i node_value=0\n  local -i node_index=0\n\
    \  local -i even_index=0\n  local -i even_value=0\n\n  for ((i=0; i<n; i++));\
    \ do\n    node_value=${nodes[$i]}\n    if ((node_value % 2 == 0)); then\n    \
    \  evens+=($node_value)\n    fi\n  done\n\n  if ((${#evens[@]} == 0)); then\n\
    \    echo \"[]\"\n    return\n  fi\n\n  min_even_value=${evens[0]}\n  min_even_index=0\n\
    \  for ((i=1; i<${#evens[@]}; i++)); do\n    even_value=${evens[$i]}\n    if ((even_value\
    \ < min_even_value)); then\n      min_even_value=$even_value\n      min_even_index=$i\n\
    \    fi\n  done\n\n  min_value=${nodes[0]}\n  min_index=0\n  for ((i=1; i<n; i++));\
    \ do\n    node_value=${nodes[$i]}\n    if ((node_value < min_value)); then\n \
    \     min_value=$node_value\n      min_index=$i\n    fi\n  done\n\n  if ((min_even_value\
    \ < min_value)); then\n    echo \"[$min_even_value, $min_even_index]\"\n  else\n\
    \    echo \"[$min_value, $min_index]\"\n  fi\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_index=0\n\
    \  local -i len=${#nodes[@]}\n  local -i node=0\n  local -i found=0\n\n  if [\
    \ $len -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n\n  while [ $i -lt $len\
    \ ]; do\n    node=${nodes[$i]}\n    if [ $node -eq 0 ]; then\n      if [ $found\
    \ -eq 0 ]; then\n        min=$node\n        min_index=$i\n        found=1\n  \
    \    fi\n    elif [ $((node % 2)) -eq 0 ]; then\n      if [ $found -eq 0 ]; then\n\
    \        min=$node\n        min_index=$i\n        found=1\n      elif [ $node\
    \ -lt $min ]; then\n        min=$node\n        min_index=$i\n      fi\n    fi\n\
    \    i=$((i + 1))\n  done\n\n  if [ $found -eq 0 ]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[$min, $min_index]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ min_even_value_index=\n  local index=0\n  for node in $nodes; do\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value || $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_value_index=$index\n\
    \      fi\n    fi\n    ((index++))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_value_index]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even=100000000\n  local\
    \ -i min_even_i=0\n  local -i min_even_count=0\n  local -i min_i=0\n  local -i\
    \ min_count=0\n  local -i min=100000000\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    if [[ ${nodes[$i]} -eq 0 ]]; then\n      ((min_count++))\n      if [[ $min_count\
    \ -eq 1 ]]; then\n        min_i=$i\n      fi\n    fi\n    if [[ ${nodes[$i]} -lt\
    \ $min ]]; then\n      min=${nodes[$i]}\n      min_i=$i\n      min_count=1\n \
    \   elif [[ ${nodes[$i]} -eq $min ]]; then\n      ((min_count++))\n    fi\n  \
    \  if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even=0\n      min_even_i=$i\n\
    \      min_even_count=1\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2\
    \ -eq 0 ]] && [[ ${nodes[$i]} -lt $min_even ]]; then\n      min_even=${nodes[$i]}\n\
    \      min_even_i=$i\n      min_even_count=1\n    elif [[ ${nodes[$i]} -gt 0 ]]\
    \ && [[ ${nodes[$i]}%2 -eq 0 ]] && [[ ${nodes[$i]} -eq $min_even ]]; then\n  \
    \    ((min_even_count++))\n    fi\n  done\n  if [[ $min_even_count -gt 0 ]]; then\n\
    \    echo \"[ $min_even, $min_even_i ]\"\n  elif [[ $min_count -gt 0 ]]; then\n\
    \    echo \"[ $min, $min_i ]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=($1)\n  local evens=()\n  local evens_index=()\n  local i=0\n \
    \ for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n  \
    \    evens+=($node)\n      evens_index+=($i)\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_index=0\n\
    \    local min_value=${evens[0]}\n    for i in \"${!evens[@]}\"; do\n      if\
    \ [[ ${evens[$i]} -lt $min_value ]]; then\n        min_index=$i\n        min_value=${evens[$i]}\n\
    \      fi\n    done\n    echo \"[$min_value, ${evens_index[$min_index]}]\"\n \
    \ fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_index=-1\n  local -i min_even_value=1000000000\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    if\
    \ [[ ${nodes[i]} -eq 0 ]]; then\n      min_even_index=$i\n      min_even_value=0\n\
    \      break\n    elif [[ ${nodes[i]} -gt 0 && ${nodes[i]}%2 -eq 0 && ${nodes[i]}\
    \ -lt $min_even_value ]]; then\n      min_even_index=$i\n      min_even_value=${nodes[i]}\n\
    \    fi\n  done\n  if [[ $min_even_index -eq -1 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -i min_even=0\n  local -i min_even_idx=0\n  local -i min_even_idx_idx=0\n\
    \  local -i min_idx=0\n  local -i min_idx_idx=0\n  local -i val=0\n  local -i\
    \ idx=0\n  local -i idx_idx=0\n  local -i tmp=0\n  local -i tmp_idx=0\n  local\
    \ -i tmp_idx_idx=0\n  local -i tmp_idx_idx_idx=0\n  local -i tmp_idx_idx_idx_idx=0\n\
    \  local -i tmp_idx_idx_idx_idx_idx=0\n  local -i tmp_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i tmp_idx_idx_idx_idx_idx_idx_idx=0\n  local -i tmp_idx_idx_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i tmp_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i tmp_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i tmp_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i tmp_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i tmp_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i node_value=0\n\
    \  local -i even_value=0\n\n  if [[ $len -eq 0 ]]; then\n    echo \"[]\"\n   \
    \ return\n  fi\n\n  for ((i=0; i<len; i++)); do\n    node_value=${nodes[$i]}\n\
    \    if [[ $((node_value % 2)) -eq 0 ]]; then\n      evens+=($node_value)\n  \
    \  fi\n  done\n\n  len=${#evens[@]}\n  if [[ $len -eq 0 ]]; then\n    echo \"\
    []\"\n    return\n  fi\n\n  min_value=${evens[0]}\n  for ((i=1; i<len; i++));\
    \ do\n    even_value=${evens[$i]}\n    if [[ $even_value -lt $min_value ]]; then\n\
    \      min_value=$even_value\n      min_index=$i\n    fi\n  done\n\n  echo \"\
    [$min_value, $min_index]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a even_indices=()\n  local\
    \ -a even_indices_sorted=()\n  local -a even_indices_sorted_unique=()\n  local\
    \ -a even_indices_sorted_unique_min=()\n  local -a result=()\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local min=0\n  local\
    \ min_index=0\n  local min_index_unique=0\n  local min_index_unique_min=0\n  local\
    \ min_index_unique_min_index=0\n  local min_index_unique_min_index_unique=0\n\
    \  local min_index_unique_min_index_unique_min=0\n  local min_index_unique_min_index_unique_min_index=0\n\
    \  local min_index_unique_min_index_unique_min_index_unique=0\n  local min_index_unique_min_index_unique_min_index_unique_min=0\n\
    \  local min_index_unique_min_index_unique_min_index_unique_min_index=0\n  local\
    \ min_index_unique_min_index_unique_min_index_unique_min_index_unique=0\n  local\
    \ min_index_unique_min_index_unique_min_index_unique_min_index_unique_min=0\n\
    \  local min_index_unique_min_index_unique_min_index_unique_min_index_unique_min_index=0\n\
    \  local min_index_unique_min_index_unique_min_index_unique_min_index_unique_min_index_unique=0\n\
    \  local min_index_unique_min_index_unique_min_index_unique_min_index_unique_min_index_unique_min=0\n\
    \  local min_index_unique_min_index_unique_min_index_unique_min_index_unique_min_index_unique_min_index=0\n\
    \  local min_index_unique_min_index_unique_min\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even=1000000000\n  local -i min_even_index=-1\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      echo \"[0, $i]\"\n      return\n    fi\n    if [[ ${nodes[$i]} -lt $min_even\
    \ && ${nodes[$i]}%2 -eq 0 ]]; then\n      min_even=${nodes[$i]}\n      min_even_index=$i\n\
    \    fi\n  done\n  if [[ $min_even_index -eq -1 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[$min_even, $min_even_index]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local aa\n  local bb\n  local cc\n\
    \  local dd\n  local ee\n  local ff\n  local gg\n  local hh\n  local ii\n  local\
    \ jj\n  local kk\n  local ll\n  local mm\n  local nn\n  local oo\n  local pp\n\
    \  local qq\n  local rr\n  local ss\n  local tt\n  local uu\n  local vv\n  local\
    \ ww\n  local xx\n  local yy\n  local zz\n  local aaa\n  local bbb\n  local ccc\n\
    \  local ddd\n  local eee\n  local fff\n  local ggg\n  local hhh\n  local iii\n\
    \  local jjj\n  local kkk\n  local lll\n  local mmm\n  local nnn\n  local ooo\n\
    \  local ppp\n  local qqq\n  local rrr\n  local sss\n  local ttt\n  local uuu\n\
    \  local vvv\n  local www\n  local xxx\n  local yyy\n  local zzz\n  local aaaa\n\
    \  local bbbb\n  local cccc\n  local dddd\n  local eeee\n  local ffff\n  local\
    \ gggg\n  local hhhh\n  local iiii\n  local jjjj\n  local kkkk\n  local llll\n\
    \  local mmmm\n  local nnnn\n  local oooo\n  local pppp\n  local qqqq\n  local\
    \ rrrr\n  local ssss\n  local tttt\n  local uuuu\n  local vvvv\n  local wwww\n\
    \  local xxxx\n  local yyyy\n  local zzzz\n  local aaaaa\n  local b\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_index=${#nodes[@]}\n  local -i min_even_value=${#nodes[@]}\n\
    \  local -i i=0\n  local -i j=0\n  for i in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      if [[ $j -eq 0 ]]; then\n        min_even_index=$i\n \
    \       min_even_value=0\n      fi\n      ((j++))\n    elif [[ ${nodes[$i]} -gt\
    \ 0 ]] && [[ ${nodes[$i]} -lt $min_even_value ]] && [[ $((nodes[$i] % 2)) -eq\
    \ 0 ]]; then\n      min_even_index=$i\n      min_even_value=${nodes[$i]}\n   \
    \ fi\n  done\n  if [[ $min_even_index -eq ${#nodes[@]} ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even=0\n  local -i min_even_i=0\n\
    \  local -i min_odd=0\n  local -i min_odd_i=0\n  local -i min_zero=0\n  local\
    \ -i min_zero_i=0\n  local -i min_zero_i2=0\n  local -i min_zero_i3=0\n  local\
    \ -i min_zero_i4=0\n  local -i min_zero_i5=0\n  local -i min_zero_i6=0\n  local\
    \ -i min_zero_i7=0\n  local -i min_zero_i8=0\n  local -i min_zero_i9=0\n  local\
    \ -i min_zero_i10=0\n  local -i min_zero_i11=0\n  local -i min_zero_i12=0\n  local\
    \ -i min_zero_i13=0\n  local -i min_zero_i14=0\n  local -i min_zero_i15=0\n  local\
    \ -i min_zero_i16=0\n  local -i min_zero_i17=0\n  local -i min_zero_i18=0\n  local\
    \ -i min_zero_i19=0\n  local -i min_zero_i20=0\n  local -i min_zero_i21=0\n  local\
    \ -i min_zero_i22=0\n  local -i min_zero_i23=0\n  local -i min_zero_i24=0\n  local\
    \ -i min_zero_i25=0\n  local -i min_zero_i26=0\n  local -i min_zero_i27=0\n  local\
    \ -i min_zero_i28=0\n  local -i min_zero_i29=0\n  local -i min_zero_i30=0\n  local\
    \ -i min_zero_i31=0\n  local -i min_zero_i32=0\n  local -i min_zero_i33=0\n  local\
    \ -i min_zero_i34=\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++));\
    \ do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(0 $i)\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n\
    \      evens+=(${nodes[$i]} $i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]];\
    \ then\n    echo \"[]\"\n  else\n    min_value=${evens[0]}\n    min_index=${evens[1]}\n\
    \    for ((i=2; i<${#evens[@]}; i+=2)); do\n      if [[ ${evens[$i]} -lt $min_value\
    \ ]]; then\n        min_value=${evens[$i]}\n        min_index=${evens[$((i+1))]}\n\
    \      fi\n    done\n    echo \"[ $min_value, $min_index ]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
    \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
    \  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i\
    \ ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n \
    \ local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n\
    \  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local\
    \ -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i node_count=${#nodes[@]}\n  local -i even_count=0\n  local -i value=0\n\
    \n  if [[ $node_count -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n\n  for\
    \ ((i=0; i<node_count; i++)); do\n    value=${nodes[$i]}\n    if [[ $((value %\
    \ 2)) -eq 0 ]]; then\n      evens+=($value)\n    fi\n  done\n\n  even_count=${#evens[@]}\n\
    \  if [[ $even_count -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n\n  min_even_value=${evens[0]}\n\
    \  for ((i=1; i<even_count; i++)); do\n    value=${evens[$i]}\n    if [[ $value\
    \ -lt $min_even_value ]]; then\n      min_even_value=$value\n    fi\n  done\n\n\
    \  for ((i=0; i<node_count; i++)); do\n    value=${nodes[$i]}\n    if [[ $value\
    \ -eq $min_even_value ]]; then\n      min_even_index=$i\n      break\n    fi\n\
    \  done\n\n  echo \"[$min_even_value, $min_even_index]\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n    \
    \  if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n    ((i++))\n\
    \  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_even=0\n\
    \  local -i min_even_idx=0\n  local -i min_idx=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node=0\n  local -i result=0\n\n  if (( n == 0 )); then\n    echo \"\
    []\"\n    return\n  fi\n\n  for (( i=0; i<n; i++ )); do\n    node=${nodes[$i]}\n\
    \    if (( node % 2 == 0 )); then\n      evens+=($node)\n    fi\n  done\n\n  if\
    \ (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n    return\n  fi\n\n  min_even=${evens[0]}\n\
    \  min_even_idx=0\n  min_idx=0\n  for (( i=0; i<${#evens[@]}; i++ )); do\n   \
    \ if (( evens[$i] < min_even )); then\n      min_even=${evens[$i]}\n      min_even_idx=$i\n\
    \    fi\n  done\n\n  for (( i=0; i<n; i++ )); do\n    if (( nodes[$i] == min_even\
    \ )); then\n      min_idx=$i\n      break\n    fi\n  done\n\n  echo \"[$min_even,\
    \ $min_idx]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_value=0\n  local\
    \ -i min_even_last_value=0\n  local -i min_even_first_count=0\n  local -i min_even_last_count=0\n\
    \  local -i min_even_first_index_count=0\n  local -i min_even_last_index_count=0\n\
    \  local -i min_even_first_value_count=0\n  local -i min_even_last_value_count=0\n\
    \  local -i min_even_first_index_value_count=0\n  local -i min_even_last_index_value_count=0\n\
    \  local -i min_even_first_index_value_count_count=0\n  local -i min_even_last_index_value_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count=0\n  local -i min_even_last_index_value_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count=0\n  local -i min_even_last_index_value_count_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count_count=0\n  local\
    \ -i min_even_last_index_value_count_count_count_count_count=0\n  local -i min_even_first_index_value_count_count_count_count_count_count=0\n\
    \  local -i min_even_last_index_value_count_count_count_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count_count_count_count=0\n\
    \ \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_value=0\n  local\
    \ -i min_even_last_value=0\n  local -i value=0\n  local -i count=0\n  local -i\
    \ first_index=0\n  local -i last_index=0\n  local -i first_value=0\n  local -i\
    \ last_value=0\n  local -i node_count=${#nodes[@]}\n  local -i node_index=0\n\
    \  local -i node_value=0\n  local -i node_first_index=0\n  local -i node_last_index=0\n\
    \  local -i node_first_value=0\n  local -i node_last_value=0\n  local -i node_count=${#nodes[@]}\n\
    \  local -i node_index=0\n  local -i node_value=0\n  local -i node_first_index=0\n\
    \  local -i node_last_index=0\n  local -i node_first_value=0\n  local -i node_last_value=0\n\
    \  local -i node_count=${#nodes[@]}\n  local -i node_index=0\n  local -i node_value=0\n\
    \  local -i node_first_index=0\n  local -i node_last_index=0\n  local -i node_first_value=0\n\
    \  local -i node_last_value=0\n  local -i node_count=${#nodes[@]}\n  local -i\
    \ node_index=0\n  local -i node_value=0\n  local -i node_first_index=0\n  local\
    \ -i node_last_index=0\n  local -i node_first_value=0\n  local -i node_last_value=0\n\
    \  local -i node_count=${\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcb407q3k.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a\n  local i\n  local min\n  local min_i\n  local -i n\n  local -i\
    \ n_even\n  IFS=' ' read -r -a a <<< \"$1\"\n  n=${#a[@]}\n  if (( n == 0 ));\
    \ then\n    echo \"[]\"\n    return\n  fi\n  min=${a[0]}\n  min_i=0\n  n_even=0\n\
    \  for (( i=0; i<n; i++ )); do\n    if (( a[i] % 2 == 0 )); then\n      (( n_even++\
    \ ))\n      if (( n_even == 1 || a[i] < min )); then\n        min=${a[i]}\n  \
    \      min_i=$i\n      fi\n    fi\n  done\n  if (( n_even == 0 )); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[ $min, $min_i ]\"\n  fi\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_index=${#nodes[@]}\n  local -i min_value=${nodes[0]}\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=($1)\n  local evens=()\n  local evens_idx=()\n  local i=0\n  for\
    \ node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n\
    \      evens_idx+=($i)\n    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_idx=$(echo \"${evens[@]}\"\
    \ | tr ' ' '\\n' | awk 'NR==1{m=$1;mi=1} $1<m{m=$1;mi=NR} END{print mi}')\n  \
    \  local min_val=${evens[$((min_idx - 1))]}\n    local min_idx_idx=$(echo \"${evens_idx[@]}\"\
    \ | tr ' ' '\\n' | awk 'NR==1{m=$1;mi=1} $1<m{m=$1;mi=NR} END{print mi}')\n  \
    \  local min_idx_val=${evens_idx[$((min_idx_idx - 1))]}\n    echo \"[$min_val,\
    \ $min_idx_val]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i\n  local -i min_even_value=1000000000\n \
    \ local -i min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_index_found=0\n \
    \ local -i min_even_last_index_found=0\n  local -i min_even_first_index_found_count=0\n\
    \  local -i min_even_last_index_found_count=0\n  local -i min_even_first_index_found_count_max=0\n\
    \  local -i min_even_last_index_found_count_max=0\n  local -i min_even_first_index_found_count_max_index=0\n\
    \  local -i min_even_last_index_found_count_max_index=0\n  local -i min_even_first_index_found_count_max_index_count=0\n\
    \  local -i min_even_last_index_found_count_max_index_count=0\n  local -i min_even_first_index_found_count_max_index_count_max=0\n\
    \  local -i min_even_last_index_found_count_max_index_count_max=0\n  local -i\
    \ min_even_first_index_found_count_max_index_count_max_index=0\n  local -i min_even_last_index_found_count_max_index_count_max_index=0\n\
    \  local -i min_even_first_index_found_count_max_index_count_max_index_count=0\n\
    \  local -i min_even_last_index_found_count_max_index_count_max_index_count=0\n\
    \  local -i min_even_first_index_found_count_max_index_count_max_index_count_max=0\n\
    \  local -i min_even_last_index_found_count_max_index_count_max_index_count_max\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min=0\n\
    \  local -i min_i=0\n  local -i len=${#nodes[@]}\n  local -i val=0\n  for ((i=0;\
    \ i<len; i++)); do\n    val=${nodes[i]}\n    if ((val % 2 == 0)); then\n     \
    \ evens+=($val)\n    fi\n  done\n  if ((${#evens[@]} == 0)); then\n    echo \"\
    []\"\n    return\n  fi\n  min=${evens[0]}\n  min_i=0\n  for ((i=1; i<${#evens[@]};\
    \ i++)); do\n    if ((evens[i] < min)); then\n      min=${evens[i]}\n      min_i=$i\n\
    \    fi\n  done\n  echo \"[$min, $min_i]\"\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=()\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_value_index=0\n  local -i min_even_value_count=0\n  local -i min_even_value_first_index=0\n\
    \  local -i node_value=0\n  local -i node_count=0\n  local -i node_first_index=0\n\
    \  local -i node_index=0\n  local -i node_value_count=0\n  local -i node_value_first_index=0\n\
    \  local -i node_value_index=0\n  local -i node_value_is_even=0\n  local -i node_value_is_min_even_value=0\n\
    \  local -i node_value_is_min_even_value_first_index=0\n  local -i node_value_is_min_even_value_index=0\n\
    \  local -i node_value_is_min_even_value_count=0\n  local -i node_value_is_min_even_value_first_index=0\n\
    \  local -i node_value_is_min_even_value_index=0\n  local -i node_value_is_min_even_value_count=0\n\
    \  local -i node_value_is_min_even_value_first_index=0\n  local -i node_value_is_min_even_value_index=0\n\
    \  local -i node_value_is_min_even_value_count=0\n  local -i node_value_is_min_even_value_first_index=0\n\
    \  local -i node_value_is_min_even_value_index=0\n  local -i node_value_is_min_even_value_count=0\n\
    \  local -i node_value_is_min_even_value_first_index=0\n  local -i node_value_is_min_even_value_index=0\n\
    \  local -i node_value_is_min_even_value_count=0\n  local -i node_value_is_min_even_value_first\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a a\n  IFS=' ' read -r -a a <<< \"$1\"\n  local -i i=0\n  local -i min=0\n\
    \  local -i min_i=0\n  local -i len=${#a[@]}\n  local -i found=0\n  while (( i\
    \ < len )); do\n    if (( a[i] % 2 == 0 )); then\n      if (( found == 0 )); then\n\
    \        min=a[i]\n        min_i=i\n        found=1\n      elif (( a[i] < min\
    \ )); then\n        min=a[i]\n        min_i=i\n      fi\n    fi\n    (( i++ ))\n\
    \  done\n  if (( found == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[ $min,\
    \ $min_i ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local -a result\n\
    \  local i\n  local j\n  local k\n  local min_even\n  local min_odd\n  local min_even_index\n\
    \  local min_odd_index\n  local min_even_count\n  local min_odd_count\n  local\
    \ min_even_first_index\n  local min_odd_first_index\n  local min_even_last_index\n\
    \  local min_odd_last_index\n  local min_even_first_index_count\n  local min_odd_first_index_count\n\
    \  local min_even_last_index_count\n  local min_odd_last_index_count\n  local\
    \ min_even_first_index_count_index\n  local min_odd_first_index_count_index\n\
    \  local min_even_last_index_count_index\n  local min_odd_last_index_count_index\n\
    \  local min_even_first_index_count_index_value\n  local min_odd_first_index_count_index_value\n\
    \  local min_even_last_index_count_index_value\n  local min_odd_last_index_count_index_value\n\
    \  local min_even_first_index_count_index_value_index\n  local min_odd_first_index_count_index_value_index\n\
    \  local min_even_last_index_count_index_value_index\n  local min_odd_last_index_count_index_value_index\n\
    \  local min_even_first_index_count_index_value_index_count\n  local min_odd_first_index_count_index_value_index_count\n\
    \  local min_even_last_index_count_index_value_index_count\n  local min_odd_last_index_count_index_value_index_count\n\
    \  local min_even_first_index_count_index_value_index_count_index\n  local min_odd_first_index_count_index_value_index_count_index\n\
    \  local min_even_last_index_count_index_value_index_count_index\n\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=$1\n  local evens=$(echo $nodes | tr ' ' '\\n' | grep -E '^[0-9]+$'\
    \ | grep -E '^[02468]')\n  local smallest_even=$(echo $evens | tr ' ' '\\n' |\
    \ sort -n | head -n 1)\n  local smallest_even_index=$(echo $nodes | tr ' ' '\\\
    n' | grep -n $smallest_even | cut -d: -f1)\n  if [ -z \"$smallest_even\" ]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[$smallest_even, $smallest_even_index]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a odds=()\n  local -a odds_idx=()\n  local -a result=()\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local\
    \ bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n\
    \  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local\
    \ mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n\
    \  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local\
    \ xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n\
    \  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n \
    \ local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local\
    \ nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n\
    \  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n \
    \ local yyy=0\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min=${nodes[0]}\n  local -i min_i=0\n  local\
    \ -i i=0\n  local -i n=${#nodes[@]}\n  local -i even=0\n  local -i even_i=0\n\
    \  local -i even_n=0\n  local -i even_min=0\n  local -i even_min_i=0\n  local\
    \ -i even_min_n=0\n  local -i even_min_n_i=0\n  local -i even_min_n_i_min=0\n\
    \  local -i even_min_n_i_min_i=0\n  local -i even_min_n_i_min_i_n=0\n  local -i\
    \ even_min_n_i_min_i_n_i=0\n  local -i even_min_n_i_min_i_n_i_min=0\n  local -i\
    \ even_min_n_i_min_i_n_i_min_i=0\n  local -i even_min_n_i_min_i_n_i_min_i_n=0\n\
    \  local -i even_min_n_i_min_i_n_i_min_i_n_i=0\n  local -i even_min_n_i_min_i_n_i_min_i_n_i_min=0\n\
    \  local -i even_min_n_i_min_i_n_i_min_i_n_i_min_i=0\n  local -i even_min_n_i_min_i_n_i_min_i_n_i_min_i_n=0\n\
    \  local -i even_min_n_i_min_i_n_i_min_i_n_i_min_i_n_i=0\n  local -i even_min_n_i_min_i_n_i_min_i_n_i_min_i_n_i_min=0\n\
    \  local -i even_min_n_i_min_i_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_value=0\n  local\
    \ -i min_even_last_value=0\n  local -i min_even_first_count=0\n  local -i min_even_last_count=0\n\
    \  local -i min_even_first_first_index=0\n  local -i min_even_first_last_index=0\n\
    \  local -i min_even_last_first_index=0\n  local -i min_even_last_last_index=0\n\
    \  local -i min_even_first_first_value=0\n  local -i min_even_first_last_value=0\n\
    \  local -i min_even_last_first_value=0\n  local -i min_even_last_last_value=0\n\
    \  local -i min_even_first_first_count=0\n  local -i min_even_first_last_count=0\n\
    \  local -i min_even_last_first_count=0\n  local -i min_even_last_last_count=0\n\
    \  local -i min_even_first_first_first_index=0\n  local -i min_even_first_first_last_index=0\n\
    \  local -i min_even_first_last_first_index=0\n  local -i min_even_first_last_last_index=0\n\
    \  local -i min_even_last_first_first_index=0\n  local -i min_even_last_first_last_index=0\n\
    \  local -i min_even_last_last_first_index=0\n  local -i min_even_last_last_last_index=0\n\
    \  local -i min_even_first_first_first_value=0\n  local -i min_even_first_first_last_value=0\n\
    \ \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=( $1 )\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n\
    \  local -i cnt=0\n  local -i len=${#nodes[@]}\n  for (( i=0; i<len; i++ )); do\n\
    \    if [[ ${nodes[i]} -eq 0 ]]; then\n      cnt=$(( cnt + 1 ))\n      if [[ $cnt\
    \ -eq 1 ]]; then\n        min_i=$i\n      fi\n    elif [[ ${nodes[i]} -gt 0 ]]\
    \ && [[ ${nodes[i]} -lt min ]] && [[ $(( ${nodes[i]} % 2 )) -eq 0 ]]; then\n \
    \     min=${nodes[i]}\n      min_i=$i\n    fi\n  done\n  if [[ $min -eq 0 ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[ $min, $min_i ]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=0\n\
    \  local -i min_even_count=0\n  local -i i=0\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n\
    \      min_even_count=1\n      break\n    elif [[ ${nodes[$i]} -gt 0 && ${nodes[$i]}\
    \ -lt $min_even_value && $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      min_even_value=${nodes[$i]}\n\
    \      min_even_index=$i\n      min_even_count=1\n    elif [[ ${nodes[$i]} -eq\
    \ $min_even_value ]]; then\n      min_even_count=$(( min_even_count + 1 ))\n \
    \   fi\n  done\n  if [[ $min_even_count -eq 1 ]]; then\n    echo \"[ $min_even_value,\
    \ $min_even_index ]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n   \
    \ pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_index=0\n  local -i min_value=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local\
    \ -i index=0\n  local -i min_even_value=0\n  local -i min_even_index=0\n  local\
    \ -i even_value=0\n  local -i even_index=0\n  local -i found_even=0\n  local -i\
    \ found_min_even=0\n  local -i found_min=0\n  local -i found_min_index=0\n  local\
    \ -i found_min_even_index=0\n  local -i found_min_even_value=0\n  local -i found_min_value=0\n\
    \  local -i found_even_index=0\n  local -i found_even_value=0\n  local -i found_even_index=0\n\
    \  local -i found_even_value=0\n  local -i found_even_index=0\n  local -i found_even_value=0\n\
    \  local -i found_even_index=0\n  local -i found_even_value=0\n  local -i found_even_index=0\n\
    \  local -i found_even_value=0\n  local -i found_even_index=0\n  local -i found_even_value=0\n\
    \  local -i found_even_index=0\n  local -i found_even_value=0\n  local -i found_even_index=0\n\
    \  local -i found_even_value=0\n  local -i found_even_index=0\n  local -i found_even_value=0\n\
    \  local -i found_even_index=0\n  local -i found_even_value=0\n  local -i found_even_index=0\n\
    \  local -i found_even_value=0\n  local -i found_even_index=0\n  local -i found_even_value=0\n\
    \  local -i found_even_index=0\n  local -i found_even\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=-1\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if (( nodes[i]\
    \ % 2 == 0 && nodes[i] < min_even_value )); then\n      min_even_value=nodes[i]\n\
    \      min_even_index=i\n    fi\n  done\n  if (( min_even_index == -1 )); then\n\
    \    echo \"[]\"\n  else\n    echo \"[ $min_even_value, $min_even_index ]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i len=${#nodes[@]}\n  local -i i=0\n  local -i\
    \ min_even_value=0\n  local -i min_even_index=0\n  local -i min_even_count=0\n\
    \  local -i min_even_first_index=0\n  local -i min_even_last_index=0\n  local\
    \ -i min_even_first_value=0\n  local -i min_even_last_value=0\n  local -i min_even_first_count=0\n\
    \  local -i min_even_last_count=0\n  local -i min_even_first_index_count=0\n \
    \ local -i min_even_last_index_count=0\n  local -i min_even_first_value_count=0\n\
    \  local -i min_even_last_value_count=0\n  local -i min_even_first_index_value_count=0\n\
    \  local -i min_even_last_index_value_count=0\n  local -i min_even_first_index_value_count=0\n\
    \  local -i min_even_last_index_value_count=0\n  local -i min_even_first_index_value_count=0\n\
    \  local -i min_even_last_index_value_count=0\n  local -i min_even_first_index_value_count=0\n\
    \  local -i min_even_last_index_value_count=0\n  local -i min_even_first_index_value_count=0\n\
    \  local -i min_even_last_index_value_count=0\n  local -i min_even_first_index_value_count=0\n\
    \  local -i min_even_last_index_value_count=0\n  local -i min_even_first_index_value_count=0\n\
    \  local -i min_even_last_index_value_count=0\n  local -i min_even_first_index_value_count=0\n\
    \  local -i min_even_last_index_value_count=0\n  local -i min_even\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n\
    \  local -i len=${#nodes[@]}\n  local -i even=0\n  local -i node=0\n  for ((i=0;\
    \ i<len; i++)); do\n    node=${nodes[i]}\n    if ((node % 2 == 0)); then\n   \
    \   even=1\n      if ((node < min)); then\n        min=node\n        min_i=i\n\
    \      fi\n    fi\n  done\n  if ((even == 0)); then\n    echo \"[]\"\n  else\n\
    \    echo \"[$min, $min_i]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  for n in \"${nodes[@]}\"; do\n    if (( n % 2 == 0 )); then\n\
    \      evens+=($n)\n    else\n      odds+=($n)\n    fi\n  done\n  if (( ${#evens[@]}\
    \ > 0 )); then\n    result+=($(printf \"%s\\n\" \"${evens[@]}\" | sort -n | head\
    \ -n 1))\n    result+=($(printf \"%s\\n\" \"${!nodes[@]}\" | grep -n \"${result[0]}\"\
    \ | cut -d: -f1))\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n;\
    \ i++)); do\n    if ((nodes[i] % 2 == 0)); then\n      evens[j]=${nodes[i]}\n\
    \      j=$((j+1))\n    else\n      odds[k]=${nodes[i]}\n      k=$((k+1))\n   \
    \ fi\n  done\n  if ((j > 0)); then\n    local min=${evens[0]}\n    local min_index=0\n\
    \    for ((i=1; i<j; i++)); do\n      if ((evens[i] < min)); then\n        min=${evens[i]}\n\
    \        min_index=$i\n      fi\n    done\n    result[0]=$min\n    result[1]=$min_index\n\
    \  elif ((k > 0)); then\n    local min=${odds[0]}\n    local min_index=0\n   \
    \ for ((i=1; i<k; i++)); do\n      if ((odds[i] < min)); then\n        min=${odds[i]}\n\
    \        min_index=$i\n      fi\n    done\n    result[0]=$min\n    result[1]=$min_index\n\
    \  fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i min_even_count=0\n  local -i i=0\n  local -i node_count=${#nodes[@]}\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n \
    \ local -i min_even_count=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n \
    \ local -i min_even_count=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n \
    \ local -i min_even_count=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n \
    \ local -i min_even_count=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n \
    \ local -i min_even_count=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n \
    \ local -i min_even_count=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_count=0\n \
    \ local -i min_even_count=0\n  local -\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local min=0\n  local\
    \ min_index=0\n  local len=${#nodes[@]}\n  if [[ $len -eq 0 ]]; then\n    echo\
    \ \"[]\"\n    return\n  fi\n  for ((i=0; i<len; i++)); do\n    if [[ $((nodes[i]\
    \ % 2)) -eq 0 ]]; then\n      evens[j]=${nodes[i]}\n      evens_index[j]=$i\n\
    \      ((j++))\n    fi\n  done\n  if [[ $j -eq 0 ]]; then\n    echo \"[]\"\n \
    \   return\n  fi\n  min=${evens[0]}\n  min_index=${evens_index[0]}\n  for ((k=1;\
    \ k<j; k++)); do\n    if [[ ${evens[k]} -lt $min ]]; then\n      min=${evens[k]}\n\
    \      min_index=${evens_index[k]}\n    fi\n  done\n  result[0]=$min\n  result[1]=$min_index\n\
    \  echo \"[${result[@]}]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local -i i\n  local\
    \ -i j\n  local -i k\n  local -i min_even\n  local -i min_even_index\n  local\
    \ -i min_odd\n  local -i min_odd_index\n  local -i n\n  local -i n_evens\n  local\
    \ -i n_odds\n  local -i node\n  local -i node_index\n  local -i node_value\n \
    \ local -i plucked_index\n  local -i plucked_value\n  local -i plucked_value_index\n\
    \  local -i plucked_value_index_index\n  local -i plucked_value_index_value\n\
    \  local -i plucked_value_index_value_index\n  local -i plucked_value_index_value_value\n\
    \  local -i plucked_value_value\n  local -i plucked_value_value_index\n  local\
    \ -i plucked_value_value_value\n  local -i plucked_value_value_value_index\n \
    \ local -i plucked_value_value_value_value\n  local -i plucked_value_value_value_value_index\n\
    \  local -i plucked_value_value_value_value_value\n  local -i plucked_value_value_value_value_value_index\n\
    \  local -i plucked_value_value_value_value_value_value\n  local -i plucked_value_value_value_value_value_value_index\n\
    \  local -i plucked_value_value_value_value_value_value_value\n  local -i plucked_value_value_value_value_value_value_value_index\n\
    \  local -i plucked_value_value_value_value_value_value_value_value\n  local -i\
    \ plucked_value_value_value_value_value_value_value_value_index\n  local -i plucked_value_value_value_value_value_value_value_value_value\n\
    \  local -i plucked_value_value_value_value_value_value_value_value_value_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_i=0\n\
    \  local -i min_v=0\n  local -i v=0\n  local -i len=${#nodes[@]}\n  for ((i=0;\
    \ i<len; i++)); do\n    v=${nodes[i]}\n    if ((v % 2 == 0)); then\n      evens+=($v)\n\
    \    fi\n  done\n  len=${#evens[@]}\n  if ((len == 0)); then\n    echo \"[]\"\n\
    \    return\n  fi\n  min_v=${evens[0]}\n  for ((i=1; i<len; i++)); do\n    v=${evens[i]}\n\
    \    if ((v < min_v)); then\n      min_v=$v\n      min_i=$i\n    fi\n  done\n\
    \  echo \"[$min_v, $min_i]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i len=${#nodes[@]}\n  local -i found=0\n  local -i value=0\n  local\
    \ -i index=0\n\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value\
    \ % 2 == 0)); then\n      if ((found == 0)); then\n        min_value=$value\n\
    \        min_index=$i\n        found=1\n      elif ((value < min_value)); then\n\
    \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n\n\
    \  if ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"[$min_value, $min_index]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a odds=()\n  local -a odds_idx=()\n  local -a result=()\n  local i=0\n  for\
    \ n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n      evens+=($n)\n\
    \      evens_idx+=($i)\n    else\n      odds+=($n)\n      odds_idx+=($i)\n   \
    \ fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=([0]=\"\
    []\")\n  else\n    local min_even=${evens[0]}\n    local min_even_idx=${evens_idx[0]}\n\
    \    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min_even ]];\
    \ then\n        min_even=${evens[$i]}\n        min_even_idx=${evens_idx[$i]}\n\
    \      fi\n    done\n    result=([0]=\"[$min_even, $min_even_idx]\")\n  fi\n \
    \ echo \"${result[0]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ $((${nodes[$i]} % 2)) -eq 0\
    \ ]]; then\n      evens+=(${nodes[$i]})\n      evens_index+=($i)\n    fi\n  done\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=(0 0)\n  else\n    evens_sorted=($(printf\
    \ \"%s\\n\" \"${evens[@]}\" | sort -n))\n    evens_index_sorted=($(printf \"%s\\\
    n\" \"${evens_index[@]}\" | sort -n))\n    for ((j=0; j<${#evens_sorted[@]}; j++));\
    \ do\n      if [[ ${evens_sorted[$j]} -gt ${evens_sorted[0]} ]]; then\n      \
    \  break\n      fi\n    done\n    for ((k=0; k<${#evens_index_sorted[@]}; k++));\
    \ do\n      if [[ ${evens_index_sorted[$k]} -gt ${evens_index_sorted[0]} ]]; then\n\
    \        break\n      fi\n    done\n    for ((l=0; l<${#evens_sorted[@]}; l++));\
    \ do\n      if [[ ${evens_sorted[$l]} -gt ${evens_s\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1xkiece9.sh: line 68: syntax error in conditional expression

    /tmp/tmp1xkiece9.sh: line 71: syntax error near `candidate(''

    /tmp/tmp1xkiece9.sh: line 71: `candidate() {''

    '
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n      if\
    \ [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value ]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [\
    \ -z \"$min_even_value\" ]; then\n    echo \"[]\"\n  else\n    echo \"[ $min_even_value,\
    \ $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \    local -a nodes=($1)\n    local -i min_even_value=0\n    local -i min_even_index=0\n\
    \    local -i min_even_value_count=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n\
    \    local -i value=0\n    local -i is_even=0\n    local -i is_min_even_value=0\n\
    \    local -i is_min_even_index=0\n    local -i is_min_even_value_count=0\n  \
    \  for ((i=0; i<n; i++)); do\n        value=${nodes[i]}\n        is_even=$((value\
    \ % 2))\n        is_min_even_value=$((value < min_even_value))\n        is_min_even_index=$((i\
    \ < min_even_index))\n        is_min_even_value_count=$((value == min_even_value))\n\
    \        if [[ $is_even -eq 0 ]]; then\n            if [[ $is_min_even_value -eq\
    \ 1 ]]; then\n                min_even_value=$value\n                min_even_index=$i\n\
    \                min_even_value_count=1\n            elif [[ $is_min_even_value_count\
    \ -eq 1 ]]; then\n                min_even_value_count=$((min_even_value_count\
    \ + 1))\n                if [[ $is_min_even_index -eq 1 ]]; then\n           \
    \         min_even_index=$i\n                fi\n            fi\n        fi\n\
    \    done\n    if [[ $min_even_value_count -eq 0 ]]; then\n        echo \"[]\"\
    \n    else\n        echo \"[$min_even_value, $min_even_index]\"\n    fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_index_found=0\n \
    \ local -i min_even_last_index_found=0\n  local -i node_value=0\n  local -i node_count=0\n\
    \  local -i node_first_index=0\n  local -i node_last_index=0\n  local -i node_first_index_found=0\n\
    \  local -i node_last_index_found=0\n  local -i node_index=0\n  local -i node_count_even=0\n\
    \  local -i node_count_odd=0\n  local -i node_count_zero=0\n  local -i node_count_nonzero=0\n\
    \  local -i node_count_positive=0\n  local -i node_count_negative=0\n  local -i\
    \ node_count_nonnegative=0\n  local -i node_count_nonpositive=0\n  local -i node_count_nonzero_even=0\n\
    \  local -i node_count_nonzero_odd=0\n  local -i node_count_nonzero_positive=0\n\
    \  local -i node_count_nonzero_negative=0\n  local -i node_count_nonzero_nonnegative=0\n\
    \  local -i node_count_nonzero_nonpositive=0\n  local -i node_count_zero_even=0\n\
    \  local -i node_count_zero_odd=0\n  local -i node_count_zero_positive=0\n  local\
    \ -i node_count_zero_negative=0\n  local -i node_count_zero_nonnegative=0\n  local\
    \ -i node_count_zero_nonpositive=0\n  local -i node_count_nonzero_even_positive=0\n\
    \  local -i node_count_nonzero_even_negative=0\n  local -i\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=($1)\n  local -i i=0\n  local -i min_even_val=0\n  local -i min_even_idx=0\n\
    \  local -i min_even_cnt=0\n  local -i min_odd_val=0\n  local -i min_odd_idx=0\n\
    \  local -i min_odd_cnt=0\n  local -i val=0\n  local -i cnt=0\n  local -i idx=0\n\
    \  local -i is_even=0\n  local -i is_odd=0\n  local -i is_first=0\n  local -i\
    \ is_first_even=0\n  local -i is_first_odd=0\n  local -i is_first_even_or_odd=0\n\
    \  local -i is_first_even_and_odd=0\n  local -i is_first_even_and_odd_and_zero=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one=0\n  local -i is_first_even_and_odd_and_zero_and_one_and_two=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one_and_two_and_three=0\n  local\
    \ -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four=0\n  local\
    \ -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four_and_five=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four_and_five_and_six=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four_and_five_and_six_and_seven=0\n\
    \  local -i is_first_even_and_odd_and_zero_and_one_and_two_and_three_and_four\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_value=0\n  local\
    \ -i min_even_last_value=0\n  local -i min_even_first_count=0\n  local -i min_even_last_count=0\n\
    \  local -i min_even_first_index_count=0\n  local -i min_even_last_index_count=0\n\
    \  local -i min_even_first_value_count=0\n  local -i min_even_last_value_count=0\n\
    \  local -i min_even_first_index_value_count=0\n  local -i min_even_last_index_value_count=0\n\
    \  local -i min_even_first_index_value_count_count=0\n  local -i min_even_last_index_value_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count=0\n  local -i min_even_last_index_value_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count=0\n  local -i min_even_last_index_value_count_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count_count=0\n  local\
    \ -i min_even_last_index_value_count_count_count_count_count=0\n  local -i min_even_first_index_value_count_count_count_count_count_count=0\n\
    \  local -i min_even_last_index_value_count_count_count_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count_count_count_count=0\n\
    \  local -\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \    local -a nodes=($1)\n    local -i min_even_value=0\n    local -i min_even_index=0\n\
    \    local -i min_even_count=0\n    local -i i=0\n    local -i len=${#nodes[@]}\n\
    \    local -i value=0\n    for ((i=0; i<len; i++)); do\n        value=${nodes[i]}\n\
    \        if ((value % 2 == 0)); then\n            if ((min_even_count == 0));\
    \ then\n                min_even_value=$value\n                min_even_index=$i\n\
    \                min_even_count=1\n            elif ((value < min_even_value));\
    \ then\n                min_even_value=$value\n                min_even_index=$i\n\
    \                min_even_count=1\n            elif ((value == min_even_value));\
    \ then\n                min_even_count+=1\n            fi\n        fi\n    done\n\
    \    if ((min_even_count == 0)); then\n        echo \"[]\"\n    else\n       \
    \ echo \"[$min_even_value, $min_even_index]\"\n    fi\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local min=9999999999\n  local min_index=0\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -lt $min && $(( ${nodes[$i]}\
    \ % 2 )) -eq 0 ]]; then\n      min=${nodes[$i]}\n      min_index=$i\n    fi\n\
    \  done\n  if [[ $min -eq 9999999999 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[ $min, $min_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i j=0\n\
    \  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n\
    \  local -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n\
    \  local -i J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n\
    \  local -i O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n\
    \  local -i T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n\
    \  local -i Y=0\n  local -i Z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n\
    \  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n\
    \  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i\
    \ mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      elif [[ $node -eq $min_even_value ]]; then\n\
    \        if [[ $i -lt $min_even_index ]]; then\n          min_even_index=$i\n\
    \        fi\n      fi\n    fi\n    ((i++))\n  done\n  if [[ $min_even_value -eq\
    \ 1000000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min_even_value, $min_even_index]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \    local -a nodes=($1)\n    local -i i=0\n    local -i min_even_value=0\n  \
    \  local -i min_even_index=0\n    local -i min_even_value_count=0\n    local -i\
    \ min_even_value_index=0\n    local -i node_value=0\n    local -i node_count=${#nodes[@]}\n\
    \    local -i node_index=0\n    local -i node_value_count=0\n    local -i node_value_index=0\n\
    \    local -i is_even=0\n    local -i is_min_even_value=0\n    local -i is_min_even_index=0\n\
    \    local -i is_min_even_value_count=0\n    local -i is_min_even_value_index=0\n\
    \    local -i is_node_value=0\n    local -i is_node_count=0\n    local -i is_node_index=0\n\
    \    local -i is_node_value_count=0\n    local -i is_node_value_index=0\n    local\
    \ -i is_first_even=0\n    local -i is_first_min_even_value=0\n    local -i is_first_min_even_index=0\n\
    \    local -i is_first_min_even_value_count=0\n    local -i is_first_min_even_value_index=0\n\
    \    local -i is_first_node_value=0\n    local -i is_first_node_count=0\n    local\
    \ -i is_first_node_index=0\n    local -i is_first_node_value_count=0\n    local\
    \ -i is_first_node_value_index=0\n    local -i is_last_even=0\n    local -i is_last_min_even_value=0\n\
    \    local -i is_last_min_even_index=0\n    local -i is_last_min_even_value_count=0\n\
    \    local -i is_last_min_even_value_index=0\n    local -i is_last_node_value=0\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i i=0\n  local -i len=${#nodes[@]}\n  local -i node_value=0\n  local\
    \ -i min_even_found=0\n  local -i min_even_index_found=0\n  local -i min_even_value_found=0\n\
    \  local -i min_even_index_found_index=0\n  local -i min_even_value_found_index=0\n\
    \  local -i min_even_index_found_value=0\n  local -i min_even_value_found_value=0\n\
    \  local -i min_even_index_found_index_value=0\n  local -i min_even_value_found_index_value=0\n\
    \  local -i min_even_index_found_value_index=0\n  local -i min_even_value_found_value_index=0\n\
    \  local -i min_even_index_found_index_value_index=0\n  local -i min_even_value_found_index_value_index=0\n\
    \  local -i min_even_index_found_value_index_index=0\n  local -i min_even_value_found_value_index_index=0\n\
    \  local -i min_even_index_found_index_value_index_index=0\n  local -i min_even_value_found_index_value_index_index=0\n\
    \  local -i min_even_index_found_value_index_index_index=0\n  local -i min_even_value_found_value_index_index_index=0\n\
    \  local -i min_even_index_found_index_value_index_index_index=0\n  local -i min_even_value_found_index_value_index_index_index=0\n\
    \  local -i min_even_index_found_value_index_index_index_index=0\n  local -i min_even_value_found_value_index_index_index_index=0\n\
    \  local -i min\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=1000000000\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0 && nodes[i]\
    \ < min_value)); then\n      min_value=nodes[i]\n      min_index=i\n    fi\n \
    \ done\n  if ((min_index >= 0)); then\n    echo \"[$min_value, $min_index]\"\n\
    \  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=($1)\n  local evens=()\n  local evens_index=()\n  local i=0\n \
    \ for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n  \
    \    evens+=($node)\n      evens_index+=($i)\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n\
    \    local min_even_index=${evens_index[0]}\n    for i in \"${!evens[@]}\"; do\n\
    \      if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n\
    \        min_even_index=${evens_index[$i]}\n      fi\n    done\n    echo \"[$min_even,\
    \ $min_even_index]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=($1)\n  local evens=()\n  local even_idx=()\n  local i=0\n  local\
    \ min_even=0\n  local min_idx=0\n  local min_idx_count=0\n  local min_idx_first=0\n\
    \  for n in \"${nodes[@]}\"; do\n    if (( n % 2 == 0 )); then\n      evens+=($n)\n\
    \      even_idx+=($i)\n    fi\n    ((i++))\n  done\n  if (( ${#evens[@]} == 0\
    \ )); then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n  min_idx=${even_idx[0]}\n\
    \  for n in \"${evens[@]}\"; do\n    if (( n < min_even )); then\n      min_even=$n\n\
    \      min_idx=${even_idx[$i]}\n    fi\n    ((i++))\n  done\n  i=0\n  for n in\
    \ \"${even_idx[@]}\"; do\n    if (( n == min_idx )); then\n      min_idx_count=$((min_idx_count+1))\n\
    \      if (( min_idx_count == 1 )); then\n        min_idx_first=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if (( min_idx_count > 1 )); then\n    min_idx=${even_idx[$min_idx_first]}\n\
    \  fi\n  echo \"[$min_even, $min_idx]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n\
    \  local -i count=0\n  for i in \"${nodes[@]}\"; do\n    if (( i % 2 == 0 ));\
    \ then\n      (( count++ ))\n      if (( count == 1 )); then\n        min=$i\n\
    \        min_i=$i\n      elif (( i < min )); then\n        min=$i\n        min_i=$i\n\
    \      fi\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"[]\"\n  else\n\
    \    echo \"[$min, $min_i]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i j=0\n\
    \  local -i min_index=0\n  local -i min_value=0\n  local -i len=${#nodes[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    if [[ ${nodes[i]} -eq 0 ]]; then\n      evens[j]=$i\n\
    \      ((j++))\n    elif [[ ${nodes[i]} -gt 0 ]] && [[ $((${nodes[i]} % 2)) -eq\
    \ 0 ]]; then\n      evens[j]=$i\n      ((j++))\n    fi\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    min_index=${evens[0]}\n    min_value=${nodes[${evens[0]}]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${nodes[${evens[i]}]} -lt\
    \ $min_value ]]; then\n        min_index=${evens[i]}\n        min_value=${nodes[${evens[i]}]}\n\
    \      fi\n    done\n    echo \"[$min_value, $min_index]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local evens=()\n  local i=0\n  for node in $nodes; do\n\
    \    if [ $((node % 2)) -eq 0 ]; then\n      evens+=(\"$node\")\n    fi\n  done\n\
    \  if [ ${#evens[@]} -eq 0 ]; then\n    echo \"[]\"\n  else\n    local min=${evens[0]}\n\
    \    for even in \"${evens[@]}\"; do\n      if [ $even -lt $min ]; then\n    \
    \    min=$even\n      fi\n    done\n    local index=0\n    for node in $nodes;\
    \ do\n      if [ $node -eq $min ]; then\n        echo \"[$min, $index]\"\n   \
    \     return\n      fi\n      index=$((index + 1))\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_index=0\n\
    \  local -i len=0\n  local -i val=0\n  local -i is_empty=1\n  local -i is_even=0\n\
    \  local -i is_first=1\n  local -i is_smaller=0\n  local -i is_smaller_index=0\n\
    \  local -i is_smaller_index_first=1\n  local -i is_smaller_index_first_even=0\n\
    \  local -i is_smaller_index_first_even_smaller=0\n  local -i is_smaller_index_first_even_smaller_index=0\n\
    \  local -i is_smaller_index_first_even_smaller_index_first=1\n  local -i is_smaller_index_first_even_smaller_index_first_even=0\n\
    \  local -i is_smaller_index_first_even_smaller_index_first_even_smaller=0\n \
    \ local -i is_smaller_index_first_even_smaller_index_first_even_smaller_index=0\n\
    \  local -i is_smaller_index_first_even_smaller_index_first_even_smaller_index_first=1\n\
    \  local -i is_smaller_index_first_even_smaller_index_first_even_smaller_index_first_even=0\n\
    \  local -i is_smaller_index_first_even_smaller_index_first_even_smaller_index_first_even_smaller=0\n\
    \  local -i is_smaller_index_first_even_smaller_index_first_even_smaller_index_first_even_smaller_index=0\n\
    \  local -i is_smaller_index_first_even_smaller_index_first_even_smaller_index_first_even_smaller_index_first=1\n\
    \  local -i is_smaller_index_first_even_smaller_index_first_even_smaller_index_first_even_smaller\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes\n  local -i i\n  local -i min_value\n  local -i min_index\n\
    \  local -i value\n  local -i index\n  local -i len\n  local -i min_len\n  local\
    \ -i min_len_index\n  local -i min_len_value\n  local -i len_value\n  local -i\
    \ len_index\n  local -i len_value_index\n  local -i len_value_value\n  local -i\
    \ len_value_len\n  local -i len_value_len_index\n  local -i len_value_len_value\n\
    \  local -i len_value_len_len\n  local -i len_value_len_len_index\n  local -i\
    \ len_value_len_len_value\n  local -i len_value_len_len_len\n  local -i len_value_len_len_len_index\n\
    \  local -i len_value_len_len_len_value\n  local -i len_value_len_len_len_len\n\
    \  local -i len_value_len_len_len_len_index\n  local -i len_value_len_len_len_len_value\n\
    \  local -i len_value_len_len_len_len_len\n  local -i len_value_len_len_len_len_len_index\n\
    \  local -i len_value_len_len_len_len_len_value\n  local -i len_value_len_len_len_len_len_len\n\
    \  local -i len_value_len_len_len_len_len_len_index\n  local -i len_value_len_len_len_len_len_len_value\n\
    \  local -i len_value_len_len_len_len_len_len_len\n  local -i len_value_len_len_len_len_len_len_len_index\n\
    \  local -i len_value_len_len_len_len_len_len_len_value\n  local -i len_value_len_len_len_len_len_len_len_len\n\
    \  local -i len_value_len_len_len\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=10000\n  local -i min_even_index=10000\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node_value\n  local -i\
    \ node_index\n\n  for ((i=0; i<n; i++)); do\n    node_value=${nodes[$i]}\n   \
    \ if ((node_value % 2 == 0 && node_value < min_even_value)); then\n      min_even_value=$node_value\n\
    \      min_even_index=$i\n    fi\n  done\n\n  if ((min_even_value < 10000)); then\n\
    \    echo \"[$min_even_value, $min_even_index]\"\n  else\n    echo \"[]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_value=0\n  local\
    \ -i min_even_last_value=0\n  local -i min_even_first_count=0\n  local -i min_even_last_count=0\n\
    \  local -i min_even_first_index_count=0\n  local -i min_even_last_index_count=0\n\
    \  local -i min_even_first_value_count=0\n  local -i min_even_last_value_count=0\n\
    \  local -i min_even_first_index_value_count=0\n  local -i min_even_last_index_value_count=0\n\
    \  local -i min_even_first_index_value_count_count=0\n  local -i min_even_last_index_value_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count=0\n  local -i min_even_last_index_value_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count=0\n  local -i min_even_last_index_value_count_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count_count=0\n  local\
    \ -i min_even_last_index_value_count_count_count_count_count=0\n  local -i min_even_first_index_value_count_count_count_count_count_count=0\n\
    \  local -i min_even_last_index_value_count_count_count_count_count_count=0\n\
    \  local -i min_even_first_index_value_count_count_count_count_count_count_count=0\n\
    \  local -\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_idx=0\n \
    \ local -i idx=0\n  local -i len=0\n  local -i val=0\n  local -i found=0\n  local\
    \ -i is_even=0\n  local -i is_first=0\n  local -i is_smaller=0\n  local -i is_smaller_idx=0\n\
    \  local -i is_smaller_val=0\n  local -i is_smaller_found=0\n  local -i is_smaller_even=0\n\
    \  local -i is_smaller_first=0\n  local -i is_smaller_smaller=0\n  local -i is_smaller_smaller_idx=0\n\
    \  local -i is_smaller_smaller_val=0\n  local -i is_smaller_smaller_found=0\n\
    \  local -i is_smaller_smaller_even=0\n  local -i is_smaller_smaller_first=0\n\
    \  local -i is_smaller_smaller_smaller=0\n  local -i is_smaller_smaller_smaller_idx=0\n\
    \  local -i is_smaller_smaller_smaller_val=0\n  local -i is_smaller_smaller_smaller_found=0\n\
    \  local -i is_smaller_smaller_smaller_even=0\n  local -i is_smaller_smaller_smaller_first=0\n\
    \  local -i is_smaller_smaller_smaller_smaller=0\n  local -i is_smaller_smaller_smaller_smaller_idx=0\n\
    \  local -i is_smaller_smaller_smaller_smaller_val=0\n  local -i is_smaller_smaller_smaller_smaller_found=0\n\
    \  local -i is_smaller_smaller_smaller_smaller_even=0\n  local -i is_smaller_smaller_smaller_smaller_first=0\n\
    \  local -i is_small\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min=999999\n  local -i idx=-1\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      echo\
    \ \"[0, $i]\"\n      return\n    fi\n    if [[ ${nodes[$i]} -lt $min && $((nodes[$i]\
    \ % 2)) -eq 0 ]]; then\n      min=${nodes[$i]}\n      idx=$i\n    fi\n  done\n\
    \  if [[ $idx -eq -1 ]]; then\n    echo \"[]\"\n  else\n    echo \"[$min, $idx]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local\
    \ -a result=()\n  local i=0\n  local j=0\n  for i in \"${nodes[@]}\"; do\n   \
    \ if [[ $((i % 2)) -eq 0 ]]; then\n      evens[${#evens[@]}]=$i\n      evens_index[${#evens_index[@]}]=$j\n\
    \    fi\n    ((j++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=(0\
    \ 0)\n  else\n    local min_even=${evens[0]}\n    local min_even_index=${evens_index[0]}\n\
    \    for i in \"${evens[@]}\"; do\n      if [[ $i -lt $min_even ]]; then\n   \
    \     min_even=$i\n        min_even_index=${evens_index[$j]}\n      fi\n     \
    \ ((j++))\n    done\n    result=($min_even $min_even_index)\n  fi\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  local -i min=0\n\
    \  local -i index=0\n  local -i value=0\n  local -i is_even=0\n  local -i is_odd=0\n\
    \  local -i is_empty=0\n  local -i is_zero=0\n  local -i is_zero_index=0\n  local\
    \ -i is_zero_value=0\n  local -i is_zero_even=0\n  local -i is_zero_odd=0\n  local\
    \ -i is_zero_empty=0\n  local -i is_zero_zero=0\n  local -i is_zero_zero_index=0\n\
    \  local -i is_zero_zero_value=0\n  local -i is_zero_zero_even=0\n  local -i is_zero_zero_odd=0\n\
    \  local -i is_zero_zero_empty=0\n  local -i is_zero_zero_zero=0\n  local -i is_zero_zero_zero_index=0\n\
    \  local -i is_zero_zero_zero_value=0\n  local -i is_zero_zero_zero_even=0\n \
    \ local -i is_zero_zero_zero_odd=0\n  local -i is_zero_zero_zero_empty=0\n  local\
    \ -i is_zero_zero_zero_zero=0\n  local -i is_zero_zero_zero_zero_index=0\n  local\
    \ -i is_zero_zero_zero_zero_value=0\n  local -i is_zero_zero_zero_zero_even=0\n\
    \  local -i is_zero_zero_zero_zero_odd=0\n  local -i is_zero_zero_zero_zero_empty=0\n\
    \  local -i is_zero_zero_zero_zero_zero=0\n  local -i is_zero_zero_zero_zero_zero_index=0\n\
    \  local\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_i=0\n  local -i min_v=0\n\
    \  local -i v=0\n  local -i n=${#nodes[@]}\n  local -i found=0\n  for ((i=0; i<n;\
    \ i++)); do\n    v=${nodes[i]}\n    if ((v % 2 == 0)); then\n      if ((found\
    \ == 0)); then\n        min_v=$v\n        min_i=$i\n        found=1\n      elif\
    \ ((v < min_v)); then\n        min_v=$v\n        min_i=$i\n      fi\n    fi\n\
    \  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"[$min_v,\
    \ $min_i]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  for ((i=0; i<n;\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens[$j]=$i\n     \
    \ ((j++))\n    elif [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      evens[$j]=$i\n\
    \      ((j++))\n    else\n      odds[$k]=$i\n      ((k++))\n    fi\n  done\n \
    \ if [[ $j -eq 0 ]]; then\n    echo \"[]\"\n  else\n    result[0]=${nodes[${evens[0]}]}\n\
    \    result[1]=${evens[0]}\n    for ((i=1; i<j; i++)); do\n      if [[ ${nodes[${evens[$i]}]}\
    \ -lt ${result[0]} ]]; then\n        result[0]=${nodes[${evens[$i]}]}\n      \
    \  result[1]=${evens[$i]}\n      fi\n    done\n    echo \"[${result[0]}, ${result[1]}]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a even_indexes=()\n\
    \  local -a odd_indexes=()\n  local -a result=()\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      evens+=(0)\n      even_indexes+=($i)\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n\
    \      evens+=(${nodes[$i]})\n      even_indexes+=($i)\n    else\n      odds+=(${nodes[$i]})\n\
    \      odd_indexes+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    result=([0]=\"[]\")\n  elif [[ ${#evens[@]} -eq 1 ]]; then\n    result=([0]=${evens[0]}\
    \ [1]=${even_indexes[0]})\n  else\n    local min=${evens[0]}\n    local min_index=${even_indexes[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $min ]];\
    \ then\n        min=${evens[$i]}\n        min_index=${even_indexes[$i]}\n    \
    \  fi\n    done\n    result=([0]=$min [1]=$min_index)\n  fi\n  echo ${result[@]}\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_index=0\n\
    \  local -i len=${#nodes[@]}\n  local -i even=0\n  local -i value=0\n  local -i\
    \ index=0\n\n  if [ $len -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n\n\
    \  for ((i=0; i<len; i++)); do\n    value=${nodes[$i]}\n    even=$((value % 2))\n\
    \    if [ $even -eq 0 ]; then\n      if [ $value -lt $min ]; then\n        min=$value\n\
    \        min_index=$i\n      fi\n    fi\n  done\n\n  if [ $min -eq 0 ]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[$min, $min_index]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=10000\n  local -i min_even_value_index=10000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_value_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if\
    \ [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [ $min_even_value, $min_even_value_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a odds=()\n  local -a odds_idx=()\n  local -a result=()\n  local i=0\n  for\
    \ n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n      evens+=($n)\n\
    \      evens_idx+=($i)\n    else\n      odds+=($n)\n      odds_idx+=($i)\n   \
    \ fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\
    \n    return\n  fi\n  local min_even=${evens[0]}\n  local min_even_idx=${evens_idx[0]}\n\
    \  for ((i=1; i<${#evens[@]}; i++)); do\n    if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n      min_even=${evens[$i]}\n      min_even_idx=${evens_idx[$i]}\n\
    \    fi\n  done\n  echo \"[$min_even, $min_even_idx]\"\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n    \
    \  if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n    ((i++))\n\
    \  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999339
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min=0\n\
    \  local -i min_i=0\n  local -i min_j=0\n  local -i len=${#nodes[@]}\n  for ((i=0;\
    \ i<len; i++)); do\n    if (( nodes[i] % 2 == 0 )); then\n      evens+=(${nodes[i]})\n\
    \    fi\n  done\n  if (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n    return\n\
    \  fi\n  min=${evens[0]}\n  min_i=0\n  for ((i=1; i<${#evens[@]}; i++)); do\n\
    \    if (( evens[i] < min )); then\n      min=${evens[i]}\n      min_i=i\n   \
    \ fi\n  done\n  for ((i=0; i<len; i++)); do\n    if (( nodes[i] == min )); then\n\
    \      min_j=i\n      break\n    fi\n  done\n  echo \"[$min, $min_j]\"\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n    \
    \  if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n    i=$((i\
    \ + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[ $min_even_value, $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local -i i=0\n  local -i min=0\n  local -i min_idx=0\n \
    \ local -i min_found=0\n  local -i len=0\n  local -i val=0\n  local -i idx=0\n\
    \  local -i found=0\n  local -i even=0\n  local -i first_even=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_idx=0\n\
    \  local -i first_even_found=0\n  local -i first_even_val=0\n  local -i first_even_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_i=0\n  local -i min_v=0\n\
    \  local -i v=0\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n\
    \    v=${nodes[i]}\n    if ((v % 2 == 0)); then\n      if ((v < min_v)); then\n\
    \        min_v=$v\n        min_i=$i\n      fi\n    fi\n  done\n  if ((min_v ==\
    \ 0)); then\n    echo \"[]\"\n  else\n    echo \"[$min_v, $min_i]\"\n  fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n  local -i\
    \ min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i min_even_first_value=0\n  local\
    \ -i min_even_last_value=0\n  local -i n=${#nodes[@]}\n  local -i value=0\n  local\
    \ -i first_value=0\n  local -i last_value=0\n  local -i first_index=0\n  local\
    \ -i last_index=0\n  local -i count=0\n  local -i min_even_value_found=0\n  local\
    \ -i min_even_index_found=0\n  local -i min_even_count_found=0\n  local -i min_even_first_index_found=0\n\
    \  local -i min_even_last_index_found=0\n  local -i min_even_first_value_found=0\n\
    \  local -i min_even_last_value_found=0\n  local -i min_even_value_not_found=0\n\
    \  local -i min_even_index_not_found=0\n  local -i min_even_count_not_found=0\n\
    \  local -i min_even_first_index_not_found=0\n  local -i min_even_last_index_not_found=0\n\
    \  local -i min_even_first_value_not_found=0\n  local -i min_even_last_value_not_found=0\n\
    \  local -i min_even_value_found_first=0\n  local -i min_even_index_found_first=0\n\
    \  local -i min_even_count_found_first=0\n  local -i min_even_first_index_found_first=0\n\
    \  local -i min_even_last_index_found_first=0\n  local -i min_even_first_value_found_first=0\n\
    \  local -\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a arr=()\n  local -i min_idx=0\n  local -i min_val=0\n  local -i idx=0\n\
    \  local -i val=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  for (( i=0; i<${#nodes[@]}; i++ )); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      evens+=($i)\n    elif [[ ${nodes[$i]} -eq 1 ]]; then\n      odds+=($i)\n\
    \    elif [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens+=($i)\n    else\n\
    \      odds+=($i)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  elif [[ ${#evens[@]} -eq 1 ]]; then\n    echo \"[${nodes[${evens[0]}]},\
    \ ${evens[0]}]\"\n  else\n    local -i min=${nodes[${evens[0]}]}\n    local -i\
    \ min_index=${evens[0]}\n    for (( i=1; i<${#evens[@]}; i++ )); do\n      if\
    \ [[ ${nodes[${evens[$i]}]} -lt $min ]]; then\n        min=${nodes[${evens[$i]}]}\n\
    \        min_index=${evens[$i]}\n      fi\n    done\n    echo \"[$min, $min_index]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_value_index=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    local\
    \ -i value=${nodes[$i]}\n    if ((value % 2 == 0)); then\n      if ((value < min_even_value));\
    \ then\n        min_even_value=$value\n        min_even_value_index=$i\n     \
    \ fi\n    fi\n  done\n  if ((min_even_value == 1000000000)); then\n    echo \"\
    []\"\n  else\n    echo \"[$min_even_value, $min_even_value_index]\"\n  fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a result=()\n  local -i i=0\n  local -i j=0\n  local -i idx=0\n  local -i min=0\n\
    \  local -i min_idx=0\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++));\
    \ do\n    if [[ ${nodes[i]} -eq 0 ]]; then\n      evens[j]=${nodes[i]}\n     \
    \ evens_idx[j]=$i\n      ((j++))\n    elif [[ $(( ${nodes[i]} % 2 )) -eq 0 ]];\
    \ then\n      evens[j]=${nodes[i]}\n      evens_idx[j]=$i\n      ((j++))\n   \
    \ fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=(0 0)\n  else\n\
    \    min=${evens[0]}\n    min_idx=${evens_idx[0]}\n    for ((i=1; i<${#evens[@]};\
    \ i++)); do\n      if [[ ${evens[i]} -lt $min ]]; then\n        min=${evens[i]}\n\
    \        min_idx=${evens_idx[i]}\n      fi\n    done\n    result=($min $min_idx)\n\
    \  fi\n  echo ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i value=0\n  local -i even_count=0\n  local -i node_count=${#nodes[@]}\n\
    \  for ((i=0; i<node_count; i++)); do\n    value=${nodes[i]}\n    if ((value %\
    \ 2 == 0)); then\n      evens+=($value)\n      ((even_count++))\n    fi\n  done\n\
    \  if ((even_count == 0)); then\n    echo \"[]\"\n    return\n  fi\n  min_even_value=${evens[0]}\n\
    \  for ((i=1; i<even_count; i++)); do\n    value=${evens[i]}\n    if ((value <\
    \ min_even_value)); then\n      min_even_value=$value\n    fi\n  done\n  for ((i=0;\
    \ i<node_count; i++)); do\n    value=${nodes[i]}\n    if ((value == min_even_value));\
    \ then\n      min_even_index=$i\n      break\n    fi\n  done\n  echo \"[$min_even_value,\
    \ $min_even_index]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i smallest_even_value=0\n  local -i smallest_even_value_index=0\n\
    \  local -i smallest_even_value_count=0\n  local -i smallest_even_value_index_count=0\n\
    \  local -i i=0\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      smallest_even_value=0\n      smallest_even_value_index=$i\n\
    \      smallest_even_value_count=1\n      smallest_even_value_index_count=1\n\
    \      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $((nodes[$i] % 2)) -eq 0\
    \ ]]; then\n      if [[ $smallest_even_value -eq 0 ]]; then\n        smallest_even_value=${nodes[$i]}\n\
    \        smallest_even_value_index=$i\n        smallest_even_value_count=1\n \
    \       smallest_even_value_index_count=1\n      elif [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \        smallest_even_value_count=1\n        smallest_even_value_index_count=1\n\
    \      elif [[ ${nodes[$i]} -eq $smallest_even_value ]]; then\n        smallest_even_value_count=$((smallest_even_value_count\
    \ + 1))\n        if [[ $i -lt $smallest_even_value_index ]]; then\n          smallest_even_value_index=$i\n\
    \          smallest_even_value_index_count=1\n        elif [[ $i -eq $smallest_even_value_index\
    \ ]]; then\n          smallest_even_value_index_count=$((smallest_even_value_index_count\
    \ + 1))\n        fi\n      fi\n    fi\n  done\n  if [[ $smallest_even_value_count\
    \ -eq 1 ]] && [[ $smallest_even_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp05yn8uud.sh: line 57: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp05yn8uud.sh: line 57: syntax error near `$smallest_even_''

    /tmp/tmp05yn8uud.sh: line 57: `  if [[ $smallest_even_value_count -eq 1 ]] &&
    [[ $smallest_even_''

    '
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min=0\n  local -i min_idx=0\n  local -i idx=0\n\
    \  local -i len=${#nodes[@]}\n  local -i i=0\n  local -i node=0\n  local -i min_node=0\n\
    \  local -i min_node_idx=0\n  local -i min_node_idx_tmp=0\n  local -i min_node_tmp=0\n\
    \  local -i min_tmp=0\n  local -i min_idx_tmp=0\n  local -i min_idx_tmp_tmp=0\n\
    \  local -i min_tmp_tmp=0\n  local -i min_tmp_tmp_tmp=0\n  local -i min_idx_tmp_tmp_tmp=0\n\
    \  local -i min_idx_tmp_tmp_tmp_tmp=0\n  local -i min_tmp_tmp_tmp_tmp=0\n  local\
    \ -i min_tmp_tmp_tmp_tmp_tmp=0\n  local -i min_idx_tmp_tmp_tmp_tmp_tmp=0\n  local\
    \ -i min_idx_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i min_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \  local -i min_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i min_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \  local -i min_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i min_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \  local -i min_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i min_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \  local -i min_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i min_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=( $1 )\n  local -a evens=()\n  local -a odds=()\n  local -a\
    \ result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
    \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
    \  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i\
    \ ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n \
    \ local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n\
    \  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local\
    \ -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll=0\n\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local -a result=()\n\
    \  local i=0\n  local min_even=0\n  local min_odd=0\n  local min_even_index=0\n\
    \  local min_odd_index=0\n  local min_even_count=0\n  local min_odd_count=0\n\
    \  local node_count=${#nodes[@]}\n  local node=0\n  local node_index=0\n  local\
    \ node_value=0\n  local node_value_count=0\n  local node_value_index=0\n  local\
    \ node_value_index_count=0\n  local node_value_index_count_min=0\n  local node_value_index_count_min_index=0\n\
    \  local node_value_index_count_min_index_count=0\n  local node_value_index_count_min_index_count_min=0\n\
    \  local node_value_index_count_min_index_count_min_index=0\n  local node_value_index_count_min_index_count_min_index_count=0\n\
    \  local node_value_index_count_min_index_count_min_index_count_min=0\n  local\
    \ node_value_index_count_min_index_count_min_index_count_min_index=0\n  local\
    \ node_value_index_count_min_index_count_min_index_count_min_index_count=0\n \
    \ local node_value_index_count_min_index_count_min_index_count_min_index_count_min=0\n\
    \  local node_value_index_count_min_index_count_min_index_count_min_index_count_min_index=0\n\
    \  local node_value_index_count_min_index_count_min_index_count_min_index_count_min_index_count=0\n\
    \  local node_value_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min=0\n\
    \  local node_value_index_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n\
    \  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    if ((nodes[i] % 2\
    \ == 0)); then\n      if ((min == 0 || nodes[i] < min)); then\n        min=${nodes[i]}\n\
    \        min_i=$i\n      fi\n    fi\n  done\n  if ((min == 0)); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[$min, $min_i]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i min_even_count=0\n  local -i i=0\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if (( nodes[i] % 2 == 0 )); then\n      if (( min_even_count == 0 ));\
    \ then\n        min_even_value=nodes[i]\n        min_even_index=i\n        min_even_count=1\n\
    \      elif (( nodes[i] < min_even_value )); then\n        min_even_value=nodes[i]\n\
    \        min_even_index=i\n        min_even_count=1\n      elif (( nodes[i] ==\
    \ min_even_value )); then\n        min_even_count+=1\n      fi\n    fi\n  done\n\
    \  if (( min_even_count == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[ $min_even_value,\
    \ $min_even_index ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++));\
    \ do\n    if ((nodes[i] % 2 == 0)); then\n      evens+=(${nodes[i]})\n    fi\n\
    \  done\n  if ((${#evens[@]} == 0)); then\n    echo \"[]\"\n    return\n  fi\n\
    \  min_value=${evens[0]}\n  for ((i=1; i<${#evens[@]}; i++)); do\n    if ((evens[i]\
    \ < min_value)); then\n      min_value=${evens[i]}\n    fi\n  done\n  for ((i=0;\
    \ i<len; i++)); do\n    if ((nodes[i] == min_value)); then\n      min_index=i\n\
    \      break\n    fi\n  done\n  echo \"[${min_value}, ${min_index}]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local nodes=$1\n  local evens=$(echo \"$nodes\" | grep -Eo '\\b[02468]\\b')\n\
    \  local min=$(echo \"$evens\" | sort -n | head -n1)\n  local index=$(echo \"\
    $nodes\" | grep -bo \"$min\" | cut -d: -f1)\n  echo \"[ $min, $index ]\"\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \    local -a nodes=($1)\n    local min=\n    local min_index=\n    for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n        if [[ ${nodes[$i]} -eq 0 ]]; then\n     \
    \       min=0\n            min_index=$i\n            break\n        elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n            if [[ -z $min ]] ||\
    \ [[ ${nodes[$i]} -lt $min ]]; then\n                min=${nodes[$i]}\n      \
    \          min_index=$i\n            fi\n        fi\n    done\n    if [[ -z $min\
    \ ]]; then\n        echo \"[]\"\n    else\n        echo \"[$min, $min_index]\"\
    \n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 2:\n# Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the\
    \ first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length\
    \ <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\
    \  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_idx=()\n  local\
    \ -a odds=()\n  local -a odds_idx=()\n  local -a result=()\n  local i=0\n  for\
    \ n in \"${nodes[@]}\"; do\n    if [[ $((n % 2)) -eq 0 ]]; then\n      evens+=($n)\n\
    \      evens_idx+=($i)\n    else\n      odds+=($n)\n      odds_idx+=($i)\n   \
    \ fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\
    \n    return\n  fi\n  local min_even=${evens[0]}\n  local min_even_idx=${evens_idx[0]}\n\
    \  for ((i=1; i<${#evens[@]}; i++)); do\n    if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n      min_even=${evens[$i]}\n      min_even_idx=${evens_idx[$i]}\n\
    \    fi\n  done\n  echo \"[$min_even, $min_even_idx]\"\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999340
