language: sh
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local m=$n\n  local count=0\n  while [ $m -gt 0 ];\
    \ do\n    count=$((count + 1))\n    m=$((m / 10))\n  done\n  echo $count\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n   \
    \         prod=$((prod * digit))\n        fi\n        n=$((n / 10))\n    done\n\
    \    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n   \
    \         prod=$((prod * digit))\n        fi\n        n=$((n / 10))\n    done\n\
    \    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           result=$((result * digit))\n        fi\n        n=$((n / 10))\n  \
    \  done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while (( n > 0 )); do\n    local digit=$((\
    \ n % 10 ))\n    if (( digit % 2 == 1 )); then\n      prod=$(( prod * digit ))\n\
    \    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while (( n > 0 )); do\n    local\
    \ digit=$(( n % 10 ))\n    if (( digit % 2 != 0 )); then\n      result=$(( result\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n   \
    \         prod=$((prod * digit))\n        fi\n        n=$((n / 10))\n    done\n\
    \    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            prod=$(( prod * digit ))\n        fi\n        n=$(( n / 10 ))\n \
    \   done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local product=1\n    while [ $n -gt 0 ]; do\n\
    \        local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n\
    \            product=$((product * digit))\n        fi\n        n=$((n / 10))\n\
    \    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while (( n > 0 )); do\n    local\
    \ digit=$(( n % 10 ))\n    if (( digit % 2 != 0 )); then\n      result=$(( result\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           result=$((result * digit))\n        fi\n        n=$((n / 10))\n  \
    \  done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | sed 's/\\(.\\)/\\1\\n/g' | grep -v '^$'\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while (( n > 0 )); do\n    local\
    \ digit=$(( n % 10 ))\n    if (( digit % 2 == 1 )); then\n      product=$(( product\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo $1 | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local -i n=$1\n  local -i r=0\n  local -i p=1\n  while (( n > 0\
    \ )); do\n    r=$(( n % 10 ))\n    if (( r % 2 == 1 )); then\n      p=$(( p *\
    \ r ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $p\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local\
    \ -i digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( prod *= digit ))\n  \
    \  (( n /= 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local p=1\n  while [ $n -gt 0 ]; do\n    local d=$((n\
    \ % 10))\n    if [ $((d % 2)) -ne 0 ]; then\n      p=$((p * d))\n    fi\n    n=$((n\
    \ / 10))\n  done\n  echo $p\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local d\n  local p=1\n  while [ $n -gt 0 ]; do\n \
    \   d=$((n % 10))\n    if [ $((d % 2)) -eq 1 ]; then\n      p=$((p * d))\n   \
    \ fi\n    n=$((n / 10))\n  done\n  echo $p\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while (( n > 0 )); do\n    local digit=$((\
    \ n % 10 ))\n    if (( digit % 2 == 1 )); then\n      prod=$(( prod * digit ))\n\
    \    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  else\n    echo $1 | grep\
    \ -o . | tr -d '\\n'\n  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local r=0\n  while [ $n -gt 0 ]; do\n    local d=$((\
    \ n % 10 ))\n    if [ $(( d % 2 )) -ne 0 ]; then\n      r=$(( r * d ))\n    fi\n\
    \    n=$(( n / 10 ))\n  done\n  echo $r\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local i=0\n    local prod=1\n    local digit\n\
    \    while [ $n -gt 0 ]; do\n        digit=$(( n % 10 ))\n        if [ $(( digit\
    \ % 2 )) -ne 0 ]; then\n            prod=$(( prod * digit ))\n        fi\n   \
    \     n=$(( n / 10 ))\n    done\n    echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  if [[ $1 -lt 0 ]]; then\n    echo \"Error: Only positive numbers\
    \ are allowed\"\n    exit 1\n  fi\n\n  if [[ $1 -eq 0 ]]; then\n    echo \"0\"\
    \n    exit 0\n  fi\n\n  local product=1\n  local digit\n  while [[ $1 -gt 0 ]];\
    \ do\n    digit=$(( $1 % 10 ))\n    if [[ $(( $digit % 2 )) -ne 0 ]]; then\n \
    \     product=$(( $product * $digit ))\n    fi\n    1=$(( $1 / 10 ))\n  done\n\
    \n  echo \"$product\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: 'b''/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not
    found\n/tmp/tmp7q48ezgt.sh: line 25: 1=0: command not found\n/tmp/tmp7q48ezgt.sh:
    line 25: 1=0: command not f'
  stdout: None
  timestamp: 1660003762
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            prod=$(( prod * digit ))\n        fi\n        n=$(( n / 10 ))\n \
    \   done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  local digit\n  while [ $n -gt 0 ];\
    \ do\n    digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n     \
    \ prod=$(( prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n   \
    \         prod=$((prod * digit))\n        fi\n        n=$((n / 10))\n    done\n\
    \    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local count=0\n  local product=1\n  local digit=0\n\
    \  while [ $n -gt 0 ]; do\n    digit=$((n % 10))\n    if [ $((digit % 2)) -ne\
    \ 0 ]; then\n      product=$((product * digit))\n    fi\n    n=$((n / 10))\n \
    \ done\n  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local number=$1\n  local result=1\n  while [ $number -gt 0 ]; do\n\
    \    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \      result=$(( result * digit ))\n    fi\n    number=$(( number / 10 ))\n \
    \ done\n  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local d=0\n  while [ $n -gt 0 ]; do\n    d=$((d +\
    \ 1))\n    n=$((n / 10))\n  done\n  echo $d\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while (( n > 0 )); do\n    local digit=$((\
    \ n % 10 ))\n    if (( digit % 2 != 0 )); then\n      prod=$(( prod * digit ))\n\
    \    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local number=$1\n  local result=1\n  while [ $number -gt 0 ]; do\n\
    \    local digit=$((number % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n   \
    \   result=$((result * digit))\n    fi\n    number=$((number / 10))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n   \
    \         prod=$((prod * digit))\n        fi\n        n=$((n / 10))\n    done\n\
    \    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo $1 | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local digits=0\n    while [ $n -gt 0 ]; do\n \
    \       n=$((n/10))\n        digits=$((digits+1))\n    done\n    echo $digits\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            prod=$(( prod * digit ))\n        fi\n        n=$(( n / 10 ))\n \
    \   done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            prod=$(( prod * digit ))\n        fi\n        n=$(( n / 10 ))\n \
    \   done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local digit\n  local product=1\n  while [ $n -gt 0\
    \ ]; do\n    digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n  \
    \    product=$(( product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo\
    \ $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local number=$1\n  local digits=0\n  while [ $number -gt 0 ]; do\n\
    \    number=$(( number / 10 ))\n    (( digits++ ))\n  done\n  echo $digits\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local m=$n\n    local d=0\n    local p=1\n   \
    \ while [ $m -gt 0 ]; do\n        d=$(( m % 10 ))\n        if [ $(( d % 2 )) -ne\
    \ 0 ]; then\n            p=$(( p * d ))\n        fi\n        m=$(( m / 10 ))\n\
    \    done\n    echo $p\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local count=0\n  local product=1\n  while [ $n -gt\
    \ 0 ]; do\n    local digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n\
    \      product=$((product * digit))\n    fi\n    n=$((n / 10))\n    count=$((count\
    \ + 1))\n  done\n  echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local m=$n\n  local d=0\n  local p=1\n  while [ $m\
    \ -gt 0 ]; do\n    d=$(( m % 10 ))\n    if [ $(( d % 2 )) -ne 0 ]; then\n    \
    \  p=$(( p * d ))\n    fi\n    m=$(( m / 10 ))\n  done\n  echo $p\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local digits=0\n  while [ $n -gt 0 ]; do\n    (( digits++\
    \ ))\n    (( n /= 10 ))\n  done\n  echo $digits\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local r=0\n  while [ $n -gt 0 ]; do\n    r=$((r +\
    \ 1))\n    n=$((n / 10))\n  done\n  echo $r\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local product=1\n    while [ $n -gt 0 ]; do\n\
    \        local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n\
    \            product=$((product * digit))\n        fi\n        n=$((n / 10))\n\
    \    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            result=$(( result * digit ))\n        fi\n        n=$(( n / 10 ))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local m=$n\n  local prod=1\n  while (( m > 0 )); do\n\
    \    local digit=$(( m % 10 ))\n    (( digit % 2 == 1 )) && (( prod *= digit ))\n\
    \    m=$(( m / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local product=1\n    while [ $n -gt 0 ]; do\n\
    \        local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n\
    \            product=$((product * digit))\n        fi\n        n=$((n / 10))\n\
    \    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local\
    \ -i digit=$(( n % 10 ))\n    if (( digit % 2 == 1 )); then\n      prod=$(( prod\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local number=$1\n  local result=1\n  while [ $number -gt 0 ]; do\n\
    \    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n\
    \      result=$(( result * digit ))\n    fi\n    number=$(( number / 10 ))\n \
    \ done\n  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local\
    \ -i digit=$(( n % 10 ))\n    if (( digit % 2 == 1 )); then\n      prod=$(( prod\
    \ * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local -i n=$1\n  local -i prod=1\n  while (( n > 0 )); do\n    local\
    \ -i digit=$(( n % 10 ))\n    (( digit % 2 != 0 )) && (( prod *= digit ))\n  \
    \  (( n /= 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local -i n=$1\n  local -i prod=1\n  local -i digit\n  while (( n\
    \ > 0 )); do\n    digit=$(( n % 10 ))\n    (( digit % 2 == 1 )) && (( prod *=\
    \ digit ))\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n  \
    \  digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local r=0\n  local p=1\n  while (( n > 0 )); do\n\
    \    r=$(( n % 10 ))\n    if (( r % 2 != 0 )); then\n      p=$(( p * r ))\n  \
    \  fi\n    n=$(( n / 10 ))\n  done\n  echo $p\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  local digit\n  while [ $n -gt 0\
    \ ]; do\n    digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while [ $n -gt 0 ]; do\n   \
    \     local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            prod=$(( prod * digit ))\n        fi\n        n=$(( n / 10 ))\n \
    \   done\n    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local -i n=$1\n  local -i r=0\n  local -i p=1\n  while (( n > 0\
    \ )); do\n    r=$(( n % 10 ))\n    (( r % 2 )) && (( p *= r ))\n    n=$(( n /\
    \ 10 ))\n  done\n  echo $p\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local digits=0\n  while (( n > 0 )); do\n    (( digits++\
    \ ))\n    (( n /= 10 ))\n  done\n  echo $digits\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local d=0\n  while (( n > 0 )); do\n    (( d++ ))\n\
    \    (( n /= 10 ))\n  done\n  echo $d\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local number=$1\n  local result=1\n  while [ $number -gt 0 ]; do\n\
    \    local digit=$((number % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n   \
    \   result=$((result * digit))\n    fi\n    number=$((number / 10))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while (( n > 0 )); do\n    local digit=$((\
    \ n % 10 ))\n    if (( digit % 2 != 0 )); then\n      prod=$(( prod * digit ))\n\
    \    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      product=$((product\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $product\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           result=$((result * digit))\n        fi\n        n=$((n / 10))\n  \
    \  done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while (( n > 0 )); do\n  \
    \      local digit=$(( n % 10 ))\n        (( digit % 2 )) && (( result *= digit\
    \ ))\n        n=$(( n / 10 ))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local r=0\n  while (( n > 0 )); do\n    (( r = r *\
    \ 10 + n % 10 ))\n    (( n /= 10 ))\n  done\n  echo $r\n}\n\ncandidate() {\n \
    \   digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           result=$((result * digit))\n        fi\n        n=$((n / 10))\n  \
    \  done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n    echo $1 | grep -o . | grep -v\
    \ '[02468]' | tr -d '\\n' | wc -m\n  else\n    echo \"error: $1 is not an integer\"\
    \n  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n  \
    \  [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n\
    \    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local m=$n\n    local p=1\n    while [ $m -gt\
    \ 0 ]; do\n        local d=$((m % 10))\n        if [ $((d % 2)) -ne 0 ]; then\n\
    \            p=$((p * d))\n        fi\n        m=$((m / 10))\n    done\n    echo\
    \ $p\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[\
    \ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n \
    \   [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           result=$((result * digit))\n        fi\n        n=$((n / 10))\n  \
    \  done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while (( n > 0 )); do\n    local digit=$((\
    \ n % 10 ))\n    if (( digit % 2 )); then\n      prod=$(( prod * digit ))\n  \
    \  fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local m=$n\n  local d=0\n  local p=1\n  while [ $m\
    \ -gt 0 ]; do\n    d=$((m % 10))\n    if [ $((d % 2)) -ne 0 ]; then\n      p=$((p\
    \ * d))\n    fi\n    m=$((m / 10))\n  done\n  echo $p\n}\n\ncandidate() {\n  \
    \  digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local digits=0\n  while [ $n -gt 0 ]; do\n    (( digits++\
    \ ))\n    (( n /= 10 ))\n  done\n  echo $digits\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local m=$n\n  local d=0\n  local p=1\n  while [ $m\
    \ -gt 0 ]; do\n    d=$((m % 10))\n    if [ $((d % 2)) -ne 0 ]; then\n      p=$((p\
    \ * d))\n    fi\n    m=$((m / 10))\n  done\n  echo $p\n}\n\ncandidate() {\n  \
    \  digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    echo $1 | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local p=1\n    while [ $n -gt 0 ]; do\n      \
    \  local d=$((n % 10))\n        if [ $((d % 2)) -ne 0 ]; then\n            p=$((p\
    \ * d))\n        fi\n        n=$((n / 10))\n    done\n    echo $p\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local prod=1\n    while (( n > 0 )); do\n    \
    \    local digit=$(( n % 10 ))\n        if (( digit % 2 != 0 )); then\n      \
    \      prod=$(( prod * digit ))\n        fi\n        n=$(( n / 10 ))\n    done\n\
    \    echo $prod\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local product=1\n    while [ $n -gt 0 ]; do\n\
    \        local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n\
    \            product=$((product * digit))\n        fi\n        n=$((n / 10))\n\
    \    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"\
    5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            result=$(( result * digit ))\n        fi\n        n=$(( n / 10 ))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local -i n=$1\n    local -i prod=1\n    while (( n > 0 )); do\n\
    \        local -i digit=$(( n % 10 ))\n        (( digit % 2 )) && (( prod *= digit\
    \ ))\n        (( n /= 10 ))\n    done\n    echo $prod\n}\n\ncandidate() {\n  \
    \  digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local -i n=\"$1\"\n  local -i r=1\n  while (( n > 0 )); do\n   \
    \ local -i d=\"$(( n % 10 ))\"\n    (( d % 2 == 1 )) && (( r *= d ))\n    (( n\
    \ /= 10 ))\n  done\n  echo \"$r\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    if [[ $1 =~ ^-?[0-9]+$ ]]; then\n        echo $1 | grep -o . |\
    \ tr -d '\\n'\n    else\n        echo \"error: not an integer\" >&2\n        exit\
    \ 1\n    fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n\
    \    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\"\
    \ ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local number=$1\n  local digit\n  local result=1\n  while [ $number\
    \ -gt 0 ]; do\n    digit=$((number % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n\
    \      result=$((result * digit))\n    fi\n    number=$((number / 10))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$((n % 10))\n        if [ $((digit % 2)) -ne 0 ]; then\n \
    \           result=$((result * digit))\n        fi\n        n=$((n / 10))\n  \
    \  done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 2
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local len=${#n}\n  local product=1\n  local digit\n\
    \  for (( i=0; i<len; i++ )); do\n    digit=${n:i:1}\n    if [[ $digit -eq 0 ]];\
    \ then\n      continue\n    fi\n    if [[ $(( digit % 2 )) -eq 0 ]]; then\n  \
    \    continue\n    fi\n    product=$(( product * digit ))\n  fi\n  echo $product\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr57z90rz.sh: line 21: syntax error near unexpected token `fi''

    /tmp/tmpr57z90rz.sh: line 21: `  fi''

    '
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  local digit\n  while (( n > 0 ));\
    \ do\n    digit=$(( n % 10 ))\n    if (( digit % 2 == 1 )); then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      result=$((result\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local r=0\n  local p=1\n  while [ $n -gt 0 ]; do\n\
    \    r=$((n % 10))\n    n=$((n / 10))\n    if [ $((r % 2)) -ne 0 ]; then\n   \
    \   p=$((p * r))\n    fi\n  done\n  echo $p\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local product=1\n    while [ $n -gt 0 ]; do\n\
    \        local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            product=$(( product * digit ))\n        fi\n        n=$(( n / 10\
    \ ))\n    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local p=1\n  while [ $n -gt 0 ]; do\n    local d=$((n\
    \ % 10))\n    if [ $((d % 2)) -ne 0 ]; then\n      p=$((p * d))\n    fi\n    n=$((n\
    \ / 10))\n  done\n  echo $p\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local d=0\n  local p=1\n  while [ $n -gt 0 ]; do\n\
    \    d=$((n % 10))\n    if [ $((d % 2)) -ne 0 ]; then\n      p=$((p * d))\n  \
    \  fi\n    n=$((n / 10))\n  done\n  echo $p\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local num=$1\n  local prod=1\n  while [ $num -gt 0 ]; do\n    local\
    \ digit=$(( num % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    num=$(( num / 10 ))\n  done\n  echo $prod\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local -i n=$1\n    local -i product=1\n    while (( n > 0 ));\
    \ do\n        local -i digit=$(( n % 10 ))\n        if (( digit % 2 == 1 )); then\n\
    \            (( product *= digit ))\n        fi\n        (( n /= 10 ))\n    done\n\
    \    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local number=$1\n  local result=1\n  while [ $number -gt 0 ]; do\n\
    \    local digit=$(( number % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \      result=$(( result * digit ))\n    fi\n    number=$(( number / 10 ))\n \
    \ done\n  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local i=0\n  local prod=1\n  while [ $n -gt 0 ]; do\n\
    \    local digit=$((n % 10))\n    if [ $((digit % 2)) -eq 1 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local i=0\n  local prod=1\n  local digit\n  while\
    \ [ $n -gt 0 ]; do\n    digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n\
    \      prod=$((prod * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local number=$1\n  local result=1\n  while [ $number -gt 0 ]; do\n\
    \    local digit=$((number % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n   \
    \   result=$((result * digit))\n    fi\n    number=$((number / 10))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  echo \"$1\" | grep -o .\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local product=1\n    while [ $n -gt 0 ]; do\n\
    \        local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            product=$(( product * digit ))\n        fi\n        n=$(( n / 10\
    \ ))\n    done\n    echo $product\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      product=$((\
    \ product * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $product\n}\n\
    \ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -ne 0 ]; then\n      prod=$((\
    \ prod * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local prod=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$((n % 10))\n    if [ $((digit % 2)) -ne 0 ]; then\n      prod=$((prod\
    \ * digit))\n    fi\n    n=$((n / 10))\n  done\n  echo $prod\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n \
    \       local digit=$(( n % 10 ))\n        if [ $(( digit % 2 )) -ne 0 ]; then\n\
    \            result=$(( result * digit ))\n        fi\n        n=$(( n / 10 ))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local product=1\n  for (( i=0; i<${#n}; i++ )); do\n\
    \    local digit=${n:$i:1}\n    if (( digit % 2 == 1 )); then\n      product=$((\
    \ product * digit ))\n    fi\n  done\n  echo $product\n}\n\ncandidate() {\n  \
    \  digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\"\
    \ ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local d=0\n  local p=1\n  while [ $n -gt 0 ]; do\n\
    \    d=$((n % 10))\n    n=$((n / 10))\n    if [ $((d % 2)) -ne 0 ]; then\n   \
    \   p=$((p * d))\n    fi\n  done\n  echo $p\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n#\n# $1 is an integer\n\
    digits() {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    local\
    \ digit=$(( n % 10 ))\n    if [ $(( digit % 2 )) -eq 1 ]; then\n      result=$((\
    \ result * digit ))\n    fi\n    n=$(( n / 10 ))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003757
