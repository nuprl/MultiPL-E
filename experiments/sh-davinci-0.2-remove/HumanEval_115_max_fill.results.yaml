language: sh
name: HumanEval_115_max_fill
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -n grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    for row in \"${grid[@]}\"; do\n\
    \        local row_fill=0\n        for col in $row; do\n            if [ $col\
    \ -eq 1 ]; then\n                ((row_fill++))\n            fi\n        done\n\
    \        if [ $row_fill -gt $max_fill ]; then\n            max_fill=$row_fill\n\
    \        fi\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp13zv_46k.sh: line 21: local: `0 0 1 0\n0 1 0 0\n1 1 1 1'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local current_fill=0\n    local\
    \ row\n    local column\n    for row in $grid; do\n        for column in $row;\
    \ do\n            if [ $column -eq 1 ]; then\n                (( current_fill++\
    \ ))\n            else\n                if [ $current_fill -gt $max_fill ]; then\n\
    \                    max_fill=$current_fill\n                fi\n            \
    \    current_fill=0\n            fi\n        done\n        if [ $current_fill\
    \ -gt $max_fill ]; then\n            max_fill=$current_fill\n        fi\n    \
    \    current_fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxu5qmedb.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpxu5qmedb.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local fill=0\n    local\
    \ row\n    local col\n    local cols\n    local col_count\n    local col_fill\n\
    \    local col_fill_count\n    local col_fill_count_max\n    local col_fill_count_max_count\n\
    \    local col_fill_count_max_count_max\n    local col_fill_count_max_count_max_count\n\
    \    local col_fill_count_max_count_max_count_max\n    local col_fill_count_max_count_max_count_max_count\n\
    \    local col_fill_count_max_count_max_count_max_count_max\n    local col_fill_count_max_count_max_count_max_count_max_count\n\
    \    local col_fill_count_max_count_max_count_max_count_max_count_max\n    local\
    \ col_fill_count_max_count_max_count_max_count_max_count_max_count\n    local\
    \ col_fill_count_max_count_max_count_max_count_max_count_max_count_max\n    local\
    \ col_fill_count_max_count_max_count_max_count_max_count_max_count_max_count\n\
    \    local col_fill_count_max_count_max_count_max_count_max_count_max_count_max_count_max\n\
    \    local col_fill_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\n\
    \    local col_fill_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\n\
    \    local col_fill_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\n\
    \    local col_fill_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\n\
    \    local col_fill_\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i fill=0\n    local -i i=0\n    local -i j=0\n    local -i capacity=$2\n\
    \    local -i row_len=0\n    local -i row_count=0\n    local -a grid\n    local\
    \ -a row\n    local -a row_fill\n    local -a row_max\n    local -a row_max_fill\n\
    \    local -a row_max_fill_count\n    local -a row_max_fill_count_max\n    local\
    \ -a row_max_fill_count_max_fill\n    local -a row_max_fill_count_max_fill_count\n\
    \    local -a row_max_fill_count_max_fill_count_max\n    local -a row_max_fill_count_max_fill_count_max_fill\n\
    \    local -a row_max_fill_count_max_fill_count_max_fill_count\n    local -a row_max_fill_count_max_fill_count_max_fill_count_max\n\
    \    local -a row_max_fill_count_max_fill_count_max_fill_count_max_fill\n    local\
    \ -a row_max_fill_count_max_fill_count_max_fill_count_max_fill_count\n    local\
    \ -a row_max_fill_count_max_fill_count_max_fill_count_max_fill_count_max\n   \
    \ local -a row_max_fill_count_max_fill_count_max_fill_count_max_fill_count_max_fill\n\
    \    local -a row_max_fill_count_max_fill_count_max_fill_count_max_fill_count_max_fill_count\n\
    \    local -a row_max_fill_count_max_fill_count_max_fill_count_max_fill_count_max_fill_count_max\n\
    \    local -a row_max_fill_count_max_fill_count_max_fill_count_max_fill_count_max_fill_count_max_fill\n\
    \    local -a row_max_fill_count_max_fill_count_max_fill_count\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=$1\n  local\
    \ capacity=$2\n  local max_fill=0\n  local fill=0\n  local row\n  local col\n\
    \  for row in $grid; do\n    for col in $row; do\n      if [ $col -eq 1 ]; then\n\
    \        fill=$((fill+1))\n      else\n        if [ $fill -gt $max_fill ]; then\n\
    \          max_fill=$fill\n        fi\n        fill=0\n      fi\n    done\n  \
    \  if [ $fill -gt $max_fill ]; then\n      max_fill=$fill\n    fi\n    fill=0\n\
    \  done\n  echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp61hg6n95.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp61hg6n95.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    for row in $grid; do\n        for ((i=0; i<${#row}; i++)); do\n         \
    \   if [[ ${row:$i:1} == \"1\" ]]; then\n                ((fill++))\n        \
    \    else\n                if ((fill > max_fill)); then\n                    max_fill=$fill\n\
    \                fi\n                fill=0\n            fi\n        done\n  \
    \      if ((fill > max_fill)); then\n            max_fill=$fill\n        fi\n\
    \        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local i=0\n    local j=0\n    local row=0\n    local col=0\n\
    \    local capacity=$2\n    local grid=($(echo $1 | tr ' ' '\\n'))\n    local\
    \ rows=${#grid[@]}\n    local cols=${#grid[0]}\n    for ((i=0; i<rows; i++));\
    \ do\n        for ((j=0; j<cols; j++)); do\n            if [[ ${grid[$i]} =~ ^1\
    \ ]]; then\n                fill=$((fill + 1))\n            else\n           \
    \     if [[ $fill -gt $max ]]; then\n                    max=$fill\n         \
    \       fi\n                fill=0\n            fi\n        done\n        if [[\
    \ $fill -gt $max ]]; then\n            max=$fill\n        fi\n        fill=0\n\
    \    done\n    echo $((max / capacity))\n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local cap=$2\n    local max_fill=0\n    local fill=0\n    local i=0\n   \
    \ local j=0\n    local row=0\n    local col=0\n    local rows=0\n    local cols=0\n\
    \    local row_arr=()\n    local col_arr=()\n    local row_max=0\n    local col_max=0\n\
    \    local row_fill=0\n    local col_fill=0\n    local row_fill_arr=()\n    local\
    \ col_fill_arr=()\n    local row_fill_max=0\n    local col_fill_max=0\n    local\
    \ row_fill_max_i=0\n    local col_fill_max_i=0\n    local row_fill_max_j=0\n \
    \   local col_fill_max_j=0\n    local row_fill_max_arr=()\n    local col_fill_max_arr=()\n\
    \    local row_fill_max_arr_i=0\n    local col_fill_max_arr_i=0\n    local row_fill_max_arr_j=0\n\
    \    local col_fill_max_arr_j=0\n    local row_fill_max_arr_len=0\n    local col_fill_max_arr_len=0\n\
    \    local row_fill_max_arr_len_i=0\n    local col_fill_max_arr_len_i=0\n    local\
    \ row_fill_max_arr_len_j=0\n    local col_fill_max_arr_len_j=0\n    local row_fill_max_arr_len_max=0\n\
    \    local col_fill_max_arr_len_max=0\n    local row_fill_max_arr_len_max_i=0\n\
    \    local col_fill_max_arr_len_max_i=0\n    local row_fill_max_arr_len_max_j=0\n\
    \    local col_fill_max_arr_len_max_j=0\n    local row_fill_max_arr_len_max_max=0\n\
    \    local col_fill_max_arr_len_max_max=0\n\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    ((fill++))\n        else\n            if [ $fill -gt $max ]; then\n     \
    \           max=$fill\n            fi\n            fill=0\n        fi\n    done\n\
    \    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo $max\n}\n\
    \ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl5l8u_li.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpl5l8u_li.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            ((fill += col))\n            if ((fill > max));\
    \ then\n                max=$fill\n            fi\n        done\n    done\n  \
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp40kczbh6.sh: line 27: ((: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp40kczbh6.sh: line 27: ((: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i i=0\n    local -i j=0\n    for i in $(seq 0 $((${#1}-1))); do\n\
    \        for j in $(seq 0 $((${#2}-1))); do\n            if [[ ${1:$i:1} -eq 1\
    \ ]]; then\n                max=$((max+1))\n            fi\n        done\n   \
    \ done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplqujc982.sh: line 26: [[: \: syntax error: operand expected (error
    token is "\")

    /tmp/tmplqujc982.sh: line 26: [[: \: syntax error: operand expected (error token
    is "\")

    /tmp/tmplqujc982.sh: line 26: [[: \: syntax error: operand expected (error token
    is "\")

    /tmp/tmplqujc982.sh: line 26: [[: \: syntax error: operand expected (error token
    is "\")

    /tmp/tmplqujc982.sh: line 26: [[: \: syntax error: operand expected (error token
    is "\")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local -r grid=\"$1\"\
    \n  local -r capacity=\"$2\"\n  local -r rows=\"$(echo \"$grid\" | wc -l)\"\n\
    \  local -r cols=\"$(echo \"$grid\" | head -n 1 | wc -w)\"\n  local -r max_water=\"\
    $((rows * capacity))\"\n  local -r max_water_per_row=\"$((cols * capacity))\"\n\
    \  local -r max_water_per_col=\"$((rows * capacity))\"\n  local -r max_water_per_cell=\"\
    $((capacity))\"\n  local -r max_water_per_bucket=\"$((capacity))\"\n  local -r\
    \ max_water_per_well=\"$((capacity))\"\n  local -r max_water_per_well_per_bucket=\"\
    $((capacity))\"\n  local -r max_water_per_well_per_bucket_per_row=\"$((capacity))\"\
    \n  local -r max_water_per_well_per_bucket_per_col=\"$((capacity))\"\n  local\
    \ -r max_water_per_well_per_bucket_per_cell=\"$((capacity))\"\n  local -r max_water_per_well_per_bucket_per_row_per_col=\"\
    $((capacity))\"\n  local -r max_water_per_well_per_bucket_per_row_per_col_per_cell=\"\
    $((capacity))\"\n  local -r max_water_per_well_per_bucket_per_row_per_col_per_cell_per_bucket=\"\
    $((capacity))\"\n  local -r max_water_per_well_per_bucket_per_row_per_col_per_cell_per_bucket_per_well=\"\
    $((capacity))\"\n  local -r max_water_per_well_per_bucket_per_row_per_col_per_cell_per_bucket_per_well_per_bucket=\"\
    $((capacity))\"\n  local -r max_water_per_well_per_bucket_per_row_per_col_per_cell_per_buck\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max=0\n    local i=0\n    local j=0\n    local\
    \ n=0\n    local m=0\n    local fill=0\n    local count=0\n    local row=0\n \
    \   local col=0\n    local wells=()\n    local bucket=()\n    local total=0\n\
    \    local sum=0\n    local diff=0\n    local result=0\n    local -i i=0\n   \
    \ local -i j=0\n    local -i n=0\n    local -i m=0\n    local -i fill=0\n    local\
    \ -i count=0\n    local -i row=0\n    local -i col=0\n    local -i total=0\n \
    \   local -i sum=0\n    local -i diff=0\n    local -i result=0\n    # get the\
    \ number of rows and columns\n    read -r row col <<< $(echo \"$grid\" | head\
    \ -n 1 | wc -w)\n    # get the wells\n    wells=($(echo \"$grid\" | tr ' ' '\\\
    n'))\n    # get the bucket\n    bucket=($(echo \"$grid\" | tail -n 1 | tr ' '\
    \ '\\n'))\n    # get the total number of wells\n    total=$(($row * $col))\n \
    \   # get the sum of the wells\n    for ((i=0; i<$total; i++)); do\n        sum=$(($sum\
    \ + ${wells[$i]}))\n    done\n    # get the number of times we need to lower the\
    \ bucket\n    while ((sum > 0)); do\n        # get the max fill\n        max=$(($capacity\
    \ - ${bucket[0]}))\n        for ((i=1; i<$col; i++)); do\n            fill=$(($capacity\
    \ - ${bucket[$i]}))\n            if ((fill > max)); then\n                max=$fill\n\
    \            fi\n        done\n        # fill the bucket\n        for ((i=0; i<$col;\
    \ i++)); do\n            bucket[$i]=$((${bucket[$i]} + $max))\n        done\n\
    \        # empty the bucket\n        for ((i=0;\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmponw_sve2.sh: line 77: unexpected EOF while looking for matching
    `)''

    /tmp/tmponw_sve2.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max=0\n    local fill=0\n    local row\n   \
    \ local col\n    for row in $grid; do\n        for col in $row; do\n         \
    \   if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n            else\n\
    \                if [ $fill -gt $max ]; then\n                    max=$fill\n\
    \                fi\n                fill=0\n            fi\n        done\n  \
    \      if [ $fill -gt $max ]; then\n            max=$fill\n        fi\n      \
    \  fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4bl0k4s_.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp4bl0k4s_.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local fill=0\n    local\
    \ row\n    local col\n    local i\n    local j\n    local n\n    local m\n   \
    \ local num_rows\n    local num_cols\n    local num_buckets\n    local num_buckets_used\n\
    \    local num_buckets_used_prev\n    local num_buckets_used_prev_prev\n    local\
    \ num_buckets_used_prev_prev_prev\n    local num_buckets_used_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev_prev_prev_prev\n    local num_buckets_used_prev_prev_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev_prev_prev_prev_prev_prev\n    local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev_prev\n   \
    \ local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n \
    \   local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local num_buckets_used_prev_prev\n}\n\ncandidate() {\n    max_fill \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    for row in $1; do\n        fill=0\n      \
    \  for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            fi\n        done\n        if [ $fill -gt $max ]; then\n         \
    \   max=$fill\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqmx742xt.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpqmx742xt.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  for\
    \ i in $1; do\n    if [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpon0kjo3r.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmpon0kjo3r.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                ((fill++))\n            else\n\
    \                if [ $fill -gt $max_fill ]; then\n                    max_fill=$fill\n\
    \                fi\n                fill=0\n            fi\n        done\n  \
    \      if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n        fi\n\
    \        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdhs3l6cq.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpdhs3l6cq.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    for i in $1; do\n        if (( i > max )); then\n            max=i\n    \
    \    fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuwib5weq.sh: line 23: ((: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpuwib5weq.sh: line 23: ((: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local current_fill=0\n\
    \    local current_row\n    local current_col\n    local current_cell\n    local\
    \ current_row_length\n    local current_row_fill\n    local current_row_fill_remainder\n\
    \    local current_row_fill_remainder_remainder\n    local current_row_fill_remainder_remainder_remainder\n\
    \    local current_row_fill_remainder_remainder_remainder_remainder\n    local\
    \ current_row_fill_remainder_remainder_remainder_remainder_remainder\n    local\
    \ current_row_fill_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local current_row_fill_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local current_row_fill_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local current_row_fill_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local current_row_fill_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local current_row_fill_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local current_row_fill_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local current_row_fill_remainder_remainder_remainder_remainder_remainder_remainder_remainder_rem\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=$1\n  local\
    \ capacity=$2\n  local max_fill=0\n  local fill=0\n  local row\n  local col\n\
    \  for row in $grid; do\n    for col in $row; do\n      if [[ $col -eq 1 ]]; then\n\
    \        ((fill++))\n      else\n        if [[ $fill -gt $max_fill ]]; then\n\
    \          max_fill=$fill\n        fi\n        fill=0\n      fi\n    done\n  \
    \  if [[ $fill -gt $max_fill ]]; then\n      max_fill=$fill\n    fi\n    fill=0\n\
    \  done\n  echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptm69ij65.sh: line 29: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmptm69ij65.sh: line 29: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    for row in $grid; do\n        for col in $row; do\n            if [[ $col\
    \ == 1 ]]; then\n                ((fill++))\n            else\n              \
    \  if [[ $fill -gt $max_fill ]]; then\n                    max_fill=$fill\n  \
    \              fi\n                fill=0\n            fi\n        done\n    \
    \    if [[ $fill -gt $max_fill ]]; then\n            max_fill=$fill\n        fi\n\
    \        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local fill=0\n    local\
    \ i=0\n    local j=0\n    local row=0\n    local col=0\n    local rows=0\n   \
    \ local cols=0\n    local row_fill=0\n    local col_fill=0\n    local row_fill_max=0\n\
    \    local col_fill_max=0\n    local row_fill_min=0\n    local col_fill_min=0\n\
    \    local row_fill_min_index=0\n    local col_fill_min_index=0\n    local row_fill_max_index=0\n\
    \    local col_fill_max_index=0\n    local row_fill_min_index_2=0\n    local col_fill_min_index_2=0\n\
    \    local row_fill_max_index_2=0\n    local col_fill_max_index_2=0\n    local\
    \ row_fill_min_2=0\n    local col_fill_min_2=0\n    local row_fill_max_2=0\n \
    \   local col_fill_max_2=0\n    local row_fill_min_index_3=0\n    local col_fill_min_index_3=0\n\
    \    local row_fill_max_index_3=0\n    local col_fill_max_index_3=0\n    local\
    \ row_fill_min_3=0\n    local col_fill_min_3=0\n    local row_fill_max_3=0\n \
    \   local col_fill_max_3=0\n    local row_fill_min_index_4=0\n    local col_fill_min_index_4=0\n\
    \    local row_fill_max_index_4=0\n    local col_fill_max_index_4=0\n    local\
    \ row_fill_min_4=0\n    local col_fill_min_4=0\n    local row_fill_max_4=0\n \
    \   local col_fill_max_4=0\n    local row_fill_min_index_5=0\n    local col_fill_min_index_5=0\n\
    \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  local\
    \ fill=0\n  for i in $1; do\n    if [ $i -eq 1 ]; then\n      fill=$((fill+1))\n\
    \    else\n      if [ $fill -gt $max ]; then\n        max=$fill\n      fi\n  \
    \    fill=0\n    fi\n  done\n  if [ $fill -gt $max ]; then\n    max=$fill\n  fi\n\
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvsp5uc2k.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpvsp5uc2k.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn_bqap78.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpn_bqap78.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [[ $i -eq 1 ]]; then\n      \
    \      (( fill++ ))\n        else\n            if [[ $fill -gt $max ]]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [[ $fill -gt $max ]]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplkkneazr.sh: line 24: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmplkkneazr.sh: line 24: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells\n\
    \    local -i max_fill=0\n    local -i capacity=$2\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n   \
    \ local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n   \
    \ local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    for row in $grid; do\n        for ((i=0; i<${#row}; i++)); do\n         \
    \   if [[ ${row:$i:1} == 1 ]]; then\n                ((fill++))\n            else\n\
    \                ((fill=0))\n            fi\n            if [[ $fill -gt $max_fill\
    \ ]]; then\n                max_fill=$fill\n            fi\n        done\n   \
    \ done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\
    \ = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [[ $col -eq 1 ]]; then\n                fill=$((fill+1))\n         \
    \   else\n                if [[ $fill -gt $max_fill ]]; then\n               \
    \     max_fill=$fill\n                fi\n                fill=0\n           \
    \ fi\n        done\n        if [[ $fill -gt $max_fill ]]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvurpawj8.sh: line 29: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpvurpawj8.sh: line 29: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local fill=0\n    local\
    \ row\n    local col\n    local num_rows\n    local num_cols\n    local num_rows=$(echo\
    \ \"$grid\" | wc -l)\n    local num_cols=$(echo \"$grid\" | head -n 1 | wc -w)\n\
    \    for ((row=0; row<num_rows; row++)); do\n        for ((col=0; col<num_cols;\
    \ col++)); do\n            fill=$(echo \"$grid\" | cut -d' ' -f $((col+1)) | awk\
    \ '{s+=$1} END {print s}')\n            if [[ $fill -gt $max_fill ]]; then\n \
    \               max_fill=$fill\n            fi\n        done\n    done\n    echo\
    \ $((max_fill / capacity))\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\
    \ = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: -1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local capacity=$2\n    while read -r line; do\n        fill=0\n\
    \        for i in $line; do\n            if [ $i -eq 1 ]; then\n             \
    \   fill=$((fill+1))\n            else\n                if [ $fill -gt $max ];\
    \ then\n                    max=$fill\n                fi\n                fill=0\n\
    \            fi\n        done\n        if [ $fill -gt $max ]; then\n         \
    \   max=$fill\n        fi\n    done\n    echo $((max/capacity))\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660004044
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local -i max=0\n \
    \ local -i i=0\n  local -i j=0\n  local -i n=$(echo \"$1\" | wc -l)\n  local -i\
    \ m=$(echo \"$1\" | head -n 1 | wc -w)\n  for ((i=0; i<n; i++)); do\n    for ((j=0;\
    \ j<m; j++)); do\n      local -i val=$(echo \"$1\" | head -n $((i+1)) | tail -n\
    \ 1 | awk \"{print \\$$((j+1))}\")\n      if ((val > max)); then\n        max=val\n\
    \      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp042f58ke.sh: line 28: local: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  for\
    \ i in $1; do\n    if [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpon0kjo3r.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmpon0kjo3r.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local row\n    local col\n\
    \    local fill\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n   \
    \ local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local\
    \ jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n \
    \   local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local\
    \ uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n \
    \   local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n  \
    \  local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n   \
    \ local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local\
    \ ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n\
    \    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n \
    \   local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n\
    \    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n\
    \    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n\
    \    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n\
    \    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n\
    \    local zzzz\n    local aaaaa\n    local\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -r grid=\"\
    $1\"\n    local -r capacity=\"$2\"\n    local -i max_fill=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i current_fill=0\n    local -i current_row_fill=0\n\
    \    local -i current_row_length=0\n    local -i current_row_index=0\n    local\
    \ -i current_row_start=0\n    local -i current_row_end=0\n    local -i current_row_fill_start=0\n\
    \    local -i current_row_fill_end=0\n    local -i current_row_fill_length=0\n\
    \    local -i current_row_fill_index=0\n    local -i current_row_fill_start_index=0\n\
    \    local -i current_row_fill_end_index=0\n    local -i current_row_fill_start_index_prev=0\n\
    \    local -i current_row_fill_end_index_prev=0\n    local -i current_row_fill_start_index_next=0\n\
    \    local -i current_row_fill_end_index_next=0\n    local -i current_row_fill_start_index_next_next=0\n\
    \    local -i current_row_fill_end_index_next_next=0\n    local -i current_row_fill_start_index_next_next_next=0\n\
    \    local -i current_row_fill_end_index_next_next_next=0\n    local -i current_row_fill_start_index_next_next_next_next=0\n\
    \    local -i current_row_fill_end_index_next_next_next_next=0\n    local -i current_row_fill_start_index_next_next_next_next_next=0\n\
    \    local -i current_row_fill_end_index_next_next_next_next_next=0\n    local\
    \ -i current_row_fill_start_index_next_next_next_next_next_next=0\n    local -i\
    \ current_row_fill_end_index_next_next_next_next_next\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  for\
    \ i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n\
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbnsg0zos.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpbnsg0zos.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn_bqap78.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpn_bqap78.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    while read row; do\n        fill=0\n        for i in $row; do\n         \
    \   if [ $i -eq 1 ]; then\n                fill=$((fill+1))\n            else\n\
    \                if [ $fill -gt $max_fill ]; then\n                    max_fill=$fill\n\
    \                fi\n                fill=0\n            fi\n        done\n  \
    \      if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n        fi\n\
    \    done <<< \"$grid\"\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpikc8kbzg.sh: line 29: [: 0n0: integer expression expected

    /tmp/tmpikc8kbzg.sh: line 29: [: 0n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    for row in $1; do\n        fill=0\n      \
    \  for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            fi\n        done\n        if [ $fill -gt $max ]; then\n         \
    \   max=$fill\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqmx742xt.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpqmx742xt.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  for\
    \ i in $1; do\n    if [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpon0kjo3r.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmpon0kjo3r.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    for i in $1; do\n        if (( i > max )); then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpprlpsm82.sh: line 23: ((: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpprlpsm82.sh: line 23: ((: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    for row in $1; do\n        for col in $row;\
    \ do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgqz5uvv6.sh: line 26: [: 0\n0: integer expression expected

    /tmp/tmpgqz5uvv6.sh: line 26: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local capacity=$2\n\
    \    local max=0\n    local curr=0\n    local line\n    while read line; do\n\
    \        for i in $line; do\n            if [ $i -eq 1 ]; then\n             \
    \   curr=$((curr+1))\n            else\n                if [ $curr -gt $max ];\
    \ then\n                    max=$curr\n                fi\n                curr=0\n\
    \            fi\n        done\n        if [ $curr -gt $max ]; then\n         \
    \   max=$curr\n        fi\n        curr=0\n    done <<< \"$1\"\n    echo $((max/capacity))\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpue4mbd2m.sh: line 27: [: 0n0: integer expression expected

    /tmp/tmpue4mbd2m.sh: line 27: [: 0n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  local\
    \ fill=0\n  local -a wells=()\n  local -a buckets=()\n  local -a empties=()\n\
    \  local -a fills=()\n  local -a empties_buckets=()\n  local -a fills_buckets=()\n\
    \  local -a empties_wells=()\n  local -a fills_wells=()\n  local -a empties_buckets_wells=()\n\
    \  local -a fills_buckets_wells=()\n  local -a empties_wells_buckets=()\n  local\
    \ -a fills_wells_buckets=()\n  local -a empties_wells_buckets_wells=()\n  local\
    \ -a fills_wells_buckets_wells=()\n  local -a empties_buckets_wells_buckets=()\n\
    \  local -a fills_buckets_wells_buckets=()\n  local -a empties_buckets_wells_buckets_wells=()\n\
    \  local -a fills_buckets_wells_buckets_wells=()\n  local -a empties_buckets_wells_buckets_wells_buckets=()\n\
    \  local -a fills_buckets_wells_buckets_wells_buckets=()\n  local -a empties_buckets_wells_buckets_wells_buckets_wells=()\n\
    \  local -a fills_buckets_wells_buckets_wells_buckets_wells=()\n  local -a empties_buckets_wells_buckets_wells_buckets_wells_buckets=()\n\
    \  local -a fills_buckets_wells_buckets_wells_buckets_wells_buckets=()\n  local\
    \ -a empties_buckets_wells_buckets_wells_buckets_wells_buckets_wells=()\n  local\
    \ -a fills_buckets_wells_buckets_wells_buckets_wells_buckets_wells=()\n  local\
    \ -a empties_buckets_wells_buckets_wells_buckets_wells_buckets\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max_fill=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i fill=0\n    local -i capacity=$2\n    local -i fill_count=0\n  \
    \  local -i fill_count_max=0\n    local -i fill_count_max_i=0\n    local -i fill_count_max_j=0\n\
    \    local -i fill_count_max_fill=0\n    local -a grid\n    local -a fill_count_max_grid\n\
    \    local -a grid_copy\n    local -a grid_copy_copy\n    local -a grid_copy_copy_copy\n\
    \    local -a grid_copy_copy_copy_copy\n    local -a grid_copy_copy_copy_copy_copy\n\
    \    local -a grid_copy_copy_copy_copy_copy_copy\n    local -a grid_copy_copy_copy_copy_copy_copy_copy\n\
    \    local -a grid_copy_copy_copy_copy_copy_copy_copy_copy\n    local -a grid_copy_copy_copy_copy_copy_copy_copy_copy_copy\n\
    \    local -a grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n    local\
    \ -a grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n    local -a\
    \ grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n    local\
    \ -a grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n \
    \   local -a grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n\
    \    local -a grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n\
    \    local -a grid_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn_bqap78.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpn_bqap78.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn_bqap78.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpn_bqap78.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local row\n    for row in $grid;\
    \ do\n        local fill=0\n        local col\n        for col in $row; do\n \
    \           if [[ $col -eq 1 ]]; then\n                fill=$((fill+1))\n    \
    \        fi\n        done\n        if [[ $fill -gt $max_fill ]]; then\n      \
    \      max_fill=$fill\n        fi\n    done\n    echo $max_fill\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp013t7nue.sh: line 29: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp013t7nue.sh: line 29: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    for row in $1; do\n        for col in $row;\
    \ do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgqz5uvv6.sh: line 26: [: 0\n0: integer expression expected

    /tmp/tmpgqz5uvv6.sh: line 26: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells\n\
    \    local -i capacity\n    local -i i\n    local -i j\n    local -i max_fill\n\
    \    local -i max_fill_index\n    local -i max_fill_index_prev\n    local -i max_fill_prev\n\
    \    local -i num_wells\n    local -i num_wells_prev\n    local -i num_wells_prev_prev\n\
    \    local -i num_wells_prev_prev_prev\n    local -i num_wells_prev_prev_prev_prev\n\
    \    local -i num_wells_prev_prev_prev_prev_prev\n    local -i num_wells_prev_prev_prev_prev_prev_prev\n\
    \    local -i num_wells_prev_prev_prev_prev_prev_prev_prev\n    local -i num_wells_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i num_wells_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ -i num_wells_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -i\
    \ num_wells_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ -i num_wells_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n \
    \   local -i num_wells_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i num_wells_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i num_wells_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i num_wells_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local -i num_wells_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max=0\n    local fill=0\n    local i=0\n   \
    \ local j=0\n    local row=0\n    local col=0\n    local rows=0\n    local cols=0\n\
    \    local num_rows=0\n    local num_cols=0\n    local num_buckets=0\n    local\
    \ num_drops=0\n    local num_rows=$(echo \"$grid\" | wc -l)\n    local num_cols=$(echo\
    \ \"$grid\" | head -n 1 | wc -w)\n    for ((i=0; i<num_rows; i++)); do\n     \
    \   row=$(echo \"$grid\" | head -n $((i+1)) | tail -n 1)\n        for ((j=0; j<num_cols;\
    \ j++)); do\n            col=$(echo \"$row\" | cut -d ' ' -f $((j+1)))\n     \
    \       if [[ $col -eq 1 ]]; then\n                fill=$((fill+1))\n        \
    \    else\n                if [[ $fill -gt $max ]]; then\n                   \
    \ max=$fill\n                fi\n                fill=0\n            fi\n    \
    \    done\n        if [[ $fill -gt $max ]]; then\n            max=$fill\n    \
    \    fi\n        fill=0\n    done\n    num_buckets=$((max/capacity))\n    if [[\
    \ $((max%capacity)) -ne 0 ]]; then\n        num_buckets=$((num_buckets+1))\n \
    \   fi\n    num_drops=$((num_buckets*num_cols))\n    echo \"$num_drops\"\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi100s96t.sh: line 41: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpi100s96t.sh: line 41: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [[ $col == 1 ]]; then\n                ((\
    \ fill++ ))\n            else\n                if [[ $fill -gt $max ]]; then\n\
    \                    max=$fill\n                fi\n                fill=0\n \
    \           fi\n        done\n        if [[ $fill -gt $max ]]; then\n        \
    \    max=$fill\n        fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnhwa2y5w.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpnhwa2y5w.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local fill=0\n    local\
    \ row\n    for row in $grid; do\n        for ((i=0; i<${#row}; i++)); do\n   \
    \         if [[ ${row:$i:1} == \"1\" ]]; then\n                ((fill++))\n  \
    \          else\n                if ((fill > max_fill)); then\n              \
    \      max_fill=$fill\n                fi\n                fill=0\n          \
    \  fi\n        done\n        if ((fill > max_fill)); then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $((max_fill / capacity))\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=$1\n  local\
    \ capacity=$2\n  local max_fill=0\n  local current_fill=0\n  local row\n  for\
    \ row in $grid; do\n    for ((i=0; i<${#row}; i++)); do\n      if [[ ${row:$i:1}\
    \ == 1 ]]; then\n        ((current_fill++))\n      fi\n    done\n    if [[ $current_fill\
    \ -gt $max_fill ]]; then\n      max_fill=$current_fill\n    fi\n    current_fill=0\n\
    \  done\n  echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i i\n    for i in $1; do\n        if (( i > max )); then\n       \
    \     max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx5o2q9oe.sh: line 23: 0\n0: syntax error: invalid arithmetic operator
    (error token is "\n0")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            fill=$((fill + col))\n            if [[ $fill\
    \ -gt $max ]]; then\n                max=$fill\n            fi\n        done\n\
    \    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmh7yv5q6.sh: line 27: 0\n0: syntax error: invalid arithmetic operator
    (error token is "\n0")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: -1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local capacity=$2\n    while read line; do\n        fill=0\n\
    \        for i in $line; do\n            if [ $i -eq 1 ]; then\n             \
    \   ((fill++))\n            else\n                if [ $fill -gt $max ]; then\n\
    \                    max=$fill\n                fi\n                fill=0\n \
    \           fi\n        done\n        if [ $fill -gt $max ]; then\n          \
    \  max=$fill\n        fi\n    done\n    echo $((max/capacity))\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660004044
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    for row in $grid; do\n        for ((i=0; i<${#row}; i++)); do\n         \
    \   if [[ ${row:$i:1} == 1 ]]; then\n                ((fill++))\n            else\n\
    \                if ((fill > max_fill)); then\n                    max_fill=$fill\n\
    \                fi\n                fill=0\n            fi\n        done\n  \
    \      if ((fill > max_fill)); then\n            max_fill=$fill\n        fi\n\
    \        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local max_fill_index=0\n\
    \    local i=0\n    local j=0\n    local fill=0\n    local fill_index=0\n    local\
    \ fill_index_j=0\n    local fill_index_i=0\n    local fill_index_j_next=0\n  \
    \  local fill_index_i_next=0\n    local fill_index_j_prev=0\n    local fill_index_i_prev=0\n\
    \    local fill_index_j_prev_prev=0\n    local fill_index_i_prev_prev=0\n    local\
    \ fill_index_j_prev_prev_prev=0\n    local fill_index_i_prev_prev_prev=0\n   \
    \ local fill_index_j_prev_prev_prev_prev=0\n    local fill_index_i_prev_prev_prev_prev=0\n\
    \    local fill_index_j_prev_prev_prev_prev_prev=0\n    local fill_index_i_prev_prev_prev_prev_prev=0\n\
    \    local fill_index_j_prev_prev_prev_prev_prev_prev=0\n    local fill_index_i_prev_prev_prev_prev_prev_prev=0\n\
    \    local fill_index_j_prev_prev_prev_prev_prev_prev_prev=0\n    local fill_index_i_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local fill_index_j_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local fill_index_i_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local fill_index_j_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ fill_index_i_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local fill_index_j_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local fill_index_i_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max=0\n    local fill=0\n    local row\n   \
    \ local col\n    for row in $grid; do\n        for col in $row; do\n         \
    \   if [[ $col == 1 ]]; then\n                (( fill++ ))\n            else\n\
    \                if [[ $fill -gt $max ]]; then\n                    max=$fill\n\
    \                fi\n                fill=0\n            fi\n        done\n  \
    \      if [[ $fill -gt $max ]]; then\n            max=$fill\n        fi\n    \
    \    fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    for row in $1; do\n        fill=0\n      \
    \  for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            fi\n        done\n        if [ $fill -gt $max ]; then\n         \
    \   max=$fill\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqmx742xt.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpqmx742xt.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -a wells=($1)\n    local -i capacity=$2\n    for well in \"${wells[@]}\"\
    ; do\n        local -i fill=0\n        for ((i=0; i<${#well}; i++)); do\n    \
    \        [[ ${well:$i:1} == \"1\" ]] && ((fill++))\n        done\n        ((fill\
    \ > max)) && max=$fill\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local current_fill=0\n    local\
    \ row\n    for row in $grid; do\n        for ((i=0; i<${#row}; i++)); do\n   \
    \         if [[ ${row:$i:1} -eq 1 ]]; then\n                ((current_fill++))\n\
    \            else\n                if ((current_fill > max_fill)); then\n    \
    \                max_fill=$current_fill\n                fi\n                current_fill=0\n\
    \            fi\n        done\n        if ((current_fill > max_fill)); then\n\
    \            max_fill=$current_fill\n        fi\n        current_fill=0\n    done\n\
    \    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4luhhsp0.sh: line 28: [[: \: syntax error: operand expected (error
    token is "\")

    /tmp/tmp4luhhsp0.sh: line 28: [[: \: syntax error: operand expected (error token
    is "\")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $((max_fill/capacity))\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq2q3vsrg.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpq2q3vsrg.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [[ $i -eq 1 ]]; then\n      \
    \      ((fill++))\n        else\n            if [[ $fill -gt $max ]]; then\n \
    \               max=$fill\n            fi\n            fill=0\n        fi\n  \
    \  done\n    if [[ $fill -gt $max ]]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpih1mlyyn.sh: line 24: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpih1mlyyn.sh: line 24: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n\
    \        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4_pa76df.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp4_pa76df.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max_fill=0\n\
    \    local fill=0\n    local row\n    local col\n    for row in $1; do\n     \
    \   for col in $row; do\n            if [ $col -eq 1 ]; then\n               \
    \ fill=$((fill+1))\n            else\n                if [ $fill -gt $max_fill\
    \ ]; then\n                    max_fill=$fill\n                fi\n          \
    \      fill=0\n            fi\n        done\n        if [ $fill -gt $max_fill\
    \ ]; then\n            max_fill=$fill\n        fi\n        fill=0\n    done\n\
    \    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0zyxouc4.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmp0zyxouc4.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $((max_fill/capacity))\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq2q3vsrg.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpq2q3vsrg.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a grid\n\
    \    local -i capacity\n    local -i i j\n    local -i max_fill\n    local -i\
    \ max_fill_i\n    local -i max_fill_j\n    local -i max_fill_count\n    local\
    \ -i max_fill_count_i\n    local -i max_fill_count_j\n    local -i max_fill_count_count\n\
    \    local -i max_fill_count_count_i\n    local -i max_fill_count_count_j\n  \
    \  local -i max_fill_count_count_count\n    local -i max_fill_count_count_count_i\n\
    \    local -i max_fill_count_count_count_j\n    local -i max_fill_count_count_count_count\n\
    \    local -i max_fill_count_count_count_count_i\n    local -i max_fill_count_count_count_count_j\n\
    \    local -i max_fill_count_count_count_count_count\n    local -i max_fill_count_count_count_count_count_i\n\
    \    local -i max_fill_count_count_count_count_count_j\n    local -i max_fill_count_count_count_count_count_count\n\
    \    local -i max_fill_count_count_count_count_count_count_i\n    local -i max_fill_count_count_count_count_count_count_j\n\
    \    local -i max_fill_count_count_count_count_count_count_count\n    local -i\
    \ max_fill_count_count_count_count_count_count_count_i\n    local -i max_fill_count_count_count_count_count_count_count_j\n\
    \    local -i max_fill_count_count_count_count_count_count_count_count\n    local\
    \ -i max_fill_count_count_count_count_count_count_count_count_i\n    local -i\
    \ max_fill_count_count_count_count_count_count_count_count_j\n    local -i max_fill_count_count_count_count_count_count_count_count_\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells=($1)\n\
    \    local capacity=$2\n    local max_fill=0\n    local current_fill=0\n    for\
    \ well in \"${wells[@]}\"; do\n        for ((i=0; i<${#well}; i++)); do\n    \
    \        if [[ ${well:$i:1} == 1 ]]; then\n                current_fill=$((current_fill+1))\n\
    \            fi\n        done\n        if [[ $current_fill -gt $max_fill ]]; then\n\
    \            max_fill=$current_fill\n        fi\n        current_fill=0\n    done\n\
    \    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i n=0\n    local -i m=0\n    local\
    \ -i fill=0\n    local -i capacity=$2\n    local -a grid\n    local -a row\n \
    \   IFS=$'\\n'\n    for row in $1; do\n        IFS=$' '\n        grid[i]=()\n\
    \        for j in $row; do\n            grid[i][j]=$j\n        done\n        ((i++))\n\
    \    done\n    n=${#grid[@]}\n    m=${#grid[0][@]}\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<m; j++)); do\n            fill=${grid[i][j]}\n    \
    \        if ((fill > max)); then\n                max=$fill\n            fi\n\
    \        done\n    done\n    echo $((max/capacity))\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnoo6ssdn.sh: line 33: grid[i]: cannot assign list to array member

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local i=0\n\
    \    local j=0\n    local row=0\n    local col=0\n    local rows=$(echo \"$grid\"\
    \ | wc -l)\n    local cols=$(echo \"$grid\" | head -n 1 | wc -w)\n    for ((i=0;\
    \ i<rows; i++)); do\n        row=$(echo \"$grid\" | head -n $((i+1)) | tail -n\
    \ 1)\n        for ((j=0; j<cols; j++)); do\n            col=$(echo \"$row\" |\
    \ cut -d ' ' -f $((j+1)))\n            if [[ $col -eq 1 ]]; then\n           \
    \     fill=$((fill+1))\n            else\n                if [[ $fill -gt $max_fill\
    \ ]]; then\n                    max_fill=$fill\n                fi\n         \
    \       fill=0\n            fi\n        done\n        if [[ $fill -gt $max_fill\
    \ ]]; then\n            max_fill=$fill\n        fi\n        fill=0\n    done\n\
    \    echo $((max_fill/capacity))\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdd98hri7.sh: line 35: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpdd98hri7.sh: line 35: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [[ $col -eq 1 ]]; then\n                (( fill++ ))\n            else\n\
    \                if [[ $fill -gt $max_fill ]]; then\n                    max_fill=$fill\n\
    \                fi\n                fill=0\n            fi\n        done\n  \
    \      if [[ $fill -gt $max_fill ]]; then\n            max_fill=$fill\n      \
    \  fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0ljwtvax.sh: line 29: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp0ljwtvax.sh: line 29: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=$1\n  local\
    \ capacity=$2\n  local max_fill=0\n  local fill=0\n  local row\n  local col\n\
    \  for row in $grid; do\n    for col in $row; do\n      if [ $col -eq 1 ]; then\n\
    \        (( fill++ ))\n      else\n        if [ $fill -gt $max_fill ]; then\n\
    \          max_fill=$fill\n        fi\n        fill=0\n      fi\n    done\n  \
    \  if [ $fill -gt $max_fill ]; then\n      max_fill=$fill\n    fi\n    fill=0\n\
    \  done\n  echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_qugcvif.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp_qugcvif.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  for\
    \ i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n\
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbnsg0zos.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpbnsg0zos.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    for row in $1; do\n        for col in $row;\
    \ do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgqz5uvv6.sh: line 26: [: 0\n0: integer expression expected

    /tmp/tmpgqz5uvv6.sh: line 26: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=$1\n  local\
    \ capacity=$2\n  local max_fill=0\n  local fill=0\n  local row\n  local col\n\
    \  for row in $grid; do\n    for col in $row; do\n      if [ $col -eq 1 ]; then\n\
    \        fill=$((fill+1))\n      else\n        if [ $fill -gt $max_fill ]; then\n\
    \          max_fill=$fill\n        fi\n        fill=0\n      fi\n    done\n  \
    \  if [ $fill -gt $max_fill ]; then\n      max_fill=$fill\n    fi\n    fill=0\n\
    \  done\n  echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp61hg6n95.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp61hg6n95.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  local\
    \ fill=0\n  for i in $1; do\n    if [ $i -eq 1 ]; then\n      fill=$((fill+1))\n\
    \    else\n      if [ $fill -gt $max ]; then\n        max=$fill\n      fi\n  \
    \    fill=0\n    fi\n  done\n  if [ $fill -gt $max ]; then\n    max=$fill\n  fi\n\
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvsp5uc2k.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpvsp5uc2k.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local current_fill=0\n    local\
    \ row\n    for row in $grid; do\n        for ((i=0; i<${#row}; i++)); do\n   \
    \         if [[ ${row:$i:1} == 1 ]]; then\n                ((current_fill++))\n\
    \            else\n                if ((current_fill > max_fill)); then\n    \
    \                max_fill=$current_fill\n                fi\n                current_fill=0\n\
    \            fi\n        done\n        if ((current_fill > max_fill)); then\n\
    \            max_fill=$current_fill\n        fi\n        current_fill=0\n    done\n\
    \    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [[ $i -eq 1 ]]; then\n      \
    \      fill=$((fill+1))\n        else\n            if [[ $fill -gt $max ]]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [[ $fill -gt $max ]]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxfrdp6um.sh: line 24: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpxfrdp6um.sh: line 24: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local current=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n     \
    \       ((current++))\n        else\n            if [ $current -gt $max ]; then\n\
    \                max=$current\n            fi\n            current=0\n       \
    \ fi\n    done\n    if [ $current -gt $max ]; then\n        max=$current\n   \
    \ fi\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3msjp_9x.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmp3msjp_9x.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  for\
    \ i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n\
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbnsg0zos.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpbnsg0zos.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [[ $i -eq 1 ]]; then\n      \
    \      ((fill++))\n        else\n            if [[ $fill -gt $max ]]; then\n \
    \               max=$fill\n            fi\n            fill=0\n        fi\n  \
    \  done\n    if [[ $fill -gt $max ]]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpih1mlyyn.sh: line 24: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpih1mlyyn.sh: line 24: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    for row in $grid; do\n     \
    \   local fill=0\n        for col in $row; do\n            if [ $col -eq 1 ];\
    \ then\n                ((fill++))\n            fi\n        done\n        if [\
    \ $fill -gt $max_fill ]; then\n            max_fill=$fill\n        fi\n    done\n\
    \    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprctju_7x.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmprctju_7x.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells\n\
    \    local -i max_fill=0\n    local -i i=0\n    local -i j=0\n    local -i capacity=$2\n\
    \    local -i well_count=0\n    local -i fill_count=0\n    local -i fill_count_max=0\n\
    \    local -i fill_count_max_index=0\n    local -i fill_count_max_index_prev=0\n\
    \    local -i fill_count_max_index_prev_prev=0\n    local -i fill_count_max_index_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev=0\n    local -i fill_count_max_index_prev_prev_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i fill_count_max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i fill_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i fill_count_max_index_prev_prev_prev_prev\n}\n\ncandidate() {\n \
    \   max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells\n\
    \    local -i capacity=$2\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\
    \    local -i max_i=0\n    local -i max_j=0\n    local -i num_wells=0\n    local\
    \ -i num_buckets=0\n    local -i num_buckets_used=0\n    local -i num_buckets_used_last=0\n\
    \    local -i num_buckets_used_last_last=0\n    local -i num_buckets_used_last_last_last=0\n\
    \    local -i num_buckets_used_last_last_last_last=0\n    local -i num_buckets_used_last_last_last_last_last=0\n\
    \    local -i num_buckets_used_last_last_last_last_last_last=0\n    local -i num_buckets_used_last_last_last_last_last_last_last=0\n\
    \    local -i num_buckets_used_last_last_last_last_last_last_last_last=0\n   \
    \ local -i num_buckets_used_last_last_last_last_last_last_last_last_last=0\n \
    \   local -i num_buckets_used_last_last_last_last_last_last_last_last_last_last=0\n\
    \    local -i num_buckets_used_last_last_last_last_last_last_last_last_last_last_last=0\n\
    \    local -i num_buckets_used_last_last_last_last_last_last_last_last_last_last_last_last=0\n\
    \    local -i num_buckets_used_last_last_last_last_last_last_last_last_last_last_last_last_last=0\n\
    \    local -i num_buckets_used_last_last_last_last_last_last_last_last_last_last_last_last_last_last=0\n\
    \    local -i num_buckets_used_last_last_last_last_last_last_last_last\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $((max_fill/capacity))\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq2q3vsrg.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpq2q3vsrg.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells\n\
    \    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i capacity=$2\n\
    \    local -i count=0\n    local -i len=0\n    local -i len_wells=0\n    local\
    \ -i len_well=0\n    local -i sum=0\n    local -i well_i=0\n    local -i well_j=0\n\
    \    local -i well_k=0\n    local -i well_l=0\n    local -i well_m=0\n    local\
    \ -i well_n=0\n    local -i well_o=0\n    local -i well_p=0\n    local -i well_q=0\n\
    \    local -i well_r=0\n    local -i well_s=0\n    local -i well_t=0\n    local\
    \ -i well_u=0\n    local -i well_v=0\n    local -i well_w=0\n    local -i well_x=0\n\
    \    local -i well_y=0\n    local -i well_z=0\n    local -i well_aa=0\n    local\
    \ -i well_ab=0\n    local -i well_ac=0\n    local -i well_ad=0\n    local -i well_ae=0\n\
    \    local -i well_af=0\n    local -i well_ag=0\n    local -i well_ah=0\n    local\
    \ -i well_ai=0\n    local -i well_aj=0\n    local -i well_ak=0\n    local -i well_al=0\n\
    \    local -i well_am=0\n    local -i well_an=0\n    local -i well_ao=0\n    local\
    \ -i well_ap=0\n    local -i well_aq=0\n    local -i well_ar=0\n    local -i well_as=0\n\
    \    local -i well_at=0\n    local -i well_au=0\n    local -i well_av=0\n    local\
    \ -i well_aw=0\n    local -i well_ax=0\n    local -i well_ay=\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: -1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i i=0\n    while read -r line; do\n        local -i fill=0\n     \
    \   for ((i=0; i<${#line}; i++)); do\n            if [[ ${line:i:1} == \"1\" ]];\
    \ then\n                ((fill++))\n            fi\n        done\n        if ((fill\
    \ > max)); then\n            max=$fill\n        fi\n    done\n    echo $max\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660004044
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells\n\
    \    local -i i=0 j=0\n    local -i max=0\n    local -i capacity=$2\n    local\
    \ -i count=0\n    local -i fill=0\n    local -i length=0\n    local -i width=0\n\
    \    local -i total=0\n    local -i total_fill=0\n    local -i total_count=0\n\
    \    local -i total_length=0\n    local -i total_width=0\n    local -i total_max=0\n\
    \    local -i total_fill=0\n    local -i total_count=0\n    local -i total_length=0\n\
    \    local -i total_width=0\n    local -i total_max=0\n    local -i total_fill=0\n\
    \    local -i total_count=0\n    local -i total_length=0\n    local -i total_width=0\n\
    \    local -i total_max=0\n    local -i total_fill=0\n    local -i total_count=0\n\
    \    local -i total_length=0\n    local -i total_width=0\n    local -i total_max=0\n\
    \    local -i total_fill=0\n    local -i total_count=0\n    local -i total_length=0\n\
    \    local -i total_width=0\n    local -i total_max=0\n    local -i total_fill=0\n\
    \    local -i total_count=0\n    local -i total_length=0\n    local -i total_width=0\n\
    \    local -i total_max=0\n    local -i total_fill=0\n    local -i total_count=0\n\
    \    local -i total_length=0\n    local -i total_width=0\n    local -i total_max=0\n\
    \    local -i total_fill=0\n    local -i total_count=0\n    local -i total_length=0\n\
    \    local -i total_width=0\n    local -i total_max=0\n    local -i total_fill=0\n\
    \    local -i total_count=0\n    local -i total_length=0\n    local -i total_width=\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -n grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    for row in \"${grid[@]}\"; do\n\
    \        local fill=0\n        for ((i=0; i<${#row}; i++)); do\n            if\
    \ [[ ${row:i:1} == 1 ]]; then\n                ((fill++))\n            fi\n  \
    \      done\n        if ((fill > max_fill)); then\n            max_fill=$fill\n\
    \        fi\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp043n7_qs.sh: line 21: local: `0 0 1 0\n0 1 0 0\n1 1 1 1'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local current_fill=0\n    local\
    \ row\n    for row in $grid; do\n        for ((i=0; i<${#row}; i++)); do\n   \
    \         if [[ ${row:$i:1} == 1 ]]; then\n                current_fill=$((current_fill\
    \ + 1))\n            else\n                if [[ $current_fill -gt $max_fill ]];\
    \ then\n                    max_fill=$current_fill\n                fi\n     \
    \           current_fill=0\n            fi\n        done\n        if [[ $current_fill\
    \ -gt $max_fill ]]; then\n            max_fill=$current_fill\n        fi\n   \
    \     current_fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -n grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    for row in \"${grid[@]}\"; do\n\
    \        local fill=$(echo \"$row\" | tr -cd 1 | wc -c)\n        if (( fill >\
    \ max_fill )); then\n            max_fill=$fill\n        fi\n    done\n    echo\
    \ $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt0l5fn50.sh: line 21: local: `0 0 1 0\n0 1 0 0\n1 1 1 1'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a grid\n\
    \    local capacity\n    local -i i j k\n    local -i max_fill\n    local -i max_fill_index\n\
    \    local -i max_fill_count\n    local -i max_fill_count_index\n    local -i\
    \ max_fill_count_count\n    local -i max_fill_count_count_index\n    local -i\
    \ max_fill_count_count_count\n    local -i max_fill_count_count_count_index\n\
    \    local -i max_fill_count_count_count_count\n    local -i max_fill_count_count_count_count_index\n\
    \    local -i max_fill_count_count_count_count_count\n    local -i max_fill_count_count_count_count_count_index\n\
    \    local -i max_fill_count_count_count_count_count_count\n    local -i max_fill_count_count_count_count_count_count_index\n\
    \    local -i max_fill_count_count_count_count_count_count_count\n    local -i\
    \ max_fill_count_count_count_count_count_count_count_index\n    local -i max_fill_count_count_count_count_count_count_count_count\n\
    \    local -i max_fill_count_count_count_count_count_count_count_count_index\n\
    \    local -i max_fill_count_count_count_count_count_count_count_count_count\n\
    \    local -i max_fill_count_count_count_count_count_count_count_count_count_index\n\
    \    local -i max_fill_count_count_count_count_count_count_count_count_count_count\n\
    \    local -i max_fill_count_count_count_count_count_count_count_count_count_count_index\n\
    \    local -i max_fill_count_count_count_count_count_count_count_count_count_count_count\n\
    \    local -i max_fill_count_count_count_count_count_count_count_count_count_count_count_index\n\
    \    local -i max_fill_count_count_count\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnhwa2y5w.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpnhwa2y5w.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local current_fill=0\n\
    \    local row\n    local col\n    local cols\n    local col_count\n    local\
    \ row_count\n    local row_count=$(echo \"$grid\" | wc -l)\n    local cols=$(echo\
    \ \"$grid\" | head -n 1)\n    local col_count=$(echo \"$cols\" | wc -w)\n    for\
    \ ((row=0; row<row_count; row++)); do\n        for ((col=0; col<col_count; col++));\
    \ do\n            local cell=$(echo \"$grid\" | head -n $((row+1)) | tail -n 1\
    \ | awk \"{print \\$$((col+1))}\")\n            if [[ $cell -eq 1 ]]; then\n \
    \               current_fill=$((current_fill+1))\n            else\n         \
    \       if [[ $current_fill -gt $max_fill ]]; then\n                    max_fill=$current_fill\n\
    \                fi\n                current_fill=0\n            fi\n        done\n\
    \        if [[ $current_fill -gt $max_fill ]]; then\n            max_fill=$current_fill\n\
    \        fi\n        current_fill=0\n    done\n    echo $((max_fill/capacity))\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptohmhj56.sh: line 36: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmptohmhj56.sh: line 36: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnhwa2y5w.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpnhwa2y5w.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnhwa2y5w.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpnhwa2y5w.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i i=0\n    local -i j=0\n    for i in $(seq 0 $((${#1}-1))); do\n\
    \        for j in $(seq 0 $((${#2}-1))); do\n            if [[ ${1:$i:1} -eq 1\
    \ ]]; then\n                (( max++ ))\n            fi\n        done\n    done\n\
    \    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuv2dypjo.sh: line 26: [[: \: syntax error: operand expected (error
    token is "\")

    /tmp/tmpuv2dypjo.sh: line 26: [[: \: syntax error: operand expected (error token
    is "\")

    /tmp/tmpuv2dypjo.sh: line 26: [[: \: syntax error: operand expected (error token
    is "\")

    /tmp/tmpuv2dypjo.sh: line 26: [[: \: syntax error: operand expected (error token
    is "\")

    /tmp/tmpuv2dypjo.sh: line 26: [[: \: syntax error: operand expected (error token
    is "\")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells\n\
    \    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i capacity=$2\n\
    \    local -i count=0\n    local -i fill=0\n    local -i length=0\n    local -i\
    \ width=0\n    local -i total=0\n    local -i total_fill=0\n    local -i total_length=0\n\
    \    local -i total_width=0\n    local -i total_count=0\n    local -i total_max=0\n\
    \    local -i total_fill=0\n    local -i total_length=0\n    local -i total_width=0\n\
    \    local -i total_count=0\n    local -i total_max=0\n    local -i total_fill=0\n\
    \    local -i total_length=0\n    local -i total_width=0\n    local -i total_count=0\n\
    \    local -i total_max=0\n    local -i total_fill=0\n    local -i total_length=0\n\
    \    local -i total_width=0\n    local -i total_count=0\n    local -i total_max=0\n\
    \    local -i total_fill=0\n    local -i total_length=0\n    local -i total_width=0\n\
    \    local -i total_count=0\n    local -i total_max=0\n    local -i total_fill=0\n\
    \    local -i total_length=0\n    local -i total_width=0\n    local -i total_count=0\n\
    \    local -i total_max=0\n    local -i total_fill=0\n    local -i total_length=0\n\
    \    local -i total_width=0\n    local -i total_count=0\n    local -i total_max=0\n\
    \    local -i total_fill=0\n    local -i total_length=0\n    local -i total_width=0\n\
    \    local -i total_count=0\n    local -i total_max=0\n    local -i total_fill=0\n\
    \    local -i total_length=0\n    local -i total_width=0\n    local -\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    for i in $1; do\n        if (( i > max )); then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpprlpsm82.sh: line 23: ((: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpprlpsm82.sh: line 23: ((: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -n arr=$1\n\
    \    local cap=$2\n    local max=0\n    for i in \"${arr[@]}\"; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n    done\n    echo $((\
    \ max / cap ))\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6ejns15o.sh: line 21: local: `0 0 1 0\n0 1 0 0\n1 1 1 1'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i i=0\n    for i in $1; do\n        if (( i > max )); then\n     \
    \       max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnoxzd_kh.sh: line 23: 0\n0: syntax error: invalid arithmetic operator
    (error token is "\n0")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    for row in $grid; do\n        for ((i=0; i<${#row}; i++)); do\n         \
    \   if [[ ${row:$i:1} == 1 ]]; then\n                ((fill++))\n            else\n\
    \                ((fill=0))\n            fi\n            if [[ $fill -gt $max_fill\
    \ ]]; then\n                max_fill=$fill\n            fi\n        done\n   \
    \ done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\
    \ = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [[ $col -eq 1 ]]; then\n               \
    \ (( fill++ ))\n            else\n                if [[ $fill -gt $max ]]; then\n\
    \                    max=$fill\n                fi\n                fill=0\n \
    \           fi\n        done\n        if [[ $fill -gt $max ]]; then\n        \
    \    max=$fill\n        fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpiafuq2jr.sh: line 27: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpiafuq2jr.sh: line 27: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a grid\n\
    \    local -i capacity\n    local -i i j\n    local -i max_fill=0\n    local -i\
    \ fill=0\n    local -i row_len=0\n    local -i row_count=0\n    local -i row_fill=0\n\
    \    local -i row_max_fill=0\n    local -i row_max_fill_idx=0\n    local -i row_max_fill_count=0\n\
    \    local -i row_max_fill_count_idx=0\n    local -i row_max_fill_count_count=0\n\
    \    local -i row_max_fill_count_count_idx=0\n    local -i row_max_fill_count_count_count=0\n\
    \    local -i row_max_fill_count_count_count_idx=0\n    local -i row_max_fill_count_count_count_count=0\n\
    \    local -i row_max_fill_count_count_count_count_idx=0\n    local -i row_max_fill_count_count_count_count_count=0\n\
    \    local -i row_max_fill_count_count_count_count_count_idx=0\n    local -i row_max_fill_count_count_count_count_count_count=0\n\
    \    local -i row_max_fill_count_count_count_count_count_count_idx=0\n    local\
    \ -i row_max_fill_count_count_count_count_count_count_count=0\n    local -i row_max_fill_count_count_count_count_count_count_count_idx=0\n\
    \    local -i row_max_fill_count_count_count_count_count_count_count_count=0\n\
    \    local -i row_max_fill_count_count_count_count_count_count_count_count_idx=0\n\
    \    local -i row_max_fill_count_count_count_count_count_count_count_count_count=0\n\
    \    local -i row_max_fill_count_count_count_count_count_count_count_count_count\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnhwa2y5w.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpnhwa2y5w.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#1}\n    local -i cap=$2\n\
    \    local -i fill=0\n    local -i count=0\n    local -i max_count=0\n    local\
    \ -i max_fill=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_len=0\n\
    \    local -i max_cap=0\n    local -i max_fill=0\n    local -i max_count=0\n \
    \   local -i max_i=0\n    local -i max_j=0\n    local -i max_len=0\n    local\
    \ -i max_cap=0\n    local -i max_fill=0\n    local -i max_count=0\n    local -i\
    \ max_i=0\n    local -i max_j=0\n    local -i max_len=0\n    local -i max_cap=0\n\
    \    local -i max_fill=0\n    local -i max_count=0\n    local -i max_i=0\n   \
    \ local -i max_j=0\n    local -i max_len=0\n    local -i max_cap=0\n    local\
    \ -i max_fill=0\n    local -i max_count=0\n    local -i max_i=0\n    local -i\
    \ max_j=0\n    local -i max_len=0\n    local -i max_cap=0\n    local -i max_fill=0\n\
    \    local -i max_count=0\n    local -i max_i=0\n    local -i max_j=0\n    local\
    \ -i max_len=0\n    local -i max_cap=0\n    local -i max_fill=0\n    local -i\
    \ max_count=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_len=0\n\
    \    local -i max_cap=0\n    local -i max_fill=0\n    local -i max_count=0\n \
    \   local -i max_i=0\n    local\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\"\
    ) = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=$1\n  local\
    \ capacity=$2\n  local max_fill=0\n  local fill=0\n  local row\n  local col\n\
    \  for row in $grid; do\n    for col in $row; do\n      if [ $col -eq 1 ]; then\n\
    \        (( fill++ ))\n      else\n        if [ $fill -gt $max_fill ]; then\n\
    \          max_fill=$fill\n        fi\n        fill=0\n      fi\n    done\n  \
    \  if [ $fill -gt $max_fill ]; then\n      max_fill=$fill\n    fi\n    fill=0\n\
    \  done\n  echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_qugcvif.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp_qugcvif.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            else\n                if [ $fill -gt $max ]; then\n             \
    \       max=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max ]; then\n            max=$fill\n  \
    \      fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnhwa2y5w.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpnhwa2y5w.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local current_fill=0\n    local\
    \ row\n    local col\n    local row_len\n    local col_len\n    local i\n    local\
    \ j\n    local k\n    local l\n    local row_len=${#grid[@]}\n    local col_len=${#grid[0]}\n\
    \    for ((i=0; i<row_len; i++)); do\n        for ((j=0; j<col_len; j++)); do\n\
    \            if [[ ${grid[i]:j:1} == 1 ]]; then\n                current_fill=$((current_fill\
    \ + 1))\n                if [[ $current_fill -gt $max_fill ]]; then\n        \
    \            max_fill=$current_fill\n                fi\n            else\n  \
    \              current_fill=0\n            fi\n        done\n    done\n    echo\
    \ $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -i max=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i n=0\n    local -i m=0\n    local\
    \ -i sum=0\n    local -i capacity=$2\n    local -a grid\n    local -a row\n  \
    \  local -a col\n    local -a wells\n    local -a buckets\n    local -a wells_sum\n\
    \    local -a buckets_sum\n    local -a buckets_max\n    local -a buckets_min\n\
    \    local -a buckets_min_index\n    local -a buckets_max_index\n    local -a\
    \ buckets_max_index_sum\n    local -a buckets_min_index_sum\n    local -a buckets_max_index_sum_index\n\
    \    local -a buckets_min_index_sum_index\n    local -a buckets_max_index_sum_index_sum\n\
    \    local -a buckets_min_index_sum_index_sum\n    local -a buckets_max_index_sum_index_sum_index\n\
    \    local -a buckets_min_index_sum_index_sum_index\n    local -a buckets_max_index_sum_index_sum_index_sum\n\
    \    local -a buckets_min_index_sum_index_sum_index_sum\n    local -a buckets_max_index_sum_index_sum_index_sum_index\n\
    \    local -a buckets_min_index_sum_index_sum_index_sum_index\n    local -a buckets_max_index_sum_index_sum_index_sum_index_sum\n\
    \    local -a buckets_min_index_sum_index_sum_index_sum_index_sum\n    local -a\
    \ buckets_max_index_sum_index_sum_index_sum_index_sum_index\n    local -a buckets_min_index_sum_index_sum_index_sum_index_sum_index\n\
    \    local -a buckets_max_index_sum_index_sum_index_sum_index_sum_index_sum\n\
    \    local -a buckets_min_index_sum_index_sum_index_sum_index_sum_index_sum\n\
    \    local -a buckets_max_index_sum_index\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 2
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -r grid=$1\n\
    \    local -r capacity=$2\n    local -r rows=$(wc -l <<< \"$grid\")\n    local\
    \ -r cols=$(head -n 1 <<< \"$grid\" | wc -w)\n    local -r max_fill=$((capacity\
    \ * cols))\n    local -r max_fill_str=$(printf \"%0${cols}d\" $max_fill)\n   \
    \ local -r max_fill_regex=\"^${max_fill_str//0/[01]}$\"\n    local -r max_fill_regex_escaped=$(sed\
    \ 's/[][\\/\\.^$*+?{}()|]/\\\\&/g' <<< \"$max_fill_regex\")\n    local -r max_fill_regex_escaped_reversed=$(rev\
    \ <<< \"$max_fill_regex_escaped\")\n    local -r max_fill_regex_escaped_reversed_escaped=$(sed\
    \ 's/[][\\/\\.^$*+?{}()|]/\\\\&/g' <<< \"$max_fill_regex_escaped_reversed\")\n\
    \    local -r max_fill_regex_escaped_reversed_escaped_reversed=$(rev <<< \"$max_fill_regex_escaped_reversed_escaped\"\
    )\n    local -r max_fill_regex_escaped_reversed_escaped_reversed_escaped=$(sed\
    \ 's/[][\\/\\.^$*+?{}()|]/\\\\&/g' <<< \"$max_fill_regex_escaped_reversed_escaped_reversed\"\
    )\n    local -r max_fill_regex_escaped_reversed_escaped_reversed_escaped_reversed=$(rev\
    \ <<< \"$max_fill_regex_escaped_reversed_escaped_reversed_escaped\")\n    local\
    \ -r max_fill_regex_escaped_reversed_escaped_reversed_escaped_reversed_escaped=$(sed\
    \ 's/[][\\/\\.^$*+?{\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3tc0u9ar.sh: line 34: unexpected EOF while looking for matching
    `''''

    /tmp/tmp3tc0u9ar.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local -r grid=\"$1\"\
    \n  local -r capacity=\"$2\"\n  local -r num_rows=$(wc -l <<< \"$grid\")\n  local\
    \ -r num_cols=$(wc -w <<< \"$(head -n 1 <<< \"$grid\")\")\n  local -r num_wells=$((\
    \ num_rows * num_cols ))\n  local -r num_buckets=$(( num_wells / capacity ))\n\
    \  local -r num_buckets_remainder=$(( num_wells % capacity ))\n  local -r num_buckets_full=$((\
    \ num_buckets + (num_buckets_remainder > 0) ))\n  local -r num_buckets_empty=$((\
    \ num_buckets - (num_buckets_remainder > 0) ))\n  local -r num_buckets_full_capacity=$((\
    \ num_buckets_full * capacity ))\n  local -r num_buckets_empty_capacity=$(( num_buckets_empty\
    \ * capacity ))\n  local -r num_buckets_full_capacity_remainder=$(( num_buckets_full_capacity\
    \ - num_wells ))\n  local -r num_buckets_empty_capacity_remainder=$(( num_buckets_empty_capacity\
    \ - num_wells ))\n  local -r num_buckets_full_capacity_remainder_abs=$(( num_buckets_full_capacity_remainder\
    \ < 0 ? -num_buckets_full_capacity_remainder : num_buckets_full_capacity_remainder\
    \ ))\n  local -r num_buckets_empty_capacity_remainder_abs=$(( num_buckets_empty_capacity_remainder\
    \ < 0 ? -num_buckets_empty_capacity_remainder : num_buckets_empty_capacity_remainder\
    \ ))\n  local -r num_buckets_full_capacity_remainder_abs_half=$(( num_buckets_full_capacity_remainder_abs\
    \ / 2 ))\n  local -r num_buckets_empty_capacity_remainder_abs_half=$(( num_buckets_empty_capacity_remainder_abs\
    \ / 2 ))\n \n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  local\
    \ fill=0\n  for i in $1; do\n    if [ $i -eq 1 ]; then\n      ((fill++))\n   \
    \ else\n      if [ $fill -gt $max ]; then\n        max=$fill\n      fi\n     \
    \ fill=0\n    fi\n  done\n  if [ $fill -gt $max ]; then\n    max=$fill\n  fi\n\
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdxjb7bvw.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpdxjb7bvw.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  local\
    \ fill=0\n  local row\n  for row in $1; do\n    for col in $row; do\n      if\
    \ [ $col -eq 1 ]; then\n        fill=$((fill+1))\n      else\n        if [ $fill\
    \ -gt $max ]; then\n          max=$fill\n        fi\n        fill=0\n      fi\n\
    \    done\n    if [ $fill -gt $max ]; then\n      max=$fill\n    fi\n    fill=0\n\
    \  done\n  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnem8qu_o.sh: line 26: [: 0\n0: integer expression expected

    /tmp/tmpnem8qu_o.sh: line 26: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local current_fill=0\n\
    \    local row\n    local col\n    local row_length\n    local col_length\n  \
    \  local row_count=0\n    local col_count=0\n    local row_index=0\n    local\
    \ col_index=0\n    local fill_count=0\n    local row_fill=0\n    local col_fill=0\n\
    \    local row_fill_count=0\n    local col_fill_count=0\n    local row_fill_index=0\n\
    \    local col_fill_index=0\n    local row_fill_length=0\n    local col_fill_length=0\n\
    \    local row_fill_max=0\n    local col_fill_max=0\n    local row_fill_max_index=0\n\
    \    local col_fill_max_index=0\n    local row_fill_max_length=0\n    local col_fill_max_length=0\n\
    \    local row_fill_max_count=0\n    local col_fill_max_count=0\n    local row_fill_max_fill=0\n\
    \    local col_fill_max_fill=0\n    local row_fill_max_fill_count=0\n    local\
    \ col_fill_max_fill_count=0\n    local row_fill_max_fill_index=0\n    local col_fill_max_fill_index=0\n\
    \    local row_fill_max_fill_length=0\n    local col_fill_max_fill_length=0\n\
    \    local row_fill_max_fill_max=0\n    local col_fill_max_fill_max=0\n    local\
    \ row_fill_max_fill_max_index=0\n    local col_fill_max_fill_max_index=0\n   \
    \ local row_fill_max_fill_max_length=0\n    local col_fill_max_fill_max_length=0\n\
    \    local row_fill_max_fill_max_count=0\n    local col_fill_max_fill_max_count=0\n\
    \    local row_fill_max_fill_max_fill=0\n    local col\n}\n\ncandidate() {\n \
    \   max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -n grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    for row in \"${grid[@]}\"; do\n\
    \        local fill=$(echo \"$row\" | tr -cd 1 | wc -c)\n        if [[ $fill -gt\
    \ $max_fill ]]; then\n            max_fill=$fill\n        fi\n    done\n    echo\
    \ $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw5fxjkx8.sh: line 21: local: `0 0 1 0\n0 1 0 0\n1 1 1 1'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local fill=0\n    local\
    \ row\n    local col\n    for row in $grid; do\n        for col in $row; do\n\
    \            if [ $col -eq 1 ]; then\n                ((fill++))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp87uosvjc.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp87uosvjc.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -n grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    for row in \"${grid[@]}\"; do\n\
    \        local fill=0\n        for ((i=0; i<${#row}; i++)); do\n            if\
    \ [[ ${row:i:1} == 1 ]]; then\n                ((fill++))\n            else\n\
    \                ((fill=0))\n            fi\n            if ((fill > max_fill));\
    \ then\n                max_fill=$fill\n            fi\n        done\n    done\n\
    \    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9eaog84m.sh: line 21: local: `0 0 1 0\n0 1 0 0\n1 1 1 1'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  local\
    \ fill=0\n  for i in $1; do\n    if [ $i -eq 1 ]; then\n      fill=$((fill+1))\n\
    \    else\n      if [ $fill -gt $max ]; then\n        max=$fill\n      fi\n  \
    \    fill=0\n    fi\n  done\n  if [ $fill -gt $max ]; then\n    max=$fill\n  fi\n\
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvsp5uc2k.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpvsp5uc2k.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local well\n    for row in $grid; do\n        for well in $row; do\n    \
    \        if [ $well -eq 1 ]; then\n                fill=$((fill+1))\n        \
    \    else\n                fill=0\n            fi\n            if [ $fill -gt\
    \ $max_fill ]; then\n                max_fill=$fill\n            fi\n        done\n\
    \    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\"\
    ) = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"\
    2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[\
    \ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1\
    \ 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp85r400ep.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp85r400ep.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=\"$1\"\n\
    \  local capacity=\"$2\"\n  local max_fill=0\n  local fill=0\n  local row\n  for\
    \ row in $grid; do\n    for i in $row; do\n      if [ $i -eq 1 ]; then\n     \
    \   fill=$((fill+1))\n      fi\n    done\n    if [ $fill -gt $max_fill ]; then\n\
    \      max_fill=$fill\n    fi\n    fill=0\n  done\n  echo $((max_fill/capacity))\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbo74ie5z.sh: line 28: [: 0\n0: integer expression expected

    /tmp/tmpbo74ie5z.sh: line 28: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  local\
    \ fill=0\n  for i in $1; do\n    if [ $i -eq 1 ]; then\n      ((fill++))\n   \
    \ else\n      if [ $fill -gt $max ]; then\n        max=$fill\n      fi\n     \
    \ fill=0\n    fi\n  done\n  if [ $fill -gt $max ]; then\n    max=$fill\n  fi\n\
    \  echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdxjb7bvw.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpdxjb7bvw.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local -a wells=($1)\n\
    \    local capacity=$2\n    local max_fill=0\n    local current_fill=0\n    for\
    \ well in \"${wells[@]}\"; do\n        for ((i=0; i<${#well}; i++)); do\n    \
    \        if [[ ${well:$i:1} == 1 ]]; then\n                ((current_fill++))\n\
    \            else\n                if ((current_fill > max_fill)); then\n    \
    \                max_fill=$current_fill\n                fi\n                current_fill=0\n\
    \            fi\n        done\n        if ((current_fill > max_fill)); then\n\
    \            max_fill=$current_fill\n        fi\n        current_fill=0\n    done\n\
    \    echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n  \
    \  [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n\
    \    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"\
    1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local column\n    local i\n    for row in $grid; do\n        for column in\
    \ $row; do\n            if [[ $column -eq 1 ]]; then\n                (( fill++\
    \ ))\n            else\n                if [[ $fill -gt $max_fill ]]; then\n \
    \                   max_fill=$fill\n                fi\n                fill=0\n\
    \            fi\n        done\n        if [[ $fill -gt $max_fill ]]; then\n  \
    \          max_fill=$fill\n        fi\n        fill=0\n    done\n    echo $max_fill\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi13ej9vo.sh: line 30: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpi13ej9vo.sh: line 30: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  local\
    \ fill=0\n  local row\n  local col\n  for row in $1; do\n    for col in $row;\
    \ do\n      fill=$(($fill + $col))\n      if [ $fill -gt $max ]; then\n      \
    \  max=$fill\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n  \
    \  max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprm0t7bhv.sh: line 27: 1 + 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=\"$1\"\
    \n    local capacity=\"$2\"\n    local max_fill=0\n    local fill=0\n    local\
    \ i=0\n    local j=0\n    local row=0\n    local rows=0\n    local cols=0\n  \
    \  local col=0\n    local row_fill=0\n    local row_fill_max=0\n    local row_fill_min=0\n\
    \    local row_fill_avg=0\n    local row_fill_avg_int=0\n    local row_fill_avg_frac=0\n\
    \    local row_fill_avg_frac_int=0\n    local row_fill_avg_frac_frac=0\n    local\
    \ row_fill_avg_frac_frac_int=0\n    local row_fill_avg_frac_frac_frac=0\n    local\
    \ row_fill_avg_frac_frac_frac_int=0\n    local row_fill_avg_frac_frac_frac_frac=0\n\
    \    local row_fill_avg_frac_frac_frac_frac_int=0\n    local row_fill_avg_frac_frac_frac_frac_frac=0\n\
    \    local row_fill_avg_frac_frac_frac_frac_frac_int=0\n    local row_fill_avg_frac_frac_frac_frac_frac_frac=0\n\
    \    local row_fill_avg_frac_frac_frac_frac_frac_frac_int=0\n    local row_fill_avg_frac_frac_frac_frac_frac_frac_frac=0\n\
    \    local row_fill_avg_frac_frac_frac_frac_frac_frac_frac_int=0\n    local row_fill_avg_frac_frac_frac_frac_frac_frac_frac_frac=0\n\
    \    local row_fill_avg_frac_frac_frac_frac_frac_frac_frac_frac_int=0\n    local\
    \ row_fill_avg_frac_frac_frac_frac_frac_frac_frac_frac_frac=0\n    local row_fill_avg_frac_frac_frac_frac_frac_frac_frac_frac_frac_\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    for row in $1; do\n        for ((i=0; i<${#row};\
    \ i++)); do\n            if [[ ${row:$i:1} == 1 ]]; then\n                ((fill++))\n\
    \            else\n                if ((fill > max)); then\n                 \
    \   max=$fill\n                fi\n                fill=0\n            fi\n  \
    \      done\n        if ((fill > max)); then\n            max=$fill\n        fi\n\
    \        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [[ $col -eq 1 ]]; then\n                (( fill++ ))\n            else\n\
    \                if [[ $fill -gt $max_fill ]]; then\n                    max_fill=$fill\n\
    \                fi\n                fill=0\n            fi\n        done\n  \
    \      if [[ $fill -gt $max_fill ]]; then\n            max_fill=$fill\n      \
    \  fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0ljwtvax.sh: line 29: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp0ljwtvax.sh: line 29: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1\n    do\n   \
    \     for col in $row\n        do\n            if [ $col -eq 1 ]\n           \
    \ then\n                fill=$((fill+1))\n            else\n                if\
    \ [ $fill -gt $max ]\n                then\n                    max=$fill\n  \
    \              fi\n                fill=0\n            fi\n        done\n    \
    \    if [ $fill -gt $max ]\n        then\n            max=$fill\n        fi\n\
    \        fill=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1\
    \ 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoyqru5w3.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpoyqru5w3.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n \
    \       fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\"\
    \ \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1\
    \ 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kiusybr.sh: line 23: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmp1kiusybr.sh: line 23: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=$1\n  local\
    \ capacity=$2\n  local max_fill=0\n  local fill=0\n  local row\n  local col\n\
    \  for row in $grid; do\n    for col in $row; do\n      if [ $col -eq 1 ]; then\n\
    \        fill=$((fill+1))\n      fi\n    done\n    if [ $fill -gt $max_fill ];\
    \ then\n      max_fill=$fill\n    fi\n    fill=0\n  done\n  echo $((max_fill/capacity))\n\
    }\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5nbfhki7.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp5nbfhki7.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local max=0\n  for\
    \ i in $1; do\n    if [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpon0kjo3r.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmpon0kjo3r.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $((max_fill/capacity))\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq2q3vsrg.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpq2q3vsrg.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    for i in $1; do\n        if [ $i -eq 1 ]; then\n        \
    \    fill=$((fill+1))\n        else\n            if [ $fill -gt $max ]; then\n\
    \                max=$fill\n            fi\n            fill=0\n        fi\n \
    \   done\n    if [ $fill -gt $max ]; then\n        max=$fill\n    fi\n    echo\
    \ $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate\
    \ \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate\
    \ \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\"\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpckziwvkb.sh: line 24: [: 0\n0: integer expression expected

    /tmp/tmpckziwvkb.sh: line 24: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local fill=0\n    local row\n\
    \    local col\n    for row in $grid; do\n        for col in $row; do\n      \
    \      if [ $col -eq 1 ]; then\n                fill=$((fill+1))\n           \
    \ else\n                if [ $fill -gt $max_fill ]; then\n                   \
    \ max_fill=$fill\n                fi\n                fill=0\n            fi\n\
    \        done\n        if [ $fill -gt $max_fill ]; then\n            max_fill=$fill\n\
    \        fi\n        fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n\
    \    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\\
    n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\\
    n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"\
    5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn_bqap78.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmpn_bqap78.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [[ $col -eq 1 ]]; then\n               \
    \ fill=$((fill+1))\n            else\n                if [[ $fill -gt $max ]];\
    \ then\n                    max=$fill\n                fi\n                fill=0\n\
    \            fi\n        done\n        if [[ $fill -gt $max ]]; then\n       \
    \     max=$fill\n        fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpwa15eg4j.sh: line 27: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpwa15eg4j.sh: line 27: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid=$1\n  local\
    \ capacity=$2\n  local max_fill=0\n  local fill=0\n  local row\n  local col\n\
    \  for row in $grid; do\n    for col in $row; do\n      if [ $col -eq 1 ]; then\n\
    \        fill=$((fill+1))\n      else\n        if [ $fill -gt $max_fill ]; then\n\
    \          max_fill=$fill\n        fi\n        fill=0\n      fi\n    done\n  \
    \  if [ $fill -gt $max_fill ]; then\n      max_fill=$fill\n    fi\n    fill=0\n\
    \  done\n  echo $max_fill\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\"\
    \ ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"\
    5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1\
    \ 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp61hg6n95.sh: line 29: [: 0\n0: integer expression expected

    /tmp/tmp61hg6n95.sh: line 29: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n\
    \    local capacity=$2\n    local max_fill=0\n    local current_fill=0\n    local\
    \ row\n    local col\n    for row in $grid; do\n        for col in $row; do\n\
    \            if [[ $col -eq 1 ]]; then\n                current_fill=$((current_fill\
    \ + 1))\n            else\n                if [[ $current_fill -gt $max_fill ]];\
    \ then\n                    max_fill=$current_fill\n                fi\n     \
    \           current_fill=0\n            fi\n        done\n        if [[ $current_fill\
    \ -gt $max_fill ]]; then\n            max_fill=$current_fill\n        fi\n   \
    \     current_fill=0\n    done\n    echo $max_fill\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp9l7wdry.sh: line 29: [[: 0\n0: syntax error: invalid arithmetic
    operator (error token is "\n0")

    /tmp/tmpp9l7wdry.sh: line 29: [[: 0\n1: syntax error: invalid arithmetic operator
    (error token is "\n1")

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    for row in $1; do\n        fill=0\n      \
    \  for i in $row; do\n            if [ $i -eq 1 ]; then\n                fill=$((fill+1))\n\
    \            fi\n        done\n        if [ $fill -gt $max ]; then\n         \
    \   max=$fill\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\\
    n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\\
    n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx7ooiswn.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmpx7ooiswn.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n  local -r grid=\"$1\"\
    \n  local -r capacity=\"$2\"\n  local -r row_count=$(echo \"$grid\" | wc -l)\n\
    \  local -r col_count=$(echo \"$grid\" | head -n 1 | wc -w)\n  local -r max_fill_count=$((capacity\
    \ * col_count))\n  local -r max_fill_row=$(echo \"$grid\" | head -n \"$max_fill_count\"\
    \ | tail -n 1)\n  local -r max_fill_row_count=$(echo \"$max_fill_row\" | tr -cd\
    \ '1' | wc -c)\n  local -r max_fill_row_index=$((max_fill_count - max_fill_row_count))\n\
    \  local -r max_fill_row_index_in_grid=$((max_fill_row_index / col_count))\n \
    \ local -r max_fill_row_index_in_grid_mod=$((max_fill_row_index % col_count))\n\
    \  local -r max_fill_row_index_in_grid_mod_count=$(echo \"$max_fill_row\" | head\
    \ -n \"$max_fill_row_index_in_grid_mod\" | tail -n 1 | tr -cd '1' | wc -c)\n \
    \ local -r max_fill_row_index_in_grid_mod_count_in_grid=$((max_fill_row_index_in_grid_mod_count\
    \ + max_fill_row_index_in_grid))\n  local -r max_fill_row_index_in_grid_mod_count_in_grid_mod=$((max_fill_row_index_in_grid_mod_count_in_grid\
    \ % col_count))\n  local -r max_fill_row_index_in_grid_mod_count_in_grid_mod_count=$(echo\
    \ \"$max_fill_row\" | head -n \"$max_fill_row_index_in_grid_mod_count_in_grid_mod\"\
    \ | tail -n 1 | tr -cd '1' | wc -c)\n  local -r max_fill_row_index_in_\n}\n\n\
    candidate() {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0\
    \ 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"\
    0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n   \
    \     fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_fill \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"\
    1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\"\
    \ \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\n0 0 0\" \"5\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppm2v3rp5.sh: line 23: [: 0\n0: integer expression expected

    /tmp/tmppm2v3rp5.sh: line 23: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
- exit_code: 1
  program: "#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n# and each 1 in a row represents a single unit of water.\n#\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets\
    \ to empty the wells.\n# Output the number of times you need to lower the buckets.\n\
    # Example 1:\n# Example 2:\n# Example 3:\n# Constraints:\n# * all wells have the\
    \ same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n\
    # * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated,\
    \ space-separated list\n# $2 is an integer\nmax_fill() {\n    local max=0\n  \
    \  local fill=0\n    local row\n    local col\n    for row in $1; do\n       \
    \ for col in $row; do\n            if [ $col -eq 1 ]; then\n                ((\
    \ fill++ ))\n            else\n                if [ $fill -gt $max ]; then\n \
    \                   max=$fill\n                fi\n                fill=0\n  \
    \          fi\n        done\n        if [ $fill -gt $max ]; then\n           \
    \ max=$fill\n        fi\n        fill=0\n    done\n    echo $max\n}\n\ncandidate()\
    \ {\n    max_fill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\
    \ 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\") = \"6\" ]]\n    [[ $(candidate \"0 0 1 1\\\
    n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\") = \"5\" ]]\n    [[ $(candidate \"0 0 0\\\
    n0 0 0\" \"5\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"2\") =\
    \ \"4\" ]]\n    [[ $(candidate \"1 1 1 1\\n1 1 1 1\" \"9\") = \"2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmps1bvdm77.sh: line 27: [: 0\n0: integer expression expected

    /tmp/tmps1bvdm77.sh: line 27: [: 0\n1: integer expression expected

    '
  stdout: ''
  timestamp: 1660004039
