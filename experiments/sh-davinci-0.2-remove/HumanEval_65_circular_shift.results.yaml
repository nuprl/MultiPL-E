language: sh
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    if [ $shift -eq 0 ]; then\n        echo\
    \ $x\n    elif [ $shift -eq $digits ]; then\n        echo $(rev <<< $x)\n    else\n\
    \        echo $(rev <<< ${x:0:$shift}${x:$shift})\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local right=$((x % 10**shift))\n\
    \        local left=$((x / 10**shift))\n        echo $right$left\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shift=$((shift % digits))\n    if [ $shift -eq 0\
    \ ]; then\n        echo \"$x\"\n    else\n        local first=$(echo \"$x\" |\
    \ cut -c 1-$shift)\n        local last=$(echo \"$x\" | cut -c $((shift + 1))-$digits)\n\
    \        echo \"$last$first\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n  \
    \      local x=$(echo $x | cut -c $shift-)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n\
    \        local x=$(echo $x | rev)\n        echo $x\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((x % 10**shift))\n    local left=$((x\
    \ / 10**shift))\n    echo $((right * 10**digits + left))\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    # Convert to string\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=${#x}\n    local result=\"\"\n    local i=0\n    local j=0\n\
    \    if [ \"$shift\" -gt \"$len\" ]; then\n        # Reverse the digits\n    \
    \    for (( i=len-1; i>=0; i-- )); do\n            result=\"$result${x:$i:1}\"\
    \n        done\n    else\n        for (( i=0; i<len; i++ )); do\n            j=$((\
    \ (i+shift) % len ))\n            result=\"$result${x:$j:1}\"\n        done\n\
    \    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local shift=$((digits - shift))\n    local x=$(echo $x | rev)\n    local\
    \ x=$(echo $x | cut -c 1-$shift)\n    local x=$(echo $x | rev)\n    echo $x\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        result=\"$(rev <<< \"$x\")\"\n    else\n        result=\"$(cut -c \"\
    $shift-$digits\" <<< \"$x\")$(cut -c 1-\"$((shift - 1))\" <<< \"$x\")\"\n    fi\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local y=$(echo\
    \ $x | rev)\n        local y=$(echo $y | cut -c 1-$shift)\n        local y=$(echo\
    \ $y | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-$digits)\n    \
    \    echo $x$y\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    if [ $shift -ge $digits ]; then\n        echo \"$x\" |\
    \ rev\n    else\n        local x_len=$((digits - 1))\n        local x_shift=$((x_len\
    \ - shift))\n        local x_shift_len=$((x_shift + 1))\n        local x_shift_str=$(echo\
    \ \"$x\" | cut -c $x_shift_len-$x_len)\n        local x_str=$(echo \"$x\" | cut\
    \ -c 1-$x_shift_len)\n        echo \"$x_shift_str$x_str\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x / 10 ** shift))\n\
    \        local z=$((x % 10 ** shift))\n        echo $((z * 10 ** digits + y))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % (10 ** shift)))\n\
    \        local z=$((x / (10 ** shift)))\n        echo $((y * (10 ** digits) +\
    \ z))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo\
    \ $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        result=\"$(rev <<< \"$x\")\"\n    else\n        result=\"$(rev <<< \"\
    ${x:0:shift}\")${x:shift}\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -ge $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local left=$(echo $x | cut -c 1-$shift)\n        local right=$(echo\
    \ $x | cut -c $((shift+1))-$digits)\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo $x$(echo $x\
    \ | rev)\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shift_digits=$((shift % digits))\n    if ((shift_digits\
    \ == 0)); then\n        echo \"$x\"\n    else\n        echo \"$x\" | rev | cut\
    \ -c \"$shift_digits\"-\"$digits\" | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local len=${#x}\n\
    \    local i\n    local result=\"\"\n    if [ $shift -ge $len ]; then\n      \
    \  for ((i=$len-1; i>=0; i--)); do\n            result=$result${x:$i:1}\n    \
    \    done\n    else\n        for ((i=$len-1; i>=0; i--)); do\n            local\
    \ j=$((i-shift))\n            if [ $j -lt 0 ]; then\n                j=$((j+len))\n\
    \            fi\n            result=$result${x:$j:1}\n        done\n    fi\n \
    \   echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  if\
    \ [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    local first=$(echo\
    \ $x | cut -c 1-$shift)\n    local last=$(echo $x | cut -c $((shift+1))-$digits)\n\
    \    echo $last$first\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((x % 10**shift))\n    local left=$((x\
    \ / 10**shift))\n    echo $((right * 10**digits + left))\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local reversed=$(echo \"$x\" | rev)\n    local shifted=$(echo\
    \ \"$reversed\" | cut -c 1-$shift)\n    local rest=$(echo \"$reversed\" | cut\
    \ -c $((shift+1))-$digits)\n    echo \"$rest$shifted\"\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local shift=$((digits - shift))\n    echo $x | cut -c $shift- | rev | cut\
    \ -c $shift- | rev\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ shift=$((shift % digits))\n  local x=$((x % 10**digits))\n  local x=$((x / 10**shift))\n\
    \  local x=$((x % 10**digits))\n  local x=$((x * 10**shift))\n  local x=$((x +\
    \ 10**digits * (x / 10**digits)))\n  echo $x\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ shift=$((shift % digits))\n  local x=$((x % 10**digits))\n  local x=$((x / 10**shift))\n\
    \  local x=$((x % 10**digits))\n  local x=$((x * 10**shift))\n  local x=$((x +\
    \ (x / 10**digits)))\n  echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local shift=$((digits - shift))\n    local x=$(echo $x | rev)\n    local\
    \ x=$(echo $x | cut -c $shift-)\n    local x=$(echo $x | rev)\n    echo $x\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  local x=$(echo $x | rev)\n  local x=$(echo $x | cut -c 1-$shift)\n  local x=$(echo\
    \ $x | rev)\n  local x=$(echo $x | cut -c $((shift + 1))-)\n  local x=$(echo $x\
    \ | rev)\n  echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local first=$(echo $x | cut -c 1-$shift)\n        local last=$(echo\
    \ $x | cut -c $((shift+1))-$digits)\n        echo $last$first\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  local digits_to_shift=$((digits\
    \ - shift))\n  local digits_to_shift=$((digits_to_shift < 0 ? 0 : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift > digits ? digits : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == 0 ? digits : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == digits ? 0 : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == 0 ? digits : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == digits ? 0 : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == 0 ? digits : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == digits ? 0 : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == 0 ? digits : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == digits ? 0 : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == 0 ? digits : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == digits ? 0 : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == 0 ? digits : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == digits ? 0 : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == 0 ? digits : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == digits ? 0 : digits_to_shift))\n\
    \  local digits_to_shift=$((digits_to_shift == 0 ? digits : digits_to_shift\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp42t1dbbg.sh: line 30: unexpected EOF while looking for matching
    `)''

    /tmp/tmp42t1dbbg.sh: line 47: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local x=$(echo $x | rev)\n    local x=$(echo $x\
    \ | cut -c $shift-)\n    local x=$(echo $x | rev)\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c $shift-)\n    local x=$(echo $x | rev)\n    echo\
    \ $x\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x_reversed=$(echo\
    \ $x | rev)\n        local x_shifted=$(echo $x_reversed | cut -c 1-$shift)\n \
    \       local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo\
    \ $x_shifted | rev)\n        local x_shifted=$(echo $x_shifted | rev)\n      \
    \  local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo $x_shifted\
    \ | rev)\n        local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo\
    \ $x_shifted | rev)\n        local x_shifted=$(echo $x_shifted | rev)\n      \
    \  local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo $x_shifted\
    \ | rev)\n        local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo\
    \ $x_shifted | rev)\n        local x_shifted=$(echo $x_shifted | rev)\n      \
    \  local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo $x_shifted\
    \ | rev)\n        local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo\
    \ $x_shifted | rev)\n        local x_shifted=$(echo $x_shifted | rev)\n      \
    \  local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo $x_shifted\
    \ | rev)\n        local x_shifted=$(echo $x_shifted | rev)\n        local x_shifted=$(echo\
    \ $x_shifted | rev)\n        local x_shifted=$(\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl4ugcyn1.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpl4ugcyn1.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [[ $shift -eq 0 ]]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | rev)\n        local x=$(echo $x | cut\
    \ -c 1-$digits)\n        local x=$(echo $x | rev)\n        echo $x\n    fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo \"$x\" | rev\n    else\n        local x_shift=$((x %\
    \ 10 ** shift))\n        local x_shift=$((x_shift * 10 ** (digits - shift)))\n\
    \        local x_shift=$((x_shift + x / 10 ** shift))\n        echo \"$x_shift\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ shift=$((shift % digits))\n  local x=$((10**shift * x + x / 10**shift))\n  echo\
    \ $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((digits - shift))\n    local left=$((digits\
    \ - right))\n    local right=$(echo $x | cut -c $left-$digits)\n    local left=$(echo\
    \ $x | cut -c 1-$left)\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  if [ $shift -eq 0 ]; then\n    echo \"$x\"\n  else\n    local x=$(echo \"$x\"\
    \ | rev)\n    local x=$(echo \"$x\" | cut -c -$shift)\n    local x=$(echo \"$x\"\
    \ | rev)\n    local x=$(echo \"$x\" | cut -c $((shift + 1))-)\n    echo \"$x$x\"\
    \n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    if ((shift == 0)); then\n        echo\
    \ \"$x\"\n    elif ((shift > digits)); then\n        echo \"$x\" | rev\n    else\n\
    \        echo \"${x:$shift}${x:0:$shift}\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    local left=${x:0:digits-shift}\n   \
    \ local right=${x:digits-shift}\n    echo \"$right$left\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** $shift))\n\
    \        local z=$((x / 10 ** $shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ shift=$((shift % digits))\n  local x=$((x % 10**digits))\n  local x=$((x * 10**shift))\n\
    \  local x=$((x + x / 10**digits))\n  echo $x\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local reversed=$(echo $x | rev)\n  local shifted=$(echo $reversed\
    \ | cut -c 1-$shift)\n  local rest=$(echo $reversed | cut -c $((shift+1))-$digits)\n\
    \  echo $rest$shifted\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local y=$((x % 10**shift))\n    local z=$((x /\
    \ 10**shift))\n    echo $y$z\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $((y * 10 ** digits + z))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo\
    \ $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift\
    \ % digits))\n    if [ $shift -eq 0 ]; then\n        echo \"$x\"\n    else\n \
    \       local right=$(echo \"$x\" | cut -c $shift- | rev)\n        local left=$(echo\
    \ \"$x\" | cut -c 1-$((digits - shift)) | rev)\n        echo \"$right$left\"\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  local x=$(echo $x | rev)\n  local x=$(echo $x | cut -c $shift- | rev)\n  local\
    \ x=$(echo $x | rev)\n  local x=$(echo $x | cut -c $((digits - shift + 1))- |\
    \ rev)\n  echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  local x=$(echo $x | rev)\n  local x=$(echo $x | cut -c 1-$shift)\n  local x=$(echo\
    \ $x | rev)\n  local x=$(echo $x | rev)\n  local x=$(echo $x | cut -c 1-$digits)\n\
    \  local x=$(echo $x | rev)\n  echo $x\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $shift- | rev)\n        local\
    \ x=$(echo $x | rev)\n        local x=$(echo $x | cut -c 1-$((digits - shift))\
    \ | rev)\n        echo $x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [[ $shift -eq 0 ]]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c -$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n        echo $x\n  \
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local result=\"\"\n  if [ $shift -gt $digits ]; then\n    result=$(echo\
    \ $x | rev)\n  else\n    result=$(echo $x | cut -c $shift- | rev)$(echo $x | cut\
    \ -c 1-$((digits-shift)) | rev)\n  fi\n  echo $result\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=''\n    if ((shift >= digits)); then\n        for ((i=digits-1;\
    \ i>=0; i--)); do\n            result+=${x:$i:1}\n        done\n    else\n   \
    \     for ((i=shift; i<digits; i++)); do\n            result+=${x:$i:1}\n    \
    \    done\n        for ((i=0; i<shift; i++)); do\n            result+=${x:$i:1}\n\
    \        done\n    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local reversed=$(echo $x | rev)\n    local shifted=$(echo $reversed\
    \ | cut -c 1-$shift)\n    local rest=$(echo $reversed | cut -c $((shift+1))-$digits)\n\
    \    local result=$(echo $rest$shifted | rev)\n    echo $result\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local result=''\n    if [ $shift -gt $digits ]; then\n\
    \        result=$(echo \"$x\" | rev)\n    else\n        result=$(echo \"$x\" |\
    \ sed -e \"s/\\(.\\{$shift\\}\\)\\(.*\\)/\\2\\1/\")\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ x_reversed=$(reverse $x)\n  local x_shifted=$(reverse $(echo $x_reversed | cut\
    \ -c $shift-$digits))\n  local x_shifted_reversed=$(reverse $x_shifted)\n  echo\
    \ $x_shifted_reversed\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb38mf3al.sh: line 12: reverse: command not found

    /tmp/tmpb38mf3al.sh: line 13: reverse: command not found

    /tmp/tmpb38mf3al.sh: line 14: reverse: command not found

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  if [ $shift -eq 0 ]; then\n    echo \"$x\"\n  else\n    local x_reversed=$(echo\
    \ \"$x\" | rev)\n    local x_shifted=$(echo \"$x_reversed\" | cut -c -$shift)\n\
    \    local x_shifted=$(echo \"$x_shifted\" | rev)\n    local x_shifted=$(echo\
    \ \"$x_shifted\" | rev)\n    local x_shifted=$(echo \"$x_shifted\" | rev)\n  \
    \  local x_shifted=$(echo \"$x_shifted\" | rev)\n    local x_shifted=$(echo \"\
    $x_shifted\" | rev)\n    local x_shifted=$(echo \"$x_shifted\" | rev)\n    local\
    \ x_shifted=$(echo \"$x_shifted\" | rev)\n    local x_shifted=$(echo \"$x_shifted\"\
    \ | rev)\n    local x_shifted=$(echo \"$x_shifted\" | rev)\n    local x_shifted=$(echo\
    \ \"$x_shifted\" | rev)\n    local x_shifted=$(echo \"$x_shifted\" | rev)\n  \
    \  local x_shifted=$(echo \"$x_shifted\" | rev)\n    local x_shifted=$(echo \"\
    $x_shifted\" | rev)\n    local x_shifted=$(echo \"$x_shifted\" | rev)\n    local\
    \ x_shifted=$(echo \"$x_shifted\" | rev)\n    local x_shifted=$(echo \"$x_shifted\"\
    \ | rev)\n    local x_shifted=$(echo \"$x_shifted\" | rev)\n    local x_shifted=$(echo\
    \ \"$x_shifted\" | rev)\n    local x_shifted=$(echo \"$x_shifted\" | rev)\n  \
    \  local x_shifted=$(echo \"$x_shifted\" | rev)\n    local x_shifted=$(echo \"\
    $x_shifted\" | rev)\n   \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp40mkvgp6.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmp40mkvgp6.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo\
    \ $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local digit=0\n\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        for\
    \ ((i=digits-1; i>=0; i--)); do\n            result=\"$result${x:$i:1}\"\n   \
    \     done\n    else\n        for ((i=0; i<digits; i++)); do\n            j=$(((i+shift)%digits))\n\
    \            result=\"$result${x:$j:1}\"\n        done\n    fi\n\n    echo \"\
    $result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local digits=\"\
    ${#x}\"\n  local result=\"\"\n  local i=0\n  if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n    for ((i=$digits-1; i>=0; i--)); do\n      result=\"$result${x:$i:1}\"\
    \n    done\n  else\n    result=\"${x:$shift:$digits}\"\n    result=\"$result${x:0:$shift}\"\
    \n  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local left=$((x / 10 ** shift))\n\
    \        local right=$((x % 10 ** shift))\n        echo $((right * 10 ** digits\
    \ + left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local len=${#x}\n  local\
    \ shift=$((shift % len))\n  local left=${x:0:$((len - shift))}\n  local right=${x:$((len\
    \ - shift))}\n  echo \"$right$left\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local y=$((x % 10**shift))\n    local z=$((x /\
    \ 10**shift))\n    echo $((y * 10**digits + z))\n  fi\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  local x=$(echo $x | rev)\n  local x=$(echo $x | cut -c 1-$shift)\n  local x=$(echo\
    \ $x | rev)\n  local x=$(echo $x | cut -c $((shift + 1))-)\n  local x=$(echo $x\
    \ | rev)\n  echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c 1-$shift)\n    local x=$(echo $x | rev)\n    echo\
    \ $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c $shift- | rev)\n    local x=$(echo $x | rev)\n\
    \    echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    if ((shift == 0)); then\n        echo\
    \ \"$x\"\n    elif ((shift > digits)); then\n        echo \"$(rev <<< \"$x\")\"\
    \n    else\n        echo \"${x:$shift}${x:0:$shift}\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local first=$(echo $x | cut -c\
    \ 1-$shift)\n        local last=$(echo $x | cut -c $((shift + 1))-$digits)\n \
    \       echo $last$first\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local shift=$((shift + digits))\n    local shift=$((shift % digits))\n  \
    \  local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c 1-$shift)\n    local\
    \ x=$(echo $x | rev)\n    echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local result=\"\"\n  if [ $shift -gt $digits ]; then\n    result=$(echo\
    \ \"$x\" | rev)\n  else\n    local left=$(echo \"$x\" | cut -c 1-$shift)\n   \
    \ local right=$(echo \"$x\" | cut -c $((shift+1))-$digits)\n    result=$right$left\n\
    \  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((x % 10**shift))\n    local left=$((x\
    \ / 10**shift))\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ result=''\n  local i=0\n  if [ $shift -gt $digits ]; then\n    while [ $x -gt\
    \ 0 ]; do\n      result=$((x % 10))$result\n      x=$((x / 10))\n    done\n  else\n\
    \    while [ $i -lt $digits ]; do\n      result=$result$((x % 10))\n      x=$((x\
    \ / 10))\n      i=$((i + 1))\n    done\n    result=${result:$shift:$digits}${result:0:$shift}\n\
    \  fi\n  echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=''\n    if [ $shift -gt $digits ]; then\n        result=$(rev\
    \ <<< \"$x\")\n    else\n        result=${x:$shift}${x:0:$shift}\n    fi\n   \
    \ echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local right=$((x % 10**shift))\n    local left=$((x\
    \ / 10**shift))\n    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local first=$(echo\
    \ $x | cut -c 1-$shift)\n        local last=$(echo $x | cut -c $((shift + 1))-$digits)\n\
    \        echo $last$first\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local x_right=$((x % 10**shift))\n    local x_left=$((x\
    \ / 10**shift))\n    echo $x_right$x_left\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits\
    \ ]; then\n        echo \"$x\" | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo \"$y$z\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local\
    \ f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local\
    \ f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local\
    \ f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n   \n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shifted=$((x % 10**shift))\n    local result=$((x\
    \ / 10**shift))\n    if [ $shift -gt $digits ]; then\n        result=$(reverse_digits\
    \ $result)\n    fi\n    echo \"$result$shifted\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        for (( i = 0; i < \"$digits\"; i++ )); do\n            result=\"${x:$i:1}$result\"\
    \n        done\n    else\n        result=\"${x:$shift:$digits}\"\n        result=\"\
    ${result}${x:0:$shift}\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local digit=0\n\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        for\
    \ ((i = digits - 1; i >= 0; i--)); do\n            result=\"$result${x:$i:1}\"\
    \n        done\n    else\n        for ((i = 0; i < digits; i++)); do\n       \
    \     j=$((i + shift))\n            k=$((j % digits))\n            digit=\"${x:$k:1}\"\
    \n            result=\"$result$digit\"\n        done\n    fi\n\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits_shifted=$((digits - shift))\n  if [ $digits_shifted -lt\
    \ 0 ]; then\n    echo $x | rev\n  else\n    local x_shifted=$(echo $x | cut -c\
    \ $digits_shifted- | rev)\n    local x_remainder=$(echo $x | cut -c 1-$digits_shifted\
    \ | rev)\n    echo $x_shifted$x_remainder\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local len=$((digits - 1))\n  local result=\"\"\n  local i=0\n  local\
    \ j=0\n  local digit=0\n  local index=0\n\n  if [ $shift -gt $len ]; then\n  \
    \  for ((i = len; i >= 0; i--)); do\n      digit=$(echo $x | cut -c $i)\n    \
    \  result=\"$result$digit\"\n    done\n  else\n    for ((i = 0; i < len; i++));\
    \ do\n      index=$((i + shift))\n      if [ $index -gt $len ]; then\n       \
    \ index=$((index - len))\n      fi\n      digit=$(echo $x | cut -c $((index +\
    \ 1)))\n      result=\"$result$digit\"\n    done\n  fi\n\n  echo $result\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  local x=$(echo $x | rev)\n  local x=$(echo $x | cut -c 1-$shift)\n  local x=$(echo\
    \ $x | rev)\n  local x=$(echo $x | cut -c $((shift + 1))-)\n  local x=$(echo $x\
    \ | rev)\n  echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shift=$((shift % digits))\n    local digits=$((digits\
    \ - 1))\n    if [ $shift -eq 0 ]; then\n        echo \"$x\"\n    elif [ $shift\
    \ -eq $digits ]; then\n        echo \"$x\" | rev\n    else\n        echo \"$x\"\
    \ | rev | cut -c $shift- | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local x_len=${#x}\n  local\
    \ x_rev=$(rev <<< \"$x\")\n  local x_rev_len=${#x_rev}\n  local x_rev_shifted=$(rev\
    \ <<< \"${x_rev:0:$shift}\")\n  local x_rev_shifted_len=${#x_rev_shifted}\n  local\
    \ x_rev_shifted_remainder=$(rev <<< \"${x_rev:$shift}\")\n  local x_rev_shifted_remainder_len=${#x_rev_shifted_remainder}\n\
    \  local x_rev_shifted_remainder_padded=$(printf \"%0${x_rev_shifted_len}d\" \"\
    $x_rev_shifted_remainder\")\n  local x_rev_shifted_remainder_padded_len=${#x_rev_shifted_remainder_padded}\n\
    \  local x_rev_shifted_remainder_padded_rev=$(rev <<< \"$x_rev_shifted_remainder_padded\"\
    )\n  local x_rev_shifted_remainder_padded_rev_len=${#x_rev_shifted_remainder_padded_rev}\n\
    \  local x_rev_shifted_remainder_padded_rev_shifted=$(rev <<< \"${x_rev_shifted_remainder_padded_rev:0:$shift}\"\
    )\n  local x_rev_shifted_remainder_padded_rev_shifted_len=${#x_rev_shifted_remainder_padded_rev_shifted}\n\
    \  local x_rev_shifted_remainder_padded_rev_shifted_remainder=$(rev <<< \"${x_rev_shifted_remainder_padded_rev:$shift}\"\
    )\n  local x_rev_shifted_remainder_padded_rev_shifted_remainder_len=${#x_rev_shifted_remainder_padded_rev_shifted_remainder\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqw63n9ay.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local reversed=$(echo \"$x\" | rev)\n    local shifted=$(echo\
    \ \"$reversed\" | cut -c -$shift)\n    local result=$(echo \"$reversed\" | cut\
    \ -c $((shift+1))-$digits)\n    echo \"$result$shifted\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local shift=$((shift % digits))\n  local y=$(echo $x | rev)\n  local\
    \ y=$(echo $y | cut -c -$shift)\n  local y=$(echo $y | rev)\n  local y=$(echo\
    \ $x | cut -c $((shift + 1)))\n  echo $y$y\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $((y * 10 ** digits + z))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo\
    \ $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo \"$x\" | rev\n  else\n    local right=$((digits - shift))\n    local\
    \ left=$((digits - right))\n    local right=$(echo \"$x\" | cut -c $shift- | rev)\n\
    \    local left=$(echo \"$x\" | cut -c 1-$left)\n    echo \"$right$left\"\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local digits=$((digits\
    \ - 1))\n    local y=$((x % 10**shift))\n    local x=$((x / 10**shift))\n    echo\
    \ $((y * 10**digits + x))\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local shift=$((shift % digits))\n  local digits=$((digits - 1))\n\
    \  local left=$((digits - shift))\n  local right=$((digits - left))\n  local left=$(echo\
    \ $x | cut -c 1-$left)\n  local right=$(echo $x | cut -c $((left + 1))-$digits)\n\
    \  if [ $shift -eq 0 ]; then\n    echo $x\n  else\n    echo $right$left\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c 1-$shift)\n    local x=$(echo $x | rev)\n    echo\
    \ $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local left=$((x / 10 ** shift))\n\
    \        local right=$((x % 10 ** shift))\n        echo $((right * 10 ** digits\
    \ + left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo $x$(echo $x\
    \ | rev)\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local left=$((x / 10 ** shift))\n\
    \        local right=$((x % 10 ** shift))\n        echo $((right * 10 ** digits\
    \ + left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c 1-$shift)\n    local\
    \ x=$(echo $x | rev)\n    local x=$(echo $x | cut -c $((shift + 1))-)\n    echo\
    \ $x$x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  if [ $shift -eq 0 ]; then\n    echo \"$x\"\n  else\n    local x=$(echo \"$x\"\
    \ | rev)\n    local x=$(echo \"$x\" | cut -c 1-$shift)\n    local x=$(echo \"\
    $x\" | rev)\n    local x=$(echo \"$x\" | cut -c $((shift + 1))-)\n    echo \"\
    $x$x\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo\
    \ $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local s1=$(echo\
    \ $x | cut -c 1-$shift)\n        local s2=$(echo $x | cut -c $((shift + 1))-$digits)\n\
    \        echo $s2$s1\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local shift=$((shift % digits))\n  local digits=$((digits - 1))\n\
    \  local x=$(echo \"$x\" | rev)\n  local x=$(echo \"$x\" | cut -c 1-$shift)\n\
    \  local x=$(echo \"$x\" | rev)\n  local x=$(echo \"$x\" | cut -c $((shift + 1))-$digits)\n\
    \  local x=$(echo \"$x\" | rev)\n  echo \"$x\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift\
    \ % digits))\n    if [ $shift -eq 0 ]; then\n        echo \"$x\"\n    else\n \
    \       local first=$(echo \"$x\" | cut -c 1-$shift)\n        local last=$(echo\
    \ \"$x\" | cut -c $((shift + 1))-$digits)\n        echo \"$last$first\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local x=$(echo $x | rev)\n    local x=$(echo $x\
    \ | cut -c -$shift)\n    local x=$(echo $x | rev)\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c $shift-)\n    echo $x$x\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift\
    \ % digits))\n    if [ $shift -eq 0 ]; then\n        echo \"$x\"\n    else\n \
    \       local x=$(echo \"$x\" | rev)\n        local x=$(echo \"$x\" | cut -c 1-$shift)\n\
    \        local x=$(echo \"$x\" | rev)\n        local x=$(echo \"$x\" | cut -c\
    \ $((shift + 1))-)\n        echo \"$x$x\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local left=$(echo $x | cut -c 1-$shift)\n        local right=$(echo\
    \ $x | cut -c $((shift+1))-$digits)\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local result=\"\"\n    if [ $shift -gt $digits ]; then\n\
    \        result=$(echo \"$x\" | rev)\n    else\n        result=$(echo \"$x\" |\
    \ cut -c $shift- | rev)$(echo \"$x\" | cut -c 1-$((shift-1)) | rev)\n    fi\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo\
    \ $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local shift=$((shift % digits))\n    local left=\"${x:0:$((digits\
    \ - shift))}\"\n    local right=\"${x:$((digits - shift))}\"\n    echo \"${right}${left}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local reverse=$(echo $x | rev)\n    local result=$(echo $reverse\
    \ | cut -c $shift-$digits)\n    local result=$result$(echo $reverse | cut -c 1-$((shift-1)))\n\
    \    echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x_reversed=$(echo $x |\
    \ rev)\n        local x_reversed_shifted=$(echo $x_reversed | cut -c 1-$shift)\n\
    \        local x_reversed_unshifted=$(echo $x_reversed | cut -c $((shift + 1))-)\n\
    \        local x_shifted=$(echo $x_reversed_unshifted$x_reversed_shifted | rev)\n\
    \        echo $x_shifted\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    if [ $shift -eq 0 ]; then\n\
    \        echo $x\n    else\n        echo $x | cut -c $shift- | rev | cut -c $shift-\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    if (( shift >= digits )); then\n        echo \"$x\" | rev\n    else\n   \
    \     local left=${x:0:shift}\n        local right=${x:shift}\n        echo \"\
    $right$left\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    local y=$((x % 10**shift))\n    local\
    \ z=$((x / 10**shift))\n    echo $((y * 10**digits + z))\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo \"$x\" | rev\n  else\n    local x_shifted=$((x / 10 ** shift))\n   \
    \ local x_shifted=$((x_shifted * 10 ** shift))\n    local x_shifted=$((x_shifted\
    \ + x % 10 ** shift))\n    echo \"$x_shifted\"\n  fi\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local reversed=$(echo $x | rev)\n\
    \  if [ $shift -gt $digits ]; then\n    echo $reversed\n  else\n    local shifted=$(echo\
    \ $reversed | cut -c 1-$shift)\n    local shifted=$(echo $shifted | rev)\n   \
    \ local shifted=$(echo $shifted | cut -c 2-)\n    local shifted=$(echo $shifted\
    \ | rev)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo $shifted\
    \ | cut -c 2-)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo\
    \ $shifted | rev)\n    local shifted=$(echo $shifted | cut -c 2-)\n    local shifted=$(echo\
    \ $shifted | rev)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo\
    \ $shifted | cut -c 2-)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo\
    \ $shifted | rev)\n    local shifted=$(echo $shifted | cut -c 2-)\n    local shifted=$(echo\
    \ $shifted | rev)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo\
    \ $shifted | cut -c 2-)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo\
    \ $shifted | rev)\n    local shifted=$(echo $shifted | cut -c 2-)\n    local shifted=$(echo\
    \ $shifted | rev)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo\
    \ $shifted | cut -c 2-)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo\
    \ $shifted | rev)\n    local shifted=$(echo $shifted | cut -c 2-)\n    local shifted=$(echo\
    \ $shifted | rev)\n    local shifted=$(echo $shifted | rev)\n    local shifted=$(echo\
    \ $shifted | cut -c 2-)\n    local shifted=$(echo $shifted | rev)\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv046bt8e.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmpv046bt8e.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local len=${#x}\n\
    \    local shift=$((shift % len))\n    if ((shift == 0)); then\n        echo \"\
    $x\"\n    elif ((shift < len / 2)); then\n        echo \"${x:shift}${x:0:shift}\"\
    \n    else\n        echo \"${x:len-shift}${x:0:len-shift}\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ shift=$((shift % digits))\n  local y=$((x / 10 ** shift))\n  local z=$((x %\
    \ 10 ** shift))\n  echo $((y + z * 10 ** digits))\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local len=${#x}\n  local\
    \ shift=$((shift % len))\n  local y=${x:shift}${x:0:shift}\n  echo $y\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local digits=\"\
    ${#x}\"\n  local result=\"\"\n  if (( shift > digits )); then\n    result=\"$(rev\
    \ <<< \"$x\")\"\n  else\n    result=\"$(rev <<< \"${x:shift}${x:0:shift}\")\"\n\
    \  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local right=$((x % 10**shift))\n\
    \        local left=$((x / 10**shift))\n        echo $right$left\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n        local x=$(echo\
    \ $x | rev)\n        echo $x\n    fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shift=$((shift % digits))\n    if ((shift == 0));\
    \ then\n        echo \"$x\"\n    elif ((shift == digits - 1)); then\n        echo\
    \ \"$x\" | rev\n    else\n        echo \"$x\" | rev | cut -c $((shift + 1))- |\
    \ rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$((x * 10 ** shift))\n\
    \        local x=$((x + x / 10 ** digits))\n        local x=$((x % 10 ** digits))\n\
    \        echo $x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shift=$((shift % digits))\n    local digits=$((digits\
    \ - 1))\n    local x=$(echo \"$x\" | rev)\n    local x=$(echo \"$x\" | cut -c\
    \ -$shift)\n    local x=$(echo \"$x\" | rev)\n    local x=$(echo \"$x\" | cut\
    \ -c -$digits)\n    echo \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local reversed=$(echo \"$x\" | rev)\n    local shifted=$(echo\
    \ \"$reversed\" | cut -c 1-$shift)\n    local rest=$(echo \"$reversed\" | cut\
    \ -c $((shift+1))-$digits)\n    echo \"$rest$shifted\"\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ shift=$((shift % digits))\n  local result=${x:shift}${x:0:shift}\n  echo $result\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local right=$((x % 10**shift))\n\
    \        local left=$((x / 10**shift))\n        echo $right$left\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999603
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local result=\"\"\n    if [ $shift -gt $digits ]; then\n\
    \        result=$(echo \"$x\" | rev)\n    else\n        local shift_digits=$(echo\
    \ \"$x\" | cut -c 1-$shift)\n        local remaining_digits=$(echo \"$x\" | cut\
    \ -c $((shift+1))-$digits)\n        result=$remaining_digits$shift_digits\n  \
    \  fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local digits=$((digits\
    \ - 1))\n    local digits_left=$((digits - shift))\n    local digits_right=$shift\n\
    \    local digits_left_str=$(echo $x | cut -c 1-$digits_left)\n    local digits_right_str=$(echo\
    \ $x | cut -c $((digits_left + 1))-$digits)\n    echo $digits_right_str$digits_left_str\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ reversed=$(reverse_digits $x)\n  local shifted=$(shift_digits $reversed $shift)\n\
    \  local result=$(reverse_digits $shifted)\n  echo $result\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4nkw7mxf.sh: line 12: reverse_digits: command not found

    /tmp/tmp4nkw7mxf.sh: line 13: shift_digits: command not found

    /tmp/tmp4nkw7mxf.sh: line 14: reverse_digits: command not found

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=$x\n    local i\n    for ((i=0; i<shift; i++));\
    \ do\n        local last_digit=$(echo $result | tail -c 1)\n        result=$(echo\
    \ $result | sed 's/.$//')\n        result=$last_digit$result\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ -n \"$x\" | wc -c)\n    local shift=$((shift % digits))\n    local result=$(echo\
    \ -n \"$x\" | tail -c \"$shift\")\n    local result=$result$(echo -n \"$x\" |\
    \ head -c \"$((digits - shift))\")\n    echo -n \"$result\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c 1-$shift)\n    local x=$(echo $x | rev)\n    echo\
    \ $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    local\
    \ left=$(echo $x | cut -c 1-$shift)\n    local right=$(echo $x | cut -c $((shift+1))-$digits)\n\
    \    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    local i=0\n    if [ \"$shift\" -gt \"$digits\"\
    \ ]; then\n        for ((i = digits - 1; i >= 0; i--)); do\n            result=\"\
    $result${x:$i:1}\"\n        done\n    else\n        result=\"${x:$shift:$digits}\"\
    \n        result=\"$result${x:0:$shift}\"\n    fi\n    echo \"$result\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n  \
    \      local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $((shift\
    \ + 1))-)\n        local x=$(echo $x | rev)\n        echo $x\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local digit=0\n\
    \n    if [ \"$shift\" -gt \"$digits\" ]; then\n        for (( i = 0; i < digits;\
    \ i++ )); do\n            digit=\"${x:i:1}\"\n            result=\"$digit$result\"\
    \n        done\n    else\n        for (( i = 0; i < digits; i++ )); do\n     \
    \       j=$(( (i + shift) % digits ))\n            digit=\"${x:j:1}\"\n      \
    \      result=\"$result$digit\"\n        done\n    fi\n\n    echo \"$result\"\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local digits=\"\
    ${#x}\"\n  local result=\"\"\n  if (( shift >= digits )); then\n    for (( i=digits-1;\
    \ i>=0; i-- )); do\n      result=\"${result}${x:$i:1}\"\n    done\n  else\n  \
    \  result=\"${x:$shift:$digits}\"\n    result=\"${result}${x:0:$shift}\"\n  fi\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shift=$((shift % digits))\n    local x=$(echo \"\
    $x\" | rev)\n    local x=$(echo \"$x\" | cut -c -$shift)\n    local x=$(echo \"\
    $x\" | rev)\n    local x=$(echo \"$x\" | cut -c $((shift + 1))-)\n    echo \"\
    $x$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        for (( i = digits - 1; i >= 0; i-- )); do\n            result=\"$result${x:$i:1}\"\
    \n        done\n    else\n        result=\"${x:$shift:$digits}\"\n        result=\"\
    $result${x:0:$shift}\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x_left=$((x / 10 ** shift))\n\
    \        local x_right=$((x % 10 ** shift))\n        echo $((x_right * 10 ** digits\
    \ + x_left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x_left=$((x / 10 ** shift))\n\
    \        local x_right=$((x % 10 ** shift))\n        echo $((x_right * 10 ** digits\
    \ + x_left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo \"$x\" | rev\n    else\n        local r=$((x % 10 **\
    \ shift))\n        local l=$((x / 10 ** shift))\n        echo \"$r$l\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\"\"\n    if [ $shift -gt $digits ]; then\n  \
    \      result=$(echo $x | rev)\n    else\n        local left=$(echo $x | cut -c\
    \ 1-$shift)\n        local right=$(echo $x | cut -c $((shift+1))-$digits)\n  \
    \      result=$right$left\n    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $((y * 10 ** digits + z))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local result=\n    if [ $shift -gt $digits ]; then\n      \
    \  result=$(echo $x | rev)\n    else\n        local left=$(echo $x | cut -c 1-$shift)\n\
    \        local right=$(echo $x | cut -c $((shift+1))-$digits)\n        result=$right$left\n\
    \    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x | rev\n  else\n    local\
    \ left=$(echo $x | cut -c 1-$shift)\n    local right=$(echo $x | cut -c $((shift+1))-$digits)\n\
    \    echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits\
    \ ]; then\n        echo \"$x\" | rev\n    else\n        local shift=$((digits\
    \ - shift))\n        echo \"$x\" | cut -c $shift- | rev | cut -c $shift- | rev\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"\
    ${#x}\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local tmp=0\n\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        for ((i=digits-1;\
    \ i>=0; i--)); do\n            result=\"$result${x:$i:1}\"\n        done\n   \
    \ else\n        for ((i=0; i<digits; i++)); do\n            j=$((i+shift))\n \
    \           if [ \"$j\" -ge \"$digits\" ]; then\n                j=$((j-digits))\n\
    \            fi\n            result=\"$result${x:$j:1}\"\n        done\n    fi\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ sed 's/\\(.\\)/\\1 /g')\n  local num_digits=$(echo $digits | wc -w)\n  if [\
    \ $shift -gt $num_digits ]; then\n    echo $digits | rev\n  else\n    echo $digits\
    \ | cut -d ' ' -f $(seq $shift $num_digits) $(seq 1 $((shift - 1)))\n  fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'cut: 3: No such file or directory

    cut: 1: No such file or directory

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo \"$x\"\
    \ | wc -c)\n  local shift=$((shift % digits))\n  local digits=$((digits - 1))\n\
    \  local x=$(echo \"$x\" | rev)\n  local x=$(echo \"$x\" | cut -c \"1-$shift\"\
    )\n  local x=$(echo \"$x\" | rev)\n  local x=$(echo \"$x\" | cut -c \"$((shift\
    \ + 1))-$digits\")\n  local x=$(echo \"$x\" | rev)\n  echo \"$x\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local shift=$((shift % digits))\n  local left=$((digits - shift))\n\
    \  local right=$((digits - left))\n  local result=$(echo $x | cut -c $left- |\
    \ rev | cut -c $right- | rev)\n  echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo -n \"\
    $x\" | wc -c)\n  local shift=$((shift % digits))\n  if ((shift == 0)); then\n\
    \    echo -n \"$x\"\n  elif ((shift < digits / 2)); then\n    echo -n \"$x\" |\
    \ cut -c $((shift + 1))- | tr -d '\\n'\n    echo -n \"$x\" | cut -c 1-$shift |\
    \ tr -d '\\n'\n  else\n    echo -n \"$x\" | rev | cut -c $((digits - shift + 1))-\
    \ | tr -d '\\n'\n    echo -n \"$x\" | rev | cut -c 1-$((digits - shift)) | tr\
    \ -d '\\n'\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    if [ $shift -ge $digits ]; then\n        echo \"$x\" |\
    \ rev\n    else\n        local prefix=$(echo \"$x\" | cut -c1-$shift)\n      \
    \  local suffix=$(echo \"$x\" | cut -c$(($shift + 1))-$digits)\n        echo \"\
    $suffix$prefix\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    if [ $shift -eq 0 ]; then\n        echo\
    \ $x\n    elif [ $shift -eq $digits ]; then\n        echo $x | rev\n    else\n\
    \        echo $x | rev | cut -c $shift- | rev\n    fi\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -ge $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $((y * 10 ** digits + z))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo \"$x\" | rev\n    else\n        local x=$((x * 10 **\
    \ shift))\n        local x=$((x + x / 10 ** digits))\n        local x=$((x % 10\
    \ ** digits))\n        echo \"$x\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local n=$(echo $x\
    \ | wc -c)\n    local m=$(($n - 1))\n    local y=$(echo $x | rev)\n    if [ $shift\
    \ -gt $m ]; then\n        shift=$(($shift % $m))\n    fi\n    local z=$(echo $y\
    \ | cut -c -$shift)\n    local w=$(echo $y | cut -c $(($shift + 1))-$n)\n    echo\
    \ $w$z\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local len=${#x}\n  local\
    \ shift=$((shift % len))\n  local left=${x:0:$((len - shift))}\n  local right=${x:$((len\
    \ - shift))}\n  echo \"$right$left\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local shift=$((shift % digits))\n  local digits=$((digits - 1))\n\
    \  local result=$(echo $x | cut -c $shift-$digits)$(echo $x | cut -c 1-$((shift\
    \ - 1)))\n  echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt $digits ]; then\n\
    \    echo $x | rev\n  else\n    local x=$(echo $x | rev)\n    local x=$(echo $x\
    \ | cut -c $shift-)\n    local x=$(echo $x | rev)\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c $shift-)\n    local x=$(echo $x | rev)\n    echo\
    \ $x\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n  \
    \      local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo $x$(echo $x\
    \ | cut -c 1-$shift)\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=${#x}\n  local\
    \ shift=$((shift % digits))\n  local x=$((x % 10**digits))\n  local x=$((x * 10**shift))\n\
    \  local x=$((x + x / 10**digits))\n  echo $x\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  if [[ $shift -gt $digits ]]; then\n\
    \    echo $x | rev\n  else\n    local head=$(echo $x | cut -c 1-$shift)\n    local\
    \ tail=$(echo $x | cut -c $((shift + 1))-$digits)\n    echo $tail$head\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local len=$(echo $x | wc\
    \ -c)\n  local shift=$((shift % len))\n  local x=$(echo $x | rev)\n  local x=$(echo\
    \ $x | cut -c $shift- | rev)\n  local x=$(echo $x | rev)\n  echo $x\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local y=$(echo $x | rev)\n        local z=$(echo $y | cut -c\
    \ 1-$shift)\n        local w=$(echo $y | cut -c $((shift+1))-$digits)\n      \
    \  echo $w$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local result=''\n    local i=0\n    if [ $shift -gt $digits ]; then\n   \
    \     for ((i=digits-1; i>=0; i--)); do\n            result+=${x:$i:1}\n     \
    \   done\n    else\n        result=${x:$shift:$digits}\n        result+=${x:0:$shift}\n\
    \    fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local first=$(echo $x | cut -c 1-$shift)\n        local second=$(echo\
    \ $x | cut -c $((shift+1))-$digits)\n        echo $second$first\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n  \
    \  else\n        local x_str=$(echo $x | rev)\n        local x_str_len=$(echo\
    \ $x_str | wc -c)\n        local x_str_shift=$(echo $x_str | cut -c $shift-$x_str_len)\n\
    \        local x_str_shift_len=$(echo $x_str_shift | wc -c)\n        local x_str_shift_rev=$(echo\
    \ $x_str_shift | rev)\n        local x_str_shift_rev_len=$(echo $x_str_shift_rev\
    \ | wc -c)\n        local x_str_shift_rev_shift=$(echo $x_str_shift_rev | cut\
    \ -c $shift-$x_str_shift_rev_len)\n        local x_str_shift_rev_shift_len=$(echo\
    \ $x_str_shift_rev_shift | wc -c)\n        local x_str_shift_rev_shift_rev=$(echo\
    \ $x_str_shift_rev_shift | rev)\n        local x_str_shift_rev_shift_rev_len=$(echo\
    \ $x_str_shift_rev_shift_rev | wc -c)\n        local x_str_shift_rev_shift_rev_shift=$(echo\
    \ $x_str_shift_rev_shift_rev | cut -c $shift-$x_str_shift_rev_shift_rev_len)\n\
    \        local x_str_shift_rev_shift_rev_shift_len=$(echo $x_str_shift_rev_shift_rev_shift\
    \ | wc -c)\n        local x_str_shift_rev_shift_rev_shift_rev=$(echo $x_str_shift_rev_shift_rev_shift\
    \ | rev)\n        local x_str_shift_rev_shift_rev_shift_rev_len=$(echo $x_str_shift_rev_shift_rev_shift_rev\
    \ | wc -c)\n        local x_str_\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl0nue9rw.sh: line 30: syntax error near unexpected token `}''

    /tmp/tmpl0nue9rw.sh: line 30: `}''

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shift_digits=$((shift % digits))\n    if [ $shift_digits\
    \ -eq 0 ]; then\n        echo \"$x\"\n    else\n        local prefix=$(echo \"\
    $x\" | cut -c 1-$shift_digits)\n        local suffix=$(echo \"$x\" | cut -c $((shift_digits\
    \ + 1))-$digits)\n        echo \"$suffix$prefix\"\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local digits=$((digits\
    \ - 1))\n    if [ $shift -eq 0 ]; then\n        echo $x\n    elif [ $shift -eq\
    \ $digits ]; then\n        echo $x | rev\n    else\n        local a=$(echo $x\
    \ | cut -c 1-$shift)\n        local b=$(echo $x | cut -c $((shift + 1))-$digits)\n\
    \        echo $b$a\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [[ $shift -gt $digits\
    \ ]]; then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo $x$(echo $x\
    \ | rev)\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        echo $x | rev\
    \ | cut -c 1-$shift | rev\n        echo $x | rev | cut -c $((shift + 1))- | rev\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    local x=$((x % 10**digits))\n    local\
    \ x=$((x * 10**shift + x / 10**(digits - shift)))\n    echo $x\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x1=$((x / 10 ** shift))\n\
    \        local x2=$((x % 10 ** shift))\n        echo $((x2 * 10 ** digits + x1))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits\
    \ ]; then\n        echo \"$x\" | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo \"$y$z\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local n_digits=$(echo\
    \ $x | wc -c)\n    local n_digits=$((n_digits - 1))\n    local shift=$((shift\
    \ % n_digits))\n    local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c 1-$shift)\n\
    \    local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c 1-$n_digits)\n \
    \   echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local result=$(echo $x\
    \ | rev | cut -c 1-$shift | rev)$(echo $x | rev | cut -c $((shift + 1))-$digits\
    \ | rev)\n    echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo\
    \ $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n        echo\
    \ $x$x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local left=$((digits -\
    \ shift))\n    local right=$((digits - left))\n    local left_digits=$(echo $x\
    \ | cut -c 1-$left)\n    local right_digits=$(echo $x | cut -c $left-$digits)\n\
    \    echo $right_digits$left_digits\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local shift=$((shift % digits))\n  local result=$(echo $x | cut -c\
    \ $shift- | rev | cut -c $shift- | rev)\n  echo $result\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=${#x}\n\
    \    local shift=$((shift % digits))\n    local result=${x:$shift}\n    local\
    \ result=${result}${x:0:$shift}\n    echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local first=$(echo $x | cut -c1-$shift)\n\
    \        local last=$(echo $x | cut -c$((shift + 1))-)\n        echo $last$first\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\n  local digits=\"\
    ${#x}\"\n  local result=\"\"\n  if [ \"$shift\" -gt \"$digits\" ]; then\n    for\
    \ ((i=digits-1; i>=0; i--)); do\n      result=\"$result${x:$i:1}\"\n    done\n\
    \  else\n    result=\"${x:$shift:$digits}${x:0:$shift}\"\n  fi\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift % digits))\n\
    \  local result=$(echo $x | rev | cut -c 1-$shift | rev)$(echo $x | rev | cut\
    \ -c $((shift + 1))-$digits | rev)\n  echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local reversed=$(echo \"$x\" | rev)\n    if (( shift >\
    \ digits )); then\n        echo \"$reversed\"\n    else\n        local shifted=$(echo\
    \ \"$reversed\" | cut -c -$shift)\n        local rest=$(echo \"$reversed\" | cut\
    \ -c $((shift + 1))-)\n        echo \"$rest$shifted\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local left=$((x / 10 ** shift))\n\
    \        local right=$((x % 10 ** shift))\n        echo $((right * 10 ** digits\
    \ + left))\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local result=\"\"\n    if [ $shift -gt $digits ]; then\n\
    \        result=$(echo \"$x\" | rev)\n    else\n        local left=$(echo \"$x\"\
    \ | cut -c 1-$shift)\n        local right=$(echo \"$x\" | cut -c $((shift+1))-$digits)\n\
    \        result=$right$left\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10 ** shift))\n\
    \        local z=$((x / 10 ** shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c -$shift)\n    local x=$(echo $x | rev)\n    local\
    \ x=$(echo $x | cut -c $((shift + 1)))\n    local x=$(echo $x | rev)\n    echo\
    \ $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local shift=$((shift % digits))\n    local y=$(echo $x | cut\
    \ -c $shift-$digits)\n    local z=$(echo $x | cut -c 1-$((digits - shift)))\n\
    \    echo $y$z\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x_shift=$((x % 10**shift))\n\
    \        local x_shift=$((x_shift * 10**(digits - shift)))\n        local x_shift=$((x_shift\
    \ + x / 10**shift))\n        echo $x_shift\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local shift=$((digits - shift))\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n\
    \        local x=$(echo $x | rev)\n        echo $x\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n  local x=$1\n  local shift=$2\n  local digits=$(echo $x |\
    \ wc -c)\n  local reversed=$(echo $x | rev)\n  local shifted=$(echo $reversed\
    \ | cut -c 1-$shift)\n  local result=$(echo $reversed | cut -c $((shift+1))-$digits)$shifted\n\
    \  echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local shift=$((digits - shift))\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift-)\n\
    \        local x=$(echo $x | rev)\n        echo $x\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n#\n# $1 is an integer\n# $2 is an integer\n\
    circular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local y=$((x % 10**shift))\n\
    \        local z=$((x / 10**shift))\n        echo $y$z\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659999604
