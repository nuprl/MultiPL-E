language: sh
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local last=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -le $last ]]; then\n      return 1\n\
    \    fi\n    last=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local sorted=1\n\
    \  local prev=${list[0]}\n  for i in ${list[@]:1}; do\n    if [[ $i -lt $prev\
    \ ]]; then\n      sorted=0\n      break\n    fi\n    prev=$i\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Write me\n  # Hint:\
    \ You can use the sort command to sort a list\n  # Hint: You can use the uniq\
    \ command to remove duplicates\n  # Hint: You can use the wc command to count\
    \ the number of lines\n  # Hint: You can use the -n option to sort numerically\n\
    \  # Hint: You can use the -u option to uniq to remove duplicates\n  # Hint: You\
    \ can use the -l option to wc to count the number of lines\n  # Hint: You can\
    \ use the -z option to test if a string is empty\n  # Hint: You can use the -eq\
    \ option to test if two integers are equal\n  # Hint: You can use the -ne option\
    \ to test if two integers are not equal\n  # Hint: You can use the -gt option\
    \ to test if one integer is greater than another\n  # Hint: You can use the -lt\
    \ option to test if one integer is less than another\n  # Hint: You can use the\
    \ -ge option to test if one integer is greater than or equal to another\n  # Hint:\
    \ You can use the -le option to test if one integer is less than or equal to another\n\
    \  # Hint: You can use the -a option to test if two conditions are true\n  # Hint:\
    \ You can use the -o option to test if either of two conditions are true\n  #\
    \ Hint: You can use the -n option to test if a string is not empty\n  # Hint:\
    \ You can use the -z option to test if a string is empty\n  # Hint: You can use\
    \ the -eq option to test if two integers are equal\n  # Hint: You can use the\
    \ -ne option to test if two integers are not equal\n  # Hint: You can use the\
    \ -gt option to test if one integer is greater than another\n  # Hint: You can\
    \ use the -lt option to test if one integer is less than another\n  # Hint: You\
    \ can use the -ge option to test if one integer is greater than or equal to another\n\
    \  # Hint: You can use the -le option to test if one integer is less than or equal\
    \ to another\n  # Hint: You can use the -a option to test if two conditions are\
    \ true\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpogi268id.sh: line 34: syntax error near unexpected token `}''

    /tmp/tmpogi268id.sh: line 34: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # TODO: implement this function\n\
    \    #\n    # Hint: You can use the following functions:\n    #\n    #   - `sort`\n\
    \    #   - `uniq`\n    #   - `wc`\n    #   - `tr`\n    #   - `cut`\n    #   -\
    \ `echo`\n    #   - `bc`\n    #   - `expr`\n    #\n    # Hint: You can use the\
    \ following operators:\n    #\n    #   - `-eq`\n    #   - `-lt`\n    #   - `-gt`\n\
    \    #   - `-ne`\n    #   - `-le`\n    #   - `-ge`\n    #\n    # Hint: You can\
    \ use the following flags:\n    #\n    #   - `-n`\n    #   - `-z`\n    #\n   \
    \ # Hint: You can use the following escape sequences:\n    #\n    #   - `\\n`\n\
    \    #   - `\\t`\n    #\n    # Hint: You can use the following special variables:\n\
    \    #\n    #   - `$?`\n    #   - `$#`\n    #   - `$0`\n    #   - `$1`\n    #\
    \   - `$2`\n    #   - `$3`\n    #   - `$4`\n    #   - `$5`\n    #   - `$6`\n \
    \   #   - `$7`\n    #   - `$8`\n    #   - `$9`\n    #   - `$@`\n    #   - `$*`\n\
    \    #   - `$_`\n    #   - `$$`\n    #   - `$!`\n    #   - `$-`\n    #   - `$IFS`\n\
    \    #   - `$PS4`\n    #   - `$SECONDS`\n    #   - `$LINENO`\n    #   - `$RANDOM`\n\
    \    #   - `$EUID`\n    #   - `$UID`\n    #   - `$PPID`\n    #   - `$\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg5x_e9w3.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmpg5x_e9w3.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # your code here\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfk99rku6.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmpfk99rku6.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=1\n  local prev=0\n  local curr=0\n  local count=0\n  for num in $list;\
    \ do\n    if [[ $count -eq 0 ]]; then\n      prev=$num\n      count=$((count+1))\n\
    \      continue\n    fi\n    curr=$num\n    if [[ $curr -lt $prev ]]; then\n \
    \     sorted=0\n      break\n    fi\n    prev=$curr\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    if [ $count\
    \ -eq 0 ]; then\n      prev=$i\n      count=1\n    else\n      curr=$i\n     \
    \ if [ $curr -lt $prev ]; then\n        echo \"False\"\n        return\n     \
    \ fi\n      prev=$curr\n    fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # TODO: Implement me\n \
    \   # Hint: You can use the sort command to sort the list\n    # Hint: You can\
    \ use the uniq command to check for duplicates\n    # Hint: You can use the diff\
    \ command to check if the sorted list is\n    #       different from the original\
    \ list\n    # Hint: You can use the wc command to count the number of lines in\n\
    \    #       the output of a command\n    # Hint: You can use the echo command\
    \ to print a string\n    # Hint: You can use the exit command to exit the script\
    \ with a\n    #       particular exit code\n    # Hint: You can use the test command\
    \ to check if a number is equal\n    #       to another number\n    # Hint: You\
    \ can use the test command to check if a number is greater\n    #       than another\
    \ number\n    # Hint: You can use the test command to check if a number is less\n\
    \    #       than another number\n    # Hint: You can use the test command to\
    \ check if a number is greater\n    #       than or equal to another number\n\
    \    # Hint: You can use the test command to check if a number is less\n    #\
    \       than or equal to another number\n    # Hint: You can use the test command\
    \ to check if a number is not\n    #       equal to another number\n    # Hint:\
    \ You can use the test command to check if a string is equal\n    #       to another\
    \ string\n    # Hint: You can use the test command to check if a string is not\n\
    \    #       equal to another string\n    # Hint: You can use the test command\
    \ to check if a string is empty\n    # Hint: You can use the test command to check\
    \ if a string is not\n    #       empty\n    # Hint: You can use the test command\
    \ to check if a file exists\n    # Hint: You can use the test command to check\
    \ if a file does not\n    #       exist\n    # Hint: You can use the test command\
    \ to check if a file is empty\n    # Hint: You can use the test command to check\
    \ if a file is not\n    #       empty\n    # Hint: You can use the test command\
    \ to check if a file is a\n    #       directory\n    # H\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp85db8hu8.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmp85db8hu8.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use a for loop\n  # Hint: use an array\n  # Hint: use the sort command\n\
    \  # Hint: use the uniq command\n  # Hint: use the tr command\n  # Hint: use the\
    \ wc command\n  # Hint: use the test command\n  # Hint: use the echo command\n\
    \  # Hint: use the return command\n  # Hint: use the exit command\n  # Hint: use\
    \ the set command\n  # Hint: use the -n option\n  # Hint: use the -z option\n\
    \  # Hint: use the -eq option\n  # Hint: use the -ne option\n  # Hint: use the\
    \ -gt option\n  # Hint: use the -ge option\n  # Hint: use the -lt option\n  #\
    \ Hint: use the -le option\n  # Hint: use the -a option\n  # Hint: use the -o\
    \ option\n  # Hint: use the -e option\n  # Hint: use the -f option\n  # Hint:\
    \ use the -d option\n  # Hint: use the -r option\n  # Hint: use the -w option\n\
    \  # Hint: use the -x option\n  # Hint: use the -s option\n  # Hint: use the -z\
    \ option\n  # Hint: use the -n option\n  # Hint: use the -o option\n  # Hint:\
    \ use the -a option\n  # Hint: use the -eq option\n  # Hint: use the -ne option\n\
    \  # Hint: use the -gt option\n  # Hint: use the -ge option\n  # Hint: use the\
    \ -lt option\n  # Hint: use the -le option\n  # Hint: use the -o option\n  # Hint:\
    \ use the -a option\n  # Hint: use the -o option\n  # Hint: use the -a option\n\
    \  # Hint: use the -o option\n  # Hint: use the -a option\n  # Hint: use the -o\
    \ option\n  # Hint: use the -a option\n  # Hint: use\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoxgmb97f.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpoxgmb97f.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # Hint:\
    \ You can use the `sort` command to sort a list of numbers\n  # and the `uniq`\
    \ command to remove duplicates.\n  #\n  # Example:\n  # $ echo \"1 2 3 4\" | sort\
    \ -n | uniq -c\n  #    1 1\n  #    1 2\n  #    1 3\n  #    1 4\n  #\n  # $ echo\
    \ \"1 2 3 3\" | sort -n | uniq -c\n  #    2 1\n  #    1 2\n  #    2 3\n  #\n \
    \ # $ echo \"1 2 3 3\" | sort -n | uniq -c | wc -l\n  #    3\n  #\n  # $ echo\
    \ \"1 2 3 4\" | sort -n | uniq -c | wc -l\n  #    4\n  #\n  # $ echo \"1 2 3 3\"\
    \ | sort -n | uniq -c | wc -l\n  #    3\n  #\n  # $ echo \"1 2 3 3\" | sort -n\
    \ | uniq -c | wc -l\n  #    3\n  #\n  # $ echo \"1 2 3 3\" | sort -n | uniq -c\
    \ | wc -l\n  #    3\n  #\n  # $ echo \"1 2 3 3\" | sort -n | uniq -c | wc -l\n\
    \  #    3\n  #\n  # $ echo \"1 2 3 3\" | sort -n | uniq -c | wc -l\n  #    3\n\
    \  #\n  # $ echo \"1 2 3 3\" | sort -n | uniq -c | wc -l\n  #    3\n  #\n  # $\
    \ echo \"1 2 3 3\" | sort -n | uniq -c | wc -l\n  #    3\n  #\n  # $ echo \"1\
    \ 2 3 3\" | sort -n | uniq -c | wc -l\n  #    3\n  #\n  # $ echo \"1 2 3 3\" |\
    \ sort -n | uniq -c | wc -l\n  #    3\n  #\n  # $ echo \"1 2 3 3\" |\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf6omt3yw.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpf6omt3yw.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=true\n  local prev=0\n  local curr=0\n  local count=0\n  for num in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$num\n      count=1\n    else\n\
    \      curr=$num\n      if [ $curr -lt $prev ]; then\n        sorted=false\n \
    \       break\n      elif [ $curr -eq $prev ]; then\n        sorted=false\n  \
    \      break\n      else\n        prev=$curr\n      fi\n    fi\n  done\n  echo\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    curr=$i\n\
    \    if [ $curr -eq $prev ]; then\n      count=$((count+1))\n      if [ $count\
    \ -gt 1 ]; then\n        echo \"False\"\n        return\n      fi\n    elif [\
    \ $curr -lt $prev ]; then\n      echo \"False\"\n      return\n    fi\n    prev=$curr\n\
    \  done\n  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=true\n  local prev=0\n  for num in $list; do\n    if [[ $num -lt $prev\
    \ ]]; then\n      sorted=false\n      break\n    fi\n    prev=$num\n  done\n \
    \ echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local\
    \ prev=0\n    local curr=0\n    local prev_set=0\n    local curr_set=0\n    local\
    \ sorted=1\n    for num in $list; do\n        curr=$num\n        curr_set=1\n\
    \        if [[ $prev_set -eq 1 ]]; then\n            if [[ $curr -lt $prev ]];\
    \ then\n                sorted=0\n                break\n            fi\n    \
    \    fi\n        prev=$curr\n        prev_set=1\n    done\n    echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ prev=0\n    local curr=0\n    local count=0\n    for num in $list; do\n    \
    \    if [[ $count -eq 0 ]]; then\n            prev=$num\n            count=1\n\
    \        else\n            curr=$num\n            if [[ $curr -lt $prev ]]; then\n\
    \                echo \"False\"\n                return\n            elif [[ $curr\
    \ -eq $prev ]]; then\n                echo \"False\"\n                return\n\
    \            else\n                prev=$curr\n            fi\n        fi\n  \
    \  done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyihzsrc2.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmpyihzsrc2.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # return true or false\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp85vjyq1n.sh: line 177: syntax error near unexpected token `}''

    /tmp/tmp85vjyq1n.sh: line 177: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local prev_count=0\n  local curr_count=0\n  local sorted=1\n\
    \  for i in $list; do\n    curr=$i\n    curr_count=$(echo $list | tr ' ' '\\n'\
    \ | grep -c $curr)\n    if [[ $curr_count -gt 1 ]]; then\n      sorted=0\n   \
    \   break\n    fi\n    if [[ $curr -lt $prev ]]; then\n      sorted=0\n      break\n\
    \    fi\n    prev=$curr\n  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=true\n  local\
    \ prev=0\n  local curr=0\n  for i in $1; do\n    if [ $curr -eq 0 ]; then\n  \
    \    curr=$i\n    else\n      if [ $curr -lt $prev ]; then\n        sorted=false\n\
    \        break\n      fi\n      prev=$curr\n      curr=$i\n    fi\n  done\n  echo\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  IFS=' ' read\
    \ -r -a arr <<< \"$1\"\n  local prev=${arr[0]}\n  for i in \"${arr[@]:1}\"; do\n\
    \    if [[ $i -le $prev ]]; then\n      return 1\n    fi\n    prev=$i\n  done\n\
    \  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a array\n  array=($1)\n\
    \  local prev=${array[0]}\n  for i in \"${array[@]:1}\"; do\n    if [[ $i -lt\
    \ $prev ]]; then\n      echo \"False\"\n      return\n    fi\n    prev=$i\n  done\n\
    \  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Implement me\n  #\
    \ echo \"Not yet implemented\"\n  # return 1\n  # echo \"$1\"\n  # echo \"$1\"\
    \ | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n  # echo \"$1\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' ' | tr ' ' '\\n' | uniq -d\n  # echo \"$1\" | tr ' ' '\\n' |\
    \ sort -n | tr '\\n' ' ' | tr ' ' '\\n' | uniq -d | wc -l\n  # echo \"$1\" | tr\
    \ ' ' '\\n' | sort -n | tr '\\n' ' ' | tr ' ' '\\n' | uniq -d | wc -l | tr -d\
    \ ' '\n  # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | tr ' ' '\\n'\
    \ | uniq -d | wc -l | tr -d ' ' | grep -q '^0$'\n  # echo \"$1\" | tr ' ' '\\\
    n' | sort -n | tr '\\n' ' ' | tr ' ' '\\n' | uniq -d | wc -l | tr -d ' ' | grep\
    \ -q '^0$' && echo \"True\" || echo \"False\"\n  # echo \"$1\" | tr ' ' '\\n'\
    \ | sort -n | tr '\\n' ' ' | tr ' ' '\\n' | uniq -d | wc -l | tr -d ' ' | grep\
    \ -q '^0$' && echo \"True\" || echo \"False\"\n  # echo \"$1\" | tr ' ' '\\n'\
    \ | sort -n | tr '\\n' ' ' | tr ' ' '\\n' | uniq -d | wc -l | tr -d ' ' | grep\
    \ -q '^0$' && echo \"True\" || echo \"False\"\n  # echo \"$1\" | tr ' ' '\\n'\
    \ | sort -n | tr '\\n' ' ' | tr ' ' '\\n' | uniq -d | wc -l | tr -d '\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_9lnedto.sh: line 22: syntax error near unexpected token `}''

    /tmp/tmp_9lnedto.sh: line 22: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Implement me\n  #\
    \ Example:\n  # echo \"1 2 3 4\" | is_sorted\n  # > True\n  # echo \"1 2 3 4 4\"\
    \ | is_sorted\n  # > False\n  # echo \"1 2 3 3 4\" | is_sorted\n  # > False\n\
    \  # echo \"1 2 3 4 3\" | is_sorted\n  # > False\n  # echo \"1 2 3\" | is_sorted\n\
    \  # > True\n  # echo \"1 2 3 3\" | is_sorted\n  # > False\n  # echo \"1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\
    \ 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57\
    \ 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83\
    \ 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\" | is_sorted\n  # > True\n\
    \  # echo \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\
    \ 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51\
    \ 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77\
    \ 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 99 100\" |\
    \ is_sorted\n  # > False\n  # echo \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\
    \ 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\
    \ 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69\
    \ 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95\
    \ 96 97 98 99 100 99\" | is_sorted\n  # > False\n  # echo \"1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16 17 18 19 20 21 22\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpclyskqfr.sh: line 30: syntax error near unexpected token `}''

    /tmp/tmpclyskqfr.sh: line 30: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a list=($1)\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#list[@]}\n  local -i count=0\n  for\
    \ ((i=0; i<len; i++)); do\n    for ((j=0; j<len; j++)); do\n      if [[ ${list[i]}\
    \ -eq ${list[j]} ]]; then\n        ((count++))\n      fi\n    done\n    if [[\
    \ $count -gt 1 ]]; then\n      echo \"False\"\n      return\n    fi\n    count=0\n\
    \  done\n  for ((i=0; i<len-1; i++)); do\n    if [[ ${list[i]} -gt ${list[i+1]}\
    \ ]]; then\n      echo \"False\"\n      return\n    fi\n  done\n  echo \"True\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use a for loop\n  # Hint: use the -gt and -lt operators\n  # Hint:\
    \ use the -eq operator\n  # Hint: use the -ne operator\n  # Hint: use the -z operator\n\
    \  # Hint: use the -n operator\n  # Hint: use the -a operator\n  # Hint: use the\
    \ -o operator\n  # Hint: use the -eq operator\n  # Hint: use the -ne operator\n\
    \  # Hint: use the -z operator\n  # Hint: use the -n operator\n  # Hint: use the\
    \ -a operator\n  # Hint: use the -o operator\n  # Hint: use the -eq operator\n\
    \  # Hint: use the -ne operator\n  # Hint: use the -z operator\n  # Hint: use\
    \ the -n operator\n  # Hint: use the -a operator\n  # Hint: use the -o operator\n\
    \  # Hint: use the -eq operator\n  # Hint: use the -ne operator\n  # Hint: use\
    \ the -z operator\n  # Hint: use the -n operator\n  # Hint: use the -a operator\n\
    \  # Hint: use the -o operator\n  # Hint: use the -eq operator\n  # Hint: use\
    \ the -ne operator\n  # Hint: use the -z operator\n  # Hint: use the -n operator\n\
    \  # Hint: use the -a operator\n  # Hint: use the -o operator\n  # Hint: use the\
    \ -eq operator\n  # Hint: use the -ne operator\n  # Hint: use the -z operator\n\
    \  # Hint: use the -n operator\n  # Hint: use the -a operator\n  # Hint: use the\
    \ -o operator\n  # Hint: use the -eq operator\n  # Hint: use the -ne operator\n\
    \  # Hint: use the -z operator\n  # Hint: use the -n operator\n  # Hint: use the\
    \ -a operator\n  # Hint: use the -o operator\n  # Hint: use the -eq operator\n\
    \  # Hint:\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpymelzpm2.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpymelzpm2.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if [[ \"\
    $list\" == \"$sorted\" ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # $1 is a space-separated list\n  # return 0 if sorted, 1 if not sorted\n \
    \ #\n  # Example:\n  #\n  # $ is_sorted \"1 2 3\"\n  # 0\n  #\n  # $ is_sorted\
    \ \"1 2 3 3\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 2\"\n  # 1\n  #\n  # $ is_sorted\
    \ \"1 2 3 3 4\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 4 3\"\n  # 1\n  #\n  # $\
    \ is_sorted \"1 2 3 4 5\"\n  # 0\n  #\n  # $ is_sorted \"1 2 3 4 5 5\"\n  # 1\n\
    \  #\n  # $ is_sorted \"1 2 3 4 5 5 5\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 4\
    \ 5 5 5 5\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 4 5 5 5 5 5\"\n  # 1\n  #\n \
    \ # $ is_sorted \"1 2 3 4 5 5 5 5 5 5\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 4\
    \ 5 5 5 5 5 5 5\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 4 5 5 5 5 5 5 5 5\"\n \
    \ # 1\n  #\n  # $ is_sorted \"1 2 3 4 5 5 5 5 5 5 5 5 5\"\n  # 1\n  #\n  # $ is_sorted\
    \ \"1 2 3 4 5 5 5 5 5 5 5 5 5 5\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 4 5 5 5\
    \ 5 5 5 5 5 5 5 5\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 4 5 5 5 5 5 5 5 5 5 5\
    \ 5 5\"\n  # 1\n  #\n  # $ is_sorted \"1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5\"\n \
    \ # 1\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0dueu_8g.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmp0dueu_8g.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"$@\")\n  local\
    \ -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local -a uniq=($(printf\
    \ \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [ \"${#arr[@]}\" -ne \"${#uniq[@]}\"\
    \ ]; then\n    echo \"False\"\n  elif [ \"${arr[*]}\" = \"${sorted[*]}\" ]; then\n\
    \    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -lt $prev ]]; then\n      echo \"False\"\
    \n      return\n    fi\n    prev=$i\n  done\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ prev=0\n  local curr=0\n  local sorted=1\n  for num in $list; do\n    if [ $prev\
    \ -gt $num ]; then\n      sorted=0\n      break\n    fi\n    prev=$num\n  done\n\
    \  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local len=${#list[@]}\n\
    \  local prev=${list[0]}\n  for ((i=1; i<len; i++)); do\n    if [[ ${list[i]}\
    \ -lt $prev ]]; then\n      echo \"False\"\n      return\n    fi\n    prev=${list[i]}\n\
    \  done\n  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # echo\
    \ $1\n  # echo $2\n  # echo $3\n  # echo $4\n  # echo $5\n  # echo $6\n  # echo\
    \ $7\n  # echo $8\n  # echo $9\n  # echo ${10}\n  # echo ${11}\n  # echo ${12}\n\
    \  # echo ${13}\n  # echo ${14}\n  # echo ${15}\n  # echo ${16}\n  # echo ${17}\n\
    \  # echo ${18}\n  # echo ${19}\n  # echo ${20}\n  # echo ${21}\n  # echo ${22}\n\
    \  # echo ${23}\n  # echo ${24}\n  # echo ${25}\n  # echo ${26}\n  # echo ${27}\n\
    \  # echo ${28}\n  # echo ${29}\n  # echo ${30}\n  # echo ${31}\n  # echo ${32}\n\
    \  # echo ${33}\n  # echo ${34}\n  # echo ${35}\n  # echo ${36}\n  # echo ${37}\n\
    \  # echo ${38}\n  # echo ${39}\n  # echo ${40}\n  # echo ${41}\n  # echo ${42}\n\
    \  # echo ${43}\n  # echo ${44}\n  # echo ${45}\n  # echo ${46}\n  # echo ${47}\n\
    \  # echo ${48}\n  # echo ${49}\n  # echo ${50}\n  # echo ${51}\n  # echo ${52}\n\
    \  # echo ${53}\n  # echo ${54}\n  # echo ${55}\n  # echo ${56}\n  # echo ${57}\n\
    \  # echo ${58}\n  # echo ${59}\n  # echo ${60}\n  # echo ${61}\n  # echo ${62}\n\
    \  # echo ${63}\n  # echo ${64}\n  # echo ${65}\n  # echo ${66}\n  # echo ${67}\n\
    \  # echo ${68}\n  # echo ${69}\n  # echo ${70}\n  # echo ${71}\n  # echo ${72}\n\
    \  # echo ${73}\n  # echo\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp32_pslz8.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmp32_pslz8.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -lt $prev ]]; then\n      return 1\n\
    \    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=($1)\n    local\
    \ prev=${list[0]}\n    for i in ${list[@]:1}; do\n        if [[ $i -le $prev ]];\
    \ then\n            return 1\n        fi\n        prev=$i\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # Use\
    \ echo to print result\n  # No need for return\n  # echo \"true\"\n  # echo \"\
    false\"\n  # echo \"false\"\n  # echo \"true\"\n  # echo \"false\"\n  # echo \"\
    true\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"\
    false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo \"false\"\n  # echo\
    \ \"false\"\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3l4c96vn.sh: line 83: syntax error near unexpected token `}''

    /tmp/tmp3l4c96vn.sh: line 83: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # return 0 if sorted, 1 if not sorted\n  #\n  # Example:\n  #\n  # if [ \"\
    $1\" == \"1 2 3\" ]; then\n  #   return 0\n  # else\n  #   return 1\n  # fi\n\
    \  #\n  # Hint:\n  #\n  # You can use the following to split a string into an\
    \ array:\n  #\n  # IFS=' ' read -r -a array <<< \"$1\"\n  #\n  # You can use the\
    \ following to sort an array:\n  #\n  # IFS=$'\\n' sorted=($(sort <<<\"${array[*]}\"\
    ))\n  #\n  # You can use the following to check if an array is sorted:\n  #\n\
    \  # if [ \"${array[*]}\" == \"${sorted[*]}\" ]; then\n  #   return 0\n  # else\n\
    \  #   return 1\n  # fi\n  #\n  # You can use the following to check if an array\
    \ has duplicates:\n  #\n  # if [ \"${array[*]}\" == \"${array[*]// /}\" ]; then\n\
    \  #   return 0\n  # else\n  #   return 1\n  # fi\n  #\n  # You can use the following\
    \ to check if an array has more than 1 duplicate:\n  #\n  # if [ \"${array[*]}\"\
    \ != \"${array[*]// /}\" ] && [ \"${array[*]}\" != \"${array[*]// / /}\" ]; then\n\
    \  #   return 0\n  # else\n  #   return 1\n  # fi\n  #\n  # You can use the following\
    \ to check if an array has more than 1 duplicate of the same number:\n  #\n  #\
    \ if [ \"${array[*]}\" != \"${array[*]// /}\" ] && [ \"${array[*]}\" != \"${array[*]//\
    \ / /}\" ] && [ \"${array[*]}\" != \"${array[*]// / / /}\" ]; then\n  #   return\
    \ 0\n  # else\n  #   return 1\n  # fi\n  #\n  # You can use the following to check\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprur8kj0j.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmprur8kj0j.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -lt $prev ]]; then\n      return 1\n\
    \    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  for num in $list; do\n    if [[ $num -le $prev ]]; then\n \
    \     sorted=false\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # echo\
    \ \"is_sorted $1\"\n  # echo \"is_sorted $1\" | sed 's/ /\\n/g' | sort -n | uniq\
    \ -c | grep -q '^ *1 '\n  echo \"$1\" | sed 's/ /\\n/g' | sort -n | uniq -c |\
    \ grep -q '^ *1 '\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # return 0 if sorted, 1 if not sorted\n  # return 2 if there are duplicates\n\
    \  # return 3 if there are negative numbers\n  # return 4 if there are non-integers\n\
    \  # return 5 if there are no numbers\n  # return 6 if there are no arguments\n\
    \  # return 7 if there are more than 1 argument\n  # return 8 if there are no\
    \ spaces\n  # return 9 if there are spaces at the beginning or end of the string\n\
    \  # return 10 if there are spaces in the middle of the string\n  # return 11\
    \ if there are spaces at the beginning and end of the string\n  # return 12 if\
    \ there are spaces in the middle and at the beginning or end of the string\n \
    \ # return 13 if there are spaces in the middle and at the beginning and end of\
    \ the string\n  # return 14 if there are spaces in the middle and at the beginning\
    \ and end of the string and there are duplicates\n  # return 15 if there are spaces\
    \ in the middle and at the beginning and end of the string and there are duplicates\
    \ and there are negative numbers\n  # return 16 if there are spaces in the middle\
    \ and at the beginning and end of the string and there are duplicates and there\
    \ are negative numbers and there are non-integers\n  # return 17 if there are\
    \ spaces in the middle and at the beginning and end of the string and there are\
    \ duplicates and there are negative numbers and there are non-integers and there\
    \ are no numbers\n  # return 18 if there are spaces in the middle and at the beginning\
    \ and end of the string and there are duplicates and there are negative numbers\
    \ and there are non-integers and there are no numbers and there are no arguments\n\
    \  # return 19 if there are spaces in the middle and at the beginning and end\
    \ of the string and there are duplicates and there are negative numbers and there\
    \ are non-integers and there are no numbers and there are no arguments and there\
    \ are more than 1 argument\n  # return 20 if there are spaces in the middle and\
    \ at the beginning and end of the string and there are duplicates and there are\
    \ negative numbers and there are non-integers and there are no numbers and there\
    \ are no arguments and there are more than 1 argument and there are no spaces\n\
    \  # return 21 if there are spaces in the middle and at the beginning and end\
    \ of the string and there are dupl\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppbla4tbm.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmppbla4tbm.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=1\n  local prev=0\n  local curr=0\n  local count=0\n  for i in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$i\n      count=1\n    else\n\
    \      curr=$i\n      if [ $curr -lt $prev ]; then\n        sorted=0\n       \
    \ break\n      fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\"\n  if [[\
    \ \"$list\" == \"$sorted\" ]]; then\n    echo 'True'\n  else\n    echo 'False'\n\
    \  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=$(echo\
    \ $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if [[ $list == $sorted ]];\
    \ then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=(\"$@\")\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i\
    \ dup=0\n    local -i sorted=1\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -eq ${arr[j]} ]]; then\n     \
    \           dup=1\n            fi\n            if [[ ${arr[i]} -gt ${arr[j]} ]];\
    \ then\n                sorted=0\n            fi\n        done\n    done\n   \
    \ if [[ $dup -eq 1 ]]; then\n        echo \"False\"\n    elif [[ $sorted -eq 1\
    \ ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n  local\
    \ -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ count=0\n  local -i prev=0\n  local -i curr=0\n  local -i next=0\n  local -i\
    \ is_sorted=1\n  local -i is_dup=0\n\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1;\
    \ j<len; j++)); do\n      if [[ ${arr[i]} -eq ${arr[j]} ]]; then\n        count=$((count+1))\n\
    \      fi\n    done\n    if [[ $count -gt 1 ]]; then\n      is_dup=1\n      break\n\
    \    fi\n    count=0\n  done\n\n  if [[ $is_dup -eq 1 ]]; then\n    echo \"False\"\
    \n    return\n  fi\n\n  for ((k=0; k<len-1; k++)); do\n    prev=${arr[k]}\n  \
    \  curr=${arr[k+1]}\n    next=${arr[k+2]}\n    if [[ $prev -gt $curr ]]; then\n\
    \      is_sorted=0\n      break\n    elif [[ $curr -gt $next ]]; then\n      is_sorted=0\n\
    \      break\n    fi\n  done\n\n  if [[ $is_sorted -eq 1 ]]; then\n    echo \"\
    True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  for num in $list; do\n    if [[ $num -lt $prev ]]; then\n \
    \     sorted=false\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"$@\")\n  local\
    \ -a sorted=(\"$@\")\n  local -a uniq=(\"$@\")\n  local -i len=${#arr[@]}\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n \
    \ local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i\
    \ ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n \
    \ local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i\
    \ ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n \
    \ local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i\
    \ ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n \
    \ local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i\
    \ bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n \
    \ local -\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -lt $prev ]]; then\n      return 1\n\
    \    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr\n    local\
    \ -i i=0\n    local -i len=0\n    local -i prev=0\n    local -i curr=0\n    local\
    \ -i is_sorted=1\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    len=${#arr[@]}\n\
    \n    for ((i=0; i<len; i++)); do\n        curr=${arr[$i]}\n        if ((i > 0));\
    \ then\n            if ((curr <= prev)); then\n                is_sorted=0\n \
    \               break\n            fi\n        fi\n        prev=$curr\n    done\n\
    \n    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  local -i i\n\
    \  local -i len\n  local -i sorted\n  local -i prev\n  local -i curr\n\n  arr=($1)\n\
    \  len=${#arr[@]}\n  sorted=1\n  prev=${arr[0]}\n  for ((i=1; i<len; i++)); do\n\
    \    curr=${arr[i]}\n    if ((prev == curr)); then\n      sorted=0\n      break\n\
    \    elif ((prev > curr)); then\n      sorted=0\n      break\n    fi\n    prev=$curr\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    if\
    \ [[ $prev -gt $i ]]; then\n      sorted=false\n      break\n    fi\n    if [[\
    \ $prev -eq $i ]]; then\n      count=$((count+1))\n      if [[ $count -gt 1 ]];\
    \ then\n        sorted=false\n        break\n      fi\n    fi\n    prev=$i\n \
    \ done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=1\n\
    \  local prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    if\
    \ [ $prev -gt $i ]; then\n      sorted=0\n      break\n    fi\n    if [ $prev\
    \ -eq $i ]; then\n      count=$((count+1))\n      if [ $count -gt 1 ]; then\n\
    \        sorted=0\n        break\n      fi\n    fi\n    prev=$i\n  done\n  echo\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=$(echo\
    \ $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if [[ $list == $sorted ]];\
    \ then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=1\n  local prev=0\n  local curr=0\n  local count=0\n  for i in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$i\n      count=1\n    else\n\
    \      curr=$i\n      if [ $curr -lt $prev ]; then\n        sorted=0\n       \
    \ break\n      fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: your code here\n \
    \ # Hint: use the sort command\n  # Hint: use the uniq command\n  # Hint: use\
    \ the wc command\n  # Hint: use the tr command\n  # Hint: use the test command\n\
    \  # Hint: use the -eq operator\n  # Hint: use the -ne operator\n  # Hint: use\
    \ the -z operator\n  # Hint: use the -n operator\n  # Hint: use the -gt operator\n\
    \  # Hint: use the -lt operator\n  # Hint: use the -ge operator\n  # Hint: use\
    \ the -le operator\n  # Hint: use the -o operator\n  # Hint: use the -a operator\n\
    \  # Hint: use the -f operator\n  # Hint: use the -d operator\n  # Hint: use the\
    \ -e operator\n  # Hint: use the -s operator\n  # Hint: use the -r operator\n\
    \  # Hint: use the -w operator\n  # Hint: use the -x operator\n  # Hint: use the\
    \ -L operator\n  # Hint: use the -p operator\n  # Hint: use the -S operator\n\
    \  # Hint: use the -b operator\n  # Hint: use the -c operator\n  # Hint: use the\
    \ -u operator\n  # Hint: use the -g operator\n  # Hint: use the -k operator\n\
    \  # Hint: use the -t operator\n  # Hint: use the -z operator\n  # Hint: use the\
    \ -n operator\n  # Hint: use the -o operator\n  # Hint: use the -a operator\n\
    \  # Hint: use the -f operator\n  # Hint: use the -d operator\n  # Hint: use the\
    \ -e operator\n  # Hint: use the -s operator\n  # Hint: use the -r operator\n\
    \  # Hint: use the -w operator\n  # Hint: use the -x operator\n  # Hint: use the\
    \ -L operator\n  # Hint: use the -p operator\n  # Hint: use the -S operator\n\
    \  # Hint: use the -b operator\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzm_c510n.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpzm_c510n.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # your code here\n  # use\
    \ $1 to access the first argument\n  # use $2 to access the second argument\n\
    \  # ...\n  # use $n to access the nth argument\n  # use $# to access the number\
    \ of arguments\n  # use $@ to access all arguments\n  # use $0 to access the name\
    \ of the script\n  # use $? to access the exit status of the last command\n  #\
    \ use $$ to access the process ID of the current shell\n  # use $! to access the\
    \ process ID of the last background command\n  # use $- to access the current\
    \ options set for the shell\n  # use $_ to access the last argument of the previous\
    \ command\n  # use $IFS to access the current value of the input field separator\n\
    \  # use $PS1 to access the value of the primary prompt string\n  # use $PS2 to\
    \ access the value of the secondary prompt string\n  # use $RANDOM to access a\
    \ random number between 0 and 32767\n  # use $SECONDS to access the number of\
    \ seconds since the shell was started\n  # use $LINENO to access the current line\
    \ number in the script\n  # use $BASH_VERSION to access the version of bash\n\
    \  # use $BASH_VERSINFO to access an array containing version information\n  #\
    \ use $BASH_SOURCE to access an array containing the source filenames\n  # use\
    \ $BASH_SUBSHELL to access the current subshell level\n  # use $BASH_LINENO to\
    \ access an array containing the line numbers\n  # use $BASH_ARGC to access the\
    \ number of arguments supplied to a function\n  # use $BASH_ARGV to access an\
    \ array containing all the arguments\n  # use $BASH_EXECUTION_STRING to access\
    \ the string argument passed to the -c option\n  # use $BASH_REMATCH to access\
    \ an array containing the results of the last regex match\n  # use $BASH_COMMAND\
    \ to access the command currently being executed\n  # use $BASH_ALIASES to access\
    \ an associative array of enabled aliases\n  # use $BASH_FUNCNAME to access an\
    \ array containing the names of all shell functions currently in execution\n \
    \ # use $BASH_LINENO to access an array containing the line\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphaiqmexr.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmphaiqmexr.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Your code here\n \
    \ local list=$1\n  local prev=0\n  local curr=0\n  local count=0\n  for i in $list;\
    \ do\n    if [[ $count -eq 0 ]]; then\n      prev=$i\n      count=$((count+1))\n\
    \    else\n      curr=$i\n      if [[ $curr -lt $prev ]]; then\n        echo \"\
    False\"\n        return\n      fi\n      prev=$curr\n    fi\n  done\n  echo \"\
    True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # your code here\n  # echo\
    \ \"is_sorted $1\"\n  # echo \"is_sorted $1\" | sed 's/ /\\n/g' | sort | uniq\
    \ -c | grep -v '1 ' | wc -l\n  echo \"is_sorted $1\" | sed 's/ /\\n/g' | sort\
    \ | uniq -c | grep -v '1 ' | wc -l | grep -q '0'\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in \"${list[@]:1}\"; do\n    if [[ $i -le $prev ]]; then\n      return\
    \ 1\n    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local nums=($1)\n  local prev=${nums[0]}\n\
    \  for num in ${nums[@]:1}; do\n    if [[ $num -lt $prev ]]; then\n      return\
    \ 1\n    fi\n    prev=$num\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  IFS=' ' read\
    \ -r -a arr <<< \"$1\"\n  local prev=${arr[0]}\n  for i in \"${arr[@]:1}\"; do\n\
    \    if [[ \"$i\" -le \"$prev\" ]]; then\n      return 1\n    fi\n    prev=\"\
    $i\"\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # return 0 if sorted, 1 if not sorted\n  # return 2 if there are duplicates\n\
    \  #\n  # Example:\n  #   is_sorted \"1 2 3\"\n  #   => 0\n  #   is_sorted \"\
    1 2 3 2\"\n  #   => 2\n  #   is_sorted \"1 3 2\"\n  #   => 1\n  #   is_sorted\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\
    \ 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54\
    \ 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80\
    \ 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104\
    \ 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123\
    \ 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142\
    \ 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161\
    \ 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180\
    \ 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199\
    \ 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218\
    \ 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237\
    \ 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256\
    \ 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275\
    \ 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294\
    \ 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313\
    \ 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332\
    \ 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351\
    \ 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370\
    \ 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389\
    \ 390 391 392 393 394 395 396 397 398 399\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6_wib96h.sh: line 21: syntax error near unexpected token `}''

    /tmp/tmp6_wib96h.sh: line 21: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # return true if sorted, false otherwise\n  # if there are duplicates, return\
    \ false\n  # if there are negative numbers, return false\n  # if there are non-integers,\
    \ return false\n  # if there are no numbers, return false\n  # if there is only\
    \ one number, return true\n  # if there are no numbers, return false\n  # if there\
    \ are no numbers, return false\n  # if there are no numbers, return false\n  #\
    \ if there are no numbers, return false\n  # if there are no numbers, return false\n\
    \  # if there are no numbers, return false\n  # if there are no numbers, return\
    \ false\n  # if there are no numbers, return false\n  # if there are no numbers,\
    \ return false\n  # if there are no numbers, return false\n  # if there are no\
    \ numbers, return false\n  # if there are no numbers, return false\n  # if there\
    \ are no numbers, return false\n  # if there are no numbers, return false\n  #\
    \ if there are no numbers, return false\n  # if there are no numbers, return false\n\
    \  # if there are no numbers, return false\n  # if there are no numbers, return\
    \ false\n  # if there are no numbers, return false\n  # if there are no numbers,\
    \ return false\n  # if there are no numbers, return false\n  # if there are no\
    \ numbers, return false\n  # if there are no numbers, return false\n  # if there\
    \ are no numbers, return false\n  # if there are no numbers, return false\n  #\
    \ if there are no numbers, return false\n  # if there are no numbers, return false\n\
    \  # if there are no numbers, return false\n  # if there are no numbers, return\
    \ false\n  # if there are no numbers, return false\n  # if there are no numbers,\
    \ return false\n  # if there are no numbers, return false\n  # if there are no\
    \ numbers, return false\n  # if there are no numbers, return false\n  # if there\
    \ are no numbers, return false\n  # if there are no numbers, return false\n  #\
    \ if there are no numbers, return false\n  # if there are no numbers, return false\n\
    \  # if there are no numbers, return false\n  # if there are\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpptpbzxa2.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpptpbzxa2.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    curr=$i\n\
    \    if [ $curr -eq $prev ]; then\n      count=$((count+1))\n      if [ $count\
    \ -gt 1 ]; then\n        sorted=false\n        break\n      fi\n    fi\n    if\
    \ [ $curr -lt $prev ]; then\n      sorted=false\n      break\n    fi\n    prev=$curr\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ # $1 is a space-separated list\n  # Example:\n  # is_sorted \"1 2 3\" # True\n\
    \  # is_sorted \"1 2 2\" # False\n  # is_sorted \"1 2 3 3\" # False\n  # is_sorted\
    \ \"1 2 3 4 5\" # True\n  # is_sorted \"1 2 3 4 5 5\" # False\n  # is_sorted \"\
    1 2 3 4 5 6\" # True\n  # is_sorted \"1 2 3 4 5 6 6\" # False\n  # is_sorted \"\
    1 2 3 4 5 6 7\" # True\n  # is_sorted \"1 2 3 4 5 6 7 7\" # False\n  # is_sorted\
    \ \"1 2 3 4 5 6 7 8\" # True\n  # is_sorted \"1 2 3 4 5 6 7 8 8\" # False\n  #\
    \ is_sorted \"1 2 3 4 5 6 7 8 9\" # True\n  # is_sorted \"1 2 3 4 5 6 7 8 9 9\"\
    \ # False\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10\" # True\n  # is_sorted \"1 2\
    \ 3 4 5 6 7 8 9 10 10\" # False\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11\" # True\n\
    \  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 11\" # False\n  # is_sorted \"1 2 3 4\
    \ 5 6 7 8 9 10 11 12\" # True\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 12 12\"\
    \ # False\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 12 13\" # True\n  # is_sorted\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 13\" # False\n  # is_sorted \"1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14\" # True\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 14\" # False\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\" #\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxd71xe0s.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpxd71xe0s.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=$(echo\
    \ $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  local count=$(echo $list |\
    \ tr ' ' '\\n' | sort -n | uniq -c | grep -v ' 1 ' | wc -l)\n  if [ \"$list\"\
    \ == \"$sorted\" ] && [ $count -eq 0 ]; then\n    echo \"True\"\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n  local\
    \ -i i=0\n  local -i j=0\n  local -i len=${#arr[@]}\n  local -i prev=0\n  local\
    \ -i curr=0\n  local -i next=0\n  local -i prev_dup=0\n  local -i curr_dup=0\n\
    \  local -i next_dup=0\n  local -i dup_count=0\n  local -i dup_count_prev=0\n\
    \  local -i dup_count_curr=0\n  local -i dup_count_next=0\n  local -i dup_count_prev_prev=0\n\
    \  local -i dup_count_curr_curr=0\n  local -i dup_count_next_next=0\n  local -i\
    \ dup_count_prev_curr=0\n  local -i dup_count_curr_next=0\n  local -i dup_count_prev_next=0\n\
    \  local -i dup_count_prev_curr_next=0\n  local -i dup_count_prev_prev_curr=0\n\
    \  local -i dup_count_curr_curr_next=0\n  local -i dup_count_prev_curr_curr=0\n\
    \  local -i dup_count_prev_prev_curr_curr=0\n  local -i dup_count_prev_prev_curr_curr_next=0\n\
    \  local -i dup_count_prev_prev_curr_curr_next_next=0\n  local -i dup_count_prev_prev_curr_curr_next_next_next=0\n\
    \  local -i dup_count_prev_prev_curr_curr_next_next_next_next=0\n  local -i dup_count_prev_prev_curr_curr_next_next_next_next_next=0\n\
    \  local -i dup_count_prev_prev_curr_curr_next_next_next_next_next_next=0\n  local\
    \ -i dup_count_prev_prev_curr_curr_next_next_next_next_\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use the sort command\n  # Hint: use the uniq command\n  # Hint: use\
    \ the wc command\n  # Hint: use the tr command\n  # Hint: use the cut command\n\
    \  # Hint: use the diff command\n  # Hint: use the head command\n  # Hint: use\
    \ the tail command\n  # Hint: use the test command\n  # Hint: use the -eq operator\n\
    \  # Hint: use the -ne operator\n  # Hint: use the -z operator\n  # Hint: use\
    \ the -n operator\n  # Hint: use the -gt operator\n  # Hint: use the -lt operator\n\
    \  # Hint: use the -ge operator\n  # Hint: use the -le operator\n  # Hint: use\
    \ the -o operator\n  # Hint: use the -a operator\n  # Hint: use the -e operator\n\
    \  # Hint: use the -f operator\n  # Hint: use the -d operator\n  # Hint: use the\
    \ -r operator\n  # Hint: use the -w operator\n  # Hint: use the -x operator\n\
    \  # Hint: use the -s operator\n  # Hint: use the -t operator\n  # Hint: use the\
    \ -p operator\n  # Hint: use the -b operator\n  # Hint: use the -c operator\n\
    \  # Hint: use the -u operator\n  # Hint: use the -g operator\n  # Hint: use the\
    \ -k operator\n  # Hint: use the -l operator\n  # Hint: use the -S operator\n\
    \  # Hint: use the -G operator\n  # Hint: use the -O operator\n  # Hint: use the\
    \ -N operator\n  # Hint: use the -nt operator\n  # Hint: use the -ot operator\n\
    \  # Hint: use the -ef operator\n  # Hint: use the -o operator\n  # Hint: use\
    \ the -a operator\n  # Hint: use the -o operator\n  # Hint: use the -a operator\n\
    \  # Hint: use the -o operator\n  # H\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl0w857s2.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpl0w857s2.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=1\n  local prev=0\n  local curr=0\n  local count=0\n  for i in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$i\n      count=1\n    else\n\
    \      curr=$i\n      if [ $curr -le $prev ]; then\n        sorted=0\n       \
    \ break\n      fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in \"${list[@]:1}\"; do\n    if [[ $i -le $prev ]]; then\n      return\
    \ 1\n    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ # Hint: Use a for loop\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint: Use an\
    \ if statement\n  # Hint: Use an if statement\n  # Hint: Use an if statement\n\
    \  # Hint: Use an if statement\n  # Hint: Use an if statement\n  # Hint\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplu3gq9uy.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmplu3gq9uy.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  for i in $list; do\n    curr=$i\n    if [ $curr -lt $prev ];\
    \ then\n      echo \"False\"\n      return\n    fi\n    prev=$curr\n  done\n \
    \ echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -le $prev ]]; then\n      return 1\n\
    \    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # Write your code here\n\
    \    # $1 is a space-separated list\n    # return 0 if sorted, 1 if not sorted\n\
    \    #\n    # Example:\n    #\n    # if [ $1 -eq $2 ]; then\n    #     return\
    \ 0\n    # else\n    #     return 1\n    # fi\n    #\n    # Hint:\n    #\n   \
    \ # You can use the following to loop through the list:\n    #\n    # for i in\
    \ $1; do\n    #     echo $i\n    # done\n    #\n    # You can use the following\
    \ to get the length of the list:\n    #\n    # length=$(echo $1 | wc -w)\n   \
    \ #\n    # You can use the following to get the first element of the list:\n \
    \   #\n    # first=$(echo $1 | cut -d \" \" -f 1)\n    #\n    # You can use the\
    \ following to get the rest of the list:\n    #\n    # rest=$(echo $1 | cut -d\
    \ \" \" -f 2-)\n    #\n    # You can use the following to get the last element\
    \ of the list:\n    #\n    # last=$(echo $1 | cut -d \" \" -f $length)\n    #\n\
    \    # You can use the following to get the list without the last element:\n \
    \   #\n    # without_last=$(echo $1 | cut -d \" \" -f 1-$(($length-1)))\n    #\n\
    \    # You can use the following to get the list without the first element:\n\
    \    #\n    # without_first=$(echo $1 | cut -d \" \" -f 2-$length)\n    #\n  \
    \  # You can use the following to get the list without the first and last element:\n\
    \    #\n    # without_first_and_last=$(echo $1 | cut -d \" \" -f 2-$(($length-1)))\n\
    \    #\n    # You can use the following to get the list without the first and\
    \ last element:\n    #\n    # without_first_and_last=$(echo $1 | cut -d \" \"\
    \ -f 2-$(($length-1)))\n    #\n    # You can use the following to get the list\
    \ without\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdrshw1ob.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmpdrshw1ob.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # TODO: Implement me\n \
    \   # Hint: You can use the following syntax to iterate over a list:\n    # for\
    \ i in $1; do\n    #   echo $i\n    # done\n    #\n    # Hint: You can use the\
    \ following syntax to compare two numbers:\n    # if [ $1 -lt $2 ]; then\n   \
    \ #   echo \"True\"\n    # else\n    #   echo \"False\"\n    # fi\n    #\n   \
    \ # Hint: You can use the following syntax to return a value:\n    # return $1\n\
    \    #\n    # Hint: You can use the following syntax to return a value:\n    #\
    \ return $1\n    #\n    # Hint: You can use the following syntax to return a value:\n\
    \    # return $1\n    #\n    # Hint: You can use the following syntax to return\
    \ a value:\n    # return $1\n    #\n    # Hint: You can use the following syntax\
    \ to return a value:\n    # return $1\n    #\n    # Hint: You can use the following\
    \ syntax to return a value:\n    # return $1\n    #\n    # Hint: You can use the\
    \ following syntax to return a value:\n    # return $1\n    #\n    # Hint: You\
    \ can use the following syntax to return a value:\n    # return $1\n    #\n  \
    \  # Hint: You can use the following syntax to return a value:\n    # return $1\n\
    \    #\n    # Hint: You can use the following syntax to return a value:\n    #\
    \ return $1\n    #\n    # Hint: You can use the following syntax to return a value:\n\
    \    # return $1\n    #\n    # Hint: You can use the following syntax to return\
    \ a value:\n    # return $1\n    #\n    # Hint: You can use the following syntax\
    \ to return a value:\n    # return $1\n    #\n    # Hint: You can use the following\
    \ syntax to return a value:\n    # return $1\n    #\n    # Hint: You can use the\
    \ following syntax to return a value:\n    # return $1\n    #\n    # Hint: You\
    \ can use the following syntax to return\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv2td6lzv.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmpv2td6lzv.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in \"${list[@]:1}\"; do\n    if [[ $i -le $prev ]]; then\n      return\
    \ 1\n    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 0
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  local curr=0\n  local count=0\n  for num in $list; do\n   \
    \ if [ $prev -eq $curr ]; then\n      count=$((count+1))\n    else\n      count=0\n\
    \    fi\n    if [ $prev -gt $curr ]; then\n      sorted=false\n    fi\n    prev=$curr\n\
    \    curr=$num\n    if [ $count -gt 1 ]; then\n      sorted=false\n    fi\n  done\n\
    \  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=($1)\n    local\
    \ prev=${list[0]}\n    for i in ${list[@]:1}; do\n        if [[ $i -le $prev ]];\
    \ then\n            return 1\n        fi\n        prev=$i\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local sorted=1\n\
    \  for ((i=0; i<${#list[@]}-1; i++)); do\n    if (( ${list[$i]} > ${list[$i+1]}\
    \ )); then\n      sorted=0\n      break\n    fi\n  done\n  echo $sorted\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local sorted=1\n\
    \  local prev=${list[0]}\n  for i in ${list[@]:1}; do\n    if [[ $i -le $prev\
    \ ]]; then\n      sorted=0\n      break\n    fi\n    prev=$i\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=true\n  local prev=0\n  for num in $list; do\n    if [ $num -lt $prev\
    \ ]; then\n      sorted=false\n      break\n    fi\n    prev=$num\n  done\n  echo\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use the sort command\n  # Hint: use the uniq command\n  # Hint: use\
    \ the wc command\n  # Hint: use the cut command\n  # Hint: use the tr command\n\
    \  # Hint: use the diff command\n  # Hint: use the head command\n  # Hint: use\
    \ the tail command\n  # Hint: use the echo command\n  # Hint: use the test command\n\
    \  # Hint: use the if command\n  # Hint: use the exit command\n  # Hint: use the\
    \ return command\n  # Hint: use the true command\n  # Hint: use the false command\n\
    \  # Hint: use the $# variable\n  # Hint: use the $@ variable\n  # Hint: use the\
    \ $1 variable\n  # Hint: use the $2 variable\n  # Hint: use the $3 variable\n\
    \  # Hint: use the $4 variable\n  # Hint: use the $5 variable\n  # Hint: use the\
    \ $6 variable\n  # Hint: use the $7 variable\n  # Hint: use the $8 variable\n\
    \  # Hint: use the $9 variable\n  # Hint: use the $0 variable\n  # Hint: use the\
    \ $? variable\n  # Hint: use the $! variable\n  # Hint: use the $* variable\n\
    \  # Hint: use the $[] variable\n  # Hint: use the $() variable\n  # Hint: use\
    \ the $< variable\n  # Hint: use the $> variable\n  # Hint: use the $= variable\n\
    \  # Hint: use the $- variable\n  # Hint: use the $_ variable\n  # Hint: use the\
    \ $$ variable\n  # Hint: use the $? variable\n  # Hint: use the $# variable\n\
    \  # Hint: use the $@ variable\n  # Hint: use the $1 variable\n  # Hint: use the\
    \ $2 variable\n  # Hint: use the $3 variable\n  # Hint: use the $4 variable\n\
    \  # Hint: use the $5 variable\n  # Hint: use the $6 variable\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfjf6utxb.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpfjf6utxb.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # TODO: implement this function\n\
    \    # Example:\n    # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n \
    \   # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | grep -q -x \"$1\"\n\
    \    # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | grep -q -x \"$1\"\
    \ && echo \"True\" || echo \"False\"\n    # echo \"$1\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' ' | grep -q -x \"$1\" && echo \"True\" || echo \"False\"\n \
    \   # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | grep -q -x \"$1\"\
    \ && echo \"True\" || echo \"False\"\n    # echo \"$1\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' ' | grep -q -x \"$1\" && echo \"True\" || echo \"False\"\n \
    \   # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | grep -q -x \"$1\"\
    \ && echo \"True\" || echo \"False\"\n    # echo \"$1\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' ' | grep -q -x \"$1\" && echo \"True\" || echo \"False\"\n \
    \   # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | grep -q -x \"$1\"\
    \ && echo \"True\" || echo \"False\"\n    # echo \"$1\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' ' | grep -q -x \"$1\" && echo \"True\" || echo \"False\"\n \
    \   # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | grep -q -x \"$1\"\
    \ && echo \"True\" || echo \"False\"\n    # echo \"$1\" | tr ' ' '\\n' | sort\
    \ -n | tr\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy8fkvvuf.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmpy8fkvvuf.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"$@\")\n  local\
    \ -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n))\n  local -a uniq=($(printf\
    \ \"%s\\n\" \"${sorted[@]}\" | uniq))\n  if [[ \"${#arr[@]}\" -eq \"${#uniq[@]}\"\
    \ ]]; then\n    for ((i=0; i<${#arr[@]}; i++)); do\n      if [[ \"${arr[$i]}\"\
    \ -ne \"${sorted[$i]}\" ]]; then\n        echo \"False\"\n        return\n   \
    \   fi\n    done\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=\"$(echo \"$list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\"\n  if [[\
    \ \"$list\" == \"$sorted\" ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # Write your code here\n\
    \    # Use echo to print your answer\n    # You can use $1 to access the first\
    \ argument\n    # You can use $2 to access the second argument\n    # You can\
    \ use $3 to access the third argument\n    # You can use $4 to access the fourth\
    \ argument\n    # You can use $5 to access the fifth argument\n    # You can use\
    \ $6 to access the sixth argument\n    # You can use $7 to access the seventh\
    \ argument\n    # You can use $8 to access the eighth argument\n    # You can\
    \ use $9 to access the ninth argument\n    # You can use ${10} to access the tenth\
    \ argument\n    # You can use ${11} to access the eleventh argument\n    # You\
    \ can use ${12} to access the twelfth argument\n    # You can use ${13} to access\
    \ the thirteenth argument\n    # You can use ${14} to access the fourteenth argument\n\
    \    # You can use ${15} to access the fifteenth argument\n    # You can use ${16}\
    \ to access the sixteenth argument\n    # You can use ${17} to access the seventeenth\
    \ argument\n    # You can use ${18} to access the eighteenth argument\n    # You\
    \ can use ${19} to access the nineteenth argument\n    # You can use ${20} to\
    \ access the twentieth argument\n    # You can use ${21} to access the twenty-first\
    \ argument\n    # You can use ${22} to access the twenty-second argument\n   \
    \ # You can use ${23} to access the twenty-third argument\n    # You can use ${24}\
    \ to access the twenty-fourth argument\n    # You can use ${25} to access the\
    \ twenty-fifth argument\n    # You can use ${26} to access the twenty-sixth argument\n\
    \    # You can use ${27} to access the twenty-seventh argument\n    # You can\
    \ use ${28} to access the twenty-eighth argument\n    # You can use ${29} to access\
    \ the twenty-ninth argument\n    # You can use ${30} to access the thirtieth argument\n\
    \    # You can use ${31} to access the thirty-first argument\n    # You can use\
    \ ${32} to access the thirty-second argument\n    # You can use ${33} to access\
    \ the thirty-third argument\n    # You can\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3l9ib1oh.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp3l9ib1oh.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=true\n  local prev=0\n  local curr=0\n  local count=0\n  for num in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$num\n      count=$((count+1))\n\
    \    else\n      curr=$num\n      if [ $curr -lt $prev ]; then\n        sorted=false\n\
    \        break\n      fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=true\n  local prev=0\n  local curr=0\n  local count=0\n  for i in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$i\n      count=$((count+1))\n\
    \    else\n      curr=$i\n      if [ $curr -lt $prev ]; then\n        sorted=false\n\
    \        break\n      fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n  local\
    \ prev=${arr[0]}\n  for i in ${arr[@]:1}; do\n    if [[ $i -le $prev ]]; then\n\
    \      return 1\n    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Implement me\n  #\
    \ Check if the list is sorted\n  # If it is, echo \"True\"\n  # If it isn't, echo\
    \ \"False\"\n  #\n  # Hint: Use a for loop\n  # Hint: Use the -gt and -lt operators\n\
    \  # Hint: Use the -eq operator\n  # Hint: Use the -ne operator\n  # Hint: Use\
    \ the -z operator\n  # Hint: Use the -n operator\n  # Hint: Use the continue keyword\n\
    \  # Hint: Use the break keyword\n  # Hint: Use the exit keyword\n  # Hint: Use\
    \ the echo keyword\n  # Hint: Use the return keyword\n  # Hint: Use the test keyword\n\
    \  # Hint: Use the test command\n  # Hint: Use the test command with the -eq operator\n\
    \  # Hint: Use the test command with the -ne operator\n  # Hint: Use the test\
    \ command with the -z operator\n  # Hint: Use the test command with the -n operator\n\
    \  # Hint: Use the test command with the -gt operator\n  # Hint: Use the test\
    \ command with the -lt operator\n  # Hint: Use the test command with the -ge operator\n\
    \  # Hint: Use the test command with the -le operator\n  # Hint: Use the test\
    \ command with the -e operator\n  # Hint: Use the test command with the -f operator\n\
    \  # Hint: Use the test command with the -d operator\n  # Hint: Use the test command\
    \ with the -r operator\n  # Hint: Use the test command with the -w operator\n\
    \  # Hint: Use the test command with the -x operator\n  # Hint: Use the test command\
    \ with the -s operator\n  # Hint: Use the test command with the -t operator\n\
    \  # Hint: Use the test command with the -o operator\n  # Hint: Use the test command\
    \ with the -O operator\n  # Hint: Use the test command with the -G operator\n\
    \  # Hint: Use the test command with the -L operator\n  # Hint: Use the test command\
    \ with the -nt operator\n  # Hint: Use the test command with the -ot operator\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_ed9e6n5.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmp_ed9e6n5.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a nums=($1)\n  local\
    \ -i nums_len=${#nums[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local\
    \ -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\
    \ -i kkk=0\n  local -i lll=0\n  local -i mmm=\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # Use\
    \ echo to print result\n  # No need for an explicit return\n  #echo \"True\"\n\
    \  #echo \"False\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n \
    \ #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo\
    \ \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"\
    True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\
    \n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n \
    \ #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo\
    \ \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"\
    False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\
    \n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n \
    \ #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo\
    \ \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"\
    True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\
    \n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n \
    \ #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo\
    \ \"False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"\
    False\"\n  #echo \"True\"\n  #echo \"False\"\n  #echo \"True\"\n  #echo \"False\"\
    \n  #echo \"True\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4azdr2_v.sh: line 82: syntax error near unexpected token `}''

    /tmp/tmp4azdr2_v.sh: line 82: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use a for loop\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\
    \ Hint: use an if statement\n  # Hint: use an if statement\n  # Hint: use an if\
    \ statement\n  # Hint: use an if statement\n  # Hint: use an if statement\n  #\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcnbpp3kv.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmpcnbpp3kv.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr=()\n    local\
    \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i count=0\n    local\
    \ -i len=0\n    local -i sorted=0\n    local -i dup=0\n    local -i curr=0\n \
    \   local -i prev=0\n    local -i next=0\n    local -i first=0\n    local -i last=0\n\
    \    local -i mid=0\n    local -i mid_prev=0\n    local -i mid_next=0\n    local\
    \ -i mid_prev_count=0\n    local -i mid_next_count=0\n    local -i mid_count=0\n\
    \    local -i mid_prev_count_prev=0\n    local -i mid_next_count_prev=0\n    local\
    \ -i mid_count_prev=0\n    local -i mid_prev_count_next=0\n    local -i mid_next_count_next=0\n\
    \    local -i mid_count_next=0\n    local -i mid_prev_count_prev_prev=0\n    local\
    \ -i mid_next_count_prev_prev=0\n    local -i mid_count_prev_prev=0\n    local\
    \ -i mid_prev_count_next_next=0\n    local -i mid_next_count_next_next=0\n   \
    \ local -i mid_count_next_next=0\n    local -i mid_prev_count_prev_prev_prev=0\n\
    \    local -i mid_next_count_prev_prev_prev=0\n    local -i mid_count_prev_prev_prev=0\n\
    \    local -i mid_prev_count_next_next_next=0\n    local -i mid_next_count_next_next_next=0\n\
    \    local -i mid_count_next_next_next=0\n    local -i mid_prev_count_prev_prev_prev_prev=0\n\
    \    local -i mid_next_count_prev_prev_prev_prev=0\n    local -i mid_count_prev_prev_prev_prev=0\n\
    \    local -i mid_prev_count_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local -a nums=($1)\n   \
    \ local -i i=0\n    local -i j=0\n    local -i len=${#nums[@]}\n    local -i num_duplicates=0\n\
    \    local -i num_duplicates_allowed=1\n    local -i num_duplicates_allowed_for_last_num=1\n\
    \    local -i last_num=0\n    local -i num=0\n    local -i last_num_duplicates=0\n\
    \    local -i num_duplicates_allowed_for_last_num=1\n    local -i last_num_duplicates_allowed=1\n\
    \    local -i last_num_duplicates_allowed_for_last_num=1\n    local -i last_last_num=0\n\
    \    local -i last_last_num_duplicates=0\n    local -i last_last_num_duplicates_allowed=1\n\
    \    local -i last_last_num_duplicates_allowed_for_last_num=1\n    local -i last_last_last_num=0\n\
    \    local -i last_last_last_num_duplicates=0\n    local -i last_last_last_num_duplicates_allowed=1\n\
    \    local -i last_last_last_num_duplicates_allowed_for_last_num=1\n    local\
    \ -i last_last_last_last_num=0\n    local -i last_last_last_last_num_duplicates=0\n\
    \    local -i last_last_last_last_num_duplicates_allowed=1\n    local -i last_last_last_last_num_duplicates_allowed_for_last_num=1\n\
    \    local -i last_last_last_last_last_num=0\n    local -i last_last_last_last_last_num_duplicates=0\n\
    \    local -i last_last_last_last_last_num_duplicates_allowed=1\n    local -i\
    \ last_last_last_last_last_num_duplicates_allowed_for_last_num=1\n    local -i\
    \ last_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a list=($1)\n  local\
    \ -i i=0\n  local -i len=${#list[@]}\n  local -i j=0\n  local -i k=0\n  local\
    \ -i dup=0\n  local -i sorted=1\n  # check for duplicates\n  for ((i=0; i<len;\
    \ i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [ ${list[i]} -eq ${list[j]}\
    \ ]; then\n        ((dup++))\n      fi\n    done\n  done\n  # check for sorted\n\
    \  for ((k=0; k<len-1; k++)); do\n    if [ ${list[k]} -gt ${list[k+1]} ]; then\n\
    \      ((sorted=0))\n    fi\n  done\n  if [ $dup -gt 0 ]; then\n    echo \"False\"\
    \n  elif [ $sorted -eq 1 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\
    \n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local -a arr\n    local\
    \ -i i\n    local -i len\n    local -i prev\n    local -i curr\n    arr=($1)\n\
    \    len=${#arr[@]}\n    prev=${arr[0]}\n    for ((i=1; i<len; i++)); do\n   \
    \     curr=${arr[i]}\n        if ((curr < prev)); then\n            echo \"False\"\
    \n            return\n        fi\n        prev=$curr\n    done\n    echo \"True\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    curr=$i\n\
    \    if [ $curr -lt $prev ]; then\n      return 1\n    fi\n    if [ $curr -eq\
    \ $prev ]; then\n      count=$((count+1))\n      if [ $count -gt 1 ]; then\n \
    \       return 1\n      fi\n    fi\n    prev=$curr\n  done\n  return 0\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -le $prev ]]; then\n      echo \"False\"\
    \n      return\n    fi\n    prev=$i\n  done\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -le $prev ]]; then\n      return 1\n\
    \    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local sorted=1\n  for i in $list; do\n    if [ $prev -eq 0\
    \ ]; then\n      prev=$i\n    else\n      curr=$i\n      if [ $prev -gt $curr\
    \ ]; then\n        sorted=0\n        break\n      fi\n      prev=$curr\n    fi\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=($1)\n    local\
    \ prev=${list[0]}\n    for i in \"${list[@]:1}\"; do\n        if [[ $i -le $prev\
    \ ]]; then\n            return 1\n        fi\n        prev=$i\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n  local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n\
    \  local -a uniq=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n\
    \  if [[ \"${arr[@]}\" == \"${sorted[@]}\" ]] && [[ \"${arr[@]}\" == \"${uniq[@]}\"\
    \ ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=$1\n    local\
    \ sorted=true\n    local prev=0\n    local curr=0\n    local count=0\n    for\
    \ i in $list; do\n        curr=$i\n        if [ $curr -lt $prev ]; then\n    \
    \        sorted=false\n            break\n        fi\n        if [ $curr -eq $prev\
    \ ]; then\n            count=$((count+1))\n            if [ $count -gt 1 ]; then\n\
    \                sorted=false\n                break\n            fi\n       \
    \ fi\n        prev=$curr\n    done\n    echo $sorted\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  for num in $list; do\n    if [[ $num -lt $prev ]]; then\n \
    \     sorted=false\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=1\n\
    \  local prev=0\n  for i in $list; do\n    if [ $i -lt $prev ]; then\n      sorted=0\n\
    \      break\n    fi\n    prev=$i\n  done\n  echo $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local sorted=1\n\
    \  local last=${list[0]}\n  for i in ${list[@]:1}; do\n    if [[ $i -le $last\
    \ ]]; then\n      sorted=0\n      break\n    fi\n    last=$i\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # your code here\n  # use\
    \ $1 to access the first argument\n  # use $2 to access the second argument\n\
    \  # use $3 to access the third argument\n  # ...\n  # use $n to access the nth\
    \ argument\n  # use $# to access the number of arguments\n  # use $@ to access\
    \ all arguments\n  # use $0 to access the name of the script\n  # use $* to access\
    \ all arguments as a single string\n  # use $? to access the exit status of the\
    \ last command\n  # use $$ to access the process ID of the current shell\n  #\
    \ use $! to access the process ID of the last background command\n  # use $- to\
    \ access the current options set for the shell\n  # use $_ to access the last\
    \ argument of the previous command\n  # use $IFS to access the Internal Field\
    \ Separator\n  # use $PS1 to access the Primary Prompt string\n  # use $PS2 to\
    \ access the Secondary Prompt string\n  # use $RANDOM to access a random number\n\
    \  # use $SECONDS to access the number of seconds since the shell was started\n\
    \  # use $LINENO to access the current line number in the script\n  # use $OLDPWD\
    \ to access the previous working directory\n  # use $PWD to access the current\
    \ working directory\n  # use $REPLY to access the default variable for the read\
    \ command\n  # use $UID to access the user ID of the current user\n  # use $BASH\
    \ to access the bash version\n  # use $BASH_ENV to access the startup file read\
    \ when the shell is invoked\n  # use $BASH_VERSION to access the bash version\n\
    \  # use $BASH_VERSINFO to access the bash version as an array\n  # use $BASH_VERSINFO[0]\
    \ to access the major version number\n  # use $BASH_VERSINFO[1] to access the\
    \ minor version number\n  # use $BASH_VERSINFO[2] to access the patch level\n\
    \  # use $BASH_VERSINFO[3] to access the build version\n  # use $BASH_VERSINFO[4]\
    \ to access the release status\n  # use $BASH_VERSINFO[5] to access the value\
    \ of MACHTYPE\n  # use $B\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5kp1zomk.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp5kp1zomk.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local sorted=true\n  for i in $list; do\n    curr=$i\n    if\
    \ [ $curr -lt $prev ]; then\n      sorted=false\n      break\n    fi\n    prev=$curr\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=($1)\n    local\
    \ prev=${list[0]}\n    for i in ${list[@]:1}; do\n        if [[ $i -lt $prev ]];\
    \ then\n            echo \"False\"\n            return\n        fi\n        prev=$i\n\
    \    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local next=0\n  local prev_count=0\n  local curr_count=0\n\
    \  local next_count=0\n  local sorted=1\n  local i=0\n  local len=0\n  local num=0\n\
    \  local count=0\n  local prev_num=0\n  local curr_num=0\n  local next_num=0\n\
    \n  len=${#list}\n  for (( i=0; i<len; i++ )); do\n    num=${list:i:1}\n    if\
    \ [[ $num == \" \" ]]; then\n      continue\n    fi\n    if [[ $num == $prev_num\
    \ ]]; then\n      prev_count=$((prev_count+1))\n    else\n      prev_num=$num\n\
    \      prev_count=1\n    fi\n    if [[ $num == $curr_num ]]; then\n      curr_count=$((curr_count+1))\n\
    \    else\n      curr_num=$num\n      curr_count=1\n    fi\n    if [[ $num ==\
    \ $next_num ]]; then\n      next_count=$((next_count+1))\n    else\n      next_num=$num\n\
    \      next_count=1\n    fi\n    if [[ $prev_count -gt 1 ]]; then\n      sorted=0\n\
    \      break\n    fi\n    if [[ $curr_count -gt 1 ]]; then\n      sorted=0\n \
    \     break\n    fi\n    if [[ $next_count -gt 1 ]]; then\n      sorted=0\n  \
    \    break\n    fi\n    if [[ $prev -gt $curr ]]; then\n      sorted=0\n     \
    \ break\n    fi\n    prev=$curr\n    curr=$next\n    next=$num\n  done\n  echo\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"$@\")\n  local\
    \ -a sorted=(\"$@\")\n  local -a uniq=(\"$@\")\n  local -a uniq_sorted=(\"$@\"\
    )\n  local -a uniq_sorted_rev=(\"$@\")\n  local -a uniq_sorted_rev_rev=(\"$@\"\
    )\n  local -a uniq_sorted_rev_rev_rev=(\"$@\")\n  local -a uniq_sorted_rev_rev_rev_rev=(\"\
    $@\")\n  local -a uniq_sorted_rev_rev_rev_rev_rev=(\"$@\")\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev=(\"\
    $@\")\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev_rev=(\"$@\")\n  local -a\
    \ uniq_sorted_rev_rev_rev_rev_rev_rev_rev_rev=(\"$@\")\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev=(\"\
    $@\")\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=(\"$@\"\
    )\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=(\"$@\"\
    )\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=(\"\
    $@\")\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=(\"\
    $@\")\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=(\"\
    $@\")\n  local -a uniq_sorted_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=(\"\
    $\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpew_xjphg.sh: line 48: unexpected EOF while looking for matching
    `"''

    /tmp/tmpew_xjphg.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Your code here\n \
    \ # Hint: You can use the sort command to sort a list\n  # and then compare it\
    \ to the original list.\n  #\n  # Example:\n  #\n  # $ echo \"1 2 3\" | sort\n\
    \  # 1 2 3\n  #\n  # $ echo \"1 2 3\" | sort | tr ' ' '\\n'\n  # 1\n  # 2\n  #\
    \ 3\n  #\n  # $ echo \"1 2 3\" | sort | tr ' ' '\\n' | paste -sd ' ' -\n  # 1\
    \ 2 3\n  #\n  # $ echo \"1 2 3\" | sort | tr ' ' '\\n' | paste -sd ' ' - | wc\
    \ -w\n  # 3\n  #\n  # $ echo \"1 2 3\" | sort | tr ' ' '\\n' | paste -sd ' ' -\
    \ | wc -w | tr -d ' '\n  # 3\n  #\n  # $ echo \"1 2 3\" | sort | tr ' ' '\\n'\
    \ | paste -sd ' ' - | wc -w | tr -d ' ' | wc -c\n  # 1\n  #\n  # $ echo \"1 2\
    \ 3\" | sort | tr ' ' '\\n' | paste -sd ' ' - | wc -w | tr -d ' ' | wc -c | tr\
    \ -d ' '\n  # 1\n  #\n  # $ echo \"1 2 3\" | sort | tr ' ' '\\n' | paste -sd '\
    \ ' - | wc -w | tr -d ' ' | wc -c | tr -d ' ' | wc -c\n  # 1\n  #\n  # $ echo\
    \ \"1 2 3\" | sort | tr ' ' '\\n' | paste -sd ' ' - | wc -w | tr -d ' ' | wc -c\
    \ | tr -d ' ' | wc -c | tr -d ' '\n  # 1\n  #\n  # $ echo \"1 2 3\" | sort | tr\
    \ ' ' '\\n' | paste -sd ' ' - | wc -w | tr -d ' ' | wc -c | tr -d ' ' | wc -c\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8thmcq7o.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp8thmcq7o.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=$(echo\
    \ $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  local uniq=$(echo $sorted\
    \ | tr ' ' '\\n' | uniq | tr '\\n' ' ')\n  if [ \"$sorted\" == \"$uniq\" ]; then\n\
    \    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=true\n  local prev=0\n  local curr=0\n  local count=0\n  for i in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$i\n      count=$((count+1))\n\
    \    else\n      curr=$i\n      if [ $curr -lt $prev ]; then\n        sorted=false\n\
    \        break\n      fi\n      count=$((count+1))\n      prev=$curr\n    fi\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: sort the list and compare it to the original\n  # Hint: use the -u\
    \ flag to sort to remove duplicates\n  # Hint: use the -n flag to sort to sort\
    \ numerically\n  # Hint: use the -c flag to sort to check if sorted\n  # Hint:\
    \ use the -z flag to test if a string is empty\n  # Hint: use the echo command\
    \ to format your output\n  # Hint: use the return command to return the appropriate\
    \ value\n  # Hint: use the exit command to exit with the right status\n  # Hint:\
    \ use the read command to read the input into a variable\n  # Hint: use the set\
    \ command to set the IFS variable to a newline\n  # Hint: use the set command\
    \ to set the IFS variable to a space\n  # Hint: use the set command to set the\
    \ IFS variable to a tab\n  # Hint: use the set command to set the IFS variable\
    \ to a comma\n  # Hint: use the set command to set the IFS variable to a semicolon\n\
    \  # Hint: use the set command to set the IFS variable to a colon\n  # Hint: use\
    \ the set command to set the IFS variable to a backslash\n  # Hint: use the set\
    \ command to set the IFS variable to a forward slash\n  # Hint: use the set command\
    \ to set the IFS variable to a pipe\n  # Hint: use the set command to set the\
    \ IFS variable to a caret\n  # Hint: use the set command to set the IFS variable\
    \ to a tilde\n  # Hint: use the set command to set the IFS variable to a backtick\n\
    \  # Hint: use the set command to set the IFS variable to a dollar sign\n  # Hint:\
    \ use the set command to set the IFS variable to a question mark\n  # Hint: use\
    \ the set command to set the IFS variable to an exclamation point\n  # Hint: use\
    \ the set command to set the IFS variable to an at sign\n  # Hint: use the set\
    \ command to set the IFS variable to a pound sign\n  # Hint: use the set command\
    \ to set the IFS variable to a percent\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgj3spyr7.sh: line 37: syntax error near unexpected token `}''

    /tmp/tmpgj3spyr7.sh: line 37: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local len=${#list[@]}\n\
    \  local i=0\n  local j=0\n  local sorted=1\n  local duplicates=0\n\n  for ((i=0;\
    \ i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${list[$i]}\
    \ -eq ${list[$j]} ]]; then\n        duplicates=1\n      fi\n      if [[ ${list[$i]}\
    \ -gt ${list[$j]} ]]; then\n        sorted=0\n      fi\n    done\n  done\n\n \
    \ if [[ $sorted -eq 1 && $duplicates -eq 0 ]]; then\n    echo \"True\"\n  else\n\
    \    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # Hint:\
    \ You can use a for loop to iterate through the list.\n  # Hint: You can use the\
    \ -gt (greater than) operator to compare\n  # numbers\n  # Hint: You can use the\
    \ -ne (not equal) operator to compare\n  # strings\n  # Hint: You can use the\
    \ -z (zero length) operator to check if a\n  # string is empty\n  # Hint: You\
    \ can use the -n (non-zero length) operator to check if\n  # a string is not empty\n\
    \  # Hint: You can use the -e (file exists) operator to check if a\n  # file exists\n\
    \  # Hint: You can use the -f (file exists and is a regular file)\n  # operator\
    \ to check if a file exists and is a regular file\n  # Hint: You can use the -d\
    \ (file exists and is a directory)\n  # operator to check if a file exists and\
    \ is a directory\n  # Hint: You can use the -r (file exists and is readable) operator\n\
    \  # to check if a file exists and is readable\n  # Hint: You can use the -w (file\
    \ exists and is writable) operator\n  # to check if a file exists and is writable\n\
    \  # Hint: You can use the -x (file exists and is executable)\n  # operator to\
    \ check if a file exists and is executable\n  # Hint: You can use the -s (file\
    \ exists and has size greater than\n  # zero) operator to check if a file exists\
    \ and has size greater\n  # than zero\n  # Hint: You can use the -L (file exists\
    \ and is a symbolic link)\n  # operator to check if a file exists and is a symbolic\
    \ link\n  # Hint: You can use the -p (file exists and is a named pipe)\n  # operator\
    \ to check if a file exists and is a named pipe\n  # Hint: You can use the -S\
    \ (file exists and is a socket) operator\n  # to check if a file exists and is\
    \ a socket\n  # Hint: You can use the -b (file exists and is a block special\n\
    \  # file) operator to check if a file exists and is a block special\n  # file\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1czq7oe.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmph1czq7oe.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"$@\")\n  local\
    \ -a sorted\n  local -a uniq\n  local -a dup\n  local -a dup_sorted\n  local -a\
    \ dup_uniq\n  local -a dup_dup\n  local -a dup_dup_sorted\n  local -a dup_dup_uniq\n\
    \  local -a dup_dup_dup\n  local -a dup_dup_dup_sorted\n  local -a dup_dup_dup_uniq\n\
    \  local -a dup_dup_dup_dup\n  local -a dup_dup_dup_dup_sorted\n  local -a dup_dup_dup_dup_uniq\n\
    \  local -a dup_dup_dup_dup_dup\n  local -a dup_dup_dup_dup_dup_sorted\n  local\
    \ -a dup_dup_dup_dup_dup_uniq\n  local -a dup_dup_dup_dup_dup_dup\n  local -a\
    \ dup_dup_dup_dup_dup_dup_sorted\n  local -a dup_dup_dup_dup_dup_dup_uniq\n  local\
    \ -a dup_dup_dup_dup_dup_dup_dup\n  local -a dup_dup_dup_dup_dup_dup_dup_sorted\n\
    \  local -a dup_dup_dup_dup_dup_dup_dup_uniq\n  local -a dup_dup_dup_dup_dup_dup_dup_dup\n\
    \  local -a dup_dup_dup_dup_dup_dup_dup_dup_sorted\n  local -a dup_dup_dup_dup_dup_dup_dup_dup_uniq\n\
    \  local -a dup_dup_dup_dup_dup_dup_dup_dup_dup\n  local -a dup_dup_dup_du\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  IFS=' ' read\
    \ -r -a arr <<< \"$1\"\n  local i\n  local prev\n  for i in \"${arr[@]}\"; do\n\
    \    if [[ -n $prev ]]; then\n      if [[ $i -lt $prev ]]; then\n        echo\
    \ \"False\"\n        return\n      fi\n    fi\n    prev=$i\n  done\n  echo \"\
    True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use the sort command\n  # Hint: use the uniq command\n  # Hint: use\
    \ the wc command\n  # Hint: use the tr command\n  # Hint: use the test command\n\
    \  # Hint: use the -eq operator\n  # Hint: use the -z operator\n  # Hint: use\
    \ the -n operator\n  # Hint: use the -gt operator\n  # Hint: use the -lt operator\n\
    \  # Hint: use the -ge operator\n  # Hint: use the -le operator\n  # Hint: use\
    \ the -ne operator\n  # Hint: use the -o operator\n  # Hint: use the -a operator\n\
    \  # Hint: use the -d operator\n  # Hint: use the -e operator\n  # Hint: use the\
    \ -f operator\n  # Hint: use the -r operator\n  # Hint: use the -w operator\n\
    \  # Hint: use the -x operator\n  # Hint: use the -s operator\n  # Hint: use the\
    \ -z operator\n  # Hint: use the -n operator\n  # Hint: use the -o operator\n\
    \  # Hint: use the -a operator\n  # Hint: use the -d operator\n  # Hint: use the\
    \ -e operator\n  # Hint: use the -f operator\n  # Hint: use the -r operator\n\
    \  # Hint: use the -w operator\n  # Hint: use the -x operator\n  # Hint: use the\
    \ -s operator\n  # Hint: use the -z operator\n  # Hint: use the -n operator\n\
    \  # Hint: use the -o operator\n  # Hint: use the -a operator\n  # Hint: use the\
    \ -d operator\n  # Hint: use the -e operator\n  # Hint: use the -f operator\n\
    \  # Hint: use the -r operator\n  # Hint: use the -w operator\n  # Hint: use the\
    \ -x operator\n  # Hint: use the -s operator\n  # Hint: use the -z operator\n\
    \  # Hint: use the -n operator\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpatr1ajss.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpatr1ajss.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Implement me\n  #\
    \ Check if the list is sorted\n  # Return 0 if sorted, 1 if not sorted\n  #\n\
    \  # Example:\n  #\n  # $1 = \"1 2 3 4\"\n  # return 0\n  #\n  # $1 = \"1 2 3\
    \ 4 4\"\n  # return 1\n  #\n  # $1 = \"1 2 3\"\n  # return 0\n  #\n  # $1 = \"\
    1 2 3 3\"\n  # return 1\n  #\n  # $1 = \"1 2 3 4 3\"\n  # return 1\n  #\n  # $1\
    \ = \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\
    \ 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53\
    \ 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\
    \ 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103\
    \ 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122\
    \ 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141\
    \ 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160\
    \ 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179\
    \ 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198\
    \ 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217\
    \ 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236\
    \ 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255\
    \ 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274\
    \ 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293\
    \ 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312\
    \ 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331\
    \ 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350\
    \ 351 352 353 354 355 356 357 358 359 360 361 362 363\n}\n\ncandidate() {\n  \
    \  is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuys9jww1.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmpuys9jww1.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    arr=($1)\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n    \
    \        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                return 1\n  \
    \          fi\n        done\n    done\n    return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local len=${#list[@]}\n\
    \  local prev=${list[0]}\n  for (( i=1; i<len; i++ )); do\n    if [[ ${list[$i]}\
    \ -lt $prev ]]; then\n      echo \"False\"\n      return\n    fi\n    prev=${list[$i]}\n\
    \  done\n  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # echo \"TODO\"\n  echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo\
    \ \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  #\
    \ echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n\
    \  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\n  # echo \"is_sorted $1\"\
    \n  #\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    if\
    \ [ $count -eq 0 ]; then\n      prev=$i\n      count=1\n    else\n      curr=$i\n\
    \      if [ $curr -lt $prev ]; then\n        sorted=false\n        break\n   \
    \   fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=1\n\
    \  local prev=0\n  for num in $list; do\n    if [ $num -lt $prev ]; then\n   \
    \   sorted=0\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  for num in $list; do\n    if [ $num -lt $prev ]; then\n   \
    \   sorted=false\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local count=0\n  for num in $list; do\n    if [[ $count -eq\
    \ 0 ]]; then\n      prev=$num\n      count=$((count+1))\n    else\n      curr=$num\n\
    \      if [[ $curr -lt $prev ]]; then\n        echo \"False\"\n        return\n\
    \      fi\n      prev=$curr\n    fi\n  done\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local i=0\n\
    \  local j=0\n  local is_sorted=1\n  local is_duplicate=0\n  local len=${#list[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[\
    \ ${list[i]} -eq ${list[j]} ]]; then\n        is_duplicate=1\n      fi\n     \
    \ if [[ ${list[i]} -gt ${list[j]} ]]; then\n        is_sorted=0\n      fi\n  \
    \  done\n  done\n  if [[ $is_sorted -eq 1 && $is_duplicate -eq 0 ]]; then\n  \
    \  echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=($1)\n    local\
    \ sorted=true\n    local prev=${list[0]}\n    for i in ${list[@]:1}; do\n    \
    \    if [[ $i -lt $prev ]]; then\n            sorted=false\n            break\n\
    \        fi\n        prev=$i\n    done\n    echo $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # Write your code here\n\
    \    #\n    # The following lines read the input for you\n    input=($1)\n   \
    \ #\n    # Write your code here\n    #\n    # The following line prints the output\n\
    \    echo \"${output}\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local count=0\n  for i in $list; do\n    if [ $count -eq 0\
    \ ]; then\n      prev=$i\n      count=1\n    else\n      curr=$i\n      if [ $curr\
    \ -lt $prev ]; then\n        echo \"False\"\n        return\n      fi\n      prev=$curr\n\
    \    fi\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=true\n  local prev=0\n  local curr=0\n  local count=0\n  for i in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$i\n      count=$((count+1))\n\
    \    else\n      curr=$i\n      if [ $curr -lt $prev ]; then\n        sorted=false\n\
    \        break\n      fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # If list\
    \ has more than 1 duplicate of the same number, return False.\n  # Assume no negative\
    \ numbers and only integers.\n  # Examples\n  #\n  # $1 is a space-separated list\n\
    \  #\n  # is_sorted \"1 2 3\" # True\n  # is_sorted \"1 2 3 3\" # False\n  # is_sorted\
    \ \"1 2 3 4 5\" # True\n  # is_sorted \"1 2 3 4 5 5\" # False\n  # is_sorted \"\
    1 2 3 4 5 6\" # True\n  # is_sorted \"1 2 3 4 5 6 6\" # False\n  # is_sorted \"\
    1 2 3 4 5 6 7\" # True\n  # is_sorted \"1 2 3 4 5 6 7 7\" # False\n  # is_sorted\
    \ \"1 2 3 4 5 6 7 8\" # True\n  # is_sorted \"1 2 3 4 5 6 7 8 8\" # False\n  #\
    \ is_sorted \"1 2 3 4 5 6 7 8 9\" # True\n  # is_sorted \"1 2 3 4 5 6 7 8 9 9\"\
    \ # False\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10\" # True\n  # is_sorted \"1 2\
    \ 3 4 5 6 7 8 9 10 10\" # False\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11\" # True\n\
    \  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 11\" # False\n  # is_sorted \"1 2 3 4\
    \ 5 6 7 8 9 10 11 12\" # True\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 12 12\"\
    \ # False\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 12 13\" # True\n  # is_sorted\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 13\" # False\n  # is_sorted \"1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14\" # True\n  # is_sorted \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 14\" # False\n  # is_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprzzk8o8r.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmprzzk8o8r.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n  local\
    \ -i len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i\
    \ dup=0\n  local -i sorted=1\n  local -i num=0\n  local -i prev=0\n  local -i\
    \ curr=0\n  local -i next=0\n\n  for ((i=0; i<len; i++)); do\n    num=${arr[i]}\n\
    \    for ((j=0; j<len; j++)); do\n      if [[ $num -eq ${arr[j]} ]]; then\n  \
    \      ((dup++))\n      fi\n    done\n    if [[ $dup -gt 1 ]]; then\n      sorted=0\n\
    \      break\n    fi\n    dup=0\n  done\n\n  if [[ $sorted -eq 1 ]]; then\n  \
    \  for ((k=0; k<len; k++)); do\n      prev=${arr[k]}\n      curr=${arr[k+1]}\n\
    \      next=${arr[k+2]}\n      if [[ $prev -gt $curr ]]; then\n        sorted=0\n\
    \        break\n      elif [[ $curr -gt $next ]]; then\n        sorted=0\n   \
    \     break\n      fi\n    done\n  fi\n\n  echo $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # your code here\n  echo \"\
    Not yet implemented\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local sorted=true\n\
    \  for i in \"${!list[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      continue\n\
    \    fi\n    if [[ ${list[$i]} -lt ${list[$i-1]} ]]; then\n      sorted=false\n\
    \      break\n    fi\n  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Implement me\n  #\n\
    \  # Hint: Use the `sort` command\n  #\n  # Hint: Use the `uniq` command\n  #\n\
    \  # Hint: Use the `wc` command\n  #\n  # Hint: Use the `tr` command\n  #\n  #\
    \ Hint: Use the `cut` command\n  #\n  # Hint: Use the `paste` command\n  #\n \
    \ # Hint: Use the `bc` command\n  #\n  # Hint: Use the `echo` command\n  #\n \
    \ # Hint: Use the `grep` command\n  #\n  # Hint: Use the `sed` command\n  #\n\
    \  # Hint: Use the `head` command\n  #\n  # Hint: Use the `tail` command\n  #\n\
    \  # Hint: Use the `xargs` command\n  #\n  # Hint: Use the `expr` command\n  #\n\
    \  # Hint: Use the `test` command\n  #\n  # Hint: Use the `[` command\n  #\n \
    \ # Hint: Use the `[[` command\n  #\n  # Hint: Use the `>` command\n  #\n  # Hint:\
    \ Use the `>>` command\n  #\n  # Hint: Use the `<` command\n  #\n  # Hint: Use\
    \ the `<<` command\n  #\n  # Hint: Use the `|` command\n  #\n  # Hint: Use the\
    \ `||` command\n  #\n  # Hint: Use the `&&` command\n  #\n  # Hint: Use the `;`\
    \ command\n  #\n  # Hint: Use the `:` command\n  #\n  # Hint: Use the `/` command\n\
    \  #\n  # Hint: Use the `\\` command\n  #\n  # Hint: Use the `~` command\n  #\n\
    \  # Hint: Use the `$` command\n  #\n  # Hint: Use the `!` command\n  #\n  # Hint:\
    \ Use the `#` command\n  #\n  # Hint: Use the `(` command\n  #\n \n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgf5xw088.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmpgf5xw088.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ # $1 is a space-separated list\n  # $1 = \"1 2 3 4 5\"\n  # $1 = \"1 2 3 4 5\
    \ 5\"\n  # $1 = \"1 2 3 4 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5\"\n  # $1 = \"1\
    \ 2 3 4 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5\
    \ 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5\
    \ 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4\
    \ 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1\
    \ = \"1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5 5 5\
    \ 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1 =\
    \ \"1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5\
    \ 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\
    \ 5 5\"\n  # $1 = \"1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1 =\
    \ \"1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1 = \"1 2 3 4 5 5\
    \ 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\"\n  # $1 = \"1 2 3\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp2tspgra.sh: line 33: syntax error near unexpected token `}''

    /tmp/tmpp2tspgra.sh: line 33: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=($1)\n    local\
    \ prev=${list[0]}\n    for i in \"${list[@]:1}\"; do\n        if [[ $i -le $prev\
    \ ]]; then\n            echo \"False\"\n            return\n        fi\n     \
    \   prev=$i\n    done\n    echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a nums=($1)\n  local\
    \ -i len=${#nums[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local\
    \ -i count=0\n  local -i prev=0\n  local -i curr=0\n  local -i next=0\n  local\
    \ -i sorted=1\n  local -i dup=0\n\n  for ((i=0; i<len; i++)); do\n    curr=${nums[$i]}\n\
    \    prev=${nums[$((i-1))]}\n    next=${nums[$((i+1))]}\n    if [[ $i -eq 0 ]];\
    \ then\n      prev=$curr\n    fi\n    if [[ $i -eq $((len-1)) ]]; then\n     \
    \ next=$curr\n    fi\n    if [[ $curr -eq $prev ]]; then\n      count=$((count+1))\n\
    \    else\n      count=0\n    fi\n    if [[ $count -gt 1 ]]; then\n      dup=1\n\
    \    fi\n    if [[ $curr -gt $next ]]; then\n      sorted=0\n    fi\n  done\n\n\
    \  if [[ $sorted -eq 1 ]] && [[ $dup -eq 0 ]]; then\n    echo \"True\"\n  else\n\
    \    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    if [ $count\
    \ -eq 0 ]; then\n      prev=$i\n      count=1\n    else\n      curr=$i\n     \
    \ if [ $curr -eq $prev ]; then\n        return 1\n      elif [ $curr -lt $prev\
    \ ]; then\n        return 1\n      else\n        prev=$curr\n      fi\n    fi\n\
    \  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # your code here\n  # echo\
    \ $1\n  # echo $1 | tr \" \" \"\\n\"\n  # echo $1 | tr \" \" \"\\n\" | sort\n\
    \  # echo $1 | tr \" \" \"\\n\" | sort | tr \"\\n\" \" \"\n  # echo $1 | tr \"\
    \ \" \"\\n\" | sort | tr \"\\n\" \" \" | sed 's/\\s\\+/ /g'\n  # echo $1 | tr\
    \ \" \" \"\\n\" | sort | tr \"\\n\" \" \" | sed 's/\\s\\+/ /g' | sed 's/^\\s\\\
    +//g'\n  # echo $1 | tr \" \" \"\\n\" | sort | tr \"\\n\" \" \" | sed 's/\\s\\\
    +/ /g' | sed 's/^\\s\\+//g' | sed 's/\\s\\+$//g'\n  # echo $1 | tr \" \" \"\\\
    n\" | sort | tr \"\\n\" \" \" | sed 's/\\s\\+/ /g' | sed 's/^\\s\\+//g' | sed\
    \ 's/\\s\\+$//g' | sed 's/\\s\\+/ /g'\n  # echo $1 | tr \" \" \"\\n\" | sort |\
    \ tr \"\\n\" \" \" | sed 's/\\s\\+/ /g' | sed 's/^\\s\\+//g' | sed 's/\\s\\+$//g'\
    \ | sed 's/\\s\\+/ /g' | sed 's/\\s\\+/ /g'\n  # echo $1 | tr \" \" \"\\n\" |\
    \ sort | tr \"\\n\" \" \" | sed 's/\\s\\+/ /g' | sed 's/^\\s\\+//g' | sed 's/\\\
    s\\+$//g' | sed 's/\\s\\+/ /g' | sed 's/\\s\\+/ /g' | sed 's/\\s\\+/ /g'\n  #\
    \ echo $1 | tr \" \" \"\\n\" | sort | tr \"\\n\" \" \" | sed 's/\\s\\+/ /g' |\
    \ sed 's/^\\s\\+\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptdyr96r7.sh: line 21: syntax error near unexpected token `}''

    /tmp/tmptdyr96r7.sh: line 21: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # your code here\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfk99rku6.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmpfk99rku6.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ prev=0\n  local curr=0\n  local sorted=true\n  for i in $list; do\n    if [\
    \ $i -lt $prev ]; then\n      sorted=false\n      break\n    fi\n    prev=$i\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=($1)\n    local\
    \ sorted=1\n    local prev=${list[0]}\n    for i in \"${list[@]:1}\"; do\n   \
    \     if [[ $i -lt $prev ]]; then\n            sorted=0\n            break\n \
    \       fi\n        prev=$i\n    done\n    echo $sorted\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # your code here\n  # use\
    \ echo to output the result\n  # $1 is a space-separated list\n  # use echo to\
    \ output the result\n  # $1 is a space-separated list\n  # use echo to output\
    \ the result\n  # $1 is a space-separated list\n  # use echo to output the result\n\
    \  # $1 is a space-separated list\n  # use echo to output the result\n  # $1 is\
    \ a space-separated list\n  # use echo to output the result\n  # $1 is a space-separated\
    \ list\n  # use echo to output the result\n  # $1 is a space-separated list\n\
    \  # use echo to output the result\n  # $1 is a space-separated list\n  # use\
    \ echo to output the result\n  # $1 is a space-separated list\n  # use echo to\
    \ output the result\n  # $1 is a space-separated list\n  # use echo to output\
    \ the result\n  # $1 is a space-separated list\n  # use echo to output the result\n\
    \  # $1 is a space-separated list\n  # use echo to output the result\n  # $1 is\
    \ a space-separated list\n  # use echo to output the result\n  # $1 is a space-separated\
    \ list\n  # use echo to output the result\n  # $1 is a space-separated list\n\
    \  # use echo to output the result\n  # $1 is a space-separated list\n  # use\
    \ echo to output the result\n  # $1 is a space-separated list\n  # use echo to\
    \ output the result\n  # $1 is a space-separated list\n  # use echo to output\
    \ the result\n  # $1 is a space-separated list\n  # use echo to output the result\n\
    \  # $1 is a space-separated list\n  # use echo to output the result\n  # $1 is\
    \ a space-separated list\n  # use echo to output the result\n  # $1 is a space-separated\
    \ list\n  # use echo to output the result\n  # $1 is a space-separated list\n\
    \  # use echo to output the result\n  # $1 is a space-separated list\n \n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1kjca_d7.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp1kjca_d7.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ # echo $1\n  # echo $2\n  # echo $3\n  # echo $4\n  # echo $5\n  # echo $6\n\
    \  # echo $7\n  # echo $8\n  # echo $9\n  # echo ${10}\n  # echo ${11}\n  # echo\
    \ ${12}\n  # echo ${13}\n  # echo ${14}\n  # echo ${15}\n  # echo ${16}\n  # echo\
    \ ${17}\n  # echo ${18}\n  # echo ${19}\n  # echo ${20}\n  # echo ${21}\n  # echo\
    \ ${22}\n  # echo ${23}\n  # echo ${24}\n  # echo ${25}\n  # echo ${26}\n  # echo\
    \ ${27}\n  # echo ${28}\n  # echo ${29}\n  # echo ${30}\n  # echo ${31}\n  # echo\
    \ ${32}\n  # echo ${33}\n  # echo ${34}\n  # echo ${35}\n  # echo ${36}\n  # echo\
    \ ${37}\n  # echo ${38}\n  # echo ${39}\n  # echo ${40}\n  # echo ${41}\n  # echo\
    \ ${42}\n  # echo ${43}\n  # echo ${44}\n  # echo ${45}\n  # echo ${46}\n  # echo\
    \ ${47}\n  # echo ${48}\n  # echo ${49}\n  # echo ${50}\n  # echo ${51}\n  # echo\
    \ ${52}\n  # echo ${53}\n  # echo ${54}\n  # echo ${55}\n  # echo ${56}\n  # echo\
    \ ${57}\n  # echo ${58}\n  # echo ${59}\n  # echo ${60}\n  # echo ${61}\n  # echo\
    \ ${62}\n  # echo ${63}\n  # echo ${64}\n  # echo ${65}\n  # echo ${66}\n  # echo\
    \ ${67}\n  # echo ${68}\n  # echo ${69}\n  # echo ${70}\n  # echo ${71}\n  # echo\
    \ ${72}\n  # echo ${73}\n  #\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaoy364v8.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmpaoy364v8.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  for num in $list; do\n    if [ $num -lt $prev ]; then\n   \
    \   sorted=false\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local -a array=()\n    local\
    \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i count=0\n    local\
    \ -i len=0\n    local -i sorted=0\n    local -i duplicates=0\n    local -i tmp=0\n\
    \    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n\
    \    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n\
    \    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i\
    \ tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n\
    \    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i\
    \ tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n\
    \    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i\
    \ tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n\
    \    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i\
    \ tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n\
    \    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i\
    \ tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n\
    \    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i\
    \ tmp48=0\n    local -i tmp49=0\n    local -i tmp50\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  for num in $list; do\n    if [ $num -lt $prev ]; then\n   \
    \   sorted=false\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use a loop to check each number\n  # Hint: use a variable to keep track\
    \ of the previous number\n  # Hint: use a variable to keep track of whether or\
    \ not the list is sorted\n  # Hint: use a variable to keep track of whether or\
    \ not the list has duplicates\n  # Hint: use a variable to keep track of the number\
    \ of duplicates\n  # Hint: use a variable to keep track of the current number\n\
    \  # Hint: use a variable to keep track of the previous number\n  # Hint: use\
    \ a variable to keep track of whether or not the list is sorted\n  # Hint: use\
    \ a variable to keep track of whether or not the list has duplicates\n  # Hint:\
    \ use a variable to keep track of the number of duplicates\n  # Hint: use a variable\
    \ to keep track of the current number\n  # Hint: use a variable to keep track\
    \ of the previous number\n  # Hint: use a variable to keep track of whether or\
    \ not the list is sorted\n  # Hint: use a variable to keep track of whether or\
    \ not the list has duplicates\n  # Hint: use a variable to keep track of the number\
    \ of duplicates\n  # Hint: use a variable to keep track of the current number\n\
    \  # Hint: use a variable to keep track of the previous number\n  # Hint: use\
    \ a variable to keep track of whether or not the list is sorted\n  # Hint: use\
    \ a variable to keep track of whether or not the list has duplicates\n  # Hint:\
    \ use a variable to keep track of the number of duplicates\n  # Hint: use a variable\
    \ to keep track of the current number\n  # Hint: use a variable to keep track\
    \ of the previous number\n  # Hint: use a variable to keep track of whether or\
    \ not the list is sorted\n  # Hint: use a variable to keep track of whether or\
    \ not the list has duplicates\n  # Hint: use a variable to keep track of the number\
    \ of duplicates\n  # Hint: use a variable to keep track of the current number\n\
    \  # Hint: use a variable to keep track of the previous number\n  # Hint: use\
    \ a variable to keep track of whether or not the list is\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpei7rysid.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmpei7rysid.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  local -i i\n\
    \  local -i len\n  local -i prev\n  local -i curr\n  local -i is_sorted\n\n  IFS='\
    \ ' read -r -a arr <<< \"$1\"\n  len=${#arr[@]}\n  is_sorted=1\n\n  for ((i=0;\
    \ i<len; i++)); do\n    curr=${arr[$i]}\n    if ((i > 0)); then\n      if ((curr\
    \ < prev)); then\n        is_sorted=0\n        break\n      fi\n    fi\n    prev=$curr\n\
    \  done\n\n  echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Write me\n  #return\
    \ 0\n  #echo $1\n  #echo $2\n  #echo $3\n  #echo $4\n  #echo $5\n  #echo $6\n\
    \  #echo $7\n  #echo $8\n  #echo $9\n  #echo ${10}\n  #echo ${11}\n  #echo ${12}\n\
    \  #echo ${13}\n  #echo ${14}\n  #echo ${15}\n  #echo ${16}\n  #echo ${17}\n \
    \ #echo ${18}\n  #echo ${19}\n  #echo ${20}\n  #echo ${21}\n  #echo ${22}\n  #echo\
    \ ${23}\n  #echo ${24}\n  #echo ${25}\n  #echo ${26}\n  #echo ${27}\n  #echo ${28}\n\
    \  #echo ${29}\n  #echo ${30}\n  #echo ${31}\n  #echo ${32}\n  #echo ${33}\n \
    \ #echo ${34}\n  #echo ${35}\n  #echo ${36}\n  #echo ${37}\n  #echo ${38}\n  #echo\
    \ ${39}\n  #echo ${40}\n  #echo ${41}\n  #echo ${42}\n  #echo ${43}\n  #echo ${44}\n\
    \  #echo ${45}\n  #echo ${46}\n  #echo ${47}\n  #echo ${48}\n  #echo ${49}\n \
    \ #echo ${50}\n  #echo ${51}\n  #echo ${52}\n  #echo ${53}\n  #echo ${54}\n  #echo\
    \ ${55}\n  #echo ${56}\n  #echo ${57}\n  #echo ${58}\n  #echo ${59}\n  #echo ${60}\n\
    \  #echo ${61}\n  #echo ${62}\n  #echo ${63}\n  #echo ${64}\n  #echo ${65}\n \
    \ #echo ${66}\n  #echo ${67}\n  #echo ${68}\n  #echo ${69}\n  #echo ${70}\n  #echo\
    \ ${71}\n  #echo ${72}\n  #echo\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_ona7qbo.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmp_ona7qbo.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  #\n  #\
    \ Hint: You can use the following command to split a string into\n  # an array:\n\
    \  #\n  # arr=($1)\n  #\n  # This will split the string $1 into an array named\
    \ arr.\n  #\n  # You can then access the elements of the array using the following\n\
    \  # syntax:\n  #\n  # ${arr[0]} # First element\n  # ${arr[1]} # Second element\n\
    \  # ...\n  # ${arr[n]} # nth element\n  #\n  # You can also use the following\
    \ syntax to get the length of an array:\n  #\n  # ${#arr[@]} # Length of array\
    \ arr\n  #\n  # You can also use the following syntax to sort an array:\n  #\n\
    \  # sorted=($(printf '%s\\n' \"${arr[@]}\" | sort -n))\n  #\n  # This will sort\
    \ the array arr and store the sorted array in the\n  # array sorted.\n  #\n  #\
    \ You can also use the following syntax to check if two arrays are\n  # equal:\n\
    \  #\n  # if [ \"${arr[@]}\" == \"${sorted[@]}\" ]; then\n  #   echo \"arr is\
    \ sorted\"\n  # fi\n  #\n  # This will check if the arrays arr and sorted are\
    \ equal.\n  #\n  # You can also use the following syntax to check if an array\
    \ contains\n  # a certain element:\n  #\n  # if [[ \" ${arr[@]} \" =~ \" ${element}\
    \ \" ]]; then\n  #   echo \"arr contains element\"\n  # fi\n  #\n  # This will\
    \ check if the array arr contains the element element.\n  #\n  # You can also\
    \ use the following syntax to check if an array contains\n  # duplicates:\n  #\n\
    \  # if [ \"${#arr[@]}\" -ne \"${#unique[@]}\" ]; then\n  #   echo \"arr contains\
    \ duplicates\"\n  # fi\n  #\n  # This will check if the array arr contains duplicates.\n\
    \  #\n  # You can also use the following syntax to remove duplicates from an\n\
    \  # array:\n \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmp0yeo3_.sh: line 67: syntax error near unexpected token `}''

    /tmp/tmpmp0yeo3_.sh: line 67: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use a for loop\n  # Hint: use a variable to keep track of whether or\
    \ not the list is sorted\n  # Hint: use a variable to keep track of whether or\
    \ not the list has duplicates\n  # Hint: use a variable to keep track of the previous\
    \ number in the list\n  # Hint: use a variable to keep track of the current number\
    \ in the list\n  # Hint: use a variable to keep track of the next number in the\
    \ list\n  # Hint: use the -eq operator to compare integers\n  # Hint: use the\
    \ -ne operator to compare integers\n  # Hint: use the -lt operator to compare\
    \ integers\n  # Hint: use the -gt operator to compare integers\n  # Hint: use\
    \ the -le operator to compare integers\n  # Hint: use the -ge operator to compare\
    \ integers\n  # Hint: use the -z operator to check if a string is empty\n  # Hint:\
    \ use the -n operator to check if a string is not empty\n  # Hint: use the -a\
    \ operator to check if a condition is true\n  # Hint: use the -o operator to check\
    \ if a condition is true\n  # Hint: use the || operator to check if a condition\
    \ is true\n  # Hint: use the && operator to check if a condition is true\n  #\
    \ Hint: use the ! operator to check if a condition is true\n  # Hint: use the\
    \ -f operator to check if a file exists\n  # Hint: use the -d operator to check\
    \ if a directory exists\n  # Hint: use the -e operator to check if a file or directory\
    \ exists\n  # Hint: use the -r operator to check if a file is readable\n  # Hint:\
    \ use the -w operator to check if a file is writable\n  # Hint: use the -x operator\
    \ to check if a file is executable\n  # Hint: use the -s operator to check if\
    \ a file is not empty\n  # Hint: use the -z operator to check if a file is empty\n\
    \  # Hint: use the -n operator to check if a file is not empty\n  # Hint: use\
    \ the -o operator to check if a file is owned by the user\n \n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_wwbm5e4.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmp_wwbm5e4.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local numbers=($1)\n  local\
    \ sorted=1\n  local prev=${numbers[0]}\n  for i in \"${numbers[@]:1}\"; do\n \
    \   if [[ $i -lt $prev ]]; then\n      sorted=0\n      break\n    fi\n    prev=$i\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr\n  IFS=' ' read\
    \ -r -a arr <<< \"$1\"\n  local prev=${arr[0]}\n  for i in \"${arr[@]:1}\"; do\n\
    \    if [[ $i -le $prev ]]; then\n      return 1\n    fi\n    prev=$i\n  done\n\
    \  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    local list=($1)\n    local\
    \ prev=${list[0]}\n    for i in ${list[@]:1}; do\n        if [[ $i -le $prev ]];\
    \ then\n            return 1\n        fi\n        prev=$i\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local sorted=1\n  for i in $list; do\n    if [ $i -eq $prev\
    \ ]; then\n      sorted=0\n      break\n    fi\n    if [ $i -lt $prev ]; then\n\
    \      sorted=0\n      break\n    fi\n    prev=$i\n  done\n  echo $sorted\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # return true or false\n  #\n  # Example:\n  #\n  # if [[ $1 == \"1 2 3\" ]];\
    \ then\n  #   return 0\n  # else\n  #   return 1\n  # fi\n  #\n  # return 0\n\
    \  #\n  # Hint:\n  #\n  # You can use the following to split a string into an\
    \ array:\n  #\n  # IFS=' ' read -r -a array <<< \"$1\"\n  #\n  # You can use the\
    \ following to sort an array:\n  #\n  # sorted=($(printf '%s\\n' \"${array[@]}\"\
    \ | sort -n))\n  #\n  # You can use the following to check if two arrays are equal:\n\
    \  #\n  # if [[ \"${array[@]}\" == \"${sorted[@]}\" ]]; then\n  #   return 0\n\
    \  # else\n  #   return 1\n  # fi\n  #\n  # You can use the following to check\
    \ if an array has duplicates:\n  #\n  # if [[ $(printf '%s\\n' \"${array[@]}\"\
    \ | sort -u | wc -l) -ne ${#array[@]} ]]; then\n  #   return 1\n  # fi\n  #\n\
    \  # You can use the following to check if an array has negative numbers:\n  #\n\
    \  # for i in \"${array[@]}\"; do\n  #   if [[ $i -lt 0 ]]; then\n  #     return\
    \ 1\n  #   fi\n  # done\n  #\n  # You can use the following to check if an array\
    \ has non-integers:\n  #\n  # for i in \"${array[@]}\"; do\n  #   if [[ $i =~\
    \ ^[0-9]+$ ]]; then\n  #     return 1\n  #   fi\n  # done\n  #\n  # You can use\
    \ the following to check if an array has more than 1 duplicate of the same number:\n\
    \  #\n  # for i in \"${array[@]}\"; do\n  #   if [[ $(printf '%s\\n' \"${array[@]}\"\
    \ | grep -\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpws_701wx.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpws_701wx.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: Implement this function\n\
    \  # Hint: You can use the sort command to sort a list.\n  # Hint: You can use\
    \ the uniq command to remove duplicates.\n  # Hint: You can use the wc command\
    \ to count the number of lines.\n  # Hint: You can use the tr command to remove\
    \ spaces.\n  # Hint: You can use the echo command to print a string.\n  # Hint:\
    \ You can use the test command to compare numbers.\n  # Hint: You can use the\
    \ test command to compare strings.\n  # Hint: You can use the test command to\
    \ compare files.\n  # Hint: You can use the test command to compare directories.\n\
    \  # Hint: You can use the test command to compare files and directories.\n  #\
    \ Hint: You can use the test command to compare strings and files.\n  # Hint:\
    \ You can use the test command to compare strings and directories.\n  # Hint:\
    \ You can use the test command to compare strings, files, and directories.\n \
    \ # Hint: You can use the test command to compare numbers, strings, files, and\
    \ directories.\n  # Hint: You can use the test command to compare numbers, strings,\
    \ files, and directories.\n  # Hint: You can use the test command to compare numbers,\
    \ strings, files, and directories.\n  # Hint: You can use the test command to\
    \ compare numbers, strings, files, and directories.\n  # Hint: You can use the\
    \ test command to compare numbers, strings, files, and directories.\n  # Hint:\
    \ You can use the test command to compare numbers, strings, files, and directories.\n\
    \  # Hint: You can use the test command to compare numbers, strings, files, and\
    \ directories.\n  # Hint: You can use the test command to compare numbers, strings,\
    \ files, and directories.\n  # Hint: You can use the test command to compare numbers,\
    \ strings, files, and directories.\n  # Hint: You can use the test command to\
    \ compare numbers, strings, files, and directories.\n  # Hint: You can use the\
    \ test command to compare numbers, strings, files, and directories.\n  # Hint:\
    \ You can use the test command to compare numbers, strings, files, and directories.\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpml1e56op.sh: line 35: syntax error near unexpected token `}''

    /tmp/tmpml1e56op.sh: line 35: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=1\n  local prev=0\n  for num in $list; do\n    if [[ $num -le $prev ]];\
    \ then\n      sorted=0\n      break\n    fi\n    prev=$num\n  done\n  echo $sorted\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=$(echo\
    \ $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if [[ $list == $sorted ]];\
    \ then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in \"${list[@]:1}\"; do\n    if [[ $i -le $prev ]]; then\n      return\
    \ 1\n    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # Use\
    \ echo to print to stdout, e.g.\n  # echo \"hello world\"\n  #\n  # Use `return`\
    \ to exit with a return code, e.g.\n  # return 0\n  #\n  # Use `exit` to exit\
    \ with a return code AND exit the shell, e.g.\n  # exit 0\n  #\n  # Use `read`\
    \ to read from stdin, e.g.\n  # read line\n  #\n  # Use `$1`, `$2`, etc. to access\
    \ command line arguments, e.g.\n  # echo $1\n  #\n  # Use `$@` to access all command\
    \ line arguments, e.g.\n  # echo $@\n  #\n  # Use `$#` to access the number of\
    \ command line arguments, e.g.\n  # echo $#\n  #\n  # Use `$?` to access the return\
    \ code of the last command, e.g.\n  # echo $?\n  #\n  # Use `$_` to access the\
    \ last argument of the previous command, e.g.\n  # echo $_\n  #\n  # Use `$$`\
    \ to access the process ID of the current shell, e.g.\n  # echo $$\n  #\n  # Use\
    \ `$!` to access the process ID of the last background command, e.g.\n  # echo\
    \ $!\n  #\n  # Use `$0` to access the name of the current shell or shell script,\
    \ e.g.\n  # echo $0\n  #\n  # Use `$LINENO` to access the current line number\
    \ in the script, e.g.\n  # echo $LINENO\n  #\n  # Use `$IFS` to access the current\
    \ value of the input field separator, e.g.\n  # echo $IFS\n  #\n  # Use `$RANDOM`\
    \ to access a random number, e.g.\n  # echo $RANDOM\n  #\n  # Use `$SECONDS` to\
    \ access the number of seconds since the shell was started, e.g.\n  # echo $SECONDS\n\
    \  #\n  # Use `$PS1` to access the primary prompt string\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp963e68ee.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp963e68ee.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # TODO: implement this function\n\
    \  # Hint: use a for loop to iterate through the list\n  # Hint: use the -gt operator\
    \ to compare numbers\n  # Hint: use the -eq operator to compare numbers\n  # Hint:\
    \ use the -ne operator to compare numbers\n  # Hint: use the -le operator to compare\
    \ numbers\n  # Hint: use the -lt operator to compare numbers\n  # Hint: use the\
    \ -ge operator to compare numbers\n  # Hint: use the -ge operator to compare numbers\n\
    \  # Hint: use the -ge operator to compare numbers\n  # Hint: use the -ge operator\
    \ to compare numbers\n  # Hint: use the -ge operator to compare numbers\n  # Hint:\
    \ use the -ge operator to compare numbers\n  # Hint: use the -ge operator to compare\
    \ numbers\n  # Hint: use the -ge operator to compare numbers\n  # Hint: use the\
    \ -ge operator to compare numbers\n  # Hint: use the -ge operator to compare numbers\n\
    \  # Hint: use the -ge operator to compare numbers\n  # Hint: use the -ge operator\
    \ to compare numbers\n  # Hint: use the -ge operator to compare numbers\n  # Hint:\
    \ use the -ge operator to compare numbers\n  # Hint: use the -ge operator to compare\
    \ numbers\n  # Hint: use the -ge operator to compare numbers\n  # Hint: use the\
    \ -ge operator to compare numbers\n  # Hint: use the -ge operator to compare numbers\n\
    \  # Hint: use the -ge operator to compare numbers\n  # Hint: use the -ge operator\
    \ to compare numbers\n  # Hint: use the -ge operator to compare numbers\n  # Hint:\
    \ use the -ge operator to compare numbers\n  # Hint: use the -ge operator to compare\
    \ numbers\n  # Hint: use the -ge operator to compare numbers\n  # Hint: use the\
    \ -ge operator to compare numbers\n  # Hint: use the -ge operator to compare numbers\n\
    \  # Hint: use the -ge operator to compare numbers\n  # Hint: use the -ge operator\
    \ to compare numbers\n  # Hint: use the -ge operator to compare numbers\n  # Hint:\
    \ use the -ge operator\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplxwum27q.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmplxwum27q.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # TODO: implement this function\n\
    \    #echo \"is_sorted $1\"\n    #echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\\
    n' ' '\n    #echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | sed 's/^ *//;s/\
    \ *$//'\n    #echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | sed 's/^ *//;s/\
    \ *$//' | tr ' ' '\\n' | uniq -d\n    #echo \"$1\" | tr ' ' '\\n' | sort -n |\
    \ tr '\\n' ' ' | sed 's/^ *//;s/ *$//' | tr ' ' '\\n' | uniq -d | wc -l\n    #echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | sed 's/^ *//;s/ *$//' | tr\
    \ ' ' '\\n' | uniq -d | wc -l | grep -q '^0$'\n    #echo \"$1\" | tr ' ' '\\n'\
    \ | sort -n | tr '\\n' ' ' | sed 's/^ *//;s/ *$//' | tr ' ' '\\n' | uniq -d |\
    \ wc -l | grep -q '^0$' && echo \"True\" || echo \"False\"\n    echo \"$1\" |\
    \ tr ' ' '\\n' | sort -n | tr '\\n' ' ' | sed 's/^ *//;s/ *$//' | tr ' ' '\\n'\
    \ | uniq -d | wc -l | grep -q '^0$' && echo \"True\" || echo \"False\"\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -lt $prev ]]; then\n      echo \"False\"\
    \n      return\n    fi\n    prev=$i\n  done\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    if\
    \ [[ $count -eq 0 ]]; then\n      prev=$i\n      count=1\n    else\n      curr=$i\n\
    \      if [[ $curr -lt $prev ]]; then\n        sorted=false\n        break\n \
    \     fi\n      if [[ $curr -eq $prev ]]; then\n        sorted=false\n       \
    \ break\n      fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ prev=0\n  local curr=0\n  local count=0\n  for num in $list; do\n    curr=$num\n\
    \    if [ $curr -eq $prev ]; then\n      count=$((count + 1))\n      if [ $count\
    \ -gt 1 ]; then\n        echo \"False\"\n        return\n      fi\n    elif [\
    \ $curr -lt $prev ]; then\n      echo \"False\"\n      return\n    fi\n    prev=$curr\n\
    \  done\n  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local\
    \ sorted=true\n  local prev=0\n  local curr=0\n  local count=0\n  for num in $list;\
    \ do\n    if [ $count -eq 0 ]; then\n      prev=$num\n      count=1\n    else\n\
    \      curr=$num\n      if [ $curr -eq $prev ]; then\n        sorted=false\n \
    \       break\n      elif [ $curr -lt $prev ]; then\n        sorted=false\n  \
    \      break\n      else\n        prev=$curr\n      fi\n    fi\n  done\n  echo\
    \ $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n    # TODO: Your code here\n\
    \    # Hint: You can use the `sort` command to sort a list\n    # and the `uniq`\
    \ command to remove duplicates.\n    #\n    # Example:\n    #\n    # $ echo \"\
    1 2 3 4 5\" | sort\n    # 1 2 3 4 5\n    #\n    # $ echo \"1 2 3 4 5\" | sort\
    \ | uniq\n    # 1 2 3 4 5\n    #\n    # $ echo \"1 2 3 4 5 5\" | sort | uniq\n\
    \    # 1 2 3 4 5\n    #\n    # $ echo \"1 2 3 4 5 5\" | sort | uniq | wc -l\n\
    \    # 5\n    #\n    # $ echo \"1 2 3 4 5 5\" | sort | uniq | wc -l | bc\n   \
    \ # 5\n    #\n    # $ echo \"1 2 3 4 5 5\" | sort | uniq | wc -l | bc | grep -q\
    \ 5\n    #\n    # $ echo \"1 2 3 4 5 5\" | sort | uniq | wc -l | bc | grep -q\
    \ 5; echo $?\n    # 0\n    #\n    # $ echo \"1 2 3 4 5 5\" | sort | uniq | wc\
    \ -l | bc | grep -q 5; echo $?\n    # 0\n    #\n    # $ echo \"1 2 3 4 5 5\" |\
    \ sort | uniq | wc -l | bc | grep -q 4; echo $?\n    # 1\n    #\n    # $ echo\
    \ \"1 2 3 4 5 5\" | sort | uniq | wc -l | bc | grep -q 4; echo $?\n    # 1\n \
    \   #\n    # $ echo \"1 2 3 4 5 5\" | sort | uniq | wc -l | bc | grep -q 4; echo\
    \ $?\n    # 1\n    #\n    # $ echo \"1 2 3 4 5 5\" | sort | uniq | wc -l | bc\
    \ | grep -q 4; echo $?\n    # 1\n    #\n    # $ echo \"1 2 3 4 5 5\" | sort |\
    \ uniq | wc -l | bc | grep -q 4; echo $?\n   \n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphj_u3t8i.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmphj_u3t8i.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Your code here\n  # Use\
    \ echo to output a 1 (true) or 0 (false)\n  # Do not use any return statements\n\
    \  #\n  # Example:\n  # echo 1\n  # echo 0\n  #\n  # Hint:\n  # You can use the\
    \ following to split the input string into an array:\n  # arr=($1)\n  #\n  # Hint:\n\
    \  # You can use the following to sort an array:\n  # sort -n <(printf \"%s\\\
    n\" \"${arr[@]}\")\n  #\n  # Hint:\n  # You can use the following to check if\
    \ two arrays are equal:\n  # [[ \"${arr[@]}\" == \"${arr2[@]}\" ]]\n  #\n  # Hint:\n\
    \  # You can use the following to check if two arrays are equal:\n  # [[ \"${arr[@]}\"\
    \ == \"${arr2[@]}\" ]]\n  #\n  # Hint:\n  # You can use the following to check\
    \ if an array contains duplicates:\n  # [[ $(printf \"%s\\n\" \"${arr[@]}\" |\
    \ sort -u | wc -l) -ne ${#arr[@]} ]]\n  #\n  # Hint:\n  # You can use the following\
    \ to check if an array contains duplicates:\n  # [[ $(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -u | wc -l) -ne ${#arr[@]} ]]\n  #\n  # Hint:\n  # You can use the following\
    \ to check if an array contains duplicates:\n  # [[ $(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -u | wc -l) -ne ${#arr[@]} ]]\n  #\n  # Hint:\n  # You can use the following\
    \ to check if an array contains duplicates:\n  # [[ $(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -u | wc -l) -ne ${#arr[@]} ]]\n  #\n  # Hint:\n  # You can use the following\
    \ to check if an array contains duplicates:\n  # [[ $(printf \"%s\\\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_br4w_gh.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmp_br4w_gh.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local sorted=1\n  for i in $list; do\n    curr=$i\n    if [\
    \ $curr -lt $prev ]; then\n      sorted=0\n      break\n    fi\n    prev=$curr\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=($1)\n  local\
    \ prev=${arr[0]}\n  for i in ${arr[@]:1}; do\n    if [[ $i -lt $prev ]]; then\n\
    \      echo \"False\"\n      return\n    fi\n    prev=$i\n  done\n  echo \"True\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -le $prev ]]; then\n      return 1\n\
    \    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n\
    \  local prev=0\n  local curr=0\n  local count=0\n  for i in $list; do\n    if\
    \ [ $count -eq 0 ]; then\n      prev=$i\n      count=1\n    else\n      curr=$i\n\
    \      if [ $curr -lt $prev ]; then\n        sorted=false\n        break\n   \
    \   fi\n      if [ $curr -eq $prev ]; then\n        sorted=false\n        break\n\
    \      fi\n      prev=$curr\n    fi\n  done\n  echo $sorted\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]:1}; do\n    if [[ $i -lt $prev ]]; then\n      return 1\n\
    \    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local -a arr=(\"$@\")\n  local\
    \ prev=${arr[0]}\n  for i in \"${arr[@]:1}\"; do\n    if [[ $i -lt $prev ]]; then\n\
    \      return 1\n    fi\n    prev=$i\n  done\n  return 0\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local prev=0\n\
    \  local curr=0\n  local sorted=1\n  for num in $list; do\n    curr=$num\n   \
    \ if [ $curr -lt $prev ]; then\n      sorted=0\n      break\n    fi\n    prev=$curr\n\
    \  done\n  echo $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=$(echo\
    \ $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  local uniq=$(echo $sorted\
    \ | tr ' ' '\\n' | uniq -u | tr '\\n' ' ')\n  if [ \"$list\" = \"$sorted\" ] &&\
    \ [ \"$list\" = \"$uniq\" ]; then\n    echo True\n  else\n    echo False\n  fi\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  local curr=0\n  for i in ${list[@]:1}; do\n    curr=$i\n    if [[ $curr -eq\
    \ $prev ]]; then\n      echo \"False\"\n      return\n    elif [[ $curr -lt $prev\
    \ ]]; then\n      echo \"False\"\n      return\n    fi\n    prev=$curr\n  done\n\
    \  echo \"True\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n\t# Your code here\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz7flp023.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmpz7flp023.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # YOUR CODE HERE\n  # echo\
    \ \"$1\"\n  # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n  # echo \"\
    $1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | tr -d ' '\n  # echo \"$1\" | tr\
    \ ' ' '\\n' | sort -n | tr '\\n' ' ' | tr -d ' ' | wc -c\n  # echo \"$1\" | tr\
    \ ' ' '\\n' | sort -n | tr '\\n' ' ' | tr -d ' ' | wc -c | tr -d ' '\n  # echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | tr -d ' ' | wc -c | tr -d '\
    \ ' | wc -c\n  # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | tr -d '\
    \ ' | wc -c | tr -d ' ' | wc -c | tr -d ' '\n  # echo \"$1\" | tr ' ' '\\n' |\
    \ sort -n | tr '\\n' ' ' | tr -d ' ' | wc -c | tr -d ' ' | wc -c | tr -d ' ' |\
    \ wc -c\n  # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | tr -d ' ' |\
    \ wc -c | tr -d ' ' | wc -c | tr -d ' ' | wc -c | tr -d ' '\n  # echo \"$1\" |\
    \ tr ' ' '\\n' | sort -n | tr '\\n' ' ' | tr -d ' ' | wc -c | tr -d ' ' | wc -c\
    \ | tr -d ' ' | wc -c | tr -d ' ' | wc -c\n  # echo \"$1\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' ' | tr -d ' ' | wc -c | tr -d ' ' | wc -c | tr -d ' ' |\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx4j0l67c.sh: line 21: syntax error near unexpected token `}''

    /tmp/tmpx4j0l67c.sh: line 21: `}''

    '
  stdout: ''
  timestamp: 1660071012
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  # Write your code here\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dnqn_zn.sh: line 179: syntax error near unexpected token `}''

    /tmp/tmp1dnqn_zn.sh: line 179: `}''

    '
  stdout: ''
  timestamp: 1660071011
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    #\n# $1 is a space-separated list\nis_sorted() {\n  local list=($1)\n  local prev=${list[0]}\n\
    \  for i in ${list[@]}; do\n    if [[ $i -lt $prev ]]; then\n      echo \"False\"\
    \n      return\n    fi\n    prev=$i\n  done\n  echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660071012
