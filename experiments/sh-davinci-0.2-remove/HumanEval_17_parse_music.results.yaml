language: sh
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local notes=$1\n    local beats=()\n    local beat=0\n    local note=''\n\
    \    local i=0\n    local len=${#notes}\n    while [ $i -lt $len ]; do\n     \
    \   note=${notes:$i:1}\n        if [ \"$note\" == 'o' ]; then\n            beat=4\n\
    \        elif [ \"$note\" == 'o' ]; then\n            beat=2\n        elif [ \"\
    $note\" == '.' ]; then\n            beat=1\n        fi\n        beats+=($beat)\n\
    \        i=$((i+2))\n    done\n    echo ${beats[@]}\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music_string=$1\n    local -a music_array\n    local -a result_array\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local\
    \ -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n\
    \    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n\
    \    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n   \n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local beats=0\n    local result=\"\"\n    local\
    \ note=\"\"\n    local notes=(o o| .|)\n    local beats=(4 2 1)\n    local i=0\n\
    \    local j=0\n    for ((i=0; i<${#music}; i++)); do\n        note=\"${music:$i:1}\"\
    \n        for ((j=0; j<${#notes[@]}; j++)); do\n            if [[ \"${notes[$j]}\"\
    \ == \"$note\" ]]; then\n                beats=$((beats + ${beats[$j]}))\n   \
    \             break\n            fi\n        done\n    done\n    echo $beats\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplfatvwqz.sh: line 16: syntax error near unexpected token `|''

    /tmp/tmplfatvwqz.sh: line 16: `    local notes=(o o| .|)''

    /tmp/tmplfatvwqz.sh: line 17: local: can only be used in a function

    /tmp/tmplfatvwqz.sh: line 18: local: can only be used in a function

    /tmp/tmplfatvwqz.sh: line 19: local: can only be used in a function

    /tmp/tmplfatvwqz.sh: line 30: syntax error near unexpected token `}''

    /tmp/tmplfatvwqz.sh: line 30: `}''

    '
  stdout: '4

    '
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, awk,\
    \ etc.\n    # Hint: use echo -n to print without newline\n    # Hint: use echo\
    \ -e to interpret backslash-escaped characters\n    # Hint: use echo -n to print\
    \ without newline\n    # Hint: use echo -e to interpret backslash-escaped characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use echo -e to\
    \ interpret backslash-escaped characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash-escaped characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use echo -e to\
    \ interpret backslash-escaped characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash-escaped characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use echo -e to\
    \ interpret backslash-escaped characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash-escaped characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use echo -e to\
    \ interpret backslash-escaped characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash-escaped characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use echo -e to\
    \ interpret backslash-escaped characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash-escaped characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use echo -e to\
    \ interpret backslash-escaped characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash-escaped characters\n\
    \    # Hint: use echo -\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpy8kgrm3m.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpy8kgrm3m.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local input=$1\n    local output=\"\"\n    local current_char=\"\"\n\
    \    local current_char_count=0\n    local current_char_count_string=\"\"\n  \
    \  local current_char_count_string_length=0\n    local current_char_count_string_last_char=\"\
    \"\n    local current_char_count_string_last_char_is_digit=0\n    local current_char_count_string_last_char_is_digit_int=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier=0\n   \
    \ local current_char_count_string_last_char_is_digit_int_multiplier_int=0\n  \
    \  local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier_int=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier_int_multiplier=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier_int_multiplier_int=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier_int_multiplier_int_multiplier=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier_int_multiplier_int_multiplier_int=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier_int_multiplier_int_multiplier_int_multiplier=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier_int_multiplier_int_multiplier_int_multiplier_int=0\n\
    \    local current_char_count_string_last_char_is_digit_int_multiplier_int_multiplier_int_multiplier_int_multiplier_int_multipl\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, awk,\
    \ etc.\n    # Hint: use echo -n to print without a newline\n    # Hint: use echo\
    \ -e to interpret backslash escapes\n    # Hint: use echo -e \"1\\n2\\n3\" to\
    \ print a list of integers\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l to count\
    \ the number of lines\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d '\
    \ ' to remove spaces\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d '\
    \ ' | tr -d '\\n' to remove newlines\n    # Hint: use echo -e \"1\\n2\\n3\" |\
    \ wc -l | tr -d ' ' | tr -d '\\n' | sed 's/^/1/' to prepend a 1\n    # Hint: use\
    \ echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' | tr -d '\\n' | sed 's/^/1/' | sed\
    \ 's/$/2/' to append a 2\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d\
    \ ' ' | tr -d '\\n' | sed 's/^/1/' | sed 's/$/2/' | sed 's/1/3/' to replace a\
    \ 1 with a 3\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' | tr -d\
    \ '\\n' | sed 's/^/1/' | sed 's/$/2/' | sed 's/1/3/' | sed 's/2/4/' to replace\
    \ a 2 with a 4\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' | tr\
    \ -d '\\n' | sed 's/^/1/' | sed '\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp5hexh1jk.sh: line 25: syntax error near unexpected token `}''

    /tmp/tmp5hexh1jk.sh: line 25: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local input=$1\n    local output=\"\"\n    local note_length=0\n    local\
    \ note_count=0\n    local note_type=\"\"\n    local note_type_count=0\n    local\
    \ note_type_length=0\n    local note_type_length_count=0\n    local note_type_length_count_count=0\n\
    \    local note_type_length_count_count_count=0\n    local note_type_length_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count=0\n    local note_type_length_count_count_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count_count_count=0\n    local\
    \ note_type_length_count_count_count_count_count_count_count_count=0\n    local\
    \ note_type_length_count_count_count_count_count_count_count_count_count=0\n \
    \   local note_type_length_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local note_type_length_count_count_count_count_count_count_count_count_count\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\
    \ //g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  # TODO: Implement this function\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  #\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmputn7a_pd.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmputn7a_pd.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, awk,\
    \ etc.\n    # Hint: use echo to return the result\n    echo \"TODO\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    # You can use echo to return a value\n    # echo\
    \ \"1 2 3\"\n    echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ //g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed\n    # Hint: use\
    \ tr\n    # Hint: use tr -d\n    # Hint: use tr -s\n    # Hint: use tr 'o' '4'\n\
    \    # Hint: use tr 'o|' '2'\n    # Hint: use tr '.|' '1'\n    # Hint: use tr\
    \ -d '\\n'\n    # Hint: use tr -s ' '\n    # Hint: use tr ' ' '\\n'\n    # Hint:\
    \ use tr -d ' '\n    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n  \
    \  # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr -d\
    \ '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint:\
    \ use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n\
    \    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr\
    \ -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint:\
    \ use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n\
    \    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr\
    \ -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint:\
    \ use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n    # Hint: use tr -d '\\n'\n\
    \    # Hint: use tr\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk0rt70ux.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpk0rt70ux.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local music=\"$1\"\n  local beats=0\n  local result=\"\"\n  for (( i=0;\
    \ i<${#music}; i++ )); do\n    if [[ \"${music:$i:1}\" == \"o\" ]]; then\n   \
    \   beats=4\n    elif [[ \"${music:$i:2}\" == \"o|\" ]]; then\n      beats=2\n\
    \      (( i++ ))\n    elif [[ \"${music:$i:2}\" == \".|\" ]]; then\n      beats=1\n\
    \      (( i++ ))\n    fi\n    result=\"$result $beats\"\n  done\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    # echo \"$1\"\n    # echo \"${1//o/4}\"\n    #\
    \ echo \"${1//o|/2}\"\n    # echo \"${1//.|/1}\"\n    echo \"${1//o/4}\" | sed\
    \ 's/o|/2/g' | sed 's/.|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | grep -o 'o' | wc -l\n    echo \"$1\" | grep -o 'o|' | wc\
    \ -l\n    echo \"$1\" | grep -o '.|' | wc -l\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local notes=()\n    local note=''\n\
    \    local i=0\n    local len=${#music}\n    while [ $i -lt $len ]; do\n     \
    \   case ${music:$i:1} in\n            'o')\n                beats=4\n       \
    \         ;;\n            'o|')\n                beats=2\n                ;;\n\
    \            '.|')\n                beats=1\n                ;;\n            *)\n\
    \                ;;\n        esac\n        notes+=($beats)\n        i=$((i+1))\n\
    \    done\n    echo ${notes[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  # TODO: implement this function\n  # Hint: use awk to split string by '|'\
    \ and then count characters in each substring\n  echo \"$1\" | awk -F'|' '{for(i=1;i<=NF;i++)\
    \ print length($i)}'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed and regexp\n   \
    \ # Hint: use echo -n to print without newline\n    # Hint: use tr to replace\
    \ characters\n    # Hint: use awk to split string into array\n    # Hint: use\
    \ seq to generate sequence of numbers\n    # Hint: use paste to merge arrays\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace characters\n    # Hint: use tr to replace characters\n\
    \    # Hint: use tr to replace\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpd3dx_k26.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmpd3dx_k26.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local result=\"\"\n    for ((\
    \ i=0; i<${#music}; i++ )); do\n        local char=${music:$i:1}\n        if [[\
    \ $char == \"o\" ]]; then\n            beats=4\n        elif [[ $char == \".\"\
    \ ]]; then\n            beats=1\n        elif [[ $char == \"|\" ]]; then\n   \
    \         result+=\"$beats \"\n            beats=0\n        fi\n    done\n   \
    \ echo $result\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local beats=0\n    local result=\"\"\n    local\
    \ current_beat=0\n    local note_length=0\n    local note_type=\"\"\n    local\
    \ note_type_length=0\n    local note_type_length_multiplier=0\n    local note_type_length_multiplier_divider=0\n\
    \    local note_type_length_multiplier_divider_divider=0\n    local note_type_length_multiplier_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider=0\n   \
    \ local note_type_length_multiplier_divider_divider_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider_divider_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider_divider_divider_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider=0\n\
    \    local note_type_length_multiplier_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider_divider=0\n\
    \    local note_\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g'\
    \ -e 's/\\.|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, grep, sed, awk,\
    \ etc.\n    # Hint: use echo to return the result\n    echo $1 | tr 'o|.' '1111'\
    \ | grep -o '1' | wc -l\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes\n    local -a beats\n    local -a result\n    local note\n\
    \    local beat\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n   \
    \ local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local\
    \ jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n \
    \   local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local\
    \ uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n \
    \   local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n  \
    \  local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n   \
    \ local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local\
    \ ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n\
    \    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n \
    \   local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n\
    \    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n\
    \    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n\
    \    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n\
    \    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n\
    \    local zzzz\n    local aaaaa\n    local bbbbb\n    local ccccc\n\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local beats=()\n    local beat=0\n    local i=0\n\
    \    local len=${#music}\n    while [ $i -lt $len ]; do\n        case \"${music:$i:1}\"\
    \ in\n            'o')\n                beat=4\n                ;;\n         \
    \   'o'|'.')\n                beat=2\n                i=$((i+1))\n           \
    \     ;;\n            '|')\n                beat=1\n                ;;\n     \
    \       *)\n                echo \"Invalid input\"\n                return 1\n\
    \                ;;\n        esac\n        beats+=($beat)\n        i=$((i+1))\n\
    \    done\n    echo \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes=($(echo \"$1\" | sed 's/o|/o/g' | sed 's/\\.|/\\./g'))\n\
    \    local -a beats=($(echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g'))\n    local -a result=()\n    for i in \"${!notes[@]}\"; do\n       \
    \ result+=(${beats[$i]})\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes=($(echo \"$1\" | sed -e 's/o/4/g' -e 's/\\./1/g' -e 's/|/\
    \ /g'))\n    echo \"${notes[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local notes=$1\n    local beats=()\n    local beat=0\n    local note=''\n\
    \    local i=0\n    local len=${#notes}\n    while [ $i -lt $len ]; do\n     \
    \   note=${notes:$i:1}\n        if [ \"$note\" == 'o' ]; then\n            beat=4\n\
    \        elif [ \"$note\" == '.' ]; then\n            beat=1\n        fi\n   \
    \     beats+=($beat)\n        i=$((i+2))\n    done\n    echo ${beats[@]}\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: write your code here\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g'\
    \ -e 's/\\.|/1/g' | tr -d ' '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/\\|//g' | sed 's/ //g'\n}\n\ncandidate() {\n   \
    \ parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: write your code here\n    # echo \"TODO\"\n    # echo $1\n  \
    \  # echo ${#1}\n    # echo ${1:0:1}\n    # echo ${1:1:1}\n    # echo ${1:2:1}\n\
    \    # echo ${1:3:1}\n    # echo ${1:4:1}\n    # echo ${1:5:1}\n    # echo ${1:6:1}\n\
    \    # echo ${1:7:1}\n    # echo ${1:8:1}\n    # echo ${1:9:1}\n    # echo ${1:10:1}\n\
    \    # echo ${1:11:1}\n    # echo ${1:12:1}\n    # echo ${1:13:1}\n    # echo\
    \ ${1:14:1}\n    # echo ${1:15:1}\n    # echo ${1:16:1}\n    # echo ${1:17:1}\n\
    \    # echo ${1:18:1}\n    # echo ${1:19:1}\n    # echo ${1:20:1}\n    # echo\
    \ ${1:21:1}\n    # echo ${1:22:1}\n    # echo ${1:23:1}\n    # echo ${1:24:1}\n\
    \    # echo ${1:25:1}\n    # echo ${1:26:1}\n    # echo ${1:27:1}\n    # echo\
    \ ${1:28:1}\n    # echo ${1:29:1}\n    # echo ${1:30:1}\n    # echo ${1:31:1}\n\
    \    # echo ${1:32:1}\n    # echo ${1:33:1}\n    # echo ${1:34:1}\n    # echo\
    \ ${1:35:1}\n    # echo ${1:36:1}\n    # echo ${1:37:1}\n    # echo ${1:38:1}\n\
    \    # echo ${1:39:1}\n    # echo ${1:40:1}\n    # echo ${1:41:1}\n    # echo\
    \ ${1:42:1}\n    # echo ${1\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpr5kz1rtq.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpr5kz1rtq.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo $1 | tr -d ' ' | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/|/ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local input=$1\n    local output=\"\"\n    local note=\"\"\n    local\
    \ beat=0\n    local i=0\n    local len=${#input}\n    while [ $i -lt $len ]; do\n\
    \        note=${input:$i:1}\n        if [ \"$note\" == \"o\" ]; then\n       \
    \     beat=4\n        elif [ \"$note\" == \"o\" ]; then\n            beat=2\n\
    \        elif [ \"$note\" == \".\" ]; then\n            beat=1\n        fi\n \
    \       output=\"$output $beat\"\n        i=$((i+1))\n    done\n    echo $output\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: Implement this function\n    # Hint: You can use bash regexp\
    \ matching\n    # Hint: You can use bash arrays\n    # Hint: You can use bash\
    \ string manipulation\n    # Hint: You can use bash arithmetic\n    # Hint: You\
    \ can use bash substring extraction\n    # Hint: You can use bash string length\n\
    \    # Hint: You can use bash string splitting\n    # Hint: You can use bash string\
    \ joining\n    # Hint: You can use bash string replacement\n    # Hint: You can\
    \ use bash string trimming\n    # Hint: You can use bash string padding\n    #\
    \ Hint: You can use bash string slicing\n    # Hint: You can use bash string comparison\n\
    \    # Hint: You can use bash string case conversion\n    # Hint: You can use\
    \ bash string prefix/suffix checking\n    # Hint: You can use bash string indexing\n\
    \    # Hint: You can use bash string iteration\n    # Hint: You can use bash string\
    \ concatenation\n    # Hint: You can use bash string repetition\n    # Hint: You\
    \ can use bash string reversal\n    # Hint: You can use bash string sorting\n\
    \    # Hint: You can use bash string searching\n    # Hint: You can use bash string\
    \ splitting\n    # Hint: You can use bash string joining\n    # Hint: You can\
    \ use bash string replacement\n    # Hint: You can use bash string trimming\n\
    \    # Hint: You can use bash string padding\n    # Hint: You can use bash string\
    \ slicing\n    # Hint: You can use bash string comparison\n    # Hint: You can\
    \ use bash string case conversion\n    # Hint: You can use bash string prefix/suffix\
    \ checking\n    # Hint: You can use bash string indexing\n    # Hint: You can\
    \ use bash string iteration\n    # Hint: You can use bash string concatenation\n\
    \    # Hint: You can use bash string repetition\n    # Hint: You can use bash\
    \ string reversal\n    # Hint: You can use bash string sorting\n    # Hint: You\
    \ can use bash string searching\n    # Hint: You can use bash string splitting\n\
    \    # Hint: You can use bash string joining\n    # Hint\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7_q_ixrn.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmp7_q_ixrn.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local music=\"$1\"\n  local beats=0\n  local result=\"\"\n  local i=0\n\
    \  local len=${#music}\n  while [ $i -lt $len ]; do\n    case \"${music:$i:1}\"\
    \ in\n      'o')\n        beats=4\n        ;;\n      'o|')\n        beats=2\n\
    \        ;;\n      '.|')\n        beats=1\n        ;;\n      *)\n        beats=0\n\
    \        ;;\n    esac\n    result=\"$result $beats\"\n    i=$((i+1))\n  done\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d '\\n' | sed 's/[^0-9]/\
    \ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local result=\"\"\n    local notes=(\"\
    o\" \"o|\" \".|\")\n    local beats_per_note=(4 2 1)\n    local i=0\n    local\
    \ j=0\n    local note=\"\"\n    local beat=0\n    local beat_count=0\n    local\
    \ beat_count_sum=0\n    local beat_count_sum_prev=0\n    local beat_count_sum_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev=0\n    local beat_count_sum_prev_prev_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev_prev_prev=0\n    local beat_count_sum_prev_prev_prev_prev_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev_prev_prev_prev_prev=0\n    local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n   \
    \ local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n \
    \   local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local beat_count_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed, tr, and grep\n\
    \    # Hint: use echo to return the result\n    echo $1 | sed -e 's/o/4/g' -e\
    \ 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | grep -v '^$'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d ' ' | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d '\\n' | sed 's/[^0-9]/\\\
    n/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr and sed\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use echo -e to interpret backslash\
    \ escapes\n    # Hint: use echo -n to print without newline\n    # Hint: use echo\
    \ -e to interpret backslash escapes\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash escapes\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use echo -e to interpret backslash\
    \ escapes\n    # Hint: use echo -n to print without newline\n    # Hint: use echo\
    \ -e to interpret backslash escapes\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash escapes\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use echo -e to interpret backslash\
    \ escapes\n    # Hint: use echo -n to print without newline\n    # Hint: use echo\
    \ -e to interpret backslash escapes\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash escapes\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use echo -e to interpret backslash\
    \ escapes\n    # Hint: use echo -n to print without newline\n    # Hint: use echo\
    \ -e to interpret backslash escapes\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash escapes\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use echo -e to interpret backslash\
    \ escapes\n    # Hint: use echo -n to print without newline\n    # Hint: use echo\
    \ -e to interpret backslash escapes\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use echo -e to interpret backslash escapes\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use echo -e to interpret back\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpck58nc03.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmpck58nc03.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use `echo $1 | grep -o 'o|o|.|'`\
    \ to get a list of notes\n    # Hint: use `echo $1 | grep -o 'o|o|.|' | wc -l`\
    \ to get a number of notes\n    # Hint: use `echo $1 | grep -o 'o|o|.|' | sed\
    \ 's/o/4/g' | sed 's/o/2/g' | sed 's/\\./1/g'` to get a list of beats\n    # Hint:\
    \ use `echo $1 | grep -o 'o|o|.|' | sed 's/o/4/g' | sed 's/o/2/g' | sed 's/\\\
    ./1/g' | tr '\\n' ' '` to get a list of beats separated by spaces\n    # Hint:\
    \ use `echo $1 | grep -o 'o|o|.|' | sed 's/o/4/g' | sed 's/o/2/g' | sed 's/\\\
    ./1/g' | tr '\\n' ' ' | sed 's/\\s/\\n/g'` to get a list of beats separated by\
    \ newlines\n    echo $1 | grep -o 'o|o|.|' | sed 's/o/4/g' | sed 's/o/2/g' | sed\
    \ 's/\\./1/g' | tr '\\n' ' ' | sed 's/\\s/\\n/g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local input=$1\n  local output=\"\"\n  local note_length=0\n  local note_count=0\n\
    \  local note_char=\"\"\n  local note_char_prev=\"\"\n  local note_char_next=\"\
    \"\n  local note_char_next_next=\"\"\n  local note_char_next_next_next=\"\"\n\
    \  local note_char_next_next_next_next=\"\"\n  local note_char_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next=\"\"\n  local note_char_next_next_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next_next_next=\"\"\n  local note_char_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next_next_next_next_next=\"\"\n\
    \  local note_char_next_next_next_next_next_next_next_next_next_next_next=\"\"\
    \n  local note_char_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local music=\"$1\"\n  local beats=0\n  local result=\"\"\n  for (( i=0;\
    \ i<${#music}; i++ )); do\n    if [[ \"${music:$i:1}\" == \"o\" ]]; then\n   \
    \   beats=4\n    elif [[ \"${music:$i:2}\" == \"o|\" ]]; then\n      beats=2\n\
    \      i=$((i+1))\n    elif [[ \"${music:$i:2}\" == \".|\" ]]; then\n      beats=1\n\
    \      i=$((i+1))\n    else\n      result=\"$result $beats\"\n      beats=0\n\
    \    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: Implement this function\n    # Hint: You can use bash's built-in\
    \ string manipulation functions\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: You can use bash's built-in arithmetic functions\n    # http://tldp.org/LDP/abs/html/arithexp.html\n\
    \    # Hint: You can use bash's built-in array manipulation functions\n    # http://tldp.org/LDP/abs/html/arrays.html\n\
    \    # Hint: You can use bash's built-in regex matching functions\n    # http://tldp.org/LDP/abs/html/bashver3.html#PATTERNS\n\
    \    # Hint: You can use bash's built-in string manipulation functions\n    #\
    \ http://tldp.org/LDP/abs/html/string-manipulation.html\n    # Hint: You can use\
    \ bash's built-in arithmetic functions\n    # http://tldp.org/LDP/abs/html/arithexp.html\n\
    \    # Hint: You can use bash's built-in array manipulation functions\n    # http://tldp.org/LDP/abs/html/arrays.html\n\
    \    # Hint: You can use bash's built-in regex matching functions\n    # http://tldp.org/LDP/abs/html/bashver3.html#PATTERNS\n\
    \    # Hint: You can use bash's built-in string manipulation functions\n    #\
    \ http://tldp.org/LDP/abs/html/string-manipulation.html\n    # Hint: You can use\
    \ bash's built-in arithmetic functions\n    # http://tldp.org/LDP/abs/html/arithexp.html\n\
    \    # Hint: You can use bash's built-in array manipulation functions\n    # http://tldp.org/LDP/abs/html/arrays.html\n\
    \    # Hint: You can use bash's built-in regex matching functions\n    # http://tldp.org/LDP/abs/html/bashver3.html#PATTERNS\n\
    \    # Hint: You can\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2bvi67wy.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmp2bvi67wy.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, awk,\
    \ etc.\n    # Hint: you can use a temporary file\n    # Hint: you can use a pipe\n\
    \    # Hint: you can use a pipe and a temporary file\n    # Hint: you can use\
    \ multiple pipes\n    # Hint: you can use multiple pipes and a temporary file\n\
    \    # Hint: you can use multiple pipes and multiple temporary files\n    # Hint:\
    \ you can use multiple pipes and multiple temporary files and a pipe\n    # Hint:\
    \ you can use multiple pipes and multiple temporary files and a pipe and a temporary\
    \ file\n    # Hint: you can use multiple pipes and multiple temporary files and\
    \ a pipe and a temporary file and a pipe\n    # Hint: you can use multiple pipes\
    \ and multiple temporary files and a pipe and a temporary file and a pipe and\
    \ a temporary file\n    # Hint: you can use multiple pipes and multiple temporary\
    \ files and a pipe and a temporary file and a pipe and a temporary file and a\
    \ pipe\n    # Hint: you can use multiple pipes and multiple temporary files and\
    \ a pipe and a temporary file and a pipe and a temporary file and a pipe and a\
    \ temporary file\n    # Hint: you can use multiple pipes and multiple temporary\
    \ files and a pipe and a temporary file and a pipe and a temporary file and a\
    \ pipe and a temporary file and a pipe\n    # Hint: you can use multiple pipes\
    \ and multiple temporary files and a pipe and a temporary file and a pipe and\
    \ a temporary file and a pipe and a temporary file and a pipe and a temporary\
    \ file\n    # Hint: you can use multiple pipes and multiple temporary files and\
    \ a pipe and a temporary file and a pipe and a temporary file and a pipe and a\
    \ temporary file and a pipe and a temporary file and a pipe\n    # Hint: you can\
    \ use multiple pipes and multiple temporary files and a pipe and a temporary file\
    \ and a pipe and a temporary file and a pipe and a temporary file and a pipe and\
    \ a temporary file and a pipe and a temporary file\n    # Hint: you can use multiple\
    \ pipes and multiple temporary files and a pipe and a temporary file and a pipe\
    \ and a temporary file and a pipe and a temporary file and a pipe and a temporary\
    \ file and a pipe and a temporary file and a pipe\n    # Hint: you can use multiple\
    \ pipes and multiple\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps58f0g3z.sh: line 32: syntax error near unexpected token `}''

    /tmp/tmps58f0g3z.sh: line 32: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local -a notes=($(echo \"$1\" | sed 's/o|/o/g' | sed 's/\\.|/\\./g'))\n\
    \  local -a beats=($(echo \"$1\" | sed 's/o/4/g' | sed 's/\\./1/g' | sed 's/|//g'))\n\
    \  local -a result=()\n  for ((i=0; i<${#notes[@]}; i++)); do\n    if [[ \"${notes[$i]}\"\
    \ == \"o\" ]]; then\n      result+=(4)\n    elif [[ \"${notes[$i]}\" == \".\"\
    \ ]]; then\n      result+=(1)\n    else\n      result+=(${beats[$i]})\n    fi\n\
    \  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, grep, sed, awk,\
    \ etc.\n    # Hint: use echo to return a value\n    echo \"$1\" | tr -d ' ' |\
    \ sed 's/o|/.|/g' | sed 's/o/..../g' | sed 's/\\./1/g' | sed 's/\\|/0/g' | sed\
    \ 's/^/1/' | sed 's/1$/1/' | sed 's/0$/0/' | sed 's/1/1 /g' | sed 's/0/0 /g' |\
    \ sed 's/^ //' | awk '{for(i=1;i<=NF;i++) printf \"%d \",$i}'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/|//g' | sed 's/ //g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local string=\"$1\"\n    local result=\"\"\n    local i=0\n    local\
    \ length=${#string}\n    while [ $i -lt $length ]; do\n        case \"${string:$i:1}\"\
    \ in\n            'o')\n                result=\"$result 4\"\n               \
    \ i=$((i+1))\n                ;;\n            'o|')\n                result=\"\
    $result 2\"\n                i=$((i+2))\n                ;;\n            '.|')\n\
    \                result=\"$result 1\"\n                i=$((i+2))\n          \
    \      ;;\n            *)\n                echo \"Invalid input\"\n          \
    \      exit 1\n                ;;\n        esac\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr -d\
    \ ' '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr and sed\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use echo -e to print escaped\
    \ characters\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l to count number of\
    \ lines in a string\n    # Hint: use echo -e \"1\\n2\\n3\" | tail -n 1 to get\
    \ the last line of a string\n    # Hint: use echo -e \"1\\n2\\n3\" | head -n 1\
    \ to get the first line of a string\n    # Hint: use echo -e \"1\\n2\\n3\" | head\
    \ -n -1 to get all lines except the last one\n    # Hint: use echo -e \"1\\n2\\\
    n3\" | tail -n +2 to get all lines except the first one\n    # Hint: use echo\
    \ -e \"1\\n2\\n3\" | sed 's/\\n/,/g' to replace newlines with commas\n    # Hint:\
    \ use echo -e \"1\\n2\\n3\" | sed 's/\\n/,/g' | sed 's/^,//' to replace newlines\
    \ with commas and remove the first comma\n    # Hint: use echo -e \"1\\n2\\n3\"\
    \ | sed 's/\\n/,/g' | sed 's/^,//' | sed 's/,$//' to replace newlines with commas\
    \ and remove the first and last comma\n    # Hint: use echo -e \"1\\n2\\n3\" |\
    \ sed 's/\\n/,/g' | sed 's/^,//' | sed 's/,$//' | sed 's/,/, /g' to replace newlines\
    \ with commas and remove the first and last comma and add spaces after commas\n\
    \    # Hint: use echo -e \"1\\n2\\n3\" | sed 's/\\n/,/g' | sed 's/^,//' | sed\
    \ 's/,$//' | sed 's/,/, /g' | sed 's/^ //' to replace newlines with commas and\
    \ remove the first and last\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpts0zpcvi.sh: line 26: syntax error near unexpected token `}''

    /tmp/tmpts0zpcvi.sh: line 26: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/|/\
    \ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local -a notes\n    local -a beats\n    local\
    \ -a result\n    local i\n    local j\n    local k\n    local note\n    local\
    \ beat\n    local -i count\n    local -i sum\n\n    notes=($(echo \"$music\" |\
    \ sed 's/|/ /g'))\n    beats=($(echo \"$music\" | sed 's/o/4 /g;s/\\./1 /g;s/|/2\
    \ /g'))\n\n    for ((i=0; i<${#notes[@]}; i++)); do\n        note=${notes[$i]}\n\
    \        beat=${beats[$i]}\n        count=0\n        sum=0\n        for ((j=0;\
    \ j<${#note}; j++)); do\n            if [[ ${note:$j:1} == 'o' ]]; then\n    \
    \            count=$((count+1))\n            fi\n        done\n        for ((k=0;\
    \ k<count; k++)); do\n            result[$((i+k))]=$((beat/count))\n         \
    \   sum=$((sum+beat/count))\n        done\n        if [[ $sum -lt $beat ]]; then\n\
    \            result[$((i+count))]=$((beat-sum))\n        fi\n    done\n\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local input=$1\n    local output=\"\"\n    local i=0\n    local len=${#input}\n\
    \    local char=\"\"\n    local char_prev=\"\"\n    local char_next=\"\"\n   \
    \ local char_next_next=\"\"\n    local char_next_next_next=\"\"\n    local char_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next=\"\"\n    local char_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next=\"\"\n    local char_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next=\"\"\n    local\
    \ char_next_next_next_next_next_next_next_next_next_next=\"\"\n    local char_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # HINT: use tr, grep, sed, and other\
    \ tools\n    # HINT: use echo to return the result\n    echo \"$1\" | tr -d 'o'\
    \ | tr -d '.' | tr -d '|' | wc -c\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d '\\n' | sed 's/[^0-9]/\
    \ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music_string=$1\n    local beats=0\n    local beats_list=()\n \
    \   local beat_counter=0\n    local beat_counter_list=()\n    local beat_counter_list_index=0\n\
    \    local beat_counter_list_length=0\n    local beat_counter_list_length_index=0\n\
    \    local beat_counter_list_length_index_plus_one=0\n    local beat_counter_list_length_index_plus_two=0\n\
    \    local beat_counter_list_length_index_plus_three=0\n    local beat_counter_list_length_index_plus_four=0\n\
    \    local beat_counter_list_length_index_plus_five=0\n    local beat_counter_list_length_index_plus_six=0\n\
    \    local beat_counter_list_length_index_plus_seven=0\n    local beat_counter_list_length_index_plus_eight=0\n\
    \    local beat_counter_list_length_index_plus_nine=0\n    local beat_counter_list_length_index_plus_ten=0\n\
    \    local beat_counter_list_length_index_plus_eleven=0\n    local beat_counter_list_length_index_plus_twelve=0\n\
    \    local beat_counter_list_length_index_plus_thirteen=0\n    local beat_counter_list_length_index_plus_fourteen=0\n\
    \    local beat_counter_list_length_index_plus_fifteen=0\n    local beat_counter_list_length_index_plus_sixteen=0\n\
    \    local beat_counter_list_length_index_plus_seventeen=0\n    local beat_counter_list_length_index_plus_eighteen=0\n\
    \    local beat_counter_list_length_index_plus_nineteen=0\n    local beat_counter_list_length_index_plus_twenty=0\n\
    \    local beat_counter_list_length_index_plus_twenty_one=0\n    local beat_counter_list_length_index_plus_twenty_two=0\n\
    \    local beat_counter_list_length_index_plus_twenty_three=0\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local result=\"\"\n    local i=0\n\
    \    local len=${#music}\n    while [ $i -lt $len ]; do\n        case ${music:$i:1}\
    \ in\n            \"o\")\n                beats=4\n                ;;\n      \
    \      \"o|\")\n                beats=2\n                ;;\n            \".|\"\
    )\n                beats=1\n                ;;\n            *)\n             \
    \   echo \"Invalid input\"\n                exit 1\n                ;;\n     \
    \   esac\n        result=\"$result $beats\"\n        i=$((i+1))\n    done\n  \
    \  echo $result\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n\t# TODO: implement this function\n\t# Hint: use tr, grep, sed and other\
    \ tools\n\t# Hint: you can use the following variable to store the result\n\t\
    local result=\"\"\n\tresult=$(echo $1 | tr -d ' ' | sed 's/o|/2/g' | sed 's/o/4/g'\
    \ | sed 's/\\.|/1/g' | sed 's/\\./1/g' | sed 's/\\|//g')\n\techo $result\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: you can use 'echo' to output\
    \ a string to stdout\n    # Hint: you can use 'read' to read a string from stdin\n\
    \    # Hint: you can use 'expr' to evaluate arithmetic expressions\n    # Hint:\
    \ you can use 'bc' to evaluate arithmetic expressions\n    # Hint: you can use\
    \ 'tr' to translate characters\n    # Hint: you can use 'rev' to reverse a string\n\
    \    # Hint: you can use 'grep' to find a substring\n    # Hint: you can use 'sed'\
    \ to find and replace a substring\n    # Hint: you can use 'sort' to sort lines\
    \ of text\n    # Hint: you can use 'uniq' to remove duplicate lines of text\n\
    \    # Hint: you can use 'wc' to count lines, words, characters\n    # Hint: you\
    \ can use 'cut' to extract fields from a line\n    # Hint: you can use 'paste'\
    \ to merge lines\n    # Hint: you can use 'head' to get the first lines of a file\n\
    \    # Hint: you can use 'tail' to get the last lines of a file\n    # Hint: you\
    \ can use 'seq' to generate a sequence of numbers\n    # Hint: you can use 'tee'\
    \ to redirect output to multiple files\n    # Hint: you can use 'xargs' to execute\
    \ a command with arguments from stdin\n    # Hint: you can use 'find' to find\
    \ files\n    # Hint: you can use 'xargs' to execute a command with arguments from\
    \ stdin\n    # Hint: you can use 'find' to find files\n    # Hint: you can use\
    \ 'xargs' to execute a command with arguments from stdin\n    # Hint: you can\
    \ use 'find' to find files\n    # Hint: you can use 'xargs' to execute a command\
    \ with arguments from stdin\n    # Hint: you can use 'find' to find files\n  \
    \  # Hint: you can use 'xargs' to execute a command with arguments from stdin\n\
    \    # Hint: you can use 'find' to find files\n    # Hint: you can use 'xargs'\
    \ to\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplwwzthki.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmplwwzthki.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed and tr\n    echo\
    \ \"$1\" | sed -e 's/o|/2/g' -e 's/o/4/g' -e 's/\\.|/1/g' | tr ' ' '\\n'\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\\\
    |//g' | sed 's/ //g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  # TODO: implement this function\n  # Hint: you can use bash's built-in\
    \ string manipulation functions\n  # Hint: you can use bash's built-in arithmetic\
    \ functions\n  # Hint: you can use bash's built-in array manipulation functions\n\
    \  # Hint: you can use bash's built-in regex matching functions\n  # Hint: you\
    \ can use bash's built-in string splitting functions\n  # Hint: you can use bash's\
    \ built-in string joining functions\n  # Hint: you can use bash's built-in string\
    \ trimming functions\n  # Hint: you can use bash's built-in string replacing functions\n\
    \  # Hint: you can use bash's built-in string searching functions\n  # Hint: you\
    \ can use bash's built-in string counting functions\n  # Hint: you can use bash's\
    \ built-in string length functions\n  # Hint: you can use bash's built-in string\
    \ substring functions\n  # Hint: you can use bash's built-in string to number\
    \ conversion functions\n  # Hint: you can use bash's built-in number to string\
    \ conversion functions\n  # Hint: you can use bash's built-in string to array\
    \ conversion functions\n  # Hint: you can use bash's built-in array to string\
    \ conversion functions\n  # Hint: you can use bash's built-in string to regex\
    \ conversion functions\n  # Hint: you can use bash's built-in regex to string\
    \ conversion functions\n  # Hint: you can use bash's built-in string to integer\
    \ conversion functions\n  # Hint: you can use bash's built-in integer to string\
    \ conversion functions\n  # Hint: you can use bash's built-in string to float\
    \ conversion functions\n  # Hint: you can use bash's built-in float to string\
    \ conversion functions\n  # Hint: you can use bash's built-in string to boolean\
    \ conversion functions\n  # Hint: you can use bash's built-in boolean to string\
    \ conversion functions\n  # Hint: you can use bash's built-in string to character\
    \ conversion functions\n  # Hint: you can use bash's built-in character to string\
    \ conversion functions\n  # Hint: you can use bash's built-in string to byte conversion\
    \ functions\n  # Hint: you can use bash's built-\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51r06quq.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmp51r06quq.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  # TODO: implement this function\n  # Hint: use tr and sed\n  # Hint: use\
    \ echo to return the result\n  echo \"$1\" | tr -d ' ' | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | tr -d ' ' | sed 's/o|/.|/g' | sed 's/o/..../g' | sed 's/\\\
    ./1/g' | sed 's/\\|/2/g' | sed 's/\\(.\\)/\\1 /g' | tr -d '\\n'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo \"$1\" | tr -d '\\n' | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d '\
    \ '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\
    \ //g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed\n    # Hint: use\
    \ echo -n to avoid newline\n    # Hint: use tr to remove spaces\n    # Hint: use\
    \ grep -o to match only one character\n    # Hint: use wc -l to count number of\
    \ lines\n    # Hint: use bc to do math\n    # Hint: use echo to print the result\n\
    \    # Hint: use echo -n to avoid newline\n    # Hint: use tr to remove spaces\n\
    \    # Hint: use grep -o to match only one character\n    # Hint: use wc -l to\
    \ count number of lines\n    # Hint: use bc to do math\n    # Hint: use echo to\
    \ print the result\n    echo -n $(echo $1 | tr -d ' ' | grep -o 'o' | wc -l |\
    \ bc)\n    echo -n $(echo $1 | tr -d ' ' | grep -o 'o|' | wc -l | bc)\n    echo\
    \ -n $(echo $1 | tr -d ' ' | grep -o '.|' | wc -l | bc)\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed and tr\n    echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/.|/1/g' | tr -d '\\n'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, wc, and\
    \ other tools\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # Hint: you can use a pipe to pass the output of one command\
    \ to another\n    # H\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprlm7b5my.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmprlm7b5my.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local notes=\"$1\"\n    local result=\"\"\n    local note=\"\"\n    local\
    \ beats=0\n    local i=0\n    local len=${#notes}\n    while [ $i -lt $len ];\
    \ do\n        note=\"${notes:$i:1}\"\n        case \"$note\" in\n            'o')\n\
    \                beats=4\n                ;;\n            'o|')\n            \
    \    beats=2\n                ;;\n            '.|')\n                beats=1\n\
    \                ;;\n            *)\n                beats=0\n               \
    \ ;;\n        esac\n        if [ $beats -gt 0 ]; then\n            if [ -n \"\
    $result\" ]; then\n                result=\"$result $beats\"\n            else\n\
    \                result=\"$beats\"\n            fi\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"$result\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Write your code here\n    # You can use echo to output the result\n\
    \    # Example: echo \"1 2 3\"\n    echo \"1 2 3\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local beats=0\n    local result=\"\"\n    local\
    \ note=\"\"\n    local length=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n\
    \    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n\
    \    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n\
    \    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n\
    \    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n\
    \    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local\
    \ ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n\
    \    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local\
    \ mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n\
    \    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local\
    \ vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n\
    \    local aaaa=0\n    local bbbb=0\n    local cccc\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    # echo \"o|.|o|.|o|.|o|.|\"\n    # echo \"o|o|o|o|o|o|o|o|\"\
    \n    # echo \"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\"\n    # echo \"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsgijgtbe.sh: line 17: syntax error near unexpected token `}''

    /tmp/tmpsgijgtbe.sh: line 17: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: Implement this function\n    # Hint: use sed to replace all o|\
    \ with o o| and then replace all .| with . .|\n    # Then use tr to replace all\
    \ o with 4 and . with 1\n    # Finally use tr to replace all spaces with newlines\n\
    \    #\n    # Example:\n    # echo \"o|.|o|.|\" | parse_music\n    # should output:\n\
    \    # 2\n    # 1\n    # 2\n    # 1\n    #\n    # echo \"o|o|o|o|\" | parse_music\n\
    \    # should output:\n    # 4\n    # 4\n    # 4\n    # 4\n    #\n    # echo \"\
    o|.|o|.|o|.|o|.|\" | parse_music\n    # should output:\n    # 2\n    # 1\n   \
    \ # 2\n    # 1\n    # 2\n    # 1\n    # 2\n    # 1\n    #\n    # echo \"o|o|o|o|o|o|o|o|\"\
    \ | parse_music\n    # should output:\n    # 4\n    # 4\n    # 4\n    # 4\n  \
    \  # 4\n    # 4\n    # 4\n    # 4\n    #\n    # echo \"o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|\"\
    \ | parse_music\n    # should output:\n    # 2\n    # 1\n    # 2\n    # 1\n  \
    \  # 2\n    # 1\n    # 2\n    # 1\n    # 2\n    # 1\n    # 2\n    # 1\n    # 2\n\
    \    # 1\n    #\n    # echo \"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\" | parse_music\n\
    \    # should output:\n    # 4\n    # 4\n    # 4\n    # 4\n    # 4\n    # 4\n\
    \    # 4\n    # 4\n    # 4\n    # 4\n    # 4\n    # 4\n    # 4\n    # 4\n    #\
    \ 4\n    #\n    #\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7ivyiedr.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmp7ivyiedr.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  # TODO: Implement this function\n  # Hint: use sed and tr\n  # Hint: use\
    \ echo -n to print without newline\n  # Hint: use echo -e to interpret escape\
    \ sequences\n  # Hint: use echo -e \"1\\n2\\n3\" | wc -l to count number of lines\
    \ in a string\n  # Hint: use echo -e \"1\\n2\\n3\" | wc -w to count number of\
    \ words in a string\n  # Hint: use echo -e \"1\\n2\\n3\" | wc -m to count number\
    \ of characters in a string\n  # Hint: use echo -e \"1\\n2\\n3\" | wc -L to count\
    \ length of the longest line in a string\n  # Hint: use echo -e \"1\\n2\\n3\"\
    \ | wc -c to count number of bytes in a string\n  # Hint: use echo -e \"1\\n2\\\
    n3\" | wc -w to count number of words in a string\n  # Hint: use echo -e \"1\\\
    n2\\n3\" | wc -m to count number of characters in a string\n  # Hint: use echo\
    \ -e \"1\\n2\\n3\" | wc -L to count length of the longest line in a string\n \
    \ # Hint: use echo -e \"1\\n2\\n3\" | wc -c to count number of bytes in a string\n\
    \  # Hint: use echo -e \"1\\n2\\n3\" | wc -w to count number of words in a string\n\
    \  # Hint: use echo -e \"1\\n2\\n3\" | wc -m to count number of characters in\
    \ a string\n  # Hint: use echo -e \"1\\n2\\n3\" | wc -L to count length of the\
    \ longest line in a string\n  # Hint: use echo -e \"1\\n2\\n3\" | wc -c to count\
    \ number of bytes in a string\n  # Hint: use echo -e \"1\\n2\\n3\" | wc -w to\
    \ count number of words in a string\n  # Hint: use echo -e\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpao5dwslv.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmpao5dwslv.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=()\n    local beat=0\n    local note=''\n\
    \    local note_len=0\n    local i=0\n    local len=${#music}\n\n    while [ $i\
    \ -lt $len ]; do\n        note=${music:$i:1}\n        if [ \"$note\" == 'o' ];\
    \ then\n            note_len=4\n        elif [ \"$note\" == 'o' ]; then\n    \
    \        note_len=2\n        elif [ \"$note\" == '.' ]; then\n            note_len=1\n\
    \        fi\n        beats+=($note_len)\n        i=$((i+2))\n    done\n\n    echo\
    \ ${beats[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, cut,\
    \ etc.\n    # Hint: use echo to return a value\n    # Hint: use echo -n to return\
    \ a value without a newline\n    # Hint: use echo -e to interpret backslash escapes\n\
    \    # Hint: use echo -n -e to interpret backslash escapes without a newline\n\
    \    # Hint: use | to pipe output of one command to another\n    # Hint: use $()\
    \ to capture output of a command\n    # Hint: use $1 to access the first argument\
    \ to the function\n    # Hint: use $# to access the number of arguments to the\
    \ function\n    # Hint: use $@ to access all arguments to the function\n    #\
    \ Hint: use $? to access the exit status of the last command\n    # Hint: use\
    \ $! to access the PID of the last command\n    # Hint: use $0 to access the name\
    \ of the script\n    # Hint: use $LINENO to access the current line number\n \
    \   # Hint: use $RANDOM to access a random number\n    # Hint: use $SECONDS to\
    \ access the number of seconds since the script started\n    # Hint: use $BASH_VERSION\
    \ to access the version of bash\n    # Hint: use $BASH_SOURCE to access the name\
    \ of the script\n    # Hint: use $BASH_LINENO to access the current line number\n\
    \    # Hint: use $BASH_SOURCE[0] to access the name of the script\n    # Hint:\
    \ use $BASH_SOURCE[1] to access the name of the script\n    # Hint: use $BASH_SOURCE[2]\
    \ to access the name of the script\n    # Hint: use $BASH_SOURCE[3] to access\
    \ the name of the script\n    # Hint: use $BASH_SOURCE[4] to access the name of\
    \ the script\n    # Hint: use $BASH_SOURCE[5] to access the name of the script\n\
    \    # Hint: use $BASH_SOURCE[6] to access the name of the script\n    # Hint:\
    \ use $BASH_SOURCE[7] to access the name of\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsz_di2q9.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpsz_di2q9.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use a loop and a case statement\n\
    \    # Hint: use a counter to keep track of the number of beats\n    # Hint: use\
    \ a variable to keep track of the current note\n    # Hint: use a variable to\
    \ keep track of the current note length\n    # Hint: use a variable to keep track\
    \ of the current note length\n    # Hint: use a variable to keep track of the\
    \ current note length\n    # Hint: use a variable to keep track of the current\
    \ note length\n    # Hint: use a variable to keep track of the current note length\n\
    \    # Hint: use a variable to keep track of the current note length\n    # Hint:\
    \ use a variable to keep track of the current note length\n    # Hint: use a variable\
    \ to keep track of the current note length\n    # Hint: use a variable to keep\
    \ track of the current note length\n    # Hint: use a variable to keep track of\
    \ the current note length\n    # Hint: use a variable to keep track of the current\
    \ note length\n    # Hint: use a variable to keep track of the current note length\n\
    \    # Hint: use a variable to keep track of the current note length\n    # Hint:\
    \ use a variable to keep track of the current note length\n    # Hint: use a variable\
    \ to keep track of the current note length\n    # Hint: use a variable to keep\
    \ track of the current note length\n    # Hint: use a variable to keep track of\
    \ the current note length\n    # Hint: use a variable to keep track of the current\
    \ note length\n    # Hint: use a variable to keep track of the current note length\n\
    \    # Hint: use a variable to keep track of the current note length\n    # Hint:\
    \ use a variable to keep track of the current note length\n    # Hint: use a variable\
    \ to keep track of the current note length\n    # Hint: use a variable to keep\
    \ track of the current note length\n    # Hint: use a variable to keep track of\
    \ the current note length\n    # Hint: use a variable to keep track of the current\
    \ note length\n    # Hint: use a variable to keep track of the current note length\n\
    \    # Hint: use a variable to keep track of the current\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkceiyw2b.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpkceiyw2b.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes=($(echo \"$1\" | grep -o 'o\\|o|\\|.|'))\n    local -a\
    \ beats=()\n    for note in \"${notes[@]}\"; do\n        case \"$note\" in\n \
    \           'o')\n                beats+=(4)\n                ;;\n           \
    \ 'o|')\n                beats+=(2)\n                ;;\n            '.|')\n \
    \               beats+=(1)\n                ;;\n        esac\n    done\n    echo\
    \ \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local notes=$1\n  local beats=()\n  local beat=0\n  local note=''\n  for\
    \ ((i=0; i<${#notes}; i++)); do\n    note=${notes:$i:1}\n    if [[ \"$note\" ==\
    \ 'o' ]]; then\n      beat=4\n    elif [[ \"$note\" == 'o' ]]; then\n      beat=2\n\
    \    elif [[ \"$note\" == '.' ]]; then\n      beat=1\n    fi\n    beats+=($beat)\n\
    \  done\n  echo \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: Implement this function\n    # Hint: You can use bash arrays\n\
    \    # Hint: You can use tr to remove newlines\n    # Hint: You can use sed to\
    \ replace 'o' with 'o|'\n    # Hint: You can use sed to replace 'o|' with '4'\n\
    \    # Hint: You can use sed to replace '.|' with '1'\n    # Hint: You can use\
    \ sed to replace ' ' with ','\n    # Hint: You can use sed to replace ',' with\
    \ ' '\n    # Hint: You can use sed to replace '\\n' with ' '\n    # Hint: You\
    \ can use sed to replace '\\t' with ' '\n    # Hint: You can use sed to replace\
    \ '  ' with ' '\n    # Hint: You can use sed to replace '  ' with ' '\n    # Hint:\
    \ You can use sed to replace '  ' with ' '\n    # Hint: You can use sed to replace\
    \ '  ' with ' '\n    # Hint: You can use sed to replace '  ' with ' '\n    # Hint:\
    \ You can use sed to replace '  ' with ' '\n    # Hint: You can use sed to replace\
    \ '  ' with ' '\n    # Hint: You can use sed to replace '  ' with ' '\n    # Hint:\
    \ You can use sed to replace '  ' with ' '\n    # Hint: You can use sed to replace\
    \ '  ' with ' '\n    # Hint: You can use sed to replace '  ' with ' '\n    # Hint:\
    \ You can use sed to replace '  ' with ' '\n    # Hint: You can use sed to replace\
    \ '  ' with ' '\n    # Hint: You can use sed to replace '  ' with ' '\n    # Hint:\
    \ You can use sed to replace '  ' with ' '\n    # Hint: You can use sed to replace\
    \ '  ' with ' '\n    # Hint: You can use sed to replace '  ' with ' '\n    # Hint:\
    \ You can use sed to replace '  ' with ' '\n    # Hint: You can use sed to replace\
    \ '  ' with ' '\n    # Hint\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpro8ci_32.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmpro8ci_32.sh: line 42: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr -d\
    \ ' '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: -1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local input=$1\n    local output=\"\"\n    local i=0\n    local length=${#input}\n\
    \    while [ $i -lt $length ]; do\n        if [ \"${input:$i:1}\" == \"o\" ];\
    \ then\n            output=\"$output 4\"\n            i=$((i+1))\n        elif\
    \ [ \"${input:$i:2}\" == \"o|\" ]; then\n            output=\"$output 2\"\n  \
    \          i=$((i+2))\n        elif [ \"${input:$i:2}\" == \".|\" ]; then\n  \
    \          output=\"$output 1\"\n            i=$((i+2))\n        fi\n    done\n\
    \    echo $output\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660001055
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music_string=\"$1\"\n    local -a music_array\n    local -a music_array_result\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local\
    \ ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n \
    \   local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local\
    \ qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n \
    \   local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local\
    \ bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n\
    \    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n \
    \   local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n  \
    \  local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n   \
    \ local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n   \
    \ local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n\
    \    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n\
    \    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n\
    \    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n\
    \    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n\
    \    local aaaaa\n    local bbbbb\n    local ccc\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local result=\"\"\n    local note=\"\
    \"\n    local len=${#music}\n    for (( i=0; i<len; i++ )); do\n        note=${music:$i:1}\n\
    \        if [[ $note == \"o\" ]]; then\n            beats=4\n        elif [[ $note\
    \ == \"o\" ]]; then\n            beats=2\n        elif [[ $note == \".\" ]]; then\n\
    \            beats=1\n        elif [[ $note == \"|\" ]]; then\n            result+=\"\
    $beats \"\n            beats=0\n        fi\n    done\n    echo $result\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local input=$1\n    local output=()\n    local note_length=0\n    local\
    \ note_count=0\n    local note_index=0\n    local note_char=''\n    local note_char_prev=''\n\
    \    local note_char_next=''\n    local note_char_next_next=''\n    local note_char_next_next_next=''\n\
    \    local note_char_next_next_next_next=''\n    local note_char_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next=''\n    local note_char_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next_next_next=''\n    local note_char_next_next_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next_next_next_next_next=''\n  \
    \  local note_char_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local note_char_next_next_next_next_next\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: your code here\n    # Hint: use tr, sed, grep, wc, and other\
    \ tools\n    # Hint: use echo -n to avoid newline\n    # Hint: use $1 to access\
    \ the input string\n    # Hint: use return to return the result\n    # Hint: use\
    \ local to define local variables\n    # Hint: use | to pipe the output of one\
    \ command to another\n    # Hint: use > to redirect the output of a command to\
    \ a file\n    # Hint: use $() to capture the output of a command\n    # Hint:\
    \ use $# to access the number of arguments passed to a function\n    # Hint: use\
    \ $@ to access all arguments passed to a function\n    # Hint: use $1, $2, ...\
    \ to access individual arguments passed to a function\n    # Hint: use $? to access\
    \ the exit code of the last command\n    # Hint: use $0 to access the name of\
    \ the script\n    # Hint: use $LINENO to access the current line number\n    #\
    \ Hint: use $RANDOM to generate a random number\n    # Hint: use $SECONDS to access\
    \ the number of seconds since the script started running\n    # Hint: use $HOSTNAME\
    \ to access the hostname of the machine\n    # Hint: use $PWD to access the current\
    \ working directory\n    # Hint: use $HOME to access the home directory\n    #\
    \ Hint: use $USER to access the username\n    # Hint: use $UID to access the user\
    \ id\n    # Hint: use $EUID to access the effective user id\n    # Hint: use $GROUPS\
    \ to access the groups the user belongs to\n    # Hint: use $IFS to access the\
    \ internal field separator\n    # Hint: use $PATH to access the path\n    # Hint:\
    \ use $PS1 to access the primary prompt string\n    # Hint: use $PS2 to access\
    \ the secondary prompt string\n    # Hint: use $PS3 to access the prompt string\
    \ for select\n    # Hint: use $PS4 to access the execution trace prompt string\n\
    \    # Hint: use $SHELL to access the shell\n    # Hint: use $BASH to access the\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpiki3bfj_.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmpiki3bfj_.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, awk,\
    \ etc.\n    # Hint: use echo to return result\n    echo $(echo $1 | tr -d ' '\
    \ | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/o/4/g' | sed 's/\\./1/g')\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local music=$1\n  local beats=0\n  local result=()\n  local beat=0\n  local\
    \ note=''\n  local notes=('o' 'o|' '.|')\n  local beats=(4 2 1)\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=0\n \n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: you can use bash's built-in\
    \ string manipulation functions\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash's built-in arithmetic evaluation\n    # http://tldp.org/LDP/abs/html/arithexp.html\n\
    \    # Hint: you can use bash's built-in array manipulation\n    # http://tldp.org/LDP/abs/html/arrays.html\n\
    \    # Hint: you can use bash's built-in regex matching\n    # http://tldp.org/LDP/abs/html/bashver3.html#PATTERNS\n\
    \    # Hint: you can use bash's built-in string splitting\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash's built-in string joining\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash's built-in string trimming\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash's built-in string length\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash's built-in string indexing\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash's built-in string substitution\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash's built-in string comparison\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash's built-in string matching\n    # http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: you can use bash\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpe_7d0wtr.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmpe_7d0wtr.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: you can use 'echo' to print\
    \ to stdout\n    # Hint: you can use 'expr' to do simple math\n    # Hint: you\
    \ can use 'read' to read from stdin\n    # Hint: you can use 'bc' to do arbitrary\
    \ precision math\n    # Hint: you can use 'echo -n' to print without newline\n\
    \    # Hint: you can use 'echo -e' to print with escape sequences\n    # Hint:\
    \ you can use 'echo -e -n' to print with escape sequences without newline\n  \
    \  # Hint: you can use 'printf' to print with format strings\n    # Hint: you\
    \ can use 'grep' to search for strings\n    # Hint: you can use 'sed' to replace\
    \ strings\n    # Hint: you can use 'tr' to translate strings\n    # Hint: you\
    \ can use 'wc' to count words, lines, characters\n    # Hint: you can use 'sort'\
    \ to sort lines\n    # Hint: you can use 'uniq' to remove duplicate lines\n  \
    \  # Hint: you can use 'head' to get first lines of a file\n    # Hint: you can\
    \ use 'tail' to get last lines of a file\n    # Hint: you can use 'cat' to print\
    \ files\n    # Hint: you can use 'cut' to cut fields from lines\n    # Hint: you\
    \ can use 'paste' to paste lines together\n    # Hint: you can use 'join' to join\
    \ lines together\n    # Hint: you can use 'rev' to reverse lines\n    # Hint:\
    \ you can use 'nl' to number lines\n    # Hint: you can use 'tac' to reverse lines\n\
    \    # Hint: you can use 'rev' to reverse lines\n    # Hint: you can use 'tr'\
    \ to translate characters\n    # Hint: you can use 'tee' to print to stdout and\
    \ file\n    # Hint: you can use 'xargs' to execute commands\n    # Hint: you can\
    \ use 'time' to time commands\n    # Hint: you can use 'time' to time commands\n\
    \    # Hint: you can use 'time' to time\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpryzppe1t.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpryzppe1t.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    echo $1 | sed 's/o/4 /g' | sed 's/o|/2 /g' | sed\
    \ 's/\\.|/1 /g' | tr -d '\\n'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d '\\n' | sed 's/4/4\
    \ /g;s/2/2 /g;s/1/1 /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    # echo $1\n    # echo ${#1}\n    # echo ${1:0:1}\n\
    \    # echo ${1:1:1}\n    # echo ${1:2:1}\n    # echo ${1:3:1}\n    # echo ${1:4:1}\n\
    \    # echo ${1:5:1}\n    # echo ${1:6:1}\n    # echo ${1:7:1}\n    # echo ${1:8:1}\n\
    \    # echo ${1:9:1}\n    # echo ${1:10:1}\n    # echo ${1:11:1}\n    # echo ${1:12:1}\n\
    \    # echo ${1:13:1}\n    # echo ${1:14:1}\n    # echo ${1:15:1}\n    # echo\
    \ ${1:16:1}\n    # echo ${1:17:1}\n    # echo ${1:18:1}\n    # echo ${1:19:1}\n\
    \    # echo ${1:20:1}\n    # echo ${1:21:1}\n    # echo ${1:22:1}\n    # echo\
    \ ${1:23:1}\n    # echo ${1:24:1}\n    # echo ${1:25:1}\n    # echo ${1:26:1}\n\
    \    # echo ${1:27:1}\n    # echo ${1:28:1}\n    # echo ${1:29:1}\n    # echo\
    \ ${1:30:1}\n    # echo ${1:31:1}\n    # echo ${1:32:1}\n    # echo ${1:33:1}\n\
    \    # echo ${1:34:1}\n    # echo ${1:35:1}\n    # echo ${1:36:1}\n    # echo\
    \ ${1:37:1}\n    # echo ${1:38:1}\n    # echo ${1:39:1}\n    # echo ${1:40:1}\n\
    \    # echo ${1:41:1}\n    # echo ${1:42:1}\n    # echo ${1:43:1}\n    # echo\
    \ ${1:44\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprnpywgaf.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmprnpywgaf.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local result=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        case\
    \ ${1:$i:1} in\n            'o')\n                result+=\"4 \"\n           \
    \     ;;\n            'o|')\n                result+=\"2 \"\n                ;;\n\
    \            '.|')\n                result+=\"1 \"\n                ;;\n     \
    \   esac\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i\
    \ jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\
    \ -i nnn=0\n    local -i ooo=0\n    local -i ppp=0\n   \n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, grep, sed, awk,\
    \ etc.\n    # Hint: use echo to return the result\n    echo $1 | tr -d 'o' | tr\
    \ -d '.' | tr -d '|' | wc -c\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local notes=\"$1\"\n    local beats=0\n    local result=\"\"\n    for\
    \ ((i=0; i<${#notes}; i++)); do\n        if [[ \"${notes:$i:1}\" == \"o\" ]];\
    \ then\n            beats=4\n        elif [[ \"${notes:$i:2}\" == \"o|\" ]]; then\n\
    \            beats=2\n            i=$((i+1))\n        elif [[ \"${notes:$i:2}\"\
    \ == \".|\" ]]; then\n            beats=1\n            i=$((i+1))\n        else\n\
    \            result=\"$result $beats\"\n            beats=0\n        fi\n    done\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | tr -d 'o.' | tr '|' '\\n' | wc -l\n}\n\ncandidate() {\n   \
    \ parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a beats\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i\
    \ jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\
    \ -i nnn=0\n    local -i ooo=0\n    local -i ppp=0\n   \n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local -a notes=($(echo \"$1\" | grep -o 'o|.|'))\n  local -a beats=(4 2\
    \ 1)\n  local -a result=()\n  for note in \"${notes[@]}\"; do\n    for i in \"\
    ${!beats[@]}\"; do\n      if [[ \"$note\" == \"${beats[$i]}\" ]]; then\n     \
    \   result+=($i)\n      fi\n    done\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local notes=$1\n    local beats=0\n    local result=\"\"\n    for ((i=0;\
    \ i<${#notes}; i++)); do\n        case ${notes:$i:1} in\n            o)\n    \
    \            beats=4\n                ;;\n            o|)\n                beats=2\n\
    \                ;;\n            .|)\n                beats=1\n              \
    \  ;;\n            *)\n                result=\"$result $beats\"\n           \
    \     ;;\n        esac\n    done\n    echo $result\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp54eyykfa.sh: line 20: syntax error near unexpected token `)''

    /tmp/tmp54eyykfa.sh: line 20: `            o|)''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local beats=0\n    local result=\"\"\n    local\
    \ i=0\n    local len=${#music}\n    while [ $i -lt $len ]; do\n        local c=${music:$i:1}\n\
    \        if [ \"$c\" == \"o\" ]; then\n            beats=4\n        elif [ \"\
    $c\" == \"|\" ]; then\n            beats=$((beats / 2))\n        elif [ \"$c\"\
    \ == \".\" ]; then\n            beats=1\n        fi\n        result=\"$result\
    \ $beats\"\n        i=$((i + 1))\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local input=$1\n    local output=\"\"\n    local note=\"\"\n    local\
    \ beats=0\n    local i=0\n    local len=${#input}\n    while [ $i -lt $len ];\
    \ do\n        note=${input:$i:1}\n        if [ \"$note\" == \"o\" ]; then\n  \
    \          beats=4\n        elif [ \"$note\" == \"o\" ]; then\n            beats=2\n\
    \        elif [ \"$note\" == \".\" ]; then\n            beats=1\n        fi\n\
    \        output=\"$output $beats\"\n        i=$((i+2))\n    done\n    echo $output\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  # TODO: implement this function\n  # Hint: use 'echo' to print to stdout\n\
    \  # Hint: use 'read' to read from stdin\n  # Hint: use 'expr' to do arithmetic\n\
    \  # Hint: use 'bc' to do floating point arithmetic\n  # Hint: use 'grep' to find\
    \ substrings\n  # Hint: use 'sed' to replace substrings\n  # Hint: use 'wc' to\
    \ count lines\n  # Hint: use 'tr' to translate characters\n  # Hint: use 'sort'\
    \ to sort lines\n  # Hint: use 'uniq' to remove duplicates\n  # Hint: use 'xargs'\
    \ to pass arguments to a command\n  # Hint: use 'seq' to generate a sequence of\
    \ numbers\n  # Hint: use 'head' to get the first N lines\n  # Hint: use 'tail'\
    \ to get the last N lines\n  # Hint: use 'tee' to redirect output to a file\n\
    \  # Hint: use 'cat' to concatenate files\n  # Hint: use 'cut' to select columns\n\
    \  # Hint: use 'paste' to merge lines\n  # Hint: use 'join' to join lines from\
    \ two files\n  # Hint: use 'diff' to compare files\n  # Hint: use 'comm' to compare\
    \ sorted files\n  # Hint: use 'nl' to number lines\n  # Hint: use 'rev' to reverse\
    \ lines\n  # Hint: use 'tr' to translate characters\n  # Hint: use 'fold' to wrap\
    \ lines\n  # Hint: use 'pr' to paginate lines\n  # Hint: use 'expand' to expand\
    \ tabs\n  # Hint: use 'unexpand' to unexpand tabs\n  # Hint: use 'fmt' to format\
    \ lines\n  # Hint: use 'pr' to paginate lines\n  # Hint: use 'column' to format\
    \ lines as a table\n  # Hint: use 'tac' to reverse lines\n  # Hint: use 'rev'\
    \ to reverse characters\n  # Hint: use 'sort' to sort lines\n  # Hint: use 'uniq'\
    \ to remove dupl\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjj87uswz.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmpjj87uswz.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local notes=$1\n    local beats=0\n    local result=\"\"\n    for ((i=0;\
    \ i<${#notes}; i++)); do\n        local char=${notes:$i:1}\n        if [[ $char\
    \ == \"o\" ]]; then\n            beats=4\n        elif [[ $char == \"|\" ]]; then\n\
    \            beats=2\n        elif [[ $char == \".\" ]]; then\n            beats=1\n\
    \        fi\n        result=\"$result $beats\"\n    done\n    echo $result\n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local music=$1\n  local beats=0\n  local notes=()\n  local note=''\n  local\
    \ note_beats=0\n  local i=0\n  local c=''\n\n  while [ $i -lt ${#music} ]; do\n\
    \    c=${music:$i:1}\n    if [ \"$c\" == 'o' ]; then\n      note_beats=4\n   \
    \ elif [ \"$c\" == '.' ]; then\n      note_beats=1\n    elif [ \"$c\" == '|' ];\
    \ then\n      note_beats=2\n    fi\n\n    if [ \"$c\" == 'o' ] || [ \"$c\" ==\
    \ '.' ]; then\n      note+=$c\n    fi\n\n    if [ \"$c\" == '|' ]; then\n    \
    \  notes+=($note_beats)\n      note=''\n    fi\n\n    i=$((i+1))\n  done\n\n \
    \ echo ${notes[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local music_string=$1\n  local beats=0\n  local notes=()\n  local note_beats=0\n\
    \  for (( i=0; i<${#music_string}; i++ )); do\n    local char=${music_string:$i:1}\n\
    \    if [[ \"$char\" == \"o\" ]]; then\n      note_beats=4\n    elif [[ \"$char\"\
    \ == \"|\" ]]; then\n      note_beats=$((note_beats/2))\n    elif [[ \"$char\"\
    \ == \".\" ]]; then\n      note_beats=1\n    fi\n    if [[ \"$char\" == \"|\"\
    \ || \"$char\" == \".\" ]]; then\n      notes+=($note_beats)\n      beats=$((beats+note_beats))\n\
    \    fi\n  done\n  echo \"${notes[@]}\"\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed, tr, and grep\n\
    \    # Hint: use echo to print the result\n    echo \"$1\" | sed 's/o/4/g' | sed\
    \ 's/o|/2/g' | sed 's/\\.|/1/g' | tr -d '\\n' | grep -o '[0-9]'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local notes=$1\n    local beats=()\n    local beat=0\n    local note=''\n\
    \    local i=0\n    local len=${#notes}\n    while [ $i -lt $len ]; do\n     \
    \   note=${notes:$i:1}\n        if [ \"$note\" == 'o' ]; then\n            beat=4\n\
    \        elif [ \"$note\" == 'o' ]; then\n            beat=2\n        elif [ \"\
    $note\" == '.' ]; then\n            beat=1\n        fi\n        beats+=($beat)\n\
    \        i=$((i+2))\n    done\n    echo ${beats[@]}\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes=($(echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g'))\n\
    \    echo \"${notes[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local notes=()\n    for ((i=0;\
    \ i<${#music}; i++)); do\n        char=${music:$i:1}\n        if [[ $char == 'o'\
    \ ]]; then\n            beats=4\n        elif [[ $char == '|' ]]; then\n     \
    \       notes+=($beats)\n            beats=0\n        fi\n    done\n    echo ${notes[@]}\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | tr -d '\\n' | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/|//g' | sed 's/ //g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local music_string=\"$1\"\n  local music_array=($(echo \"$music_string\"\
    \ | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g'))\n  echo \"${music_array[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, etc.\n\
    \    # Hint: use local variables\n    # Hint: use echo to return a value\n   \
    \ # Hint: use for loop\n    # Hint: use case statement\n    # Hint: use seq\n\
    \    # Hint: use printf\n    # Hint: use wc -c\n    # Hint: use expr\n    # Hint:\
    \ use bc\n    # Hint: use read\n    # Hint: use echo -e\n    # Hint: use echo\
    \ -n\n    # Hint: use echo -e -n\n    # Hint: use echo -e -n -e\n    # Hint: use\
    \ echo -e -n -e -n\n    # Hint: use echo -e -n -e -n -e\n    # Hint: use echo\
    \ -e -n -e -n -e -n\n    # Hint: use echo -e -n -e -n -e -n -e\n    # Hint: use\
    \ echo -e -n -e -n -e -n -e -n\n    # Hint: use echo -e -n -e -n -e -n -e -n -e\n\
    \    # Hint: use echo -e -n -e -n -e -n -e -n -e -n\n    # Hint: use echo -e -n\
    \ -e -n -e -n -e -n -e -n -e\n    # Hint: use echo -e -n -e -n -e -n -e -n -e\
    \ -n -e -n\n    # Hint: use echo -e -n -e -n -e -n -e -n -e -n -e -n -e\n    #\
    \ Hint: use echo -e -n -e -n -e -n -e -n -e -n -e -n -e -n\n    # Hint: use echo\
    \ -e -n -e -n -e -n -e -n -e -n -e -n -e -n -e\n    # Hint: use echo -e -n -e\
    \ -n -e -n -e -n -e -n\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv5imn2ak.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpv5imn2ak.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d '\\n' | sed 's/[^0-9]/\
    \ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local result=\"\"\n    for ((\
    \ i=0; i<${#music}; i++ )); do\n        if [[ ${music:$i:1} == \"o\" ]]; then\n\
    \            beats=4\n        elif [[ ${music:$i:2} == \"o|\" ]]; then\n     \
    \       beats=2\n            i=$((i+1))\n        elif [[ ${music:$i:2} == \".|\"\
    \ ]]; then\n            beats=1\n            i=$((i+1))\n        fi\n        if\
    \ [[ $beats -gt 0 ]]; then\n            result=\"$result $beats\"\n          \
    \  beats=0\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes=($(echo \"$1\" | sed 's/o|/.|/g' | sed 's/o/..../g'))\n\
    \    local -a beats=($(echo \"${notes[@]}\" | sed 's/\\./1/g' | sed 's/\\|/0/g'))\n\
    \    echo \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes=($(echo \"$1\" | grep -o 'o\\|o|\\|.|'))\n    local -a\
    \ beats=()\n    for note in \"${notes[@]}\"; do\n        case \"$note\" in\n \
    \           'o')\n                beats+=('4')\n                ;;\n         \
    \   'o|')\n                beats+=('2')\n                ;;\n            '.|')\n\
    \                beats+=('1')\n                ;;\n        esac\n    done\n  \
    \  echo \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/\\|//g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | tr -d ' ' | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local result=\"\"\n    local notes=\"$1\"\n    local note\n    local\
    \ note_length\n    local note_count=0\n    local i\n    local j\n\n    for ((i=0;\
    \ i<${#notes}; i++)); do\n        note=\"${notes:$i:1}\"\n        if [[ \"$note\"\
    \ == \"o\" ]]; then\n            note_length=4\n        elif [[ \"$note\" == \"\
    o\" ]]; then\n            note_length=2\n        elif [[ \"$note\" == \".\" ]];\
    \ then\n            note_length=1\n        fi\n\n        if [[ \"$note\" == \"\
    |\" ]]; then\n            note_count=0\n        else\n            note_count=$((note_count\
    \ + note_length))\n        fi\n\n        if [[ \"$note\" == \"|\" || \"$note\"\
    \ == \" \" ]]; then\n            result=\"$result $note_count\"\n        fi\n\
    \    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local -a notes\n    local -a beats\n    local\
    \ -a result\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local\
    \ ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n \
    \   local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local\
    \ pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n \
    \   local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local\
    \ aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n\
    \    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n \
    \   local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n  \
    \  local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n   \
    \ local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local\
    \ aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local\
    \ ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local\
    \ kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local\
    \ pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local\
    \ uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local\
    \ zzzz\n    local aaaaa\n    local bbbbb\n    local ccccc\n\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/\\|//g' | sed 's/ //g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement me\n    echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/[^0-9]/ /g' | sed 's/\\s\\+/ /g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ //g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/|/ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\\\
    |//g' | sed 's/ //g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local -a notes\n    local -i i=0\n    local -i\
    \ j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i A=0\n    local\
    \ -i B=0\n    local -i C=0\n    local -i D=0\n    local -i E=0\n    local -i F=0\n\
    \    local -i G=0\n    local -i H=0\n    local -i I=0\n    local -i J=0\n    local\
    \ -i K=0\n    local -i L=0\n    local -i M=0\n    local -i N=0\n    local -i O=0\n\
    \    local -i P=0\n    local -i Q=0\n    local -i R=0\n    local -i S=0\n    local\
    \ -i T=0\n    local -i U=0\n    local -i V=0\n    local -i W=0\n    local -i X=0\n\
    \    local -i Y=0\n    local -i Z=0\n    local -i a=0\n    local -i b=0\n    local\
    \ -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n\
    \    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n \
    \   local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n \
    \   local -i pp=0\n    local -i qq=0\n    local -i\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local beats=0\n    local result=\"\"\n    for\
    \ (( i=0; i<${#music}; i++ )); do\n        if [[ ${music:$i:1} == \"o\" ]]; then\n\
    \            beats=4\n        elif [[ ${music:$i:2} == \"o|\" ]]; then\n     \
    \       beats=2\n        elif [[ ${music:$i:2} == \".|\" ]]; then\n          \
    \  beats=1\n        fi\n        if [[ $beats -gt 0 ]]; then\n            result=\"\
    $result $beats\"\n            beats=0\n        fi\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  # TODO: implement this function\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  # Hint: use tr and sed\n  # Hint: use tr and sed\n  # Hint: use\
    \ tr and sed\n  #\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqcyil39n.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmpqcyil39n.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g' | tr -d '\\n' | sed 's/[^0-9]/\
    \ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # HINT: use sed to replace all 'o'\
    \ with '4', 'o|' with '2' and '.|' with '1'\n    # HINT: use tr to replace all\
    \ '|' with ' '\n    # HINT: use tr to replace all '.' with ' '\n    # HINT: use\
    \ tr to replace all 'o' with ' '\n    # HINT: use tr to replace all '\\n' with\
    \ ' '\n    # HINT: use tr to replace all '\\t' with ' '\n    # HINT: use tr to\
    \ replace all '  ' with ' '\n    # HINT: use tr to replace all '  ' with ' '\n\
    \    # HINT: use tr to replace all '  ' with ' '\n    # HINT: use tr to replace\
    \ all '  ' with ' '\n    # HINT: use tr to replace all '  ' with ' '\n    # HINT:\
    \ use tr to replace all '  ' with ' '\n    # HINT: use tr to replace all '  '\
    \ with ' '\n    # HINT: use tr to replace all '  ' with ' '\n    # HINT: use tr\
    \ to replace all '  ' with ' '\n    # HINT: use tr to replace all '  ' with '\
    \ '\n    # HINT: use tr to replace all '  ' with ' '\n    # HINT: use tr to replace\
    \ all '  ' with ' '\n    # HINT: use tr to replace all '  ' with ' '\n    # HINT:\
    \ use tr to replace all '  ' with ' '\n    # HINT: use tr to replace all '  '\
    \ with ' '\n    # HINT: use tr to replace all '  ' with ' '\n    # HINT: use tr\
    \ to replace all '  ' with ' '\n    # HINT: use tr to replace all '  ' with '\
    \ '\n    # HINT: use tr to replace all '  ' with ' '\n    # HINT: use tr to replace\
    \ all '  ' with ' '\n    # HINT: use tr to replace all '  ' with ' '\n    # HINT:\
    \ use tr to replace all '  ' with ' '\n    # HINT: use tr to\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf_3h_x2w.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmpf_3h_x2w.sh: line 42: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes\n    local -a beats\n    local note\n    local beat\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local\
    \ ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n \
    \   local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local\
    \ qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n \
    \   local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local\
    \ bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n\
    \    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n \
    \   local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n  \
    \  local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n   \
    \ local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n   \
    \ local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n\
    \    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n\
    \    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n\
    \    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n\
    \    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n\
    \    local aaaaa\n    local bbbbb\n    local ccccc\n    local ddddd\n\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local notes=$1\n    local beats=()\n    local beat=0\n    for ((i=0;\
    \ i<${#notes}; i++)); do\n        local char=${notes:$i:1}\n        if [[ $char\
    \ == 'o' ]]; then\n            beat=4\n        elif [[ $char == 'o' ]]; then\n\
    \            beat=2\n        elif [[ $char == '.' ]]; then\n            beat=1\n\
    \        elif [[ $char == '|' ]]; then\n            beats+=($beat)\n         \
    \   beat=0\n        fi\n    done\n    echo ${beats[@]}\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, awk,\
    \ etc.\n    # Hint: use echo to return a value\n    echo \"$1\" | tr -d ' ' |\
    \ tr -d '\\n' | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\\\
    |//g' | sed 's/\\.//g' | sed 's/\\(.\\)/\\1 /g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr and sed\n    # Hint:\
    \ use tr to replace 'o' with 'o|o|o|o|' and 'o|' with 'o|o|'\n    # Hint: use\
    \ sed to remove all '.'\n    # Hint: use tr to replace '|' with ' '\n    # Hint:\
    \ use tr to replace 'o' with '4'\n    # Hint: use tr to replace 'o|' with '2'\n\
    \    # Hint: use tr to replace '.|' with '1'\n    # Hint: use tr to replace 'o'\
    \ with '4'\n    # Hint: use tr to replace 'o|' with '2'\n    # Hint: use tr to\
    \ replace '.|' with '1'\n    # Hint: use tr to replace 'o' with '4'\n    # Hint:\
    \ use tr to replace 'o|' with '2'\n    # Hint: use tr to replace '.|' with '1'\n\
    \    # Hint: use tr to replace 'o' with '4'\n    # Hint: use tr to replace 'o|'\
    \ with '2'\n    # Hint: use tr to replace '.|' with '1'\n    # Hint: use tr to\
    \ replace 'o' with '4'\n    # Hint: use tr to replace 'o|' with '2'\n    # Hint:\
    \ use tr to replace '.|' with '1'\n    # Hint: use tr to replace 'o' with '4'\n\
    \    # Hint: use tr to replace 'o|' with '2'\n    # Hint: use tr to replace '.|'\
    \ with '1'\n    # Hint: use tr to replace 'o' with '4'\n    # Hint: use tr to\
    \ replace 'o|' with '2'\n    # Hint: use tr to replace '.|' with '1'\n    # Hint:\
    \ use tr to replace 'o' with '4'\n    # Hint: use tr to replace 'o|' with '2'\n\
    \    # Hint: use tr to replace '.|' with '1'\n    # Hint: use tr to replace 'o\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz472cvta.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmpz472cvta.sh: line 42: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed, grep, wc\n    #\
    \ Hint: use echo -n to print without newline\n    # Hint: use tr to replace characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use tr to replace\
    \ characters\n    # Hint: use echo -n to print without newline\n    # Hint: use\
    \ tr to replace characters\n    # Hint: use echo -n to print without newline\n\
    \    # Hint: use tr to replace characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use tr to replace characters\n    # Hint: use echo -n to\
    \ print without newline\n    # Hint: use tr to replace characters\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use tr to replace characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use tr to replace\
    \ characters\n    # Hint: use echo -n to print without newline\n    # Hint: use\
    \ tr to replace characters\n    # Hint: use echo -n to print without newline\n\
    \    # Hint: use tr to replace characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use tr to replace characters\n    # Hint: use echo -n to\
    \ print without newline\n    # Hint: use tr to replace characters\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use tr to replace characters\n\
    \    # Hint: use echo -n to print without newline\n    # Hint: use tr to replace\
    \ characters\n    # Hint: use echo -n to print without newline\n    # Hint: use\
    \ tr to replace characters\n    # Hint: use echo -n to print without newline\n\
    \    # Hint: use tr to replace characters\n    # Hint: use echo -n to print without\
    \ newline\n    # Hint: use tr to replace characters\n    # Hint: use echo -n to\
    \ print without newline\n    # Hint: use tr to replace characters\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyaismlv4.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpyaismlv4.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    # You can use echo to return a result\n    #echo\
    \ \"1 2 3 4\"\n    echo \"$1\" | sed 's/o/4 /g' | sed 's/o|/2 /g' | sed 's/\\\
    .|/1 /g' | sed 's/ //g' | sed 's/|//g'\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    echo \"$1\" | tr -d ' ' | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/|/ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, awk,\
    \ etc.\n    # Hint: you can use echo to debug\n    # Hint: you can use `return`\
    \ to return early\n    # Hint: you can use `exit` to exit with an error\n    #\
    \ Hint: you can use `return N` to return custom return code\n    # Hint: you can\
    \ use `local` to define local variables\n    # Hint: you can use `declare` to\
    \ define global variables\n    # Hint: you can use `declare -a` to define arrays\n\
    \    # Hint: you can use `declare -A` to define associative arrays\n    # Hint:\
    \ you can use `declare -i` to define integer variables\n    # Hint: you can use\
    \ `declare -r` to define read-only variables\n    # Hint: you can use `declare\
    \ -l` to define lowercase-only variables\n    # Hint: you can use `declare -u`\
    \ to define uppercase-only variables\n    # Hint: you can use `declare -x` to\
    \ define exported variables\n    # Hint: you can use `declare -p` to print variables\n\
    \    # Hint: you can use `declare -f` to print functions\n    # Hint: you can\
    \ use `declare -F` to print function names\n    # Hint: you can use `declare -F\
    \ -p` to print function names and definitions\n    # Hint: you can use `declare\
    \ -F -p | grep '^declare -f' | sed 's/declare -f //'` to print function names\
    \ only\n    # Hint: you can use `declare -F -p | grep '^declare -f' | sed 's/declare\
    \ -f //' | xargs -n1 -I{} bash -c 'echo -n \"{} \"; declare -f {} | grep -o \"\
    o|\" | wc -l'` to print function names and number of o| in their definitions\n\
    \    # Hint: you can use `declare -F -p | grep '^declare -f' | sed 's/declare\
    \ -f //' | xargs -\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpunojqcp0.sh: line 34: syntax error near unexpected token `}''

    /tmp/tmpunojqcp0.sh: line 34: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr -d\
    \ ' '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/|//g' | sed 's/ //g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local notes=\"$1\"\n  local -a beats\n  local note\n  local beat\n  for\
    \ note in $notes; do\n    case \"$note\" in\n      o)\n        beat=4\n      \
    \  ;;\n      o|)\n        beat=2\n        ;;\n      .|)\n        beat=1\n    \
    \    ;;\n    esac\n    beats+=($beat)\n  done\n  echo \"${beats[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoeduyreo.sh: line 21: syntax error near unexpected token `)''

    /tmp/tmpoeduyreo.sh: line 21: `      o|)''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/|//g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed 's/o|/2/g;s/o/4/g;s/\\.|/1/g'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use sed\n    # Hint: use\
    \ echo -n to avoid newline\n    # Hint: use tr to replace 'o' with '4' and '.'\
    \ with '1'\n    # Hint: use tr to replace '|' with ' '\n    # Hint: use sed to\
    \ remove 'o' and '.'\n    # Hint: use sed to remove '|'\n    # Hint: use sed to\
    \ remove ' '\n    # Hint: use sed to remove 'o'\n    # Hint: use sed to remove\
    \ '.'\n    # Hint: use sed to remove '|'\n    # Hint: use sed to remove ' '\n\
    \    # Hint: use sed to remove 'o'\n    # Hint: use sed to remove '.'\n    # Hint:\
    \ use sed to remove '|'\n    # Hint: use sed to remove ' '\n    # Hint: use sed\
    \ to remove 'o'\n    # Hint: use sed to remove '.'\n    # Hint: use sed to remove\
    \ '|'\n    # Hint: use sed to remove ' '\n    # Hint: use sed to remove 'o'\n\
    \    # Hint: use sed to remove '.'\n    # Hint: use sed to remove '|'\n    # Hint:\
    \ use sed to remove ' '\n    # Hint: use sed to remove 'o'\n    # Hint: use sed\
    \ to remove '.'\n    # Hint: use sed to remove '|'\n    # Hint: use sed to remove\
    \ ' '\n    # Hint: use sed to remove 'o'\n    # Hint: use sed to remove '.'\n\
    \    # Hint: use sed to remove '|'\n    # Hint: use sed to remove ' '\n    # Hint:\
    \ use sed to remove 'o'\n    # Hint: use sed to remove '.'\n    # Hint: use sed\
    \ to remove '|'\n    # Hint: use sed to remove ' '\n    # Hint: use sed to remove\
    \ 'o'\n    # Hint: use sed to remove '.'\n    # Hint: use sed to remove '|'\n\
    \    # Hint: use sed to remove ' '\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpqo586n5e.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpqo586n5e.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  echo \"$1\" | sed -r 's/o/4/g;s/o\\|/2/g;s/\\.\\|/1/g;s/[^0-9]//g'\n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr to replace characters with other characters\n    #\
    \ Hint: you can use sed to remove characters\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr to replace characters with other characters\n    #\
    \ Hint: you can use sed to remove characters\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr to replace characters with other characters\n    #\
    \ Hint: you can use sed to remove characters\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr to replace characters with other characters\n    #\
    \ Hint: you can use sed to remove characters\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr to replace characters with other characters\n    #\
    \ Hint: you can use sed to remove characters\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr to replace characters with other characters\n    #\
    \ Hint: you can use sed to remove characters\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr to replace characters with other characters\n    #\
    \ Hint: you can use sed to remove characters\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr to replace characters with other characters\n    #\
    \ Hint: you can use sed to remove characters\n    # Hint: you can use tr to replace\
    \ characters with other characters\n    # Hint: you can use sed to remove characters\n\
    \    # Hint: you can use tr\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpaz82hez1.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmpaz82hez1.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local result=\"\"\n    for ((\
    \ i=0; i<${#music}; i++ )); do\n        case ${music:$i:1} in\n            'o')\n\
    \                beats=4\n                ;;\n            'o|')\n            \
    \    beats=2\n                ;;\n            '.|')\n                beats=1\n\
    \                ;;\n            *)\n                continue\n              \
    \  ;;\n        esac\n        result+=\"$beats \"\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=$1\n    local beats=0\n    local result=()\n    local notes=(o\
    \ o| .|)\n    local beats=(4 2 1)\n    local i=0\n    local j=0\n    local note=''\n\
    \    local beat=0\n    local note_len=0\n    local beat_len=0\n    local note_found=0\n\
    \    local beat_found=0\n\n    for ((i=0; i<${#music}; i++)); do\n        note_found=0\n\
    \        beat_found=0\n        for ((j=0; j<${#notes[@]}; j++)); do\n        \
    \    note=${notes[$j]}\n            beat=${beats[$j]}\n            note_len=${#note}\n\
    \            beat_len=${#beat}\n            if [[ ${music:$i:$note_len} == $note\
    \ ]]; then\n                note_found=1\n                beats=$beat\n      \
    \          i=$((i+note_len-1))\n                break\n            fi\n      \
    \  done\n        if [[ $note_found -eq 0 ]]; then\n            for ((j=0; j<${#beats[@]};\
    \ j++)); do\n                beat=${beats[$j]}\n                beat_len=${#beat}\n\
    \                if [[ ${music:$i:$beat_len} == $beat ]]; then\n             \
    \       beat_found=1\n                    beats=$beat\n                    i=$((i+beat_len-1))\n\
    \                    break\n                fi\n            done\n        fi\n\
    \        if [[ $note_found -eq 0 && $beat_found -eq 0 ]]; then\n            result+=($beats)\n\
    \            beats=0\n        fi\n    done\n    result+=($beats)\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm6prdmlq.sh: line 15: syntax error near unexpected token `|''

    /tmp/tmpm6prdmlq.sh: line 15: `    local notes=(o o| .|)''

    /tmp/tmpm6prdmlq.sh: line 16: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 17: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 18: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 19: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 20: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 21: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 22: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 23: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 24: local: can only be used in a function

    /tmp/tmpm6prdmlq.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpm6prdmlq.sh: line 60: `}''

    '
  stdout: '4

    '
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  # TODO: implement this function\n  # Hint: use sed\n  # Hint: use tr\n\
    \  # Hint: use expr\n  # Hint: use echo\n  # Hint: use wc\n  # Hint: use grep\n\
    \  # Hint: use sed\n  # Hint: use tr\n  # Hint: use expr\n  # Hint: use echo\n\
    \  # Hint: use wc\n  # Hint: use grep\n  # Hint: use sed\n  # Hint: use tr\n \
    \ # Hint: use expr\n  # Hint: use echo\n  # Hint: use wc\n  # Hint: use grep\n\
    \  # Hint: use sed\n  # Hint: use tr\n  # Hint: use expr\n  # Hint: use echo\n\
    \  # Hint: use wc\n  # Hint: use grep\n  # Hint: use sed\n  # Hint: use tr\n \
    \ # Hint: use expr\n  # Hint: use echo\n  # Hint: use wc\n  # Hint: use grep\n\
    \  # Hint: use sed\n  # Hint: use tr\n  # Hint: use expr\n  # Hint: use echo\n\
    \  # Hint: use wc\n  # Hint: use grep\n  # Hint: use sed\n  # Hint: use tr\n \
    \ # Hint: use expr\n  # Hint: use echo\n  # Hint: use wc\n  # Hint: use grep\n\
    \  # Hint: use sed\n  # Hint: use tr\n  # Hint: use expr\n  # Hint: use echo\n\
    \  # Hint: use wc\n  # Hint: use grep\n  # Hint: use sed\n  # Hint: use tr\n \
    \ # Hint: use expr\n  # Hint: use echo\n  # Hint: use wc\n  # Hint: use grep\n\
    \  # Hint: use sed\n  # Hint: use tr\n  # Hint: use expr\n  # Hint: use echo\n\
    \  # Hint: use wc\n  # Hint: use grep\n  # Hint: use sed\n  # Hint\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplq38u1yq.sh: line 75: syntax error near unexpected token `}''

    /tmp/tmplq38u1yq.sh: line 75: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr and sed\n    # Hint:\
    \ use echo -n to print without newline\n    # Hint: use echo -e to print escaped\
    \ characters\n    # Hint: use echo -e '\\n' to print newline\n    # Hint: use\
    \ echo -e '\\t' to print tab\n    # Hint: use echo -e '\\c' to print without newline\n\
    \    # Hint: use echo -e '\\c' to print without newline\n    # Hint: use echo\
    \ -e '\\c' to print without newline\n    # Hint: use echo -e '\\c' to print without\
    \ newline\n    # Hint: use echo -e '\\c' to print without newline\n    # Hint:\
    \ use echo -e '\\c' to print without newline\n    # Hint: use echo -e '\\c' to\
    \ print without newline\n    # Hint: use echo -e '\\c' to print without newline\n\
    \    # Hint: use echo -e '\\c' to print without newline\n    # Hint: use echo\
    \ -e '\\c' to print without newline\n    # Hint: use echo -e '\\c' to print without\
    \ newline\n    # Hint: use echo -e '\\c' to print without newline\n    # Hint:\
    \ use echo -e '\\c' to print without newline\n    # Hint: use echo -e '\\c' to\
    \ print without newline\n    # Hint: use echo -e '\\c' to print without newline\n\
    \    # Hint: use echo -e '\\c' to print without newline\n    # Hint: use echo\
    \ -e '\\c' to print without newline\n    # Hint: use echo -e '\\c' to print without\
    \ newline\n    # Hint: use echo -e '\\c' to print without newline\n    # Hint:\
    \ use echo -e '\\c' to print without newline\n    # Hint: use echo -e '\\c' to\
    \ print without newline\n    # Hint: use echo -e '\\c' to print without newline\n\
    \    # Hint: use echo -e '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpjr1u4kqo.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpjr1u4kqo.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, awk,\
    \ etc.\n    # Hint: use echo -n to print without newline\n    # Hint: use echo\
    \ -e to interpret backslash escapes\n    # Hint: use echo -e \"1\\n2\\n3\" to\
    \ print multiple lines\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l to count\
    \ lines\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' to remove spaces\n\
    \    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' | tr -d '\\n' to remove\
    \ newlines\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' | tr -d\
    \ '\\n' | sed 's/4/2/g' to replace 4 with 2\n    # Hint: use echo -e \"1\\n2\\\
    n3\" | wc -l | tr -d ' ' | tr -d '\\n' | sed 's/4/2/g' | sed 's/2/1/g' to replace\
    \ 2 with 1\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' | tr -d\
    \ '\\n' | sed 's/4/2/g' | sed 's/2/1/g' | sed 's/1/4/g' to replace 1 with 4\n\
    \    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' | tr -d '\\n' | sed\
    \ 's/4/2/g' | sed 's/2/1/g' | sed 's/1/4/g' | sed 's/3/2/g' to replace 3 with\
    \ 2\n    # Hint: use echo -e \"1\\n2\\n3\" | wc -l | tr -d ' ' | tr -d '\\n' |\
    \ sed 's/4/2/\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqimpa1dz.sh: line 25: syntax error near unexpected token `}''

    /tmp/tmpqimpa1dz.sh: line 25: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Write your code here\n    # You can use echo to return a value\n  \
    \  # Example: echo \"1 2 3\"\n    echo \"1 2 3\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n  local music_string=$1\n  local beats=0\n  local result=\"\"\n  for (( i=0;\
    \ i<${#music_string}; i++ )); do\n    if [[ \"${music_string:$i:1}\" == \"o\"\
    \ ]]; then\n      beats=4\n    elif [[ \"${music_string:$i:1}\" == \".\" ]]; then\n\
    \      beats=1\n    elif [[ \"${music_string:$i:1}\" == \"|\" ]]; then\n     \
    \ result=\"$result $beats\"\n      beats=0\n    fi\n  done\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use 'echo' to output the\
    \ result\n    # Hint: use 'expr' to do math\n    # Hint: use 'read' to read characters\
    \ from the string\n    # Hint: use 'case' to match characters\n    # Hint: use\
    \ 'continue' to skip characters\n    # Hint: use 'break' to stop reading characters\n\
    \    # Hint: use 'for' to iterate over characters\n    # Hint: use 'seq' to generate\
    \ numbers\n    # Hint: use 'echo' to output the result\n    # Hint: use 'expr'\
    \ to do math\n    # Hint: use 'read' to read characters from the string\n    #\
    \ Hint: use 'case' to match characters\n    # Hint: use 'continue' to skip characters\n\
    \    # Hint: use 'break' to stop reading characters\n    # Hint: use 'for' to\
    \ iterate over characters\n    # Hint: use 'seq' to generate numbers\n    # Hint:\
    \ use 'echo' to output the result\n    # Hint: use 'expr' to do math\n    # Hint:\
    \ use 'read' to read characters from the string\n    # Hint: use 'case' to match\
    \ characters\n    # Hint: use 'continue' to skip characters\n    # Hint: use 'break'\
    \ to stop reading characters\n    # Hint: use 'for' to iterate over characters\n\
    \    # Hint: use 'seq' to generate numbers\n    # Hint: use 'echo' to output the\
    \ result\n    # Hint: use 'expr' to do math\n    # Hint: use 'read' to read characters\
    \ from the string\n    # Hint: use 'case' to match characters\n    # Hint: use\
    \ 'continue' to skip characters\n    # Hint: use 'break' to stop reading characters\n\
    \    # Hint: use 'for' to iterate over characters\n    # Hint: use 'seq' to generate\
    \ numbers\n    # Hint: use 'echo' to output the result\n    # Hint: use 'expr'\
    \ to do math\n    # Hint: use 'read' to read characters from the string\n    #\
    \ Hint: use 'case' to match characters\n    #\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpegjg7svt.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmpegjg7svt.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local input=\"$1\"\n    local result=\"\"\n    local note=\"\"\n    local\
    \ beat=0\n    local i=0\n    local len=${#input}\n    while [ $i -lt $len ]; do\n\
    \        note=\"${input:$i:1}\"\n        case \"$note\" in\n            \"o\"\
    )\n                beat=4\n                ;;\n            \"o|\")\n         \
    \       beat=2\n                ;;\n            \".|\")\n                beat=1\n\
    \                ;;\n            *)\n                echo \"Invalid input\"\n\
    \                return 1\n                ;;\n        esac\n        if [ -z \"\
    $result\" ]; then\n            result=\"$beat\"\n        else\n            result=\"\
    $result $beat\"\n        fi\n        i=$((i+1))\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    echo \"$1\" | sed 's/o/4/g' | sed\
    \ 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/[^0-9]//g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # Your code here\n    # echo \"Your code here\"\n    # echo \"$1\"\n\
    \    # echo \"${1//o/4}\"\n    # echo \"${1//o|/2}\"\n    # echo \"${1//.|/1}\"\
    \n    # echo \"${1//o/4}\" | tr -d 'o|' | tr -d '.|'\n    # echo \"${1//o|/2}\"\
    \ | tr -d 'o|' | tr -d '.|'\n    # echo \"${1//.|/1}\" | tr -d 'o|' | tr -d '.|'\n\
    \    # echo \"${1//o/4}\" | tr -d 'o|' | tr -d '.|' | tr -d ' '\n    # echo \"\
    ${1//o|/2}\" | tr -d 'o|' | tr -d '.|' | tr -d ' '\n    # echo \"${1//.|/1}\"\
    \ | tr -d 'o|' | tr -d '.|' | tr -d ' '\n    # echo \"${1//o/4}\" | tr -d 'o|'\
    \ | tr -d '.|' | tr -d ' ' | tr -d '\\n'\n    # echo \"${1//o|/2}\" | tr -d 'o|'\
    \ | tr -d '.|' | tr -d ' ' | tr -d '\\n'\n    # echo \"${1//.|/1}\" | tr -d 'o|'\
    \ | tr -d '.|' | tr -d ' ' | tr -d '\\n'\n    # echo \"${1//o/4}\" | tr -d 'o|'\
    \ | tr -d '.|' | tr -d ' ' | tr -d '\\n' | tr -d '\\r'\n    # echo \"${1//o|/2}\"\
    \ | tr -d 'o|' | tr -d '.|' | tr -d ' ' | tr -d '\\n' | tr -d '\\r'\n    # echo\
    \ \"${1//.|/1}\" | tr -d 'o|' | tr -d '.|' | tr -d ' ' | tr -d '\\n' | tr\n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8g28ryon.sh: line 30: syntax error near unexpected token `}''

    /tmp/tmp8g28ryon.sh: line 30: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes\n    local -a beats\n    local -a result\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n \
    \   local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n\
    \    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n\
    \    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n\
    \    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n\
    \    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n\
    \    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local\
    \ ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n\
    \    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local\
    \ ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n\
    \    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local\
    \ yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n\
    \    local dddd=0\n   \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr, sed, grep, wc, xargs,\
    \ and other tools\n    # Hint: you can use echo to debug\n    # Hint: you can\
    \ use $1 to access the input string\n    # Hint: you can use return to return\
    \ a value\n    # Hint: you can use echo to return a value\n    # Hint: you can\
    \ use $RANDOM to generate random numbers\n    # Hint: you can use $((RANDOM%10))\
    \ to generate random numbers from 0 to 9\n    # Hint: you can use $((RANDOM%2))\
    \ to generate random numbers from 0 to 1\n    # Hint: you can use $((RANDOM%3))\
    \ to generate random numbers from 0 to 2\n    # Hint: you can use $((RANDOM%4))\
    \ to generate random numbers from 0 to 3\n    # Hint: you can use $((RANDOM%5))\
    \ to generate random numbers from 0 to 4\n    # Hint: you can use $((RANDOM%6))\
    \ to generate random numbers from 0 to 5\n    # Hint: you can use $((RANDOM%7))\
    \ to generate random numbers from 0 to 6\n    # Hint: you can use $((RANDOM%8))\
    \ to generate random numbers from 0 to 7\n    # Hint: you can use $((RANDOM%9))\
    \ to generate random numbers from 0 to 8\n    # Hint: you can use $((RANDOM%10))\
    \ to generate random numbers from 0 to 9\n    # Hint: you can use $((RANDOM%11))\
    \ to generate random numbers from 0 to 10\n    # Hint: you can use $((RANDOM%12))\
    \ to generate random numbers from 0 to 11\n    # Hint: you can use $((RANDOM%13))\
    \ to generate random numbers from 0 to 12\n    # Hint: you can use $((RANDOM%14))\
    \ to generate random numbers from 0 to 13\n    # Hint: you can use $((RANDOM%15))\
    \ to generate random numbers from 0 to 14\n    # Hint: you can use $((RANDOM%16))\
    \ to generate random numbers from 0 to 15\n    # Hint: you can\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbeukkuk7.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpbeukkuk7.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: implement this function\n    # Hint: use tr and sed\n    # Hint:\
    \ use tr -d '\\n' to remove newlines\n    # Hint: use sed 's/o/4/g' to replace\
    \ 'o' with '4'\n    # Hint: use sed 's/o|/2/g' to replace 'o|' with '2'\n    #\
    \ Hint: use sed 's/.|/1/g' to replace '.|' with '1'\n    # Hint: use tr '|' '\
    \ ' to replace '|' with ' '\n    # Hint: use tr ' ' '\\n' to replace ' ' with\
    \ '\\n'\n    # Hint: use tr -s '\\n' to remove duplicate newlines\n    # Hint:\
    \ use tr -d '\\n' to remove newlines\n    # Hint: use tr '\\n' ' ' to replace\
    \ newlines with spaces\n    # Hint: use tr -s ' ' to remove duplicate spaces\n\
    \    # Hint: use tr -d ' ' to remove spaces\n    # Hint: use tr ' ' '\\n' to replace\
    \ spaces with newlines\n    # Hint: use tr -s '\\n' to remove duplicate newlines\n\
    \    # Hint: use tr -d '\\n' to remove newlines\n    # Hint: use tr '\\n' ' '\
    \ to replace newlines with spaces\n    # Hint: use tr -s ' ' to remove duplicate\
    \ spaces\n    # Hint: use tr -d ' ' to remove spaces\n    # Hint: use tr ' ' '\\\
    n' to replace spaces with newlines\n    # Hint: use tr -s '\\n' to remove duplicate\
    \ newlines\n    # Hint: use tr -d '\\n' to remove newlines\n    # Hint: use tr\
    \ '\\n' ' ' to replace newlines with spaces\n    # Hint: use tr -s ' ' to remove\
    \ duplicate spaces\n    # Hint: use tr -d ' ' to remove spaces\n    # Hint: use\
    \ tr ' ' '\\n' to replace spaces with newlines\n    # Hint: use tr -s '\\n' to\
    \ remove duplicate newlines\n    # Hint: use tr\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm0tail7r.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpm0tail7r.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # TODO: Implement this function\n    # Hint: You can use bash arrays\n\
    \    # Hint: You can use `echo $1 | grep -o 'o' | wc -l` to count number of 'o'\
    \ characters in the string\n    # Hint: You can use `echo $1 | grep -o 'o|' |\
    \ wc -l` to count number of 'o|' characters in the string\n    # Hint: You can\
    \ use `echo $1 | grep -o '.|' | wc -l` to count number of '.|' characters in the\
    \ string\n    # Hint: You can use `echo $1 | grep -o 'o' | wc -l` to count number\
    \ of 'o' characters in the string\n    # Hint: You can use `echo $1 | grep -o\
    \ 'o|' | wc -l` to count number of 'o|' characters in the string\n    # Hint:\
    \ You can use `echo $1 | grep -o '.|' | wc -l` to count number of '.|' characters\
    \ in the string\n    # Hint: You can use `echo $1 | grep -o 'o' | wc -l` to count\
    \ number of 'o' characters in the string\n    # Hint: You can use `echo $1 | grep\
    \ -o 'o|' | wc -l` to count number of 'o|' characters in the string\n    # Hint:\
    \ You can use `echo $1 | grep -o '.|' | wc -l` to count number of '.|' characters\
    \ in the string\n    # Hint: You can use `echo $1 | grep -o 'o' | wc -l` to count\
    \ number of 'o' characters in the string\n    # Hint: You can use `echo $1 | grep\
    \ -o 'o|' | wc -l` to count number of 'o|' characters in the string\n    # Hint:\
    \ You can use `echo $1 | grep -o '.|' | wc -l` to count number of '.|' characters\
    \ in the string\n    # Hint: You can use `echo $1 | grep -o 'o' | wc -l` to count\
    \ number of 'o' characters in the string\n    #\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprnhg_t1n.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmprnhg_t1n.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local music=\"$1\"\n    local beats=0\n    local result=\"\"\n    for\
    \ ((i=0; i<${#music}; i++)); do\n        local char=\"${music:$i:1}\"\n      \
    \  if [[ \"$char\" == \"o\" ]]; then\n            beats=4\n        elif [[ \"\
    $char\" == \"|\" ]]; then\n            beats=2\n        elif [[ \"$char\" == \"\
    .\" ]]; then\n            beats=1\n        fi\n        if [[ \"$char\" == \"|\"\
    \ || \"$char\" == \".\" ]]; then\n            result=\"$result $beats\"\n    \
    \    fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes\n    local -a beats\n    local -a result\n    local note\n\
    \    local beat\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n   \n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    local -a notes\n    local -a beats\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i\
    \ ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i\
    \ iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local -i\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    # your code here\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e\
    \ 's/\\.|/1/g' | tr -d ' '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n#\n# $1 is a string\nparse_music()\
    \ {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/[^0-9]/\
    \ /g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660001050
