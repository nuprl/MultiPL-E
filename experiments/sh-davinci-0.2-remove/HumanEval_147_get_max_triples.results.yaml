language: sh
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i j k\n    local -i count=0\n    for ((i=1; i<n; i++)); do\n      \
    \  for ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<n; k++)); do\n    \
    \            if (((i*i-i+1+j*j-j+1+k*j-k+1)%3==0)); then\n                   \
    \ ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local sum=0\n    local count=0\n    for\
    \ ((i=1; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            for\
    \ ((k=j+1; k<n; k++)); do\n                sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004344
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i j k\n    local -i count=0\n    for ((i=1; i<n; i++)); do\n      \
    \  for ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<n; k++)); do\n    \
    \            if (( ((i*i-i+1) + (j*j-j+1) + (k*j-k+1)) % 3 == 0 )); then\n   \
    \                 ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004344
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local -i count=0\n    for (( i=0; i<${#arr[@]}-2; i++ )); do\n        for\
    \ (( j=i+1; j<${#arr[@]}-1; j++ )); do\n            for (( k=j+1; k<${#arr[@]};\
    \ k++ )); do\n                if (( (arr[i]+arr[j]+arr[k])%3 == 0 )); then\n \
    \                   (( count++ ))\n                fi\n            done\n    \
    \    done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbej9l7dq.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local arr=()\n    local\
    \ n=$1\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        arr[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((arr[i]+arr[j]+arr[k]))%3 -eq 0 ]];\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (( (a[i]+a[j]+a[k])%3 == 0 )); then\n  \
    \                  ((count++))\n                fi\n            done\n       \
    \ done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local sum=0\n    local count=0\n    for ((i=1; i<=n; i++)); do\n \
    \       a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for\
    \ ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n       \
    \         sum=$((a[i]+a[j]+a[k]))\n                if [[ $((sum%3)) -eq 0 ]];\
    \ then\n                    count=$((count+1))\n                fi\n         \
    \   done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i=0 j=0 k=0\n    local -i count=0\n    local -a a\n    for ((i=1; i<=n;\
    \ i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1; i<=n; i++));\
    \ do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++));\
    \ do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n           \
    \         ((count++))\n                fi\n            done\n        done\n  \
    \  done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local -i i j k\n    local -i max_triples=0\n    local -i n=${#arr[@]}\n  \
    \  for ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1; j++)); do\n      \
    \      for ((k=j+1; k<n; k++)); do\n                if (((arr[i]+arr[j]+arr[k])%3==0));\
    \ then\n                    ((max_triples++))\n                fi\n          \
    \  done\n        done\n    done\n    echo $max_triples\n}\n\ncandidate() {\n \
    \   get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpro4jbi1q.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local len=${#arr[@]}\n    local max_triples=0\n    local sum=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    for ((i=0; i<len-2; i++)); do\n     \
    \   for ((j=i+1; j<len-1; j++)); do\n            for ((k=j+1; k<len; k++)); do\n\
    \                sum=$((arr[i]+arr[j]+arr[k]))\n                if [[ $((sum%3))\
    \ -eq 0 ]]; then\n                    max_triples=$((max_triples+1))\n       \
    \         fi\n            done\n        done\n    done\n    echo $max_triples\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi884gtbv.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local max_triples=0\n\
    \    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    max_triples=$((max_triples+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $max_triples\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a+=($((i*i-i+1)))\n\
    \    done\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1; j++));\
    \ do\n            for ((k=j+1; k<n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local triple_count=0\n\
    \    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for\
    \ ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for\
    \ ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0\
    \ ]]; then\n                    triple_count=$((triple_count+1))\n           \
    \     fi\n            done\n        done\n    done\n    echo $triple_count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i count=0\n   \
    \ local -i sum=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local\
    \ -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n\
    \    local -i m=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n   \
    \ local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n   \
    \ local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local len=${#arr[@]}\n    local max_triples=0\n    local sum=0\n    for ((i=0;\
    \ i<len-2; i++)); do\n        for ((j=i+1; j<len-1; j++)); do\n            for\
    \ ((k=j+1; k<len; k++)); do\n                sum=$((arr[i]+arr[j]+arr[k]))\n \
    \               if [[ $((sum%3)) -eq 0 ]]; then\n                    max_triples=$((max_triples+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $max_triples\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm9e3kteg.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local result=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((result++))\n                fi\n            done\n        done\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local -i i j k\n    local -i count=0\n    for ((i=0; i<${#arr[@]}-2; i++));\
    \ do\n        for ((j=i+1; j<${#arr[@]}-1; j++)); do\n            for ((k=j+1;\
    \ k<${#arr[@]}; k++)); do\n                if (( (arr[i]+arr[j]+arr[k])%3 == 0\
    \ )); then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptottd6ze.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a+=($((i*i-i+1)))\n    done\n\
    \    local count=0\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1;\
    \ j++)); do\n            for ((k=j+1; k<n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local max_triples=0\n\
    \    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n\
    \    local sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((max_triples++))\n\
    \                fi\n            done\n        done\n    done\n    echo $max_triples\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a+=($((i*i-i+1)))\n    done\n\
    \    local max_triples=0\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1;\
    \ j<n-1; j++)); do\n            for ((k=j+1; k<n; k++)); do\n                if\
    \ (((a[i]+a[j]+a[k])%3==0)); then\n                    ((max_triples++))\n   \
    \             fi\n            done\n        done\n    done\n    echo $max_triples\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i j k\n    local -i count=0\n    for ((i=1; i<n; i++)); do\n      \
    \  for ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<n; k++)); do\n    \
    \            if (( (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 )); then\n         \
    \           ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local count=0\n    local a=()\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ sum=0\n    for (( i=1; i<=n; i++ )); do\n        for (( j=i+1; j<=n; j++ ));\
    \ do\n            for (( k=j+1; k<=n; k++ )); do\n                if (( (i*i-i+1+j*j-j+1+k*k-k+1)%3\
    \ == 0 )); then\n                    (( sum++ ))\n                fi\n       \
    \     done\n        done\n    done\n    echo $sum\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i count=0\n   \
    \ local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i sum=0\n    for\
    \ ((i=1; i<n; i++)); do\n        a=$((i*i-i+1))\n        for ((j=i+1; j<n; j++));\
    \ do\n            b=$((j*j-j+1))\n            for ((k=j+1; k<n; k++)); do\n  \
    \              c=$((k*k-k+1))\n                sum=$((a+b+c))\n              \
    \  if ((sum%3==0)); then\n                    ((count++))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local count=0\n    local a=()\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i count=0\n   \
    \ local -i sum=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    for\
    \ ((i=1; i<n; i++)); do\n        a=$((i*i-i+1))\n        for ((j=i+1; j<n; j++));\
    \ do\n            b=$((j*j-j+1))\n            for ((k=j+1; k<n; k++)); do\n  \
    \              c=$((k*k-k+1))\n                sum=$((a+b+c))\n              \
    \  if ((sum%3==0)); then\n                    ((count++))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n _array=$1\n\
    \    local -i _len=${#_array[@]}\n    local -i _i _j _k\n    local -i _count=0\n\
    \    for ((_i=0; _i<_len-2; _i++)); do\n        for ((_j=_i+1; _j<_len-1; _j++));\
    \ do\n            for ((_k=_j+1; _k<_len; _k++)); do\n                if (( (${_array[_i]}\
    \ + ${_array[_j]} + ${_array[_k]}) % 3 == 0 )); then\n                    ((_count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $_count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphh00ju89.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a+=($((i*i-i+1)))\n    done\n\
    \    local count=0\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1;\
    \ j++)); do\n            for ((k=j+1; k<n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              count=$((count+1))\n                fi\n            done\n    \
    \    done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i count=0\n   \
    \ local -i sum=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    for\
    \ ((i=1; i<n; i++)); do\n        a=$((i*i-i+1))\n        for ((j=i+1; j<n; j++));\
    \ do\n            b=$((j*j-j+1))\n            for ((k=j+1; k<n; k++)); do\n  \
    \              c=$((k*k-k+1))\n                sum=$((a+b+c))\n              \
    \  if ((sum%3==0)); then\n                    ((count++))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<n-1; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i j k\n    local -i count=0\n    for ((i=1; i<n; i++)); do\n      \
    \  for ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<n; k++)); do\n    \
    \            if (((i*i-i+1+j*j-j+1+k*j-k+1)%3==0)); then\n                   \
    \ ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i j k\n    local -i count=0\n    for ((i=1; i<n; i++)); do\n      \
    \  for ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<n; k++)); do\n    \
    \            if (( (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 )); then\n         \
    \           ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i j k\n    local -i count=0\n    for ((i=1; i<=n; i++)); do\n     \
    \   for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1; k<=n; k++)); do\n \
    \               if (((i*i-i+1+j*j-j+1+k*k-k+1)%3==0)); then\n                \
    \    ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n\
    \    local count=0\n    for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1; j<=n-1;\
    \ j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local -i len=${#arr[@]}\n    local -i i j k\n    local -i count=0\n    for\
    \ ((i=0; i<len-2; i++)); do\n        for ((j=i+1; j<len-1; j++)); do\n       \
    \     for ((k=j+1; k<len; k++)); do\n                if (( (arr[i] + arr[j] +\
    \ arr[k]) % 3 == 0 )); then\n                    ((count++))\n               \
    \ fi\n            done\n        done\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjxoai3nu.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n    local\
    \ -i count=0\n    local -a a\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1; j<=n-1; j++));\
    \ do\n            for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a+=($((i*i-i+1)))\n    done\n\
    \    local count=0\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1;\
    \ j++)); do\n            for ((k=j+1; k<n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i j k\n    local -i count=0\n    for ((i=1; i<n; i++)); do\n      \
    \  for ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<n; k++)); do\n    \
    \            if (( ((i*i-i+1) + (j*j-j+1) + (k*j-k+1)) % 3 == 0 )); then\n   \
    \                 ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004344
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((${a[i]}+${a[j]}+${a[k]}))%3 -eq 0\
    \ ]]; then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -i n=$1\n   \
    \ local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i count=0\n   \
    \ local -i sum=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    for\
    \ ((i=1; i<n; i++)); do\n        a=$((i*i-i+1))\n        for ((j=i+1; j<n; j++));\
    \ do\n            b=$((j*j-j+1))\n            for ((k=j+1; k<n; k++)); do\n  \
    \              c=$((k*k-k+1))\n                sum=$((a+b+c))\n              \
    \  if ((sum%3==0)); then\n                    ((count++))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (( (a[i]+a[j]+a[k])%3 == 0 )); then\n  \
    \                  ((count++))\n                fi\n            done\n       \
    \ done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k])) -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (( (a[i]+a[j]+a[k])%3 == 0 )); then\n  \
    \                  ((count++))\n                fi\n            done\n       \
    \ done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local -n arr=$1\n  local\
    \ len=${#arr[@]}\n  local count=0\n  for ((i=0; i<len-2; i++)); do\n    for ((j=i+1;\
    \ j<len-1; j++)); do\n      for ((k=j+1; k<len; k++)); do\n        if (( (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0 )); then\n          ((count++))\n        fi\n  \
    \    done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdqp10kap.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((${a[i]}+${a[j]}+${a[k]}))%3 -eq 0\
    \ ]]; then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local -i len=${#arr[@]}\n    local -i i j k\n    local -i count=0\n    for\
    \ ((i=0; i<len-2; i++)); do\n        for ((j=i+1; j<len-1; j++)); do\n       \
    \     for ((k=j+1; k<len; k++)); do\n                if (( (arr[i] + arr[j] +\
    \ arr[k]) % 3 == 0 )); then\n                    ((count++))\n               \
    \ fi\n            done\n        done\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjxoai3nu.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n\
    \    local count=0\n    for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1; j<=n-1;\
    \ j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local -i max=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n   \
    \ local -i sum=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        for ((j=i+1; j<len; j++)); do\n            for ((k=j+1; k<len; k++));\
    \ do\n                ((sum=arr[i]+arr[j]+arr[k]))\n                if ((sum%3==0));\
    \ then\n                    ((max++))\n                fi\n            done\n\
    \        done\n    done\n    echo $max\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvoxdh0fp.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local triple_count=0\n\
    \    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for\
    \ ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for\
    \ ((k=j+1; k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq\
    \ 0 ]]; then\n                    triple_count=$((triple_count+1))\n         \
    \       fi\n            done\n        done\n    done\n    echo $triple_count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local a=()\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    local count=0\n    for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1; j<=n-1;\
    \ j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004348
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    local count=0\n    for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1; j<=n-1;\
    \ j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local count=0\n    local a=()\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004348
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a+=($((i*i-i+1)))\n    done\n\
    \    local count=0\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1;\
    \ j++)); do\n            for ((k=j+1; k<n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    ((count++))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local\
    \ sum=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local -n arr=$1\n \
    \   local len=${#arr[@]}\n    local i j k\n    local count=0\n    for ((i=0; i<len-2;\
    \ i++)); do\n        for ((j=i+1; j<len-1; j++)); do\n            for ((k=j+1;\
    \ k<len; k++)); do\n                if (((arr[i]+arr[j]+arr[k])%3==0)); then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptpk77g9t.sh: line 13: local: `5'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    local count=0\n    for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1; j<=n-1;\
    \ j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004347
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local\
    \ count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                sum=$((a[i]+a[j]+a[k]))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n      \
    \              ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n\
    \            for ((k=j+1; k<=n; k++)); do\n                if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n                    ((count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004346
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local -i n=$1\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i sum=0\n  local -i count=0\n\
    \  local -a a\n  for ((i=1; i<=n; i++)); do\n    a[i]=$((i*i-i+1))\n  done\n \
    \ for ((i=1; i<=n-2; i++)); do\n    for ((j=i+1; j<=n-1; j++)); do\n      for\
    \ ((k=j+1; k<=n; k++)); do\n        sum=$((a[i]+a[j]+a[k]))\n        if ((sum%3==0));\
    \ then\n          ((count++))\n        fi\n      done\n    done\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004348
- exit_code: 0
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1,\
    \ 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local\
    \ a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            for ((k=j+1;\
    \ k<=n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then\n\
    \                    count=$((count+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004345
