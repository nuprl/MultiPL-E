language: sh
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n++ )) || (( n-- ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones[$i]=$n\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( n > 0 )); do\n        stones[i]=$n\n\
    \        (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n / 2 + 1 ))\n        (( i++\
    \ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n++ )) || (( n-- ))\n        (( i++ ))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    if [[ $1 -lt 1 ]]; then\n\
    \        echo \"Error: $1 is not a positive integer.\"\n        return 1\n   \
    \ fi\n    local n=$1\n    local i=0\n    local result=()\n    while [[ $n -gt\
    \ 0 ]]; do\n        result[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n \
    \           n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    local j=0\n    while [[ $i -lt $n ]]; do\n   \
    \     if [[ $((i % 2)) -eq 0 ]]; then\n            j=$((j + 2))\n        else\n\
    \            j=$((j + 1))\n        fi\n        stones+=($j)\n        i=$((i +\
    \ 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=($i)\n \
    \       ((i % 2 == 0)) && ((i++)) || ((i += 2))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=($i)\n \
    \       ((i % 2 == 0)) && ((i++)) || ((i += 2))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=($i)\n \
    \       ((i++))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n   \
    \ make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"\
    5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n\
    \    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=()\n  while [[ $i -le $n ]]; do\n    stones+=($i)\n    if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n      i=$((i + 1))\n    else\n      i=$((i + 2))\n   \
    \ fi\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n  \
    \  [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7\
    \ 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while ((i < n)); do\n    stones+=($n)\n    ((n % 2 == 0))\
    \ && ((n += 2)) || ((n += 1))\n    ((i++))\n  done\n  echo \"${stones[@]}\"\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i\n    for ((i=0; i<n; i++)); do\n        stones+=($n)\n\
    \        ((n%2)) && ((n+=2)) || ((n+=1))\n    done\n    echo \"${stones[@]}\"\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n = n + 1)) || ((n = n + 2))\n        ((i++))\n   \
    \ done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ pile=()\n    local i=0\n    while (( i < n )); do\n        pile+=($n)\n    \
    \    (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n   \
    \ done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n++ )) || (( n += 2 ))\n        (( i++ ))\n  \
    \  done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n++ )) || (( n-- ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while [ $n -gt 0 ]; do\n        stones[$i]=$n\n\
    \        ((n=n%2==0?n+1:n+2))\n        ((i++))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( i < n )); do\n    if (( i == 0 )); then\n      stones+=($n)\n\
    \    elif (( n % 2 == 0 )); then\n      stones+=($(( n + 2 )))\n      n=$(( n\
    \ + 2 ))\n    else\n      stones+=($(( n + 1 )))\n      n=$(( n + 1 ))\n    fi\n\
    \    (( i++ ))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    local level=0\n    while (( i < n )); do\n   \
    \     level=$(( n - i ))\n        stones+=($level)\n        (( i++ ))\n      \
    \  (( level % 2 == 0 )) && (( level++ )) || (( level += 2 ))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( n > 0 )); do\n        stones[i]=$n\n\
    \        (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n * 3 + 1 ))\n        (( i++\
    \ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( n > 0 )); do\n        stones[i]=$n\n\
    \        (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n / 2 + 1 ))\n        (( i++\
    \ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( n > 0 )); do\n    stones[i]=$n\n    (( n % 2 == 0 ))\
    \ && (( n /= 2 )) || (( n = n / 2 + 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while [[ $i -le $n ]]; do\n        stones+=($i)\n\
    \        ((i++))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n  \
    \  make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") =\
    \ \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n += 2))\n        ((i++))\n    done\n  \
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while [ $i -lt $n ]; do\n    stones[$i]=$n\n    if [ $((n\
    \ % 2)) -eq 0 ]; then\n      n=$((n + 1))\n    else\n      n=$((n + 2))\n    fi\n\
    \    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local level=1\n    local result=()\n    while [[\
    \ $i -le $n ]]; do\n        result+=($stones)\n        if [[ $level -eq 1 ]];\
    \ then\n            stones=$((stones + 2))\n            level=0\n        else\n\
    \            stones=$((stones + 1))\n            level=1\n        fi\n       \
    \ i=$((i + 1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while [ $i -lt $n ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n\
    \      stones+=($((i + 1)))\n    else\n      stones+=($((i + 2)))\n    fi\n  \
    \  i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local level=1\n  local result=\"\"\n  while [[ $i -le $n\
    \ ]]; do\n    if [[ $level -eq 1 ]]; then\n      result=\"$result$stones\"\n \
    \   else\n      result=\"$result $stones\"\n    fi\n    if [[ $((level % 2)) -eq\
    \ 0 ]]; then\n      stones=$((stones + 2))\n    else\n      stones=$((stones +\
    \ 1))\n    fi\n    level=$((level + 1))\n    i=$((i + 1))\n  done\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( n > 0 )); do\n        stones[i]=$n\n\
    \        (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n / 2 + 1 ))\n        (( i++\
    \ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local result=\"\"\n  while (( i <= n )); do\n    result=\"\
    $result $stones\"\n    (( i++ ))\n    (( stones = stones + 2 - (stones % 2) ))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while [ $i -lt $n ]; do\n        stones+=($n)\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local result=()\n    while [ $i -lt $n ]; do\n        if [ $((n % 2))\
    \ -eq 0 ]; then\n            result+=($((n + 2)))\n        else\n            result+=($((n\
    \ + 1)))\n        fi\n        n=$((n - 1))\n        i=$((i + 1))\n    done\n \
    \   echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ result=()\n    local i=0\n    while (( i < n )); do\n        if (( i % 2 ==\
    \ 0 )); then\n            result+=($(( n + i )))\n        else\n            result+=($((\
    \ n + i + 1 )))\n        fi\n        (( i++ ))\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=0\n  local levels=()\n  while (( i <= n )); do\n    stones=$((\
    \ stones + i ))\n    levels+=($stones)\n    (( i++ ))\n  done\n  echo \"${levels[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((n > 0)); do\n        stones[i]=$n\n  \
    \      ((n % 2 == 0)) && ((n /= 2)) || ((n = n / 2 + 1))\n        ((i++))\n  \
    \  done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 == 0 ))\
    \ && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        if (( i == 0 ));\
    \ then\n            stones+=($n)\n        elif (( n % 2 == 0 )); then\n      \
    \      stones+=($(( n + 2 )))\n        else\n            stones+=($(( n + 1 )))\n\
    \        fi\n        n=$(( n + 1 ))\n        (( i++ ))\n    done\n    echo \"\
    ${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n += 2))\n        ((i++))\n    done\n  \
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while (( i <= n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=($i)\n \
    \       ((i % 2 == 0)) && ((i++)) || ((i += 2))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local result=\"\"\n  while (( i <= n )); do\n    result=\"\
    $result $stones\"\n    (( stones = stones + 2 - (stones % 2) ))\n    (( i++ ))\n\
    \  done\n  echo \"$result\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones[$i]=$n\n \
    \       ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ pile=()\n    local i=0\n    while [[ $n -gt 0 ]]; do\n        pile[$i]=$n\n\
    \        ((i++))\n        ((n--))\n        if [[ $n -gt 0 ]]; then\n         \
    \   if [[ $n -eq 1 ]]; then\n                pile[$i]=1\n                ((i++))\n\
    \                ((n--))\n            else\n                if [[ $n%2 -eq 0 ]];\
    \ then\n                    pile[$i]=$((n-1))\n                    ((i++))\n \
    \                   ((n--))\n                else\n                    pile[$i]=$((n-2))\n\
    \                    ((i++))\n                    ((n-=2))\n                fi\n\
    \            fi\n        fi\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=()\n  while (( i <= n )); do\n    stones+=($i)\n    (( i % 2 ==\
    \ 0 )) && (( i++ )) || (( i += 2 ))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while [ $i -lt $n ]; do\n        stones+=($n)\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=0\n    local levels=()\n    while (( i <= n )); do\n \
    \       if (( i % 2 == 0 )); then\n            stones=$(( stones + 2 ))\n    \
    \    else\n            stones=$(( stones + 1 ))\n        fi\n        levels+=($stones)\n\
    \        (( i++ ))\n    done\n    echo \"${levels[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local level=1\n\
    \  local stones=1\n  local result=()\n  while [[ $level -le $n ]]; do\n    result+=($stones)\n\
    \    if [[ $((stones % 2)) -eq 0 ]]; then\n      stones=$((stones + 1))\n    else\n\
    \      stones=$((stones + 2))\n    fi\n    level=$((level + 1))\n  done\n  echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 == 0 ))\
    \ && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local level=1\n  local result=\"\"\n  while [[ $i -le $n\
    \ ]]; do\n    result=\"$result $stones\"\n    if [[ $level -eq 1 ]]; then\n  \
    \    stones=$((stones + 2))\n      level=0\n    else\n      stones=$((stones +\
    \ 1))\n      level=1\n    fi\n    i=$((i + 1))\n  done\n  echo \"$result\"\n}\n\
    \ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ pile=()\n    local i=0\n    while (( n > 0 )); do\n        pile[i]=$n\n    \
    \    (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n / 2 + 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ level=1\n    local stones=$n\n    local result=\"\"\n    while ((level <= n));\
    \ do\n        result=\"$result $stones\"\n        ((level++))\n        ((stones\
    \ = (stones % 2 == 0) ? stones + 2 : stones + 1))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( i < n )); do\n        stones+=($((n -\
    \ i)))\n        (( i++ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while [ $n -gt 0 ]; do\n        stones[$i]=$n\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n - 1))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 == 0 ))\
    \ && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local result=()\n    while (( i <= n )); do\n        result+=($i)\n\
    \        (( i % 2 == 0 )) && (( i++ )) || (( i += 2 ))\n    done\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 == 0 ))\
    \ && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( n > 0 )); do\n    stones[i]=$n\n    (( n % 2 == 0 ))\
    \ && (( n /= 2 )) || (( n = n / 2 + 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local result=()\n    while [ $i -lt $n ]; do\n        if [ $((i % 2))\
    \ -eq 0 ]; then\n            result+=($((i + 1)))\n        else\n            result+=($((i\
    \ + 2)))\n        fi\n        i=$((i + 1))\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while [ $i -lt $n ]; do\n        stones+=($n)\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    for ((i=0; i<n; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            stones+=($((n + i)))\n        else\n            stones+=($((n - i)))\n\
    \        fi\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n++ )) || (( n += 2 ))\n        (( i++ ))\n  \
    \  done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n  local ae=0\n  local\
    \ af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local aj=0\n  local ak=0\n\
    \  local al=0\n  local am=0\n  local an=0\n  local ao=0\n  local ap=0\n  local\
    \ aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local au=0\n  local av=0\n\
    \  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n  local ba=0\n  local\
    \ bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local bf=0\n  local bg=0\n\
    \  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n  local bl=0\n  local\
    \ bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local bq=0\n  local br=0\n\
    \  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n  local bw=0\n  local\
    \ bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local cb=0\n  local cc=0\n\
    \  local cd=0\n  local ce=0\n  local cf=0\n  local cg=0\n  local ch=0\n  local\
    \ ci=0\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8\
    \ 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local result=()\n    while ((i <= n)); do\n   \
    \     result+=($stones)\n        ((stones = stones + 2 - (stones % 2)))\n    \
    \    ((i = i + 1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=()\n  while ((i <= n)); do\n    stones+=($n)\n    ((n % 2 == 0))\
    \ && ((n += 2)) || ((n += 1))\n    ((i++))\n  done\n  echo \"${stones[@]}\"\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while [ $i -lt $n ]; do\n        stones+=($n)\n\
    \        [ $((n % 2)) -eq 0 ] && n=$((n + 1)) || n=$((n + 2))\n        i=$((i\
    \ + 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((n > 0)); do\n        stones[i]=$n\n  \
    \      ((n % 2 == 0)) && ((n /= 2)) || ((n = n / 2 + 1))\n        ((i++))\n  \
    \  done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=()\n  while (( i <= n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((n > 0)); do\n        stones[i]=$n\n  \
    \      ((n % 2 == 0)) && ((n /= 2)) || ((n = n * 3 + 1))\n        ((i++))\n  \
    \  done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while [ $n -gt 0 ]; do\n    stones[$i]=$n\n    if [ $((n % 2))\
    \ -eq 0 ]; then\n      n=$((n / 2))\n    else\n      n=$((n / 2 + 1))\n    fi\n\
    \    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local -i n=$1\n  local\
    \ -i i=0\n  local -i stones=n\n  local -a pile\n  while (( i < n )); do\n    pile[i++]=stones\n\
    \    (( stones % 2 == 0 )) && (( stones += 2 )) || (( stones += 1 ))\n  done\n\
    \  echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local level=1\n    local result=\"\"\n    while\
    \ (( i <= n )); do\n        if (( i == 1 )); then\n            result=\"$stones\"\
    \n        else\n            if (( level % 2 == 0 )); then\n                stones=$((\
    \ stones + 2 ))\n            else\n                stones=$(( stones + 1 ))\n\
    \            fi\n            result=\"$result $stones\"\n        fi\n        ((\
    \ i++ ))\n        (( level++ ))\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while ((i < n)); do\n    stones+=($n)\n    ((n % 2 == 0))\
    \ && ((n++)) || ((n--))\n    ((i++))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local result=()\n    while ((i <= n)); do\n   \
    \     result+=($stones)\n        ((i++))\n        ((stones++))\n        if ((stones\
    \ % 2 == 0)); then\n            ((stones++))\n        fi\n    done\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while [ $n -gt 0 ]; do\n        stones[$i]=$n\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n / 2))\n        else\n\
    \            n=$((n / 2 + 1))\n        fi\n        i=$((i + 1))\n    done\n  \
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( i < n )); do\n    if (( i == 0 )); then\n      stones+=($n)\n\
    \    elif (( n % 2 == 0 )); then\n      stones+=($((n+2)))\n      n=$((n+2))\n\
    \    else\n      stones+=($((n+1)))\n      n=$((n+1))\n    fi\n    ((i++))\n \
    \ done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local result=()\n    while (( i <= n )); do\n        if (( i % 2 ==\
    \ 0 )); then\n            result+=($(( i + 1 )))\n        else\n            result+=($((\
    \ i + 2 )))\n        fi\n        (( i++ ))\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local pile=()\n    while (( i < n )); do\n        pile[$i]=$n\n   \
    \     (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n  \
    \  done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while (( i <= n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while (( i <= n )); do\n        stones+=($i)\n\
    \        (( i % 2 == 0 )) && (( i++ )) || (( i += 2 ))\n    done\n    echo \"\
    ${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=($i)\n \
    \       ((i++))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n   \
    \ make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"\
    5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n\
    \    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=(\"$i\"\
    )\n        ((i % 2 == 0)) && ((i++)) || ((i += 2))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while [[ $i -le $n ]]; do\n        stones+=($n)\n\
    \        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n + 2))\n        else\n\
    \            n=$((n + 1))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 == 0 ))\
    \ && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=()\n  local stones_in_level=$n\n  while ((i <= n)); do\n    stones+=($stones_in_level)\n\
    \    ((stones_in_level = stones_in_level % 2 == 0 ? stones_in_level + 2 : stones_in_level\
    \ + 1))\n    ((i++))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n  \
    \  make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") =\
    \ \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local result=()\n    while ((i <= n)); do\n   \
    \     result+=(\"$stones\")\n        ((stones = stones + 2 - i % 2))\n       \
    \ ((i++))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local level=1\n\
    \  local stones=1\n  local result=()\n  while ((level <= n)); do\n    result+=($stones)\n\
    \    if ((stones % 2 == 0)); then\n      stones=$((stones + 1))\n    else\n  \
    \    stones=$((stones + 2))\n    fi\n    level=$((level + 1))\n  done\n  echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while ((i < n)); do\n    stones+=($n)\n    ((n % 2 == 0)) && ((n\
    \ += 2)) || ((n += 1))\n    ((i++))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local result=\"\"\n  while [ $i -le $n ]; do\n    result=\"\
    $result $stones\"\n    if [ $((stones % 2)) -eq 0 ]; then\n      stones=$((stones\
    \ + 1))\n    else\n      stones=$((stones + 2))\n    fi\n    i=$((i + 1))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while [ $i -lt $n ]; do\n    stones[$i]=$n\n    if [ $((n\
    \ % 2)) -eq 0 ]; then\n      n=$((n + 1))\n    else\n      n=$((n + 2))\n    fi\n\
    \    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=0\n  local result=()\n  while (( i <= n )); do\n    if (( i %\
    \ 2 == 0 )); then\n      stones=$(( stones + 2 ))\n    else\n      stones=$((\
    \ stones + 1 ))\n    fi\n    result+=($stones)\n    (( i++ ))\n  done\n  echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local -i n=$1\n    local\
    \ -i i=0\n    local -i stones=n\n    local -a pile\n    while (( i < n )); do\n\
    \        pile[i]=$stones\n        (( stones = stones % 2 == 0 ? stones + 2 : stones\
    \ + 1 ))\n        (( i++ ))\n    done\n    echo \"${pile[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    for ((i=0; i<n; i++)); do\n        stones[i]=$((n-i))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while [ $n -gt 0 ]; do\n        stones[$i]=$n\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n / 2))\n        else\n\
    \            n=$((n / 2 + 1))\n        fi\n        i=$((i + 1))\n    done\n  \
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local result=()\n    while (( i <= n )); do\n        result+=($i)\n\
    \        (( i % 2 == 0 )) && (( i++ )) || (( i+=2 ))\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones[i]=$n\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( $n > 0 )); do\n        stones[$i]=$n\n\
    \        (( i++ ))\n        (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n / 2 +\
    \ 1 ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=0\n    local result=()\n    while (( i <= n )); do\n \
    \       stones=$(( i % 2 == 0 ? stones + 2 : stones + 1 ))\n        result+=(\"\
    $stones\")\n        (( i++ ))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n++ )) || (( n-- ))\n        (( i++ ))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=($i)\n \
    \       ((i++))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n   \
    \ make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"\
    5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n\
    \    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    local stones_in_level=n\n    while ((i <= n));\
    \ do\n        stones+=($stones_in_level)\n        ((stones_in_level % 2 == 0))\
    \ && ((stones_in_level += 2)) || ((stones_in_level += 1))\n        ((i++))\n \
    \   done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while [ $i -lt $n ]; do\n        stones+=($n)\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local result=()\n  while [[ $i -le $n ]]; do\n    result+=($i)\n    if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n      i=$((i + 1))\n    else\n      i=$((i + 2))\n   \
    \ fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n  \
    \  [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7\
    \ 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=($((n -\
    \ i + 1)))\n        ((i++))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while ((i < n)); do\n    stones+=($n)\n    ((n % 2 == 0))\
    \ && ((n += 2)) || ((n += 1))\n    ((i++))\n  done\n  echo \"${stones[@]}\"\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=\"$1\"\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=(\"$n\"\
    )\n        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n++ )) || (( n-- ))\n        (( i++ ))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        if (( i == 0 ));\
    \ then\n            stones[i]=$n\n        elif (( n % 2 == 0 )); then\n      \
    \      stones[i]=$(( n + 2 ))\n        else\n            stones[i]=$(( n + 1 ))\n\
    \        fi\n        n=${stones[i]}\n        (( i++ ))\n    done\n    echo \"\
    ${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local result=()\n    while ((i <= n)); do\n   \
    \     result+=($stones)\n        ((stones = stones + 2 - n % 2))\n        ((i++))\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=0\n  local result=()\n  while (( i <= n )); do\n    stones=$((\
    \ n - i ))\n    result+=($stones)\n    (( i++ ))\n  done\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while [ $n -gt 0 ]; do\n        stones[$i]=$n\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n - 1))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while [[ $i -le $n ]]; do\n        stones+=($n)\n\
    \        if [[ $((n % 2)) -eq 0 ]]; then\n            n=$((n + 2))\n        else\n\
    \            n=$((n + 1))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local result=\"\"\n  while [ $i -le $n ]; do\n    result=\"\
    $result $stones\"\n    if [ $((stones % 2)) -eq 0 ]; then\n      stones=$((stones\
    \ + 1))\n    else\n      stones=$((stones + 2))\n    fi\n    i=$((i + 1))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((i < n)); do\n        stones[i]=$n\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((n > 0)); do\n        stones[i]=$n\n  \
    \      ((n % 2 == 0)) && ((n /= 2)) || ((n = n / 2 + 1))\n        ((i++))\n  \
    \  done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ result=()\n    local i=0\n    while (( i < n )); do\n        if (( i % 2 ==\
    \ 0 )); then\n            result+=($(( n + i )))\n        else\n            result+=($((\
    \ n + i + 1 )))\n        fi\n        (( i++ ))\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while [ $i -lt $n ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n \
    \     stones+=($((i + 1)))\n    else\n      stones+=($((i + 2)))\n    fi\n   \
    \ i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  for ((i=0; i<n; i++)); do\n    if ((i % 2 == 0)); then\n      stones+=($((n\
    \ - i)))\n    else\n      stones+=($((n - i - 1)))\n    fi\n  done\n  echo \"\
    ${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( i < n )); do\n        if (( i % 2 ==\
    \ 0 )); then\n            stones+=($(( n + i )))\n        else\n            stones+=($((\
    \ n - i )))\n        fi\n        (( i++ ))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    while ((n > 0)); do\n        stones+=($n)\n        ((n % 2))\
    \ && ((n += 2)) || ((n += 1))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n = n / 2 )) || (( n = (n + 1) / 2 ))\n    (( i++ ))\n  done\n  echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local level=1\n  local result=()\n  while [[ $i -le $n ]];\
    \ do\n    result+=($stones)\n    if [[ $level -eq 1 ]]; then\n      stones=$((stones\
    \ + 2))\n      level=0\n    else\n      stones=$((stones + 1))\n      level=1\n\
    \    fi\n    i=$((i + 1))\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003135
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n += 2)) || ((n += 1))\n        ((i++))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ pile=()\n    local i=0\n    while (( n > 0 )); do\n        pile[i]=$n\n    \
    \    (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n / 2 + 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local result=()\n    while (( i <= n )); do\n \
    \       result+=($stones)\n        (( stones = stones + 2 - (stones % 2) ))\n\
    \        (( i++ ))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003135
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local level=1\n  local result=\"\"\n  while [ $i -le $n ];\
    \ do\n    result=\"$result $stones\"\n    if [ $((level % 2)) -eq 0 ]; then\n\
    \      stones=$((stones + 2))\n    else\n      stones=$((stones + 1))\n    fi\n\
    \    level=$((level + 1))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003135
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while [ $i -lt $n ]; do\n        stones+=($n)\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while (( i <= n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( n > 0 )); do\n        stones[i]=$n\n\
    \        (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n / 2 + 1 ))\n        (( i++\
    \ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while [ $i -lt $n ]; do\n        stones+=($n)\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            ((n++))\n        else\n  \
    \          ((n--))\n        fi\n        ((i++))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003135
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=()\n    while ((i <= n)); do\n        stones+=($i)\n \
    \       ((i % 2 == 0)) && ((i++)) || ((i += 2))\n    done\n    echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while [ $i -lt $n ]; do\n        stones+=($n)\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ result=()\n    local i=0\n    while ((i < n)); do\n        if ((i == 0)); then\n\
    \            result+=($n)\n        elif ((n % 2 == 0)); then\n            result+=($((n\
    \ + 2)))\n        else\n            result+=($((n + 1)))\n        fi\n       \
    \ n=$((n + 1))\n        i=$((i + 1))\n    done\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003140
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones=()\n\
    \  local i=0\n  while [ $n -gt 0 ]; do\n    stones[$i]=$n\n    (( i++ ))\n   \
    \ (( n-- ))\n    if [ $(( n % 2 )) -eq 0 ]; then\n      (( n-- ))\n    fi\n  done\n\
    \  echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ pile=()\n    while (( n > 0 )); do\n        pile+=(\"$n\")\n        (( n % 2\
    \ == 0 )) && (( n /= 2 )) || (( n = n / 2 + 1 ))\n    done\n    echo \"${pile[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003144
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local level=1\n    local result=()\n    while [[\
    \ $i -le $n ]]; do\n        result+=($stones)\n        ((level++))\n        if\
    \ [[ $level -eq $n ]]; then\n            ((stones++))\n        else\n        \
    \    ((stones+=2))\n        fi\n        ((i++))\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003139
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=()\n  while (( i <= n )); do\n    stones+=($i)\n    (( i % 2 ==\
    \ 0 )) && (( i++ )) || (( i += 2 ))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=1\n\
    \  local stones=1\n  local result=\"\"\n  while ((i <= n)); do\n    result=\"\
    $result $stones\"\n    ((stones = stones + 2 - i % 2))\n    ((i++))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while (( i < n )); do\n        stones+=($n)\n\
    \        (( n % 2 == 0 )) && (( n += 2 )) || (( n += 1 ))\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ level=1\n    local stones=0\n    local result=()\n    while (( level <= n ));\
    \ do\n        stones=$(( level % 2 == 0 ? stones + 1 : stones + 2 ))\n       \
    \ result+=(\"$stones\")\n        (( level++ ))\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n\
    \  local stones=()\n  while (( i < n )); do\n    stones+=($n)\n    (( n % 2 ==\
    \ 0 )) && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    local num_stones=$n\n    while [ $num_stones -gt\
    \ 0 ]; do\n        stones[$i]=$num_stones\n        if [ $((num_stones % 2)) -eq\
    \ 0 ]; then\n            num_stones=$((num_stones + 1))\n        else\n      \
    \      num_stones=$((num_stones + 2))\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003144
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=0\n    local stones=()\n    while ((i < n)); do\n        stones+=($n)\n  \
    \      ((n % 2 == 0)) && ((n++)) || ((n--))\n        ((i++))\n    done\n    echo\
    \ \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003129
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ i=1\n    local stones=1\n    local result=\"\"\n    while (( i <= n )); do\n\
    \        result=\"$result $stones\"\n        if (( i % 2 == 0 )); then\n     \
    \       stones=$(( stones + 2 ))\n        else\n            stones=$(( stones\
    \ + 1 ))\n        fi\n        (( i++ ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660003139
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=$1\n    local\
    \ stones=()\n    local i=0\n    while (( n > 0 )); do\n        stones[i]=$n\n\
    \        (( n % 2 == 0 )) && (( n /= 2 )) || (( n = n / 2 + 1 ))\n        (( i++\
    \ ))\n    done\n    echo \"${stones[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660003134
